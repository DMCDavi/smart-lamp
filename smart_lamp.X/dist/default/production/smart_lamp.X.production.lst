

Microchip Technology PIC18 LITE Macro Assembler V1.20 build 52243 
                                                                                               Wed Jun 08 22:29:18 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 52243
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1
    37                           	psect	text27,global,reloc=2,class=CODE,delta=1
    38                           	psect	text28,global,reloc=2,class=CODE,delta=1
    39                           	psect	text29,global,reloc=2,class=CODE,delta=1
    40                           	psect	text30,global,reloc=2,class=CODE,delta=1
    41                           	psect	text31,global,reloc=2,class=CODE,delta=1
    42                           	psect	text32,global,reloc=2,class=CODE,delta=1
    43                           	psect	text33,global,reloc=2,class=CODE,delta=1
    44                           	psect	text34,global,reloc=2,class=CODE,delta=1
    45                           	psect	text35,global,reloc=2,class=CODE,delta=1
    46                           	psect	text36,global,reloc=2,class=CODE,delta=1
    47                           	psect	text37,global,reloc=2,class=CODE,delta=1
    48                           	psect	text38,global,reloc=2,class=CODE,delta=1
    49                           	psect	text39,global,reloc=2,class=CODE,delta=1
    50                           	psect	text40,global,reloc=2,class=CODE,delta=1
    51                           	psect	text41,global,reloc=2,class=CODE,delta=1
    52                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    53                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    54  0000                     
    55                           	psect	smallconst
    56  000800                     __psmallconst:
    57                           	opt stack 0
    58  000800                     _dpowers:
    59                           	opt stack 0
    60  000800  0001               	dw	1
    61  000802  0000               	dw	0
    62  000804  000A               	dw	10
    63  000806  0000               	dw	0
    64  000808  0064               	dw	100
    65  00080A  0000               	dw	0
    66  00080C  03E8               	dw	1000
    67  00080E  0000               	dw	0
    68  000810  2710               	dw	10000
    69  000812  0000               	dw	0
    70  000814  86A0               	dw	34464
    71  000816  0001               	dw	1
    72  000818  4240               	dw	16960
    73  00081A  000F               	dw	15
    74  00081C  9680               	dw	38528
    75  00081E  0098               	dw	152
    76  000820  E100               	dw	57600
    77  000822  05F5               	dw	1525
    78  000824  CA00               	dw	51712
    79  000826  3B9A               	dw	15258
    80  000828                     __end_of_dpowers:
    81                           	opt stack 0
    82  000828                     __npowers_:
    83                           	opt stack 0
    84  000828  00                 	db	0
    85  000829  80                 	db	128
    86  00082A  3F                 	db	63
    87  00082B  CD                 	db	205
    88  00082C  CC                 	db	204
    89  00082D  3D                 	db	61
    90  00082E  D7                 	db	215
    91  00082F  23                 	db	35
    92  000830  3C                 	db	60
    93  000831  12                 	db	18
    94  000832  83                 	db	131
    95  000833  3A                 	db	58
    96  000834  B7                 	db	183
    97  000835  D1                 	db	209
    98  000836  38                 	db	56
    99  000837  C6                 	db	198
   100  000838  27                 	db	39
   101  000839  37                 	db	55
   102  00083A  38                 	db	56
   103  00083B  86                 	db	134
   104  00083C  35                 	db	53
   105  00083D  C0                 	db	192
   106  00083E  D6                 	db	214
   107  00083F  33                 	db	51
   108  000840  CC                 	db	204
   109  000841  2B                 	db	43
   110  000842  32                 	db	50
   111  000843  70                 	db	112
   112  000844  89                 	db	137
   113  000845  30                 	db	48
   114  000846  E7                 	db	231
   115  000847  DB                 	db	219
   116  000848  2E                 	db	46
   117  000849  E5                 	db	229
   118  00084A  3C                 	db	60
   119  00084B  1E                 	db	30
   120  00084C  42                 	db	66
   121  00084D  A2                 	db	162
   122  00084E  0D                 	db	13
   123  00084F                     __end_of__npowers_:
   124                           	opt stack 0
   125  00084F                     __powers_:
   126                           	opt stack 0
   127  00084F  00                 	db	0
   128  000850  80                 	db	128
   129  000851  3F                 	db	63
   130  000852  00                 	db	0
   131  000853  20                 	db	32
   132  000854  41                 	db	65
   133  000855  00                 	db	0
   134  000856  C8                 	db	200
   135  000857  42                 	db	66
   136  000858  00                 	db	0
   137  000859  7A                 	db	122
   138  00085A  44                 	db	68
   139  00085B  40                 	db	64
   140  00085C  1C                 	db	28
   141  00085D  46                 	db	70
   142  00085E  50                 	db	80
   143  00085F  C3                 	db	195
   144  000860  47                 	db	71
   145  000861  24                 	db	36
   146  000862  74                 	db	116
   147  000863  49                 	db	73
   148  000864  97                 	db	151
   149  000865  18                 	db	24
   150  000866  4B                 	db	75
   151  000867  BC                 	db	188
   152  000868  BE                 	db	190
   153  000869  4C                 	db	76
   154  00086A  6B                 	db	107
   155  00086B  6E                 	db	110
   156  00086C  4E                 	db	78
   157  00086D  03                 	db	3
   158  00086E  15                 	db	21
   159  00086F  50                 	db	80
   160  000870  79                 	db	121
   161  000871  AD                 	db	173
   162  000872  60                 	db	96
   163  000873  F3                 	db	243
   164  000874  49                 	db	73
   165  000875  71                 	db	113
   166  000876                     __end_of__powers_:
   167                           	opt stack 0
   168  0000                     _TMR1	set	4046
   169  0000                     _ADCON0	set	4034
   170  0000                     _ADCON0bits	set	4034
   171  0000                     _ADCON1	set	4033
   172  0000                     _ADCON1bits	set	4033
   173  0000                     _ADCON2	set	4032
   174  0000                     _ADRESH	set	4036
   175  0000                     _ADRESL	set	4035
   176  0000                     _LATAbits	set	3977
   177  0000                     _LATB	set	3978
   178  0000                     _PORTAbits	set	3968
   179  0000                     _RCREG	set	4014
   180  0000                     _RCSTA	set	4011
   181  0000                     _RCSTAbits	set	4011
   182  0000                     _SPBRG	set	4015
   183  0000                     _T1CONbits	set	4045
   184  0000                     _TRISA	set	3986
   185  0000                     _TRISB	set	3987
   186  0000                     _TRISD	set	3989
   187  0000                     _TXREG	set	4013
   188  0000                     _ADON	set	32272
   189  0000                     _CREN	set	32092
   190  0000                     _GO	set	32273
   191  0000                     _RCIF	set	31989
   192  0000                     _RD2	set	31770
   193  0000                     _RD3	set	31771
   194  0000                     _RD4	set	31772
   195  0000                     _RD5	set	31773
   196  0000                     _RD6	set	31774
   197  0000                     _RD7	set	31775
   198  0000                     _TMR1ON	set	32360
   199  0000                     _TRISA0	set	31888
   200  0000                     _TRISC6	set	31910
   201  0000                     _TRISC7	set	31911
   202  0000                     _TXIF	set	31988
   203  000876                     __stringdata:
   204                           	opt stack 0
   205  000876                     STR_2:
   206                           
   207                           ; BSR set to: 0
   208  000876  6D                 	db	109	;'m'
   209  000877  61                 	db	97	;'a'
   210  000878  72                 	db	114	;'r'
   211  000879  69                 	db	105	;'i'
   212  00087A  61                 	db	97	;'a'
   213  00087B  3A                 	db	58	;':'
   214  00087C  20                 	db	32
   215  00087D  25                 	db	37
   216  00087E  63                 	db	99	;'c'
   217  00087F  00                 	db	0
   218  000880                     STR_1:
   219                           
   220                           ; BSR set to: 0
   221  000880  4C                 	db	76	;'L'
   222  000881  44                 	db	68	;'D'
   223  000882  52                 	db	82	;'R'
   224  000883  3A                 	db	58	;':'
   225  000884  20                 	db	32
   226  000885  25                 	db	37
   227  000886  2E                 	db	46
   228  000887  32                 	db	50	;'2'
   229  000888  66                 	db	102	;'f'
   230  000889  00                 	db	0
   231  00088A                     __end_of__stringdata:
   232                           	opt stack 0
   233                           
   234                           ; #config settings
   235  00088A  00                 	db	0	; dummy byte at the end
   236  0000                     
   237                           	psect	cinit
   238  002A78                     __pcinit:
   239                           	opt stack 0
   240  002A78                     start_initialization:
   241                           	opt stack 0
   242  002A78                     __initialization:
   243                           	opt stack 0
   244                           
   245                           ; Clear objects allocated to BANK0 (32 bytes)
   246  002A78  EE00  F096         	lfsr	0,__pbssBANK0
   247  002A7C  0E20               	movlw	32
   248  002A7E                     clear_0:
   249  002A7E  6AEE               	clrf	postinc0,c
   250  002A80  06E8               	decf	wreg,f,c
   251  002A82  E1FD               	bnz	clear_0
   252  002A84                     end_of_initialization:
   253                           	opt stack 0
   254  002A84                     __end_of__initialization:
   255                           	opt stack 0
   256  002A84  0E00               	movlw	low (__Lmediumconst shr (0+16))
   257  002A86  6EF8               	movwf	tblptru,c
   258  002A88  0100               	movlb	0
   259  002A8A  EFB9  F00F         	goto	_main	;jump to C main() function
   260                           tblptru	equ	0xFF8
   261                           postinc0	equ	0xFEE
   262                           wreg	equ	0xFE8
   263                           
   264                           	psect	bssBANK0
   265  000096                     __pbssBANK0:
   266                           	opt stack 0
   267  000096                     _LCD_Buffer:
   268                           	opt stack 0
   269  000096                     	ds	32
   270                           tblptru	equ	0xFF8
   271                           postinc0	equ	0xFEE
   272                           wreg	equ	0xFE8
   273                           
   274                           	psect	cstackBANK0
   275  000060                     __pcstackBANK0:
   276                           	opt stack 0
   277  000060                     ?___asftsub:
   278                           	opt stack 0
   279  000060                     ___asftsub@f1p:
   280                           	opt stack 0
   281                           
   282                           ; 2 bytes @ 0x0
   283  000060                     	ds	2
   284  000062                     ___asftsub@f2:
   285                           	opt stack 0
   286                           
   287                           ; 3 bytes @ 0x2
   288  000062                     	ds	3
   289  000065                     ?_sprintf:
   290                           	opt stack 0
   291  000065                     sprintf@sp:
   292                           	opt stack 0
   293                           
   294                           ; 2 bytes @ 0x5
   295  000065                     	ds	2
   296  000067                     sprintf@f:
   297                           	opt stack 0
   298                           
   299                           ; 2 bytes @ 0x7
   300  000067                     	ds	5
   301  00006C                     ??_sprintf:
   302                           
   303                           ; 0 bytes @ 0xC
   304  00006C                     	ds	6
   305  000072                     _sprintf$1212:
   306                           	opt stack 0
   307                           
   308                           ; 3 bytes @ 0x12
   309  000072                     	ds	3
   310  000075                     _sprintf$595:
   311                           	opt stack 0
   312                           
   313                           ; 4 bytes @ 0x15
   314  000075                     	ds	4
   315  000079                     sprintf@vd:
   316                           	opt stack 0
   317                           
   318                           ; 2 bytes @ 0x19
   319  000079                     	ds	2
   320  00007B                     sprintf@vd_597:
   321                           	opt stack 0
   322                           
   323                           ; 2 bytes @ 0x1B
   324  00007B                     	ds	2
   325  00007D                     sprintf@ap:
   326                           	opt stack 0
   327                           
   328                           ; 2 bytes @ 0x1D
   329  00007D                     	ds	2
   330  00007F                     sprintf@flag:
   331                           	opt stack 0
   332                           
   333                           ; 2 bytes @ 0x1F
   334  00007F                     	ds	2
   335  000081                     sprintf@integ:
   336                           	opt stack 0
   337                           
   338                           ; 3 bytes @ 0x21
   339  000081                     	ds	3
   340  000084                     sprintf@exp:
   341                           	opt stack 0
   342                           
   343                           ; 2 bytes @ 0x24
   344  000084                     	ds	2
   345  000086                     sprintf@_val:
   346                           	opt stack 0
   347                           
   348                           ; 4 bytes @ 0x26
   349  000086                     	ds	4
   350  00008A                     sprintf@prec:
   351                           	opt stack 0
   352                           
   353                           ; 2 bytes @ 0x2A
   354  00008A                     	ds	2
   355  00008C                     sprintf@fval:
   356                           	opt stack 0
   357                           
   358                           ; 3 bytes @ 0x2C
   359  00008C                     	ds	3
   360  00008F                     sprintf@c:
   361                           	opt stack 0
   362                           
   363                           ; 1 bytes @ 0x2F
   364  00008F                     	ds	1
   365  000090                     main@Distancia:
   366                           	opt stack 0
   367                           
   368                           ; 2 bytes @ 0x30
   369  000090                     	ds	2
   370  000092                     main@LDR_value:
   371                           	opt stack 0
   372                           
   373                           ; 3 bytes @ 0x32
   374  000092                     	ds	3
   375  000095                     main@esp_server_data:
   376                           	opt stack 0
   377                           
   378                           ; 1 bytes @ 0x35
   379  000095                     	ds	1
   380                           tblptru	equ	0xFF8
   381                           postinc0	equ	0xFEE
   382                           wreg	equ	0xFE8
   383                           
   384                           	psect	cstackCOMRAM
   385  000001                     __pcstackCOMRAM:
   386                           	opt stack 0
   387  000001                     ?_isdigit:
   388                           	opt stack 0
   389  000001                     ?_Lcd_Port:
   390                           	opt stack 0
   391  000001                     ?___ftge:
   392                           	opt stack 0
   393  000001                     ?___awmod:
   394                           	opt stack 0
   395  000001                     ?___lwdiv:
   396                           	opt stack 0
   397  000001                     ?___lwmod:
   398                           	opt stack 0
   399  000001                     ?___ftpack:
   400                           	opt stack 0
   401  000001                     ?___ftneg:
   402                           	opt stack 0
   403  000001                     ?__tdiv_to_l_:
   404                           	opt stack 0
   405  000001                     ?__div_to_l_:
   406                           	opt stack 0
   407  000001                     ?___lldiv:
   408                           	opt stack 0
   409  000001                     ?___llmod:
   410                           	opt stack 0
   411  000001                     Lcd_Port@a:
   412                           	opt stack 0
   413  000001                     isdigit@c:
   414                           	opt stack 0
   415  000001                     ___awmod@dividend:
   416                           	opt stack 0
   417  000001                     ___lwdiv@dividend:
   418                           	opt stack 0
   419  000001                     ___lwmod@dividend:
   420                           	opt stack 0
   421  000001                     __div_to_l_@f1:
   422                           	opt stack 0
   423  000001                     ___ftpack@arg:
   424                           	opt stack 0
   425  000001                     __tdiv_to_l_@f1:
   426                           	opt stack 0
   427  000001                     ___ftge@ff1:
   428                           	opt stack 0
   429  000001                     ___ftneg@f1:
   430                           	opt stack 0
   431  000001                     ___lldiv@dividend:
   432                           	opt stack 0
   433  000001                     ___llmod@dividend:
   434                           	opt stack 0
   435                           
   436                           ; 4 bytes @ 0x0
   437  000001                     	ds	1
   438  000002                     ??_isdigit:
   439  000002                     ?_Lcd_Cmd:
   440                           	opt stack 0
   441  000002                     ?_lcd_write_char:
   442                           	opt stack 0
   443  000002                     Lcd_Cmd@a:
   444                           	opt stack 0
   445  000002                     lcd_write_char@a:
   446                           	opt stack 0
   447                           
   448                           ; 1 bytes @ 0x1
   449  000002                     	ds	1
   450  000003                     ??_Lcd_Cmd:
   451  000003                     lcd_write_char@temp:
   452                           	opt stack 0
   453  000003                     _isdigit$870:
   454                           	opt stack 0
   455  000003                     ___awmod@divisor:
   456                           	opt stack 0
   457  000003                     ___lwdiv@divisor:
   458                           	opt stack 0
   459  000003                     ___lwmod@divisor:
   460                           	opt stack 0
   461                           
   462                           ; 2 bytes @ 0x2
   463  000003                     	ds	1
   464  000004                     ?_lcd_gotoxy:
   465                           	opt stack 0
   466  000004                     ??_lcd_init:
   467  000004                     lcd_gotoxy@a:
   468                           	opt stack 0
   469  000004                     lcd_write_char@y:
   470                           	opt stack 0
   471  000004                     ___ftpack@exp:
   472                           	opt stack 0
   473  000004                     __div_to_l_@f2:
   474                           	opt stack 0
   475  000004                     __tdiv_to_l_@f2:
   476                           	opt stack 0
   477  000004                     ___ftge@ff2:
   478                           	opt stack 0
   479                           
   480                           ; 3 bytes @ 0x3
   481  000004                     	ds	1
   482  000005                     ?_lcd_putc:
   483                           	opt stack 0
   484  000005                     ??___awmod:
   485  000005                     ??___lwdiv:
   486  000005                     ??___lwmod:
   487  000005                     lcd_gotoxy@b:
   488                           	opt stack 0
   489  000005                     ___ftpack@sign:
   490                           	opt stack 0
   491  000005                     lcd_putc@a:
   492                           	opt stack 0
   493  000005                     ___lldiv@divisor:
   494                           	opt stack 0
   495  000005                     ___llmod@divisor:
   496                           	opt stack 0
   497                           
   498                           ; 4 bytes @ 0x4
   499  000005                     	ds	1
   500  000006                     ??___ftpack:
   501  000006                     lcd_gotoxy@z:
   502                           	opt stack 0
   503  000006                     ___awmod@counter:
   504                           	opt stack 0
   505  000006                     ___lwmod@counter:
   506                           	opt stack 0
   507  000006                     ___lwdiv@quotient:
   508                           	opt stack 0
   509                           
   510                           ; 2 bytes @ 0x5
   511  000006                     	ds	1
   512  000007                     ??__tdiv_to_l_:
   513  000007                     ??__div_to_l_:
   514  000007                     ??___ftge:
   515  000007                     lcd_gotoxy@y:
   516                           	opt stack 0
   517  000007                     ___awmod@sign:
   518                           	opt stack 0
   519  000007                     lcd_putc@i:
   520                           	opt stack 0
   521                           
   522                           ; 2 bytes @ 0x6
   523  000007                     	ds	1
   524  000008                     ?___awdiv:
   525                           	opt stack 0
   526  000008                     lcd_gotoxy@temp:
   527                           	opt stack 0
   528  000008                     ___lwdiv@counter:
   529                           	opt stack 0
   530  000008                     ___awdiv@dividend:
   531                           	opt stack 0
   532  000008                     __div_to_l_@quot:
   533                           	opt stack 0
   534                           
   535                           ; 4 bytes @ 0x7
   536  000008                     	ds	1
   537  000009                     ?_states_LED:
   538                           	opt stack 0
   539  000009                     ??___lldiv:
   540  000009                     ??___llmod:
   541  000009                     ?_Obtener_Distancia:
   542                           	opt stack 0
   543  000009                     ?___altoft:
   544                           	opt stack 0
   545  000009                     ?___awtoft:
   546                           	opt stack 0
   547  000009                     ?___lltoft:
   548                           	opt stack 0
   549  000009                     states_LED@data:
   550                           	opt stack 0
   551  000009                     ___awtoft@c:
   552                           	opt stack 0
   553  000009                     ___altoft@c:
   554                           	opt stack 0
   555  000009                     ___lltoft@c:
   556                           	opt stack 0
   557                           
   558                           ; 4 bytes @ 0x8
   559  000009                     	ds	1
   560  00000A                     ??_states_LED:
   561  00000A                     ___llmod@counter:
   562                           	opt stack 0
   563  00000A                     ___awdiv@divisor:
   564                           	opt stack 0
   565  00000A                     ___lldiv@quotient:
   566                           	opt stack 0
   567                           
   568                           ; 4 bytes @ 0x9
   569  00000A                     	ds	1
   570  00000B                     Obtener_Distancia@Timer_1:
   571                           	opt stack 0
   572                           
   573                           ; 2 bytes @ 0xA
   574  00000B                     	ds	1
   575  00000C                     ??___awdiv:
   576  00000C                     ??___awtoft:
   577  00000C                     __div_to_l_@cntr:
   578                           	opt stack 0
   579  00000C                     __tdiv_to_l_@quot:
   580                           	opt stack 0
   581                           
   582                           ; 4 bytes @ 0xB
   583  00000C                     	ds	1
   584  00000D                     ??___altoft:
   585  00000D                     ??___lltoft:
   586  00000D                     ___awdiv@counter:
   587                           	opt stack 0
   588  00000D                     ___awtoft@sign:
   589                           	opt stack 0
   590  00000D                     __div_to_l_@exp1:
   591                           	opt stack 0
   592  00000D                     Obtener_Distancia@Distancia:
   593                           	opt stack 0
   594                           
   595                           ; 2 bytes @ 0xC
   596  00000D                     	ds	1
   597  00000E                     ___awdiv@sign:
   598                           	opt stack 0
   599  00000E                     ___lldiv@counter:
   600                           	opt stack 0
   601                           
   602                           ; 1 bytes @ 0xD
   603  00000E                     	ds	1
   604  00000F                     Obtener_Distancia@Duracion:
   605                           	opt stack 0
   606  00000F                     ___awdiv@quotient:
   607                           	opt stack 0
   608                           
   609                           ; 2 bytes @ 0xE
   610  00000F                     	ds	1
   611  000010                     __tdiv_to_l_@cntr:
   612                           	opt stack 0
   613                           
   614                           ; 1 bytes @ 0xF
   615  000010                     	ds	1
   616  000011                     ?___wmul:
   617                           	opt stack 0
   618  000011                     ___altoft@exp:
   619                           	opt stack 0
   620  000011                     __tdiv_to_l_@exp1:
   621                           	opt stack 0
   622  000011                     ___lltoft@exp:
   623                           	opt stack 0
   624  000011                     ___wmul@multiplier:
   625                           	opt stack 0
   626                           
   627                           ; 2 bytes @ 0x10
   628  000011                     	ds	1
   629  000012                     ___altoft@sign:
   630                           	opt stack 0
   631                           
   632                           ; 1 bytes @ 0x11
   633  000012                     	ds	1
   634  000013                     ___wmul@multiplicand:
   635                           	opt stack 0
   636                           
   637                           ; 2 bytes @ 0x12
   638  000013                     	ds	2
   639  000015                     ___wmul@product:
   640                           	opt stack 0
   641                           
   642                           ; 2 bytes @ 0x14
   643  000015                     	ds	2
   644  000017                     ?___fttol:
   645                           	opt stack 0
   646  000017                     ___fttol@f1:
   647                           	opt stack 0
   648                           
   649                           ; 3 bytes @ 0x16
   650  000017                     	ds	4
   651  00001B                     ??___fttol:
   652                           
   653                           ; 0 bytes @ 0x1A
   654  00001B                     	ds	5
   655  000020                     ___fttol@sign1:
   656                           	opt stack 0
   657                           
   658                           ; 1 bytes @ 0x1F
   659  000020                     	ds	1
   660  000021                     ___fttol@lval:
   661                           	opt stack 0
   662                           
   663                           ; 4 bytes @ 0x20
   664  000021                     	ds	4
   665  000025                     ___fttol@exp1:
   666                           	opt stack 0
   667                           
   668                           ; 1 bytes @ 0x24
   669  000025                     	ds	1
   670  000026                     ?___ftmul:
   671                           	opt stack 0
   672  000026                     ___ftmul@f1:
   673                           	opt stack 0
   674                           
   675                           ; 3 bytes @ 0x25
   676  000026                     	ds	3
   677  000029                     ___ftmul@f2:
   678                           	opt stack 0
   679                           
   680                           ; 3 bytes @ 0x28
   681  000029                     	ds	3
   682  00002C                     ??___ftmul:
   683                           
   684                           ; 0 bytes @ 0x2B
   685  00002C                     	ds	5
   686  000031                     ___ftmul@exp:
   687                           	opt stack 0
   688                           
   689                           ; 1 bytes @ 0x30
   690  000031                     	ds	1
   691  000032                     ___ftmul@f3_as_product:
   692                           	opt stack 0
   693                           
   694                           ; 3 bytes @ 0x31
   695  000032                     	ds	3
   696  000035                     ___ftmul@cntr:
   697                           	opt stack 0
   698                           
   699                           ; 1 bytes @ 0x34
   700  000035                     	ds	1
   701  000036                     ___ftmul@sign:
   702                           	opt stack 0
   703                           
   704                           ; 1 bytes @ 0x35
   705  000036                     	ds	1
   706  000037                     ?___ftdiv:
   707                           	opt stack 0
   708  000037                     ?_fround:
   709                           	opt stack 0
   710  000037                     ?_scale:
   711                           	opt stack 0
   712  000037                     ?___asftmul:
   713                           	opt stack 0
   714  000037                     fround@prec:
   715                           	opt stack 0
   716  000037                     scale@scl:
   717                           	opt stack 0
   718  000037                     ___asftmul@f1p:
   719                           	opt stack 0
   720  000037                     ___ftdiv@f1:
   721                           	opt stack 0
   722                           
   723                           ; 3 bytes @ 0x36
   724  000037                     	ds	2
   725  000039                     ___asftmul@f2:
   726                           	opt stack 0
   727                           
   728                           ; 3 bytes @ 0x38
   729  000039                     	ds	1
   730  00003A                     ??_fround:
   731  00003A                     ??_scale:
   732  00003A                     ___ftdiv@f2:
   733                           	opt stack 0
   734                           
   735                           ; 3 bytes @ 0x39
   736  00003A                     	ds	2
   737  00003C                     
   738                           ; 0 bytes @ 0x3B
   739  00003C                     	ds	1
   740  00003D                     ??___ftdiv:
   741                           
   742                           ; 0 bytes @ 0x3C
   743  00003D                     	ds	3
   744  000040                     _fround$1210:
   745                           	opt stack 0
   746  000040                     _scale$1211:
   747                           	opt stack 0
   748                           
   749                           ; 3 bytes @ 0x3F
   750  000040                     	ds	2
   751  000042                     ___ftdiv@cntr:
   752                           	opt stack 0
   753                           
   754                           ; 1 bytes @ 0x41
   755  000042                     	ds	1
   756  000043                     ___ftdiv@f3:
   757                           	opt stack 0
   758  000043                     _fround$1209:
   759                           	opt stack 0
   760                           
   761                           ; 3 bytes @ 0x42
   762  000043                     	ds	3
   763  000046                     ___ftdiv@exp:
   764                           	opt stack 0
   765                           
   766                           ; 1 bytes @ 0x45
   767  000046                     	ds	1
   768  000047                     ___ftdiv@sign:
   769                           	opt stack 0
   770                           
   771                           ; 1 bytes @ 0x46
   772  000047                     	ds	1
   773  000048                     ?_Read_LDR:
   774                           	opt stack 0
   775  000048                     ?___ftadd:
   776                           	opt stack 0
   777  000048                     ___ftadd@f1:
   778                           	opt stack 0
   779                           
   780                           ; 3 bytes @ 0x47
   781  000048                     	ds	3
   782  00004B                     ??_Read_LDR:
   783  00004B                     ___ftadd@f2:
   784                           	opt stack 0
   785                           
   786                           ; 3 bytes @ 0x4A
   787  00004B                     	ds	3
   788  00004E                     ??___ftadd:
   789                           
   790                           ; 0 bytes @ 0x4D
   791  00004E                     	ds	1
   792  00004F                     Read_LDR@analog_reading:
   793                           	opt stack 0
   794                           
   795                           ; 3 bytes @ 0x4E
   796  00004F                     	ds	4
   797  000053                     ___ftadd@sign:
   798                           	opt stack 0
   799                           
   800                           ; 1 bytes @ 0x52
   801  000053                     	ds	1
   802  000054                     ___ftadd@exp2:
   803                           	opt stack 0
   804                           
   805                           ; 1 bytes @ 0x53
   806  000054                     	ds	1
   807  000055                     ___ftadd@exp1:
   808                           	opt stack 0
   809                           
   810                           ; 1 bytes @ 0x54
   811  000055                     	ds	1
   812  000056                     ?___ftsub:
   813                           	opt stack 0
   814  000056                     ?___asftadd:
   815                           	opt stack 0
   816  000056                     ___asftadd@f1p:
   817                           	opt stack 0
   818  000056                     ___ftsub@f1:
   819                           	opt stack 0
   820  000056                     USART_Init@baud_rate:
   821                           	opt stack 0
   822                           
   823                           ; 4 bytes @ 0x55
   824  000056                     	ds	2
   825  000058                     ___asftadd@f2:
   826                           	opt stack 0
   827                           
   828                           ; 3 bytes @ 0x57
   829  000058                     	ds	1
   830  000059                     ___ftsub@f2:
   831                           	opt stack 0
   832                           
   833                           ; 3 bytes @ 0x58
   834  000059                     	ds	1
   835  00005A                     USART_Init@temp:
   836                           	opt stack 0
   837                           
   838                           ; 3 bytes @ 0x59
   839  00005A                     	ds	1
   840  00005B                     
   841                           ; 0 bytes @ 0x5A
   842  00005B                     	ds	1
   843  00005C                     
   844                           ; 0 bytes @ 0x5B
   845  00005C                     	ds	1
   846  00005D                     ??_main:
   847                           
   848                           ; 0 bytes @ 0x5C
   849  00005D                     	ds	2
   850                           tblptru	equ	0xFF8
   851                           postinc0	equ	0xFEE
   852                           wreg	equ	0xFE8
   853                           
   854 ;;
   855 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   856 ;;
   857 ;; *************** function _main *****************
   858 ;; Defined at:
   859 ;;		line 58 in file "main.c"
   860 ;; Parameters:    Size  Location     Type
   861 ;;		None
   862 ;; Auto vars:     Size  Location     Type
   863 ;;  LDR_value       3   50[BANK0 ] float 
   864 ;;  Distancia       2   48[BANK0 ] unsigned int 
   865 ;;  esp_server_d    1   53[BANK0 ] unsigned char 
   866 ;; Return value:  Size  Location     Type
   867 ;;		None               void
   868 ;; Registers used:
   869 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   870 ;; Tracked objects:
   871 ;;		On entry : 0/0
   872 ;;		On exit  : 0/0
   873 ;;		Unchanged: 0/0
   874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   875 ;;      Params:         0       0       0       0       0       0       0       0       0
   876 ;;      Locals:         0       6       0       0       0       0       0       0       0
   877 ;;      Temps:          2       0       0       0       0       0       0       0       0
   878 ;;      Totals:         2       6       0       0       0       0       0       0       0
   879 ;;Total ram usage:        8 bytes
   880 ;; Hardware stack levels required when called:    5
   881 ;; This function calls:
   882 ;;		_lcd_gotoxy
   883 ;;		_lcd_init
   884 ;;		_lcd_putc
   885 ;;		_Configuracion_Registros
   886 ;;		_Timer1_Init
   887 ;;		_Init_AD
   888 ;;		_USART_Init
   889 ;;		_Obtener_Distancia
   890 ;;		_Read_LDR
   891 ;;		_sprintf
   892 ;;		_USART_ReceiveChar
   893 ;;		_states_LED
   894 ;; This function is called by:
   895 ;;		Startup code after reset
   896 ;; This function uses a non-reentrant model
   897 ;;
   898                           
   899                           	psect	text0
   900  001F72                     __ptext0:
   901                           	opt stack 0
   902  001F72                     _main:
   903                           	opt stack 26
   904                           
   905                           ;main.c: 59: uint16_t Distancia;
   906                           ;main.c: 60: float LDR_value;
   907                           ;main.c: 62: Configuracion_Registros();
   908                           
   909                           ; BSR set to: 0
   910                           ;incstack = 0
   911                           ;incstack = 0
   912  001F72  EC64  F015         	call	_Configuracion_Registros	;wreg free
   913                           
   914                           ;main.c: 63: Timer1_Init();
   915  001F76  EC51  F015         	call	_Timer1_Init	;wreg free
   916                           
   917                           ;main.c: 64: lcd_init();
   918  001F7A  ECDD  F010         	call	_lcd_init	;wreg free
   919                           
   920                           ;main.c: 65: Init_AD();
   921  001F7E  EC47  F015         	call	_Init_AD	;wreg free
   922                           
   923                           ;main.c: 67: USART_Init();
   924  001F82  EC0C  F012         	call	_USART_Init	;wreg free
   925                           
   926                           ;main.c: 68: char esp_server_data = 'a';
   927  001F86  6E5D               	movwf	??_main& (0+255),c
   928  001F88  0E61               	movlw	97
   929  001F8A  0100               	movlb	0	; () banked
   930  001F8C  0100               	movlb	0	; () banked
   931  001F8E  6F95               	movwf	main@esp_server_data& (0+255),b
   932  001F90  505D               	movf	??_main& (0+255),w,c
   933  001F92                     l4429:
   934                           
   935                           ;main.c: 71: {
   936                           ;main.c: 72: Distancia=Obtener_Distancia();
   937  001F92  EC91  F012         	call	_Obtener_Distancia	;wreg free
   938  001F96  C009  F090         	movff	?_Obtener_Distancia,main@Distancia
   939  001F9A  C00A  F091         	movff	?_Obtener_Distancia+1,main@Distancia+1
   940                           
   941                           ;main.c: 73: LDR_value=Read_LDR();
   942  001F9E  EC24  F010         	call	_Read_LDR	;wreg free
   943  001FA2  C04A  F094         	movff	?_Read_LDR+2,main@LDR_value+2
   944  001FA6  C049  F093         	movff	?_Read_LDR+1,main@LDR_value+1
   945  001FAA  C048  F092         	movff	?_Read_LDR,main@LDR_value
   946                           
   947                           ;main.c: 74: lcd_gotoxy(1,1);
   948  001FAE  6E5D               	movwf	??_main& (0+255),c
   949  001FB0  0E01               	movlw	1
   950  001FB2  6E04               	movwf	?_lcd_gotoxy,c
   951  001FB4  505D               	movf	??_main& (0+255),w,c
   952  001FB6  6E5E               	movwf	(??_main+1)& (0+255),c
   953  001FB8  0E01               	movlw	1
   954  001FBA  6E05               	movwf	?_lcd_gotoxy+1,c
   955  001FBC  505E               	movf	(??_main+1)& (0+255),w,c
   956  001FBE  EC75  F013         	call	_lcd_gotoxy	;wreg free
   957                           
   958                           ;main.c: 75: sprintf(LCD_Buffer,"LDR: %.2f", LDR_value);
   959  001FC2  0100               	movlb	0	; () banked
   960  001FC4  0E00               	movlw	high _LCD_Buffer
   961  001FC6  0100               	movlb	0	; () banked
   962  001FC8  0100               	movlb	0	; () banked
   963  001FCA  6F66               	movwf	(?_sprintf+1)& (0+255),b
   964  001FCC  0100               	movlb	0	; () banked
   965  001FCE  0E96               	movlw	low _LCD_Buffer
   966  001FD0  0100               	movlb	0	; () banked
   967  001FD2  6F65               	movwf	?_sprintf& (0+255),b
   968  001FD4  0E08               	movlw	high STR_1
   969  001FD6  0100               	movlb	0	; () banked
   970  001FD8  0100               	movlb	0	; () banked
   971  001FDA  6F68               	movwf	(?_sprintf+3)& (0+255),b
   972  001FDC  0E80               	movlw	low STR_1
   973  001FDE  0100               	movlb	0	; () banked
   974  001FE0  6F67               	movwf	(?_sprintf+2)& (0+255),b
   975  001FE2  C092  F069         	movff	main@LDR_value,?_sprintf+4
   976  001FE6  C093  F06A         	movff	main@LDR_value+1,?_sprintf+5
   977  001FEA  C094  F06B         	movff	main@LDR_value+2,?_sprintf+6
   978  001FEE  EC46  F004         	call	_sprintf	;wreg free
   979                           
   980                           ;main.c: 76: lcd_putc(LCD_Buffer);
   981  001FF2  0100               	movlb	0	; () banked
   982  001FF4  0E00               	movlw	high _LCD_Buffer
   983  001FF6  6E06               	movwf	?_lcd_putc+1,c
   984  001FF8  0100               	movlb	0	; () banked
   985  001FFA  0E96               	movlw	low _LCD_Buffer
   986  001FFC  6E05               	movwf	?_lcd_putc,c
   987  001FFE  ECA4  F014         	call	_lcd_putc	;wreg free
   988                           
   989                           ;main.c: 82: esp_server_data=USART_ReceiveChar();
   990  002002  EC5B  F015         	call	_USART_ReceiveChar	;wreg free
   991  002006  0100               	movlb	0	; () banked
   992  002008  0100               	movlb	0	; () banked
   993  00200A  6F95               	movwf	main@esp_server_data& (0+255),b
   994                           
   995                           ; BSR set to: 0
   996                           ;main.c: 83: sprintf(LCD_Buffer,"maria: %c", esp_server_data);
   997  00200C  0100               	movlb	0	; () banked
   998  00200E  0E00               	movlw	high _LCD_Buffer
   999  002010  0100               	movlb	0	; () banked
  1000  002012  0100               	movlb	0	; () banked
  1001  002014  6F66               	movwf	(?_sprintf+1)& (0+255),b
  1002  002016  0100               	movlb	0	; () banked
  1003  002018  0E96               	movlw	low _LCD_Buffer
  1004  00201A  0100               	movlb	0	; () banked
  1005  00201C  6F65               	movwf	?_sprintf& (0+255),b
  1006  00201E  0E08               	movlw	high STR_2
  1007  002020  0100               	movlb	0	; () banked
  1008  002022  0100               	movlb	0	; () banked
  1009  002024  6F68               	movwf	(?_sprintf+3)& (0+255),b
  1010  002026  0E76               	movlw	low STR_2
  1011  002028  0100               	movlb	0	; () banked
  1012  00202A  6F67               	movwf	(?_sprintf+2)& (0+255),b
  1013  00202C  0100               	movlb	0	; () banked
  1014  00202E  0100               	movlb	0	; () banked
  1015  002030  C095  F069         	movff	main@esp_server_data,?_sprintf+4
  1016  002034  0100               	movlb	0	; () banked
  1017  002036  0100               	movlb	0	; () banked
  1018  002038  6B6A               	clrf	(?_sprintf+5)& (0+255),b
  1019  00203A  EC46  F004         	call	_sprintf	;wreg free
  1020                           
  1021                           ;main.c: 84: states_LED(esp_server_data);
  1022  00203E  C095  F009         	movff	main@esp_server_data,?_states_LED
  1023  002042  ECDA  F014         	call	_states_LED	;wreg free
  1024  002046  D7A5               	goto	l4429
  1025  002048                     __end_of_main:
  1026                           	opt stack 0
  1027                           tblptru	equ	0xFF8
  1028                           postinc0	equ	0xFEE
  1029                           wreg	equ	0xFE8
  1030                           
  1031 ;; *************** function _states_LED *****************
  1032 ;; Defined at:
  1033 ;;		line 89 in file "main.c"
  1034 ;; Parameters:    Size  Location     Type
  1035 ;;  data            1    8[COMRAM] unsigned char 
  1036 ;; Auto vars:     Size  Location     Type
  1037 ;;		None
  1038 ;; Return value:  Size  Location     Type
  1039 ;;		None               void
  1040 ;; Registers used:
  1041 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1042 ;; Tracked objects:
  1043 ;;		On entry : 0/0
  1044 ;;		On exit  : 0/0
  1045 ;;		Unchanged: 0/0
  1046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1047 ;;      Params:         1       0       0       0       0       0       0       0       0
  1048 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1049 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1050 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1051 ;;Total ram usage:        3 bytes
  1052 ;; Hardware stack levels used:    1
  1053 ;; Hardware stack levels required when called:    3
  1054 ;; This function calls:
  1055 ;;		_lcd_gotoxy
  1056 ;;		_lcd_putc
  1057 ;; This function is called by:
  1058 ;;		_main
  1059 ;; This function uses a non-reentrant model
  1060 ;;
  1061                           
  1062                           	psect	text1
  1063  0029B4                     __ptext1:
  1064                           	opt stack 0
  1065  0029B4                     _states_LED:
  1066                           	opt stack 27
  1067                           
  1068                           ;main.c: 90: if(data){
  1069                           
  1070                           ;incstack = 0
  1071                           ;incstack = 0
  1072  0029B4  5009               	movf	states_LED@data,w,c
  1073  0029B6  B4D8               	btfsc	status,2,c
  1074  0029B8  D014               	goto	l143
  1075                           
  1076                           ;main.c: 91: LATB = 0x01;
  1077  0029BA  0E01               	movlw	1
  1078  0029BC  6E8A               	movwf	3978,c	;volatile
  1079                           
  1080                           ;main.c: 92: lcd_gotoxy(2,1);
  1081  0029BE  6E0A               	movwf	??_states_LED& (0+255),c
  1082  0029C0  0E02               	movlw	2
  1083  0029C2  6E04               	movwf	?_lcd_gotoxy,c
  1084  0029C4  500A               	movf	??_states_LED& (0+255),w,c
  1085  0029C6  6E0B               	movwf	(??_states_LED+1)& (0+255),c
  1086  0029C8  0E01               	movlw	1
  1087  0029CA  6E05               	movwf	?_lcd_gotoxy+1,c
  1088  0029CC  500B               	movf	(??_states_LED+1)& (0+255),w,c
  1089  0029CE  EC75  F013         	call	_lcd_gotoxy	;wreg free
  1090                           
  1091                           ;main.c: 93: lcd_putc(LCD_Buffer);
  1092  0029D2  0100               	movlb	0	; () banked
  1093  0029D4  0E00               	movlw	high _LCD_Buffer
  1094  0029D6  6E06               	movwf	?_lcd_putc+1,c
  1095  0029D8  0100               	movlb	0	; () banked
  1096  0029DA  0E96               	movlw	low _LCD_Buffer
  1097  0029DC  6E05               	movwf	?_lcd_putc,c
  1098  0029DE  ECA4  F014         	call	_lcd_putc	;wreg free
  1099  0029E2                     l143:
  1100  0029E2  0012               	return	
  1101  0029E4                     __end_of_states_LED:
  1102                           	opt stack 0
  1103                           tblptru	equ	0xFF8
  1104                           postinc0	equ	0xFEE
  1105                           wreg	equ	0xFE8
  1106                           status	equ	0xFD8
  1107                           
  1108 ;; *************** function _lcd_putc *****************
  1109 ;; Defined at:
  1110 ;;		line 135 in file "lcd.h"
  1111 ;; Parameters:    Size  Location     Type
  1112 ;;  a               2    4[COMRAM] PTR unsigned char 
  1113 ;;		 -> LCD_Buffer(32), 
  1114 ;; Auto vars:     Size  Location     Type
  1115 ;;  i               2    6[COMRAM] int 
  1116 ;; Return value:  Size  Location     Type
  1117 ;;		None               void
  1118 ;; Registers used:
  1119 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1120 ;; Tracked objects:
  1121 ;;		On entry : 0/0
  1122 ;;		On exit  : 0/0
  1123 ;;		Unchanged: 0/0
  1124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1125 ;;      Params:         2       0       0       0       0       0       0       0       0
  1126 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1127 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1128 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1129 ;;Total ram usage:        4 bytes
  1130 ;; Hardware stack levels used:    1
  1131 ;; Hardware stack levels required when called:    2
  1132 ;; This function calls:
  1133 ;;		_lcd_write_char
  1134 ;; This function is called by:
  1135 ;;		_main
  1136 ;;		_states_LED
  1137 ;; This function uses a non-reentrant model
  1138 ;;
  1139                           
  1140                           	psect	text2
  1141  002948                     __ptext2:
  1142                           	opt stack 0
  1143  002948                     _lcd_putc:
  1144                           	opt stack 27
  1145                           
  1146                           ;lcd.h: 136: int i;
  1147                           ;lcd.h: 137: for(i=0;a[i]!='\0';i++)
  1148                           
  1149                           ;incstack = 0
  1150                           ;incstack = 0
  1151  002948  0E00               	movlw	0
  1152  00294A  6E08               	movwf	lcd_putc@i+1,c
  1153  00294C  0E00               	movlw	0
  1154  00294E  6E07               	movwf	lcd_putc@i,c
  1155  002950  D00C               	goto	l3907
  1156  002952                     l3903:
  1157                           
  1158                           ;lcd.h: 138: lcd_write_char(a[i]);
  1159  002952  5007               	movf	lcd_putc@i,w,c
  1160  002954  2405               	addwf	lcd_putc@a,w,c
  1161  002956  6ED9               	movwf	fsr2l,c
  1162  002958  5008               	movf	lcd_putc@i+1,w,c
  1163  00295A  2006               	addwfc	lcd_putc@a+1,w,c
  1164  00295C  6EDA               	movwf	fsr2h,c
  1165  00295E  50DF               	movf	indf2,w,c
  1166  002960  6E02               	movwf	?_lcd_write_char,c
  1167  002962  EC6A  F014         	call	_lcd_write_char	;wreg free
  1168  002966  4A07               	infsnz	lcd_putc@i,f,c
  1169  002968  2A08               	incf	lcd_putc@i+1,f,c
  1170  00296A                     l3907:
  1171  00296A  5007               	movf	lcd_putc@i,w,c
  1172  00296C  2405               	addwf	lcd_putc@a,w,c
  1173  00296E  6ED9               	movwf	fsr2l,c
  1174  002970  5008               	movf	lcd_putc@i+1,w,c
  1175  002972  2006               	addwfc	lcd_putc@a+1,w,c
  1176  002974  6EDA               	movwf	fsr2h,c
  1177  002976  50DF               	movf	indf2,w,c
  1178  002978  B4D8               	btfsc	status,2,c
  1179  00297A  0012               	return	
  1180  00297C  D7EA               	goto	l3903
  1181  00297E                     __end_of_lcd_putc:
  1182                           	opt stack 0
  1183                           tblptru	equ	0xFF8
  1184                           postinc0	equ	0xFEE
  1185                           wreg	equ	0xFE8
  1186                           indf2	equ	0xFDF
  1187                           fsr2h	equ	0xFDA
  1188                           fsr2l	equ	0xFD9
  1189                           status	equ	0xFD8
  1190                           
  1191 ;; *************** function _lcd_write_char *****************
  1192 ;; Defined at:
  1193 ;;		line 117 in file "lcd.h"
  1194 ;; Parameters:    Size  Location     Type
  1195 ;;  a               1    1[COMRAM] unsigned char 
  1196 ;; Auto vars:     Size  Location     Type
  1197 ;;  y               1    3[COMRAM] unsigned char 
  1198 ;;  temp            1    2[COMRAM] unsigned char 
  1199 ;; Return value:  Size  Location     Type
  1200 ;;		None               void
  1201 ;; Registers used:
  1202 ;;		wreg, status,2, status,0, cstack
  1203 ;; Tracked objects:
  1204 ;;		On entry : 0/0
  1205 ;;		On exit  : 0/0
  1206 ;;		Unchanged: 0/0
  1207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1208 ;;      Params:         1       0       0       0       0       0       0       0       0
  1209 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1210 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1211 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1212 ;;Total ram usage:        3 bytes
  1213 ;; Hardware stack levels used:    1
  1214 ;; Hardware stack levels required when called:    1
  1215 ;; This function calls:
  1216 ;;		_Lcd_Port
  1217 ;; This function is called by:
  1218 ;;		_lcd_putc
  1219 ;; This function uses a non-reentrant model
  1220 ;;
  1221                           
  1222                           	psect	text3
  1223  0028D4                     __ptext3:
  1224                           	opt stack 0
  1225  0028D4                     _lcd_write_char:
  1226                           	opt stack 27
  1227                           
  1228                           ;lcd.h: 118: char temp,y;
  1229                           ;lcd.h: 119: temp = a&0x0F;
  1230                           
  1231                           ;incstack = 0
  1232                           ;incstack = 0
  1233  0028D4  5002               	movf	lcd_write_char@a,w,c
  1234  0028D6  0B0F               	andlw	15
  1235  0028D8  6E03               	movwf	lcd_write_char@temp,c
  1236                           
  1237                           ;lcd.h: 120: y = a&0xF0;
  1238  0028DA  5002               	movf	lcd_write_char@a,w,c
  1239  0028DC  0BF0               	andlw	240
  1240  0028DE  6E04               	movwf	lcd_write_char@y,c
  1241                           
  1242                           ;lcd.h: 121: RD2 = 1;
  1243  0028E0  8483               	bsf	3971,2,c	;volatile
  1244                           
  1245                           ;lcd.h: 122: Lcd_Port(y>>4);
  1246  0028E2  3804               	swapf	lcd_write_char@y,w,c
  1247  0028E4  0B0F               	andlw	15
  1248  0028E6  6E01               	movwf	?_Lcd_Port,c
  1249  0028E8  ECF2  F014         	call	_Lcd_Port	;wreg free
  1250                           
  1251                           ;lcd.h: 123: RD3 = 1;
  1252  0028EC  8683               	bsf	3971,3,c	;volatile
  1253                           
  1254                           ;lcd.h: 124: _delay((unsigned long)((40)*(8000000/4000000.0)));
  1255  0028EE  0E1A               	movlw	26
  1256  0028F0                     u3167:
  1257  0028F0  2EE8               	decfsz	wreg,f,c
  1258  0028F2  D7FE               	goto	u3167
  1259  0028F4  D000               	nop2		;nop
  1260                           
  1261                           ;lcd.h: 125: RD3 = 0;
  1262  0028F6  9683               	bcf	3971,3,c	;volatile
  1263                           
  1264                           ;lcd.h: 126: Lcd_Port(temp);
  1265  0028F8  C003  F001         	movff	lcd_write_char@temp,?_Lcd_Port
  1266  0028FC  ECF2  F014         	call	_Lcd_Port	;wreg free
  1267                           
  1268                           ;lcd.h: 127: RD3 = 1;
  1269  002900  8683               	bsf	3971,3,c	;volatile
  1270                           
  1271                           ;lcd.h: 128: _delay((unsigned long)((40)*(8000000/4000000.0)));
  1272  002902  0E1A               	movlw	26
  1273  002904                     u3177:
  1274  002904  2EE8               	decfsz	wreg,f,c
  1275  002906  D7FE               	goto	u3177
  1276  002908  D000               	nop2		;nop
  1277                           
  1278                           ;lcd.h: 129: RD3 = 0;
  1279  00290A  9683               	bcf	3971,3,c	;volatile
  1280  00290C  0012               	return	
  1281  00290E                     __end_of_lcd_write_char:
  1282                           	opt stack 0
  1283                           tblptru	equ	0xFF8
  1284                           postinc0	equ	0xFEE
  1285                           wreg	equ	0xFE8
  1286                           indf2	equ	0xFDF
  1287                           fsr2h	equ	0xFDA
  1288                           fsr2l	equ	0xFD9
  1289                           status	equ	0xFD8
  1290                           
  1291 ;; *************** function _lcd_gotoxy *****************
  1292 ;; Defined at:
  1293 ;;		line 72 in file "lcd.h"
  1294 ;; Parameters:    Size  Location     Type
  1295 ;;  a               1    3[COMRAM] unsigned char 
  1296 ;;  b               1    4[COMRAM] unsigned char 
  1297 ;; Auto vars:     Size  Location     Type
  1298 ;;  temp            1    7[COMRAM] unsigned char 
  1299 ;;  y               1    6[COMRAM] unsigned char 
  1300 ;;  z               1    5[COMRAM] unsigned char 
  1301 ;; Return value:  Size  Location     Type
  1302 ;;		None               void
  1303 ;; Registers used:
  1304 ;;		wreg, status,2, status,0, cstack
  1305 ;; Tracked objects:
  1306 ;;		On entry : 0/0
  1307 ;;		On exit  : 0/0
  1308 ;;		Unchanged: 0/0
  1309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1310 ;;      Params:         2       0       0       0       0       0       0       0       0
  1311 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1312 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1313 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1314 ;;Total ram usage:        5 bytes
  1315 ;; Hardware stack levels used:    1
  1316 ;; Hardware stack levels required when called:    2
  1317 ;; This function calls:
  1318 ;;		_Lcd_Cmd
  1319 ;; This function is called by:
  1320 ;;		_main
  1321 ;;		_states_LED
  1322 ;; This function uses a non-reentrant model
  1323 ;;
  1324                           
  1325                           	psect	text4
  1326  0026EA                     __ptext4:
  1327                           	opt stack 0
  1328  0026EA                     _lcd_gotoxy:
  1329                           	opt stack 27
  1330                           
  1331                           ;lcd.h: 73: char temp,z,y;
  1332                           ;lcd.h: 74: if(a == 1)
  1333                           
  1334                           ;incstack = 0
  1335                           ;incstack = 0
  1336  0026EA  0404               	decf	lcd_gotoxy@a,w,c
  1337  0026EC  A4D8               	btfss	status,2,c
  1338  0026EE  D012               	goto	l3863
  1339                           
  1340                           ;lcd.h: 75: {
  1341                           ;lcd.h: 76: temp = 0x80 + b - 1;
  1342  0026F0  5005               	movf	lcd_gotoxy@b,w,c
  1343  0026F2  0F7F               	addlw	127
  1344  0026F4  6E08               	movwf	lcd_gotoxy@temp,c
  1345                           
  1346                           ;lcd.h: 77: z = temp>>4;
  1347  0026F6  3808               	swapf	lcd_gotoxy@temp,w,c
  1348  0026F8  0B0F               	andlw	15
  1349  0026FA  6E06               	movwf	lcd_gotoxy@z,c
  1350                           
  1351                           ;lcd.h: 78: y = temp & 0x0F;
  1352  0026FC  5008               	movf	lcd_gotoxy@temp,w,c
  1353  0026FE  0B0F               	andlw	15
  1354  002700  6E07               	movwf	lcd_gotoxy@y,c
  1355                           
  1356                           ;lcd.h: 79: Lcd_Cmd(z);
  1357  002702  C006  F002         	movff	lcd_gotoxy@z,?_Lcd_Cmd
  1358  002706  EC2C  F015         	call	_Lcd_Cmd	;wreg free
  1359                           
  1360                           ;lcd.h: 80: Lcd_Cmd(y);
  1361  00270A  C007  F002         	movff	lcd_gotoxy@y,?_Lcd_Cmd
  1362  00270E  EC2C  F015         	call	_Lcd_Cmd	;wreg free
  1363                           
  1364                           ;lcd.h: 81: }
  1365  002712  D015               	goto	l113
  1366  002714                     l3863:
  1367                           
  1368                           ;lcd.h: 82: else if(a == 2)
  1369  002714  5004               	movf	lcd_gotoxy@a,w,c
  1370  002716  0A02               	xorlw	2
  1371  002718  A4D8               	btfss	status,2,c
  1372  00271A  D011               	goto	l113
  1373                           
  1374                           ;lcd.h: 83: {
  1375                           ;lcd.h: 84: temp = 0xC0 + b - 1;
  1376  00271C  5005               	movf	lcd_gotoxy@b,w,c
  1377  00271E  0FBF               	addlw	191
  1378  002720  6E08               	movwf	lcd_gotoxy@temp,c
  1379                           
  1380                           ;lcd.h: 85: z = temp>>4;
  1381  002722  3808               	swapf	lcd_gotoxy@temp,w,c
  1382  002724  0B0F               	andlw	15
  1383  002726  6E06               	movwf	lcd_gotoxy@z,c
  1384                           
  1385                           ;lcd.h: 86: y = temp & 0x0F;
  1386  002728  5008               	movf	lcd_gotoxy@temp,w,c
  1387  00272A  0B0F               	andlw	15
  1388  00272C  6E07               	movwf	lcd_gotoxy@y,c
  1389                           
  1390                           ;lcd.h: 87: Lcd_Cmd(z);
  1391  00272E  C006  F002         	movff	lcd_gotoxy@z,?_Lcd_Cmd
  1392  002732  EC2C  F015         	call	_Lcd_Cmd	;wreg free
  1393                           
  1394                           ;lcd.h: 88: Lcd_Cmd(y);
  1395  002736  C007  F002         	movff	lcd_gotoxy@y,?_Lcd_Cmd
  1396  00273A  EC2C  F015         	call	_Lcd_Cmd	;wreg free
  1397  00273E                     l113:
  1398  00273E  0012               	return	
  1399  002740                     __end_of_lcd_gotoxy:
  1400                           	opt stack 0
  1401                           tblptru	equ	0xFF8
  1402                           postinc0	equ	0xFEE
  1403                           wreg	equ	0xFE8
  1404                           indf2	equ	0xFDF
  1405                           fsr2h	equ	0xFDA
  1406                           fsr2l	equ	0xFD9
  1407                           status	equ	0xFD8
  1408                           
  1409 ;; *************** function _USART_ReceiveChar *****************
  1410 ;; Defined at:
  1411 ;;		line 122 in file "main.c"
  1412 ;; Parameters:    Size  Location     Type
  1413 ;;		None
  1414 ;; Auto vars:     Size  Location     Type
  1415 ;;		None
  1416 ;; Return value:  Size  Location     Type
  1417 ;;                  1    wreg      unsigned char 
  1418 ;; Registers used:
  1419 ;;		wreg, status,2
  1420 ;; Tracked objects:
  1421 ;;		On entry : 0/0
  1422 ;;		On exit  : 0/0
  1423 ;;		Unchanged: 0/0
  1424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1425 ;;      Params:         0       0       0       0       0       0       0       0       0
  1426 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1427 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1428 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1429 ;;Total ram usage:        0 bytes
  1430 ;; Hardware stack levels used:    1
  1431 ;; This function calls:
  1432 ;;		Nothing
  1433 ;; This function is called by:
  1434 ;;		_main
  1435 ;; This function uses a non-reentrant model
  1436 ;;
  1437                           
  1438                           	psect	text5
  1439  002AB6                     __ptext5:
  1440                           	opt stack 0
  1441  002AB6                     _USART_ReceiveChar:
  1442                           	opt stack 30
  1443  002AB6                     l155:
  1444  002AB6  AA9E               	btfss	3998,5,c	;volatile
  1445  002AB8  D7FE               	goto	l155
  1446                           
  1447                           ;main.c: 124: if(RCSTAbits.OERR)
  1448  002ABA  A2AB               	btfss	4011,1,c	;volatile
  1449  002ABC  D003               	goto	l3383
  1450                           
  1451                           ;main.c: 125: {
  1452                           ;main.c: 126: CREN = 0;
  1453  002ABE  98AB               	bcf	4011,4,c	;volatile
  1454  002AC0  F000               	nop		;# 
  1455                           
  1456                           ;main.c: 128: CREN=1;
  1457  002AC2  88AB               	bsf	4011,4,c	;volatile
  1458  002AC4                     l3383:
  1459                           
  1460                           ;main.c: 129: }
  1461                           ;main.c: 130: return(RCREG);
  1462  002AC4  50AE               	movf	4014,w,c	;volatile
  1463  002AC6  0012               	return	
  1464  002AC8                     __end_of_USART_ReceiveChar:
  1465                           	opt stack 0
  1466                           tblptru	equ	0xFF8
  1467                           postinc0	equ	0xFEE
  1468                           wreg	equ	0xFE8
  1469                           indf2	equ	0xFDF
  1470                           fsr2h	equ	0xFDA
  1471                           fsr2l	equ	0xFD9
  1472                           status	equ	0xFD8
  1473                           
  1474 ;; *************** function _sprintf *****************
  1475 ;; Defined at:
  1476 ;;		line 493 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\doprnt.c"
  1477 ;; Parameters:    Size  Location     Type
  1478 ;;  sp              2    5[BANK0 ] PTR unsigned char 
  1479 ;;		 -> LCD_Buffer(32), 
  1480 ;;  f               2    7[BANK0 ] PTR const unsigned char 
  1481 ;;		 -> STR_2(10), STR_1(10), 
  1482 ;; Auto vars:     Size  Location     Type
  1483 ;;  vd              2   25[BANK0 ] unsigned int 
  1484 ;;  vd              2   27[BANK0 ] unsigned int 
  1485 ;;  _val            4   38[BANK0 ] struct .
  1486 ;;  fval            3   44[BANK0 ] struct .
  1487 ;;  integ           3   33[BANK0 ] struct .
  1488 ;;  ival            3    0        struct .
  1489 ;;  prec            2   42[BANK0 ] int 
  1490 ;;  exp             2   36[BANK0 ] int 
  1491 ;;  flag            2   31[BANK0 ] unsigned short 
  1492 ;;  ap              2   29[BANK0 ] PTR void [1]
  1493 ;;		 -> ?_sprintf(2), 
  1494 ;;  width           2    0        int 
  1495 ;;  c               1   47[BANK0 ] char 
  1496 ;;  d               1    0        unsigned char 
  1497 ;; Return value:  Size  Location     Type
  1498 ;;                  2    5[BANK0 ] int 
  1499 ;; Registers used:
  1500 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1501 ;; Tracked objects:
  1502 ;;		On entry : 0/0
  1503 ;;		On exit  : 0/0
  1504 ;;		Unchanged: 0/0
  1505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1506 ;;      Params:         0       7       0       0       0       0       0       0       0
  1507 ;;      Locals:         0      30       0       0       0       0       0       0       0
  1508 ;;      Temps:          0       6       0       0       0       0       0       0       0
  1509 ;;      Totals:         0      43       0       0       0       0       0       0       0
  1510 ;;Total ram usage:       43 bytes
  1511 ;; Hardware stack levels used:    1
  1512 ;; Hardware stack levels required when called:    4
  1513 ;; This function calls:
  1514 ;;		_fround
  1515 ;;		_scale
  1516 ;;		_isdigit
  1517 ;;		__tdiv_to_l_
  1518 ;;		__div_to_l_
  1519 ;;		___asftadd
  1520 ;;		___asftmul
  1521 ;;		___ftmul
  1522 ;;		___asftsub
  1523 ;;		___awdiv
  1524 ;;		___ftge
  1525 ;;		___ftneg
  1526 ;;		___fttol
  1527 ;;		___lldiv
  1528 ;;		___llmod
  1529 ;;		___lltoft
  1530 ;;		___lwmod
  1531 ;;		___wmul
  1532 ;; This function is called by:
  1533 ;;		_main
  1534 ;; This function uses a non-reentrant model
  1535 ;;
  1536                           
  1537                           	psect	text6
  1538  00088C                     __ptext6:
  1539                           	opt stack 0
  1540  00088C                     _sprintf:
  1541                           	opt stack 26
  1542                           
  1543                           ;doprnt.c: 494: va_list ap;
  1544                           ;doprnt.c: 499: signed char c;
  1545                           ;doprnt.c: 501: int width;
  1546                           ;doprnt.c: 504: int prec;
  1547                           ;doprnt.c: 508: unsigned short flag;
  1548                           ;doprnt.c: 515: char d;
  1549                           ;doprnt.c: 516: double fval, integ;
  1550                           ;doprnt.c: 517: int exp;
  1551                           ;doprnt.c: 518: double ival;
  1552                           ;doprnt.c: 519: union {
  1553                           ;doprnt.c: 520: unsigned long _val;
  1554                           ;doprnt.c: 521: struct {
  1555                           ;doprnt.c: 522: const char * _cp;
  1556                           ;doprnt.c: 523: unsigned _len;
  1557                           ;doprnt.c: 524: } _str;
  1558                           ;doprnt.c: 525: } _val;
  1559                           ;doprnt.c: 542: *ap = __va_start();
  1560                           
  1561                           ;incstack = 0
  1562                           ;incstack = 0
  1563  00088C  0100               	movlb	0	; () banked
  1564  00088E  0E00               	movlw	high (?_sprintf+4)
  1565  000890  0100               	movlb	0	; () banked
  1566  000892  0100               	movlb	0	; () banked
  1567  000894  6F7E               	movwf	(sprintf@ap+1)& (0+255),b
  1568  000896  0100               	movlb	0	; () banked
  1569  000898  0E69               	movlw	low (?_sprintf+4)
  1570  00089A  0100               	movlb	0	; () banked
  1571  00089C  6F7D               	movwf	sprintf@ap& (0+255),b
  1572                           
  1573                           ;doprnt.c: 545: while(c = *f++) {
  1574  00089E  EFD0  F008         	goto	l4411
  1575  0008A2                     l4187:
  1576                           
  1577                           ; BSR set to: 0
  1578                           ;doprnt.c: 547: if(c != '%')
  1579  0008A2  0100               	movlb	0	; () banked
  1580  0008A4  0100               	movlb	0	; () banked
  1581  0008A6  518F               	movf	sprintf@c& (0+255),w,b
  1582  0008A8  0A25               	xorlw	37
  1583  0008AA  B4D8               	btfsc	status,2,c
  1584  0008AC  D009               	goto	l4193
  1585                           
  1586                           ; BSR set to: 0
  1587                           ;doprnt.c: 549: {
  1588                           ;doprnt.c: 550: ((*sp++ = (c)));
  1589  0008AE  C065  FFD9         	movff	sprintf@sp,fsr2l
  1590  0008B2  C066  FFDA         	movff	sprintf@sp+1,fsr2h
  1591  0008B6  0100               	movlb	0	; () banked
  1592  0008B8  C08F  FFDF         	movff	sprintf@c,indf2
  1593  0008BC  EFCC  F008         	goto	L1
  1594  0008C0                     l4193:
  1595                           
  1596                           ; BSR set to: 0
  1597                           ;doprnt.c: 552: }
  1598                           ;doprnt.c: 557: flag = 0;
  1599  0008C0  0E00               	movlw	0
  1600  0008C2  0100               	movlb	0	; () banked
  1601  0008C4  0100               	movlb	0	; () banked
  1602  0008C6  6F80               	movwf	(sprintf@flag+1)& (0+255),b
  1603  0008C8  0E00               	movlw	0
  1604  0008CA  0100               	movlb	0	; () banked
  1605  0008CC  6F7F               	movwf	sprintf@flag& (0+255),b
  1606                           
  1607                           ; BSR set to: 0
  1608                           ;doprnt.c: 620: if(*f == '.') {
  1609  0008CE  0100               	movlb	0	; () banked
  1610  0008D0  C067  FFF6         	movff	sprintf@f,tblptrl
  1611  0008D4  0100               	movlb	0	; () banked
  1612  0008D6  C068  FFF7         	movff	sprintf@f+1,tblptrh
  1613  0008DA  0008               	tblrd		*
  1614  0008DC  50F5               	movf	tablat,w,c
  1615  0008DE  0A2E               	xorlw	46
  1616  0008E0  A4D8               	btfss	status,2,c
  1617  0008E2  D03F               	goto	l4207
  1618                           
  1619                           ; BSR set to: 0
  1620                           ;doprnt.c: 621: flag |= 0x4000;
  1621  0008E4  0100               	movlb	0	; () banked
  1622  0008E6  0100               	movlb	0	; () banked
  1623  0008E8  8D80               	bsf	(sprintf@flag+1)& (0+255),6,b
  1624                           
  1625                           ;doprnt.c: 622: f++;
  1626  0008EA  0100               	movlb	0	; () banked
  1627  0008EC  0100               	movlb	0	; () banked
  1628  0008EE  4B67               	infsnz	sprintf@f& (0+255),f,b
  1629  0008F0  2B68               	incf	(sprintf@f+1)& (0+255),f,b
  1630                           
  1631                           ; BSR set to: 0
  1632                           ;doprnt.c: 629: {
  1633                           ;doprnt.c: 630: prec = 0;
  1634  0008F2  0E00               	movlw	0
  1635  0008F4  0100               	movlb	0	; () banked
  1636  0008F6  0100               	movlb	0	; () banked
  1637  0008F8  6F8B               	movwf	(sprintf@prec+1)& (0+255),b
  1638  0008FA  0E00               	movlw	0
  1639  0008FC  0100               	movlb	0	; () banked
  1640  0008FE  6F8A               	movwf	sprintf@prec& (0+255),b
  1641                           
  1642                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
  1643  000900  D022               	goto	l4205
  1644  000902                     l4201:
  1645                           
  1646                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
  1647  000902  C08A  F011         	movff	sprintf@prec,?___wmul
  1648  000906  C08B  F012         	movff	sprintf@prec+1,?___wmul+1
  1649  00090A  0E00               	movlw	0
  1650  00090C  6E14               	movwf	?___wmul+3,c
  1651  00090E  0E0A               	movlw	10
  1652  000910  6E13               	movwf	?___wmul+2,c
  1653  000912  EC87  F014         	call	___wmul	;wreg free
  1654  000916  0100               	movlb	0	; () banked
  1655  000918  C067  FFF6         	movff	sprintf@f,tblptrl
  1656  00091C  0100               	movlb	0	; () banked
  1657  00091E  C068  FFF7         	movff	sprintf@f+1,tblptrh
  1658  000922  0008               	tblrd		*
  1659  000924  50F5               	movf	tablat,w,c
  1660  000926  2611               	addwf	?___wmul,f,c
  1661  000928  0E00               	movlw	0
  1662  00092A  2212               	addwfc	?___wmul+1,f,c
  1663  00092C  0ED0               	movlw	208
  1664  00092E  2411               	addwf	?___wmul,w,c
  1665  000930  0100               	movlb	0	; () banked
  1666  000932  0100               	movlb	0	; () banked
  1667  000934  6F8A               	movwf	sprintf@prec& (0+255),b
  1668  000936  0EFF               	movlw	255
  1669  000938  2012               	addwfc	?___wmul+1,w,c
  1670  00093A  0100               	movlb	0	; () banked
  1671  00093C  6F8B               	movwf	(sprintf@prec+1)& (0+255),b
  1672                           
  1673                           ; BSR set to: 0
  1674  00093E  0100               	movlb	0	; () banked
  1675  000940  0100               	movlb	0	; () banked
  1676  000942  4B67               	infsnz	sprintf@f& (0+255),f,b
  1677  000944  2B68               	incf	(sprintf@f+1)& (0+255),f,b
  1678  000946                     l4205:
  1679                           
  1680                           ; BSR set to: 0
  1681  000946  0100               	movlb	0	; () banked
  1682  000948  C067  FFF6         	movff	sprintf@f,tblptrl
  1683  00094C  0100               	movlb	0	; () banked
  1684  00094E  C068  FFF7         	movff	sprintf@f+1,tblptrh
  1685  000952  0008               	tblrd		*
  1686  000954  CFF5 F001          	movff	tablat,?_isdigit
  1687  000958  EC1A  F015         	call	_isdigit	;wreg free
  1688  00095C  A0D8               	btfss	status,0,c
  1689  00095E  D067               	goto	l4237
  1690  000960  D7D0               	goto	l4201
  1691  000962                     l4207:
  1692                           
  1693                           ;doprnt.c: 635: prec = 0;
  1694  000962  0E00               	movlw	0
  1695  000964  0100               	movlb	0	; () banked
  1696  000966  0100               	movlb	0	; () banked
  1697  000968  6F8B               	movwf	(sprintf@prec+1)& (0+255),b
  1698  00096A  0E00               	movlw	0
  1699  00096C  0100               	movlb	0	; () banked
  1700  00096E  6F8A               	movwf	sprintf@prec& (0+255),b
  1701                           
  1702                           ; BSR set to: 0
  1703                           ;doprnt.c: 637: flag |= 0x1000;
  1704  000970  0100               	movlb	0	; () banked
  1705  000972  0100               	movlb	0	; () banked
  1706  000974  8980               	bsf	(sprintf@flag+1)& (0+255),4,b
  1707  000976  D05B               	goto	l4237
  1708  000978                     l4211:
  1709                           
  1710                           ; BSR set to: 0
  1711                           ;doprnt.c: 672: flag |= 0x400;
  1712  000978  0100               	movlb	0	; () banked
  1713  00097A  0100               	movlb	0	; () banked
  1714  00097C  8580               	bsf	(sprintf@flag+1)& (0+255),2,b
  1715                           
  1716                           ;doprnt.c: 673: break;
  1717  00097E  D071               	goto	l4239
  1718  000980                     l4213:
  1719                           
  1720                           ; BSR set to: 0
  1721                           ;doprnt.c: 762: if(prec && prec < _val._str._len)
  1722  000980  0100               	movlb	0	; () banked
  1723  000982  0100               	movlb	0	; () banked
  1724  000984  518B               	movf	(sprintf@prec+1)& (0+255),w,b
  1725  000986  118A               	iorwf	sprintf@prec& (0+255),w,b
  1726  000988  B4D8               	btfsc	status,2,c
  1727  00098A  D025               	goto	l4225
  1728                           
  1729                           ; BSR set to: 0
  1730  00098C  0100               	movlb	0	; () banked
  1731  00098E  0100               	movlb	0	; () banked
  1732  000990  5188               	movf	(sprintf@_val+2)& (0+255),w,b
  1733  000992  0100               	movlb	0	; () banked
  1734  000994  0100               	movlb	0	; () banked
  1735  000996  5D8A               	subwf	sprintf@prec& (0+255),w,b
  1736  000998  0100               	movlb	0	; () banked
  1737  00099A  0100               	movlb	0	; () banked
  1738  00099C  5189               	movf	(sprintf@_val+3)& (0+255),w,b
  1739  00099E  0100               	movlb	0	; () banked
  1740  0009A0  0100               	movlb	0	; () banked
  1741  0009A2  598B               	subwfb	(sprintf@prec+1)& (0+255),w,b
  1742  0009A4  B0D8               	btfsc	status,0,c
  1743  0009A6  D017               	goto	l4225
  1744                           
  1745                           ; BSR set to: 0
  1746                           ;doprnt.c: 763: _val._str._len = prec;
  1747  0009A8  C08A  F088         	movff	sprintf@prec,sprintf@_val+2
  1748  0009AC  C08B  F089         	movff	sprintf@prec+1,sprintf@_val+3
  1749  0009B0  D012               	goto	l4225
  1750  0009B2                     l4219:
  1751                           
  1752                           ; BSR set to: 0
  1753                           ;doprnt.c: 777: ((*sp++ = (*_val._str._cp++)));
  1754  0009B2  C086  FFD9         	movff	sprintf@_val,fsr2l
  1755  0009B6  C087  FFDA         	movff	sprintf@_val+1,fsr2h
  1756  0009BA  C065  FFE1         	movff	sprintf@sp,fsr1l
  1757  0009BE  C066  FFE2         	movff	sprintf@sp+1,fsr1h
  1758  0009C2  CFDF FFE7          	movff	indf2,indf1
  1759                           
  1760                           ; BSR set to: 0
  1761  0009C6  0100               	movlb	0	; () banked
  1762  0009C8  0100               	movlb	0	; () banked
  1763  0009CA  4B86               	infsnz	sprintf@_val& (0+255),f,b
  1764  0009CC  2B87               	incf	(sprintf@_val+1)& (0+255),f,b
  1765                           
  1766                           ; BSR set to: 0
  1767  0009CE  0100               	movlb	0	; () banked
  1768  0009D0  0100               	movlb	0	; () banked
  1769  0009D2  4B65               	infsnz	sprintf@sp& (0+255),f,b
  1770  0009D4  2B66               	incf	(sprintf@sp+1)& (0+255),f,b
  1771  0009D6                     l4225:
  1772                           
  1773                           ; BSR set to: 0
  1774  0009D6  0100               	movlb	0	; () banked
  1775  0009D8  0100               	movlb	0	; () banked
  1776  0009DA  0788               	decf	(sprintf@_val+2)& (0+255),f,b
  1777  0009DC  A0D8               	btfss	status,0,c
  1778  0009DE  0789               	decf	(sprintf@_val+3)& (0+255),f,b
  1779  0009E0  0100               	movlb	0	; () banked
  1780  0009E2  2988               	incf	(sprintf@_val+2)& (0+255),w,b
  1781  0009E4  B4D8               	btfsc	status,2,c
  1782  0009E6  2989               	incf	(sprintf@_val+3)& (0+255),w,b
  1783  0009E8  B4D8               	btfsc	status,2,c
  1784  0009EA  D3DA               	goto	l4411
  1785  0009EC  D7E2               	goto	l4219
  1786  0009EE                     l4227:
  1787                           
  1788                           ; BSR set to: 0
  1789                           ;doprnt.c: 808: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  1790  0009EE  C07D  FFD9         	movff	sprintf@ap,fsr2l
  1791  0009F2  C07E  FFDA         	movff	sprintf@ap+1,fsr2h
  1792  0009F6  50DF               	movf	indf2,w,c
  1793  0009F8  0100               	movlb	0	; () banked
  1794  0009FA  0100               	movlb	0	; () banked
  1795  0009FC  6F8F               	movwf	sprintf@c& (0+255),b
  1796                           
  1797                           ; BSR set to: 0
  1798  0009FE  0E02               	movlw	2
  1799  000A00  0100               	movlb	0	; () banked
  1800  000A02  0100               	movlb	0	; () banked
  1801  000A04  277D               	addwf	sprintf@ap& (0+255),f,b
  1802  000A06  0E00               	movlw	0
  1803  000A08  0100               	movlb	0	; () banked
  1804  000A0A  237E               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1805  000A0C                     l4231:
  1806                           
  1807                           ; BSR set to: 0
  1808                           ;doprnt.c: 814: _val._str._cp = (char *)&c;
  1809  000A0C  0100               	movlb	0	; () banked
  1810  000A0E  0E00               	movlw	high sprintf@c
  1811  000A10  0100               	movlb	0	; () banked
  1812  000A12  0100               	movlb	0	; () banked
  1813  000A14  6F87               	movwf	(sprintf@_val+1)& (0+255),b
  1814  000A16  0100               	movlb	0	; () banked
  1815  000A18  0E8F               	movlw	low sprintf@c
  1816  000A1A  0100               	movlb	0	; () banked
  1817  000A1C  6F86               	movwf	sprintf@_val& (0+255),b
  1818                           
  1819                           ; BSR set to: 0
  1820                           ;doprnt.c: 815: _val._str._len = 1;
  1821  000A1E  0E00               	movlw	0
  1822  000A20  0100               	movlb	0	; () banked
  1823  000A22  0100               	movlb	0	; () banked
  1824  000A24  6F89               	movwf	(sprintf@_val+3)& (0+255),b
  1825  000A26  0E01               	movlw	1
  1826  000A28  0100               	movlb	0	; () banked
  1827  000A2A  6F88               	movwf	(sprintf@_val+2)& (0+255),b
  1828                           
  1829                           ;doprnt.c: 816: goto dostring;
  1830  000A2C  D7A9               	goto	l4213
  1831  000A2E                     l4237:
  1832  000A2E  0100               	movlb	0	; () banked
  1833  000A30  C067  FFF6         	movff	sprintf@f,tblptrl
  1834  000A34  0100               	movlb	0	; () banked
  1835  000A36  C068  FFF7         	movff	sprintf@f+1,tblptrh
  1836  000A3A  0100               	movlb	0	; () banked
  1837  000A3C  0100               	movlb	0	; () banked
  1838  000A3E  4B67               	infsnz	sprintf@f& (0+255),f,b
  1839  000A40  2B68               	incf	(sprintf@f+1)& (0+255),f,b
  1840  000A42  0008               	tblrd		*
  1841  000A44  0100               	movlb	0	; () banked
  1842  000A46  CFF5 F08F          	movff	tablat,sprintf@c
  1843  000A4A  0100               	movlb	0	; () banked
  1844  000A4C  518F               	movf	sprintf@c& (0+255),w,b
  1845                           
  1846                           ; Switch size 1, requested type "space"
  1847                           ; Number of cases is 3, Range of values is 0 to 102
  1848                           ; switch strategies available:
  1849                           ; Name         Instructions Cycles
  1850                           ; simple_byte           10     6 (average)
  1851                           ;	Chosen strategy is simple_byte
  1852  000A4E  0A00               	xorlw	0	; case 0
  1853  000A50  B4D8               	btfsc	status,2,c
  1854  000A52  D3B8               	goto	l4413
  1855  000A54  0A63               	xorlw	99	; case 99
  1856  000A56  B4D8               	btfsc	status,2,c
  1857  000A58  D7CA               	goto	l4227
  1858  000A5A  0A05               	xorlw	5	; case 102
  1859  000A5C  B4D8               	btfsc	status,2,c
  1860  000A5E  D78C               	goto	l4211
  1861  000A60  D7D5               	goto	l4231
  1862  000A62                     l4239:
  1863                           
  1864                           ; BSR set to: 0
  1865                           ;doprnt.c: 834: if(flag & (0x700)) {
  1866  000A62  0E07               	movlw	7
  1867  000A64  0100               	movlb	0	; () banked
  1868  000A66  0100               	movlb	0	; () banked
  1869  000A68  1580               	andwf	(sprintf@flag+1)& (0+255),w,b
  1870  000A6A  B4D8               	btfsc	status,2,c
  1871  000A6C  D335               	goto	l4391
  1872                           
  1873                           ; BSR set to: 0
  1874                           ;doprnt.c: 836: if(flag & 0x1000)
  1875  000A6E  0100               	movlb	0	; () banked
  1876  000A70  0100               	movlb	0	; () banked
  1877  000A72  A980               	btfss	(sprintf@flag+1)& (0+255),4,b
  1878  000A74  D007               	goto	l4245
  1879                           
  1880                           ; BSR set to: 0
  1881                           ;doprnt.c: 838: prec = 6;
  1882  000A76  0E00               	movlw	0
  1883  000A78  0100               	movlb	0	; () banked
  1884  000A7A  0100               	movlb	0	; () banked
  1885  000A7C  6F8B               	movwf	(sprintf@prec+1)& (0+255),b
  1886  000A7E  0E06               	movlw	6
  1887  000A80  0100               	movlb	0	; () banked
  1888  000A82  6F8A               	movwf	sprintf@prec& (0+255),b
  1889  000A84                     l4245:
  1890                           
  1891                           ; BSR set to: 0
  1892                           ;doprnt.c: 839: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1893  000A84  C07D  FFD9         	movff	sprintf@ap,fsr2l
  1894  000A88  C07E  FFDA         	movff	sprintf@ap+1,fsr2h
  1895  000A8C  0100               	movlb	0	; () banked
  1896  000A8E  CFDE F08C          	movff	postinc2,sprintf@fval
  1897  000A92  0100               	movlb	0	; () banked
  1898  000A94  CFDE F08D          	movff	postinc2,sprintf@fval+1
  1899  000A98  0100               	movlb	0	; () banked
  1900  000A9A  CFDD F08E          	movff	postdec2,sprintf@fval+2
  1901                           
  1902                           ; BSR set to: 0
  1903  000A9E  0E03               	movlw	3
  1904  000AA0  0100               	movlb	0	; () banked
  1905  000AA2  0100               	movlb	0	; () banked
  1906  000AA4  277D               	addwf	sprintf@ap& (0+255),f,b
  1907  000AA6  0E00               	movlw	0
  1908  000AA8  0100               	movlb	0	; () banked
  1909  000AAA  237E               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1910                           
  1911                           ; BSR set to: 0
  1912                           ;doprnt.c: 840: if(fval < 0.0) {
  1913  000AAC  0100               	movlb	0	; () banked
  1914  000AAE  0100               	movlb	0	; () banked
  1915  000AB0  518E               	movf	(sprintf@fval+2)& (0+255),w,b
  1916  000AB2  0A80               	xorlw	128
  1917  000AB4  0F80               	addlw	128
  1918  000AB6  E107               	bnz	u2885
  1919  000AB8  0E00               	movlw	0
  1920  000ABA  0100               	movlb	0	; () banked
  1921  000ABC  5D8D               	subwf	(sprintf@fval+1)& (0+255),w,b
  1922  000ABE  E103               	bnz	u2885
  1923  000AC0  0E00               	movlw	0
  1924  000AC2  0100               	movlb	0	; () banked
  1925  000AC4  5D8C               	subwf	sprintf@fval& (0+255),w,b
  1926  000AC6                     u2885:
  1927  000AC6  B0D8               	btfsc	status,0,c
  1928  000AC8  D012               	goto	l4255
  1929                           
  1930                           ; BSR set to: 0
  1931                           ;doprnt.c: 841: fval = -fval;
  1932  000ACA  C08C  F001         	movff	sprintf@fval,?___ftneg
  1933  000ACE  C08D  F002         	movff	sprintf@fval+1,?___ftneg+1
  1934  000AD2  C08E  F003         	movff	sprintf@fval+2,?___ftneg+2
  1935  000AD6  EC07  F015         	call	___ftneg	;wreg free
  1936  000ADA  C003  F08E         	movff	?___ftneg+2,sprintf@fval+2
  1937  000ADE  C002  F08D         	movff	?___ftneg+1,sprintf@fval+1
  1938  000AE2  C001  F08C         	movff	?___ftneg,sprintf@fval
  1939                           
  1940                           ;doprnt.c: 842: flag |= 0x03;
  1941  000AE6  0E03               	movlw	3
  1942  000AE8  0100               	movlb	0	; () banked
  1943  000AEA  0100               	movlb	0	; () banked
  1944  000AEC  137F               	iorwf	sprintf@flag& (0+255),f,b
  1945  000AEE                     l4255:
  1946                           
  1947                           ; BSR set to: 0
  1948                           ;doprnt.c: 843: }
  1949                           ;doprnt.c: 844: exp = 0;
  1950  000AEE  0E00               	movlw	0
  1951  000AF0  0100               	movlb	0	; () banked
  1952  000AF2  0100               	movlb	0	; () banked
  1953  000AF4  6F85               	movwf	(sprintf@exp+1)& (0+255),b
  1954  000AF6  0E00               	movlw	0
  1955  000AF8  0100               	movlb	0	; () banked
  1956  000AFA  6F84               	movwf	sprintf@exp& (0+255),b
  1957                           
  1958                           ; BSR set to: 0
  1959                           ;doprnt.c: 845: if( fval!=0) {
  1960  000AFC  0E7F               	movlw	127
  1961  000AFE  0100               	movlb	0	; () banked
  1962  000B00  0100               	movlb	0	; () banked
  1963  000B02  158E               	andwf	(sprintf@fval+2)& (0+255),w,b
  1964  000B04  0100               	movlb	0	; () banked
  1965  000B06  118D               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1966  000B08  0100               	movlb	0	; () banked
  1967  000B0A  118C               	iorwf	sprintf@fval& (0+255),w,b
  1968  000B0C  B4D8               	btfsc	status,2,c
  1969  000B0E  D096               	goto	l4283
  1970                           
  1971                           ; BSR set to: 0
  1972                           ;doprnt.c: 846: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1973  000B10  0E82               	movlw	130
  1974  000B12  0100               	movlb	0	; () banked
  1975  000B14  6F6C               	movwf	??_sprintf& (0+255),b
  1976  000B16  0EFF               	movlw	255
  1977  000B18  6F6D               	movwf	(??_sprintf+1)& (0+255),b
  1978  000B1A  0100               	movlb	0	; () banked
  1979  000B1C  C08C  F06E         	movff	sprintf@fval,??_sprintf+2
  1980  000B20  0100               	movlb	0	; () banked
  1981  000B22  C08D  F06F         	movff	sprintf@fval+1,??_sprintf+3
  1982  000B26  0100               	movlb	0	; () banked
  1983  000B28  C08E  F070         	movff	sprintf@fval+2,??_sprintf+4
  1984  000B2C  0100               	movlb	0	; () banked
  1985  000B2E  C08F  F071         	movff	sprintf@fval+3,??_sprintf+5
  1986  000B32  0E10               	movlw	16
  1987  000B34  D006               	goto	u2900
  1988  000B36                     u2905:
  1989  000B36  0100               	movlb	0	; () banked
  1990  000B38  90D8               	bcf	status,0,c
  1991  000B3A  3371               	rrcf	(??_sprintf+5)& (0+255),f,b
  1992  000B3C  3370               	rrcf	(??_sprintf+4)& (0+255),f,b
  1993  000B3E  336F               	rrcf	(??_sprintf+3)& (0+255),f,b
  1994  000B40  336E               	rrcf	(??_sprintf+2)& (0+255),f,b
  1995  000B42                     u2900:
  1996  000B42  2EE8               	decfsz	wreg,f,c
  1997  000B44  D7F8               	goto	u2905
  1998  000B46  0100               	movlb	0	; () banked
  1999  000B48  516E               	movf	(??_sprintf+2)& (0+255),w,b
  2000  000B4A  0100               	movlb	0	; () banked
  2001  000B4C  256C               	addwf	??_sprintf& (0+255),w,b
  2002  000B4E  0100               	movlb	0	; () banked
  2003  000B50  0100               	movlb	0	; () banked
  2004  000B52  6F84               	movwf	sprintf@exp& (0+255),b
  2005  000B54  0100               	movlb	0	; () banked
  2006  000B56  0100               	movlb	0	; () banked
  2007  000B58  0E00               	movlw	0
  2008  000B5A  216D               	addwfc	(??_sprintf+1)& (0+255),w,b
  2009  000B5C  6F85               	movwf	(sprintf@exp+1)& (0+255),b
  2010                           
  2011                           ; BSR set to: 0
  2012                           ;doprnt.c: 847: exp--;
  2013  000B5E  0100               	movlb	0	; () banked
  2014  000B60  0100               	movlb	0	; () banked
  2015  000B62  0784               	decf	sprintf@exp& (0+255),f,b
  2016  000B64  A0D8               	btfss	status,0,c
  2017  000B66  0785               	decf	(sprintf@exp+1)& (0+255),f,b
  2018                           
  2019                           ; BSR set to: 0
  2020                           ;doprnt.c: 848: exp *= 3;
  2021  000B68  C084  F011         	movff	sprintf@exp,?___wmul
  2022  000B6C  C085  F012         	movff	sprintf@exp+1,?___wmul+1
  2023  000B70  0E00               	movlw	0
  2024  000B72  6E14               	movwf	?___wmul+3,c
  2025  000B74  0E03               	movlw	3
  2026  000B76  6E13               	movwf	?___wmul+2,c
  2027  000B78  EC87  F014         	call	___wmul	;wreg free
  2028  000B7C  C011  F084         	movff	?___wmul,sprintf@exp
  2029  000B80  C012  F085         	movff	?___wmul+1,sprintf@exp+1
  2030                           
  2031                           ;doprnt.c: 849: exp /= 10;
  2032  000B84  C084  F008         	movff	sprintf@exp,?___awdiv
  2033  000B88  C085  F009         	movff	sprintf@exp+1,?___awdiv+1
  2034  000B8C  0E00               	movlw	0
  2035  000B8E  6E0B               	movwf	?___awdiv+3,c
  2036  000B90  0E0A               	movlw	10
  2037  000B92  6E0A               	movwf	?___awdiv+2,c
  2038  000B94  EC81  F011         	call	___awdiv	;wreg free
  2039  000B98  C008  F084         	movff	?___awdiv,sprintf@exp
  2040  000B9C  C009  F085         	movff	?___awdiv+1,sprintf@exp+1
  2041                           
  2042                           ;doprnt.c: 850: if(exp < 0)
  2043  000BA0  0100               	movlb	0	; () banked
  2044  000BA2  0100               	movlb	0	; () banked
  2045  000BA4  AF85               	btfss	(sprintf@exp+1)& (0+255),7,b
  2046  000BA6  D005               	goto	l4271
  2047                           
  2048                           ; BSR set to: 0
  2049                           ;doprnt.c: 851: exp--;
  2050  000BA8  0100               	movlb	0	; () banked
  2051  000BAA  0100               	movlb	0	; () banked
  2052  000BAC  0784               	decf	sprintf@exp& (0+255),f,b
  2053  000BAE  A0D8               	btfss	status,0,c
  2054  000BB0  0785               	decf	(sprintf@exp+1)& (0+255),f,b
  2055  000BB2                     l4271:
  2056                           
  2057                           ; BSR set to: 0
  2058                           ;doprnt.c: 855: integ = scale(-exp);
  2059  000BB2  0100               	movlb	0	; () banked
  2060  000BB4  0100               	movlb	0	; () banked
  2061  000BB6  5184               	movf	sprintf@exp& (0+255),w,b
  2062  000BB8  0800               	sublw	0
  2063  000BBA  6E37               	movwf	?_scale,c
  2064  000BBC  ECE9  F008         	call	_scale	;wreg free
  2065  000BC0  C039  F083         	movff	?_scale+2,sprintf@integ+2
  2066  000BC4  C038  F082         	movff	?_scale+1,sprintf@integ+1
  2067  000BC8  C037  F081         	movff	?_scale,sprintf@integ
  2068                           
  2069                           ;doprnt.c: 856: integ *= fval;
  2070  000BCC  0100               	movlb	0	; () banked
  2071  000BCE  0E00               	movlw	high sprintf@integ
  2072  000BD0  6E38               	movwf	?___asftmul+1,c
  2073  000BD2  0100               	movlb	0	; () banked
  2074  000BD4  0E81               	movlw	low sprintf@integ
  2075  000BD6  6E37               	movwf	?___asftmul,c
  2076  000BD8  C08C  F039         	movff	sprintf@fval,?___asftmul+2
  2077  000BDC  C08D  F03A         	movff	sprintf@fval+1,?___asftmul+3
  2078  000BE0  C08E  F03B         	movff	sprintf@fval+2,?___asftmul+4
  2079  000BE4  EC2E  F014         	call	___asftmul	;wreg free
  2080                           
  2081                           ;doprnt.c: 857: if(integ < 1.0)
  2082  000BE8  C081  F001         	movff	sprintf@integ,?___ftge
  2083  000BEC  C082  F002         	movff	sprintf@integ+1,?___ftge+1
  2084  000BF0  C083  F003         	movff	sprintf@integ+2,?___ftge+2
  2085  000BF4  0E00               	movlw	0
  2086  000BF6  6E04               	movwf	?___ftge+3,c
  2087  000BF8  0E80               	movlw	128
  2088  000BFA  6E05               	movwf	?___ftge+4,c
  2089  000BFC  0E3F               	movlw	63
  2090  000BFE  6E06               	movwf	?___ftge+5,c
  2091  000C00  EC39  F011         	call	___ftge	;wreg free
  2092  000C04  B0D8               	btfsc	status,0,c
  2093  000C06  D006               	goto	l4279
  2094                           
  2095                           ;doprnt.c: 858: exp--;
  2096  000C08  0100               	movlb	0	; () banked
  2097  000C0A  0100               	movlb	0	; () banked
  2098  000C0C  0784               	decf	sprintf@exp& (0+255),f,b
  2099  000C0E  A0D8               	btfss	status,0,c
  2100  000C10  0785               	decf	(sprintf@exp+1)& (0+255),f,b
  2101  000C12  D014               	goto	l4283
  2102  000C14                     l4279:
  2103                           
  2104                           ;doprnt.c: 859: else if(integ >= 10.0)
  2105  000C14  C081  F001         	movff	sprintf@integ,?___ftge
  2106  000C18  C082  F002         	movff	sprintf@integ+1,?___ftge+1
  2107  000C1C  C083  F003         	movff	sprintf@integ+2,?___ftge+2
  2108  000C20  0E00               	movlw	0
  2109  000C22  6E04               	movwf	?___ftge+3,c
  2110  000C24  0E20               	movlw	32
  2111  000C26  6E05               	movwf	?___ftge+4,c
  2112  000C28  0E41               	movlw	65
  2113  000C2A  6E06               	movwf	?___ftge+5,c
  2114  000C2C  EC39  F011         	call	___ftge	;wreg free
  2115  000C30  A0D8               	btfss	status,0,c
  2116  000C32  D004               	goto	l4283
  2117                           
  2118                           ;doprnt.c: 860: exp++;
  2119  000C34  0100               	movlb	0	; () banked
  2120  000C36  0100               	movlb	0	; () banked
  2121  000C38  4B84               	infsnz	sprintf@exp& (0+255),f,b
  2122  000C3A  2B85               	incf	(sprintf@exp+1)& (0+255),f,b
  2123  000C3C                     l4283:
  2124                           
  2125                           ;doprnt.c: 861: }
  2126                           ;doprnt.c: 1121: if(prec <= 12)
  2127  000C3C  0100               	movlb	0	; () banked
  2128  000C3E  0100               	movlb	0	; () banked
  2129  000C40  518B               	movf	(sprintf@prec+1)& (0+255),w,b
  2130  000C42  0A80               	xorlw	128
  2131  000C44  0F80               	addlw	-128
  2132  000C46  0E0D               	movlw	13
  2133  000C48  B4D8               	btfsc	status,2,c
  2134  000C4A  5D8A               	subwf	sprintf@prec& (0+255),w,b
  2135  000C4C  B0D8               	btfsc	status,0,c
  2136  000C4E  D012               	goto	l4287
  2137                           
  2138                           ; BSR set to: 0
  2139                           ;doprnt.c: 1122: fval += fround(prec);
  2140  000C50  0100               	movlb	0	; () banked
  2141  000C52  0E00               	movlw	high sprintf@fval
  2142  000C54  6E57               	movwf	?___asftadd+1,c
  2143  000C56  0100               	movlb	0	; () banked
  2144  000C58  0E8C               	movlw	low sprintf@fval
  2145  000C5A  6E56               	movwf	?___asftadd,c
  2146  000C5C  C08A  F037         	movff	sprintf@prec,?_fround
  2147  000C60  EC11  F00B         	call	_fround	;wreg free
  2148  000C64  C039  F05A         	movff	?_fround+2,?___asftadd+4
  2149  000C68  C038  F059         	movff	?_fround+1,?___asftadd+3
  2150  000C6C  C037  F058         	movff	?_fround,?___asftadd+2
  2151  000C70  EC4C  F014         	call	___asftadd	;wreg free
  2152  000C74                     l4287:
  2153                           
  2154                           ;doprnt.c: 1125: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2155  000C74  0100               	movlb	0	; () banked
  2156  000C76  0100               	movlb	0	; () banked
  2157  000C78  5185               	movf	(sprintf@exp+1)& (0+255),w,b
  2158  000C7A  0A80               	xorlw	128
  2159  000C7C  0F80               	addlw	-128
  2160  000C7E  0E0A               	movlw	10
  2161  000C80  B4D8               	btfsc	status,2,c
  2162  000C82  5D84               	subwf	sprintf@exp& (0+255),w,b
  2163  000C84  B0D8               	btfsc	status,0,c
  2164  000C86  D022               	goto	l4295
  2165                           
  2166                           ; BSR set to: 0
  2167  000C88  0E7F               	movlw	127
  2168  000C8A  0100               	movlb	0	; () banked
  2169  000C8C  0100               	movlb	0	; () banked
  2170  000C8E  158E               	andwf	(sprintf@fval+2)& (0+255),w,b
  2171  000C90  0100               	movlb	0	; () banked
  2172  000C92  118D               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2173  000C94  0100               	movlb	0	; () banked
  2174  000C96  118C               	iorwf	sprintf@fval& (0+255),w,b
  2175  000C98  B4D8               	btfsc	status,2,c
  2176  000C9A  D067               	goto	l4311
  2177                           
  2178                           ; BSR set to: 0
  2179  000C9C  C08C  F017         	movff	sprintf@fval,?___fttol
  2180  000CA0  C08D  F018         	movff	sprintf@fval+1,?___fttol+1
  2181  000CA4  C08E  F019         	movff	sprintf@fval+2,?___fttol+2
  2182  000CA8  EC49  F00F         	call	___fttol	;wreg free
  2183  000CAC  501A               	movf	?___fttol+3,w,c
  2184  000CAE  1017               	iorwf	?___fttol,w,c
  2185  000CB0  1018               	iorwf	?___fttol+1,w,c
  2186  000CB2  1019               	iorwf	?___fttol+2,w,c
  2187  000CB4  A4D8               	btfss	status,2,c
  2188  000CB6  D059               	goto	l4311
  2189  000CB8  0100               	movlb	0	; () banked
  2190  000CBA  0100               	movlb	0	; () banked
  2191  000CBC  5185               	movf	(sprintf@exp+1)& (0+255),w,b
  2192  000CBE  0A80               	xorlw	128
  2193  000CC0  0F80               	addlw	-128
  2194  000CC2  0E02               	movlw	2
  2195  000CC4  B4D8               	btfsc	status,2,c
  2196  000CC6  5D84               	subwf	sprintf@exp& (0+255),w,b
  2197  000CC8  A0D8               	btfss	status,0,c
  2198  000CCA  D04F               	goto	l4311
  2199  000CCC                     l4295:
  2200                           
  2201                           ; BSR set to: 0
  2202                           ;doprnt.c: 1129: if(integ < 4.294967296){
  2203  000CCC  C081  F001         	movff	sprintf@integ,?___ftge
  2204  000CD0  C082  F002         	movff	sprintf@integ+1,?___ftge+1
  2205  000CD4  C083  F003         	movff	sprintf@integ+2,?___ftge+2
  2206  000CD8  0E70               	movlw	112
  2207  000CDA  6E04               	movwf	?___ftge+3,c
  2208  000CDC  0E89               	movlw	137
  2209  000CDE  6E05               	movwf	?___ftge+4,c
  2210  000CE0  0E40               	movlw	64
  2211  000CE2  6E06               	movwf	?___ftge+5,c
  2212  000CE4  EC39  F011         	call	___ftge	;wreg free
  2213  000CE8  B0D8               	btfsc	status,0,c
  2214  000CEA  D003               	goto	l4299
  2215                           
  2216                           ;doprnt.c: 1130: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2217  000CEC  0100               	movlb	0	; () banked
  2218  000CEE  0EF7               	movlw	247
  2219  000CF0  D002               	goto	L2
  2220  000CF2                     l4299:
  2221                           
  2222                           ;doprnt.c: 1132: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2223  000CF2  0100               	movlb	0	; () banked
  2224  000CF4  0EF8               	movlw	248
  2225  000CF6                     L2:
  2226  000CF6  0100               	movlb	0	; () banked
  2227  000CF8  2784               	addwf	sprintf@exp& (0+255),f,b
  2228  000CFA  0EFF               	movlw	255
  2229  000CFC  0100               	movlb	0	; () banked
  2230  000CFE  2385               	addwfc	(sprintf@exp+1)& (0+255),f,b
  2231                           
  2232                           ; BSR set to: 0
  2233                           ;doprnt.c: 1133: }
  2234                           ;doprnt.c: 1134: integ = scale(exp);
  2235                           
  2236                           ; BSR set to: 0
  2237  000D00  C084  F037         	movff	sprintf@exp,?_scale
  2238  000D04  ECE9  F008         	call	_scale	;wreg free
  2239  000D08  C039  F083         	movff	?_scale+2,sprintf@integ+2
  2240  000D0C  C038  F082         	movff	?_scale+1,sprintf@integ+1
  2241  000D10  C037  F081         	movff	?_scale,sprintf@integ
  2242                           
  2243                           ;doprnt.c: 1135: _val._val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,integ) : _div_to_l
      +                          _(fval,integ));
  2244  000D14  C08C  F001         	movff	sprintf@fval,?__tdiv_to_l_
  2245  000D18  C08D  F002         	movff	sprintf@fval+1,?__tdiv_to_l_+1
  2246  000D1C  C08E  F003         	movff	sprintf@fval+2,?__tdiv_to_l_+2
  2247  000D20  C081  F004         	movff	sprintf@integ,?__tdiv_to_l_+3
  2248  000D24  C082  F005         	movff	sprintf@integ+1,?__tdiv_to_l_+4
  2249  000D28  C083  F006         	movff	sprintf@integ+2,?__tdiv_to_l_+5
  2250  000D2C  EC37  F00D         	call	__tdiv_to_l_	;wreg free
  2251  000D30  C004  F078         	movff	?__tdiv_to_l_+3,_sprintf$595+3
  2252  000D34  C003  F077         	movff	?__tdiv_to_l_+2,_sprintf$595+2
  2253  000D38  C002  F076         	movff	?__tdiv_to_l_+1,_sprintf$595+1
  2254  000D3C  C001  F075         	movff	?__tdiv_to_l_,_sprintf$595
  2255  000D40  C075  F086         	movff	_sprintf$595,sprintf@_val
  2256  000D44  C076  F087         	movff	_sprintf$595+1,sprintf@_val+1
  2257  000D48  C077  F088         	movff	_sprintf$595+2,sprintf@_val+2
  2258  000D4C  C078  F089         	movff	_sprintf$595+3,sprintf@_val+3
  2259                           
  2260                           ;doprnt.c: 1138: fval = 0.0;
  2261  000D50  0E00               	movlw	0
  2262  000D52  0100               	movlb	0	; () banked
  2263  000D54  0100               	movlb	0	; () banked
  2264  000D56  6F8C               	movwf	sprintf@fval& (0+255),b
  2265  000D58  0E00               	movlw	0
  2266  000D5A  0100               	movlb	0	; () banked
  2267  000D5C  0100               	movlb	0	; () banked
  2268  000D5E  6F8D               	movwf	(sprintf@fval+1)& (0+255),b
  2269  000D60  0E00               	movlw	0
  2270  000D62  0100               	movlb	0	; () banked
  2271  000D64  0100               	movlb	0	; () banked
  2272  000D66  6F8E               	movwf	(sprintf@fval+2)& (0+255),b
  2273                           
  2274                           ;doprnt.c: 1139: } else {
  2275  000D68  D032               	goto	l4317
  2276  000D6A                     l4311:
  2277                           
  2278                           ;doprnt.c: 1140: _val._val = (unsigned long)fval;
  2279  000D6A  C08C  F017         	movff	sprintf@fval,?___fttol
  2280  000D6E  C08D  F018         	movff	sprintf@fval+1,?___fttol+1
  2281  000D72  C08E  F019         	movff	sprintf@fval+2,?___fttol+2
  2282  000D76  EC49  F00F         	call	___fttol	;wreg free
  2283  000D7A  C01A  F089         	movff	?___fttol+3,sprintf@_val+3
  2284  000D7E  C019  F088         	movff	?___fttol+2,sprintf@_val+2
  2285  000D82  C018  F087         	movff	?___fttol+1,sprintf@_val+1
  2286  000D86  C017  F086         	movff	?___fttol,sprintf@_val
  2287                           
  2288                           ;doprnt.c: 1141: fval -= (double)_val._val;
  2289  000D8A  0100               	movlb	0	; () banked
  2290  000D8C  0E00               	movlw	high sprintf@fval
  2291  000D8E  0100               	movlb	0	; () banked
  2292  000D90  0100               	movlb	0	; () banked
  2293  000D92  6F61               	movwf	(?___asftsub+1)& (0+255),b
  2294  000D94  0100               	movlb	0	; () banked
  2295  000D96  0E8C               	movlw	low sprintf@fval
  2296  000D98  0100               	movlb	0	; () banked
  2297  000D9A  6F60               	movwf	?___asftsub& (0+255),b
  2298  000D9C  C086  F009         	movff	sprintf@_val,?___lltoft
  2299  000DA0  C087  F00A         	movff	sprintf@_val+1,?___lltoft+1
  2300  000DA4  C088  F00B         	movff	sprintf@_val+2,?___lltoft+2
  2301  000DA8  C089  F00C         	movff	sprintf@_val+3,?___lltoft+3
  2302  000DAC  EC43  F013         	call	___lltoft	;wreg free
  2303  000DB0  C00B  F064         	movff	?___lltoft+2,?___asftsub+4
  2304  000DB4  C00A  F063         	movff	?___lltoft+1,?___asftsub+3
  2305  000DB8  C009  F062         	movff	?___lltoft,?___asftsub+2
  2306  000DBC  EC10  F014         	call	___asftsub	;wreg free
  2307                           
  2308                           ;doprnt.c: 1142: exp = 0;
  2309  000DC0  0E00               	movlw	0
  2310  000DC2  0100               	movlb	0	; () banked
  2311  000DC4  0100               	movlb	0	; () banked
  2312  000DC6  6F85               	movwf	(sprintf@exp+1)& (0+255),b
  2313  000DC8  0E00               	movlw	0
  2314  000DCA  0100               	movlb	0	; () banked
  2315  000DCC  6F84               	movwf	sprintf@exp& (0+255),b
  2316  000DCE                     l4317:
  2317                           
  2318                           ; BSR set to: 0
  2319                           ;doprnt.c: 1143: }
  2320                           ;doprnt.c: 1145: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2321  000DCE  0100               	movlb	0	; () banked
  2322  000DD0  6F6C               	movwf	??_sprintf& (0+255),b
  2323  000DD2  0E01               	movlw	1
  2324  000DD4  0100               	movlb	0	; () banked
  2325  000DD6  0100               	movlb	0	; () banked
  2326  000DD8  6F8F               	movwf	sprintf@c& (0+255),b
  2327  000DDA  0100               	movlb	0	; () banked
  2328  000DDC  516C               	movf	??_sprintf& (0+255),w,b
  2329  000DDE                     
  2330                           ; BSR set to: 0
  2331  000DDE  0100               	movlb	0	; () banked
  2332  000DE0  0100               	movlb	0	; () banked
  2333  000DE2  518F               	movf	sprintf@c& (0+255),w,b
  2334  000DE4  0A0A               	xorlw	10
  2335  000DE6  B4D8               	btfsc	status,2,c
  2336  000DE8  D021               	goto	l4331
  2337                           
  2338                           ; BSR set to: 0
  2339                           ;doprnt.c: 1146: if(_val._val < dpowers[c])
  2340                           
  2341                           ; BSR set to: 0
  2342                           
  2343                           ; BSR set to: 0
  2344  000DEA  0100               	movlb	0	; () banked
  2345  000DEC  0100               	movlb	0	; () banked
  2346  000DEE  518F               	movf	sprintf@c& (0+255),w,b
  2347  000DF0  0D04               	mullw	4
  2348  000DF2  0E00               	movlw	low _dpowers
  2349  000DF4  24F3               	addwf	prodl,w,c
  2350  000DF6  6EF6               	movwf	tblptrl,c
  2351  000DF8  0E08               	movlw	high _dpowers
  2352  000DFA  20F4               	addwfc	prodh,w,c
  2353  000DFC  6EF7               	movwf	tblptrh,c
  2354  000DFE  0009               	tblrd		*+
  2355  000E00  50F5               	movf	tablat,w,c
  2356  000E02  0100               	movlb	0	; () banked
  2357  000E04  0100               	movlb	0	; () banked
  2358  000E06  5D86               	subwf	sprintf@_val& (0+255),w,b
  2359  000E08  0009               	tblrd		*+
  2360  000E0A  50F5               	movf	tablat,w,c
  2361  000E0C  0100               	movlb	0	; () banked
  2362  000E0E  5987               	subwfb	(sprintf@_val+1)& (0+255),w,b
  2363  000E10  0009               	tblrd		*+
  2364  000E12  50F5               	movf	tablat,w,c
  2365  000E14  0100               	movlb	0	; () banked
  2366  000E16  5988               	subwfb	(sprintf@_val+2)& (0+255),w,b
  2367  000E18  0009               	tblrd		*+
  2368  000E1A  50F5               	movf	tablat,w,c
  2369  000E1C  0100               	movlb	0	; () banked
  2370  000E1E  5989               	subwfb	(sprintf@_val+3)& (0+255),w,b
  2371  000E20  A0D8               	btfss	status,0,c
  2372  000E22  D004               	goto	l4331
  2373                           
  2374                           ; BSR set to: 0
  2375                           
  2376                           ; BSR set to: 0
  2377                           
  2378                           ; BSR set to: 0
  2379                           ;doprnt.c: 1147: break;
  2380  000E24  0100               	movlb	0	; () banked
  2381  000E26  0100               	movlb	0	; () banked
  2382  000E28  2B8F               	incf	sprintf@c& (0+255),f,b
  2383  000E2A  D7D9               	goto	L3
  2384  000E2C                     l4331:
  2385                           
  2386                           ; BSR set to: 0
  2387                           ;doprnt.c: 1182: {
  2388                           ;doprnt.c: 1195: if(flag & 0x03)
  2389  000E2C  0E03               	movlw	3
  2390  000E2E  0100               	movlb	0	; () banked
  2391  000E30  0100               	movlb	0	; () banked
  2392  000E32  157F               	andwf	sprintf@flag& (0+255),w,b
  2393  000E34  0100               	movlb	0	; () banked
  2394  000E36  6F6C               	movwf	??_sprintf& (0+255),b
  2395  000E38  0E00               	movlw	0
  2396  000E3A  0100               	movlb	0	; () banked
  2397  000E3C  0100               	movlb	0	; () banked
  2398  000E3E  1580               	andwf	(sprintf@flag+1)& (0+255),w,b
  2399  000E40  0100               	movlb	0	; () banked
  2400  000E42  6F6D               	movwf	(??_sprintf+1)& (0+255),b
  2401  000E44  0100               	movlb	0	; () banked
  2402  000E46  516D               	movf	(??_sprintf+1)& (0+255),w,b
  2403  000E48  116C               	iorwf	??_sprintf& (0+255),w,b
  2404  000E4A  B4D8               	btfsc	status,2,c
  2405  000E4C  D045               	goto	l4345
  2406                           
  2407                           ; BSR set to: 0
  2408                           ;doprnt.c: 1197: ((*sp++ = ('-')));
  2409  000E4E  C065  FFD9         	movff	sprintf@sp,fsr2l
  2410  000E52  C066  FFDA         	movff	sprintf@sp+1,fsr2h
  2411  000E56  0E2D               	movlw	45
  2412  000E58  D03A               	goto	L4
  2413  000E5A                     l4337:
  2414                           
  2415                           ; BSR set to: 0
  2416                           ;doprnt.c: 1207: {
  2417                           ;doprnt.c: 1208: unsigned vd = _val._val/dpowers[c];
  2418  000E5A  C086  F001         	movff	sprintf@_val,?___lldiv
  2419  000E5E  C087  F002         	movff	sprintf@_val+1,?___lldiv+1
  2420  000E62  C088  F003         	movff	sprintf@_val+2,?___lldiv+2
  2421  000E66  C089  F004         	movff	sprintf@_val+3,?___lldiv+3
  2422  000E6A  0100               	movlb	0	; () banked
  2423  000E6C  0100               	movlb	0	; () banked
  2424  000E6E  518F               	movf	sprintf@c& (0+255),w,b
  2425  000E70  0D04               	mullw	4
  2426  000E72  0E00               	movlw	low _dpowers
  2427  000E74  24F3               	addwf	prodl,w,c
  2428  000E76  6EF6               	movwf	tblptrl,c
  2429  000E78  0E08               	movlw	high _dpowers
  2430  000E7A  20F4               	addwfc	prodh,w,c
  2431  000E7C  6EF7               	movwf	tblptrh,c
  2432  000E7E  0009               	tblrd		*+
  2433  000E80  CFF5 F005          	movff	tablat,?___lldiv+4
  2434  000E84  0009               	tblrd		*+
  2435  000E86  CFF5 F006          	movff	tablat,?___lldiv+5
  2436  000E8A  0009               	tblrd		*+
  2437  000E8C  CFF5 F007          	movff	tablat,?___lldiv+6
  2438  000E90  000A               	tblrd		*-
  2439  000E92  CFF5 F008          	movff	tablat,?___lldiv+7
  2440  000E96  ECC9  F011         	call	___lldiv	;wreg free
  2441  000E9A  C001  F079         	movff	?___lldiv,sprintf@vd
  2442  000E9E  C002  F07A         	movff	?___lldiv+1,sprintf@vd+1
  2443                           
  2444                           ;doprnt.c: 1209: vd %= 10;
  2445  000EA2  C079  F001         	movff	sprintf@vd,?___lwmod
  2446  000EA6  C07A  F002         	movff	sprintf@vd+1,?___lwmod+1
  2447  000EAA  0E00               	movlw	0
  2448  000EAC  6E04               	movwf	?___lwmod+3,c
  2449  000EAE  0E0A               	movlw	10
  2450  000EB0  6E03               	movwf	?___lwmod+2,c
  2451  000EB2  ECCB  F013         	call	___lwmod	;wreg free
  2452  000EB6  C001  F079         	movff	?___lwmod,sprintf@vd
  2453  000EBA  C002  F07A         	movff	?___lwmod+1,sprintf@vd+1
  2454                           
  2455                           ;doprnt.c: 1210: ((*sp++ = ('0' + vd)));
  2456  000EBE  0100               	movlb	0	; () banked
  2457  000EC0  0100               	movlb	0	; () banked
  2458  000EC2  5179               	movf	sprintf@vd& (0+255),w,b
  2459  000EC4  0F30               	addlw	48
  2460  000EC6  C065  FFD9         	movff	sprintf@sp,fsr2l
  2461  000ECA  C066  FFDA         	movff	sprintf@sp+1,fsr2h
  2462  000ECE                     L4:
  2463  000ECE  6EDF               	movwf	indf2,c
  2464                           
  2465                           ; BSR set to: 0
  2466  000ED0  0100               	movlb	0	; () banked
  2467  000ED2  0100               	movlb	0	; () banked
  2468  000ED4  4B65               	infsnz	sprintf@sp& (0+255),f,b
  2469  000ED6  2B66               	incf	(sprintf@sp+1)& (0+255),f,b
  2470  000ED8                     l4345:
  2471                           
  2472                           ; BSR set to: 0
  2473  000ED8  0100               	movlb	0	; () banked
  2474  000EDA  0100               	movlb	0	; () banked
  2475  000EDC  078F               	decf	sprintf@c& (0+255),f,b
  2476  000EDE  0100               	movlb	0	; () banked
  2477  000EE0  298F               	incf	sprintf@c& (0+255),w,b
  2478  000EE2  B4D8               	btfsc	status,2,c
  2479  000EE4  D010               	goto	l4353
  2480  000EE6  D7B9               	goto	l4337
  2481  000EE8                     l4347:
  2482                           
  2483                           ; BSR set to: 0
  2484                           ;doprnt.c: 1215: ((*sp++ = ('0')));
  2485  000EE8  C065  FFD9         	movff	sprintf@sp,fsr2l
  2486  000EEC  C066  FFDA         	movff	sprintf@sp+1,fsr2h
  2487  000EF0  0E30               	movlw	48
  2488  000EF2  6EDF               	movwf	indf2,c
  2489                           
  2490                           ; BSR set to: 0
  2491  000EF4  0100               	movlb	0	; () banked
  2492  000EF6  0100               	movlb	0	; () banked
  2493  000EF8  4B65               	infsnz	sprintf@sp& (0+255),f,b
  2494  000EFA  2B66               	incf	(sprintf@sp+1)& (0+255),f,b
  2495                           
  2496                           ; BSR set to: 0
  2497                           ;doprnt.c: 1216: exp--;
  2498  000EFC  0100               	movlb	0	; () banked
  2499  000EFE  0100               	movlb	0	; () banked
  2500  000F00  0784               	decf	sprintf@exp& (0+255),f,b
  2501  000F02  A0D8               	btfss	status,0,c
  2502  000F04  0785               	decf	(sprintf@exp+1)& (0+255),f,b
  2503  000F06                     l4353:
  2504                           
  2505                           ; BSR set to: 0
  2506  000F06  0100               	movlb	0	; () banked
  2507  000F08  0100               	movlb	0	; () banked
  2508  000F0A  5185               	movf	(sprintf@exp+1)& (0+255),w,b
  2509  000F0C  0A80               	xorlw	128
  2510  000F0E  0F80               	addlw	-128
  2511  000F10  0E01               	movlw	1
  2512  000F12  B4D8               	btfsc	status,2,c
  2513  000F14  5D84               	subwf	sprintf@exp& (0+255),w,b
  2514  000F16  B0D8               	btfsc	status,0,c
  2515  000F18  D7E7               	goto	l4347
  2516                           
  2517                           ; BSR set to: 0
  2518                           ;doprnt.c: 1217: }
  2519                           ;doprnt.c: 1218: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2520                           
  2521                           ; BSR set to: 0
  2522  000F1A  0100               	movlb	0	; () banked
  2523  000F1C  0100               	movlb	0	; () banked
  2524  000F1E  518B               	movf	(sprintf@prec+1)& (0+255),w,b
  2525  000F20  0A80               	xorlw	128
  2526  000F22  0F80               	addlw	-128
  2527  000F24  0E09               	movlw	9
  2528  000F26  B4D8               	btfsc	status,2,c
  2529  000F28  5D8A               	subwf	sprintf@prec& (0+255),w,b
  2530  000F2A  A0D8               	btfss	status,0,c
  2531  000F2C  D009               	goto	l271
  2532                           
  2533                           ; BSR set to: 0
  2534                           ;doprnt.c: 1219: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2535  000F2E  0100               	movlb	0	; () banked
  2536  000F30  6F6C               	movwf	??_sprintf& (0+255),b
  2537  000F32  0E08               	movlw	8
  2538  000F34  0100               	movlb	0	; () banked
  2539  000F36  0100               	movlb	0	; () banked
  2540  000F38  6F8F               	movwf	sprintf@c& (0+255),b
  2541  000F3A  0100               	movlb	0	; () banked
  2542  000F3C  516C               	movf	??_sprintf& (0+255),w,b
  2543  000F3E  D002               	goto	l4359
  2544  000F40                     l271:
  2545                           
  2546                           ; BSR set to: 0
  2547                           ;doprnt.c: 1220: else
  2548                           ;doprnt.c: 1221: c = prec;
  2549  000F40  C08A  F08F         	movff	sprintf@prec,sprintf@c
  2550  000F44                     l4359:
  2551                           
  2552                           ; BSR set to: 0
  2553                           ;doprnt.c: 1222: prec -= c;
  2554  000F44  0100               	movlb	0	; () banked
  2555  000F46  0100               	movlb	0	; () banked
  2556  000F48  518F               	movf	sprintf@c& (0+255),w,b
  2557  000F4A  0100               	movlb	0	; () banked
  2558  000F4C  0100               	movlb	0	; () banked
  2559  000F4E  5F8A               	subwf	sprintf@prec& (0+255),f,b
  2560  000F50  0E00               	movlw	0
  2561  000F52  0100               	movlb	0	; () banked
  2562  000F54  BF8F               	btfsc	sprintf@c& (0+255),7,b
  2563  000F56  0EFF               	movlw	255
  2564  000F58  0100               	movlb	0	; () banked
  2565  000F5A  0100               	movlb	0	; () banked
  2566  000F5C  5B8B               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2567                           
  2568                           ; BSR set to: 0
  2569                           ;doprnt.c: 1226: if(c)
  2570  000F5E  0100               	movlb	0	; () banked
  2571  000F60  0100               	movlb	0	; () banked
  2572  000F62  518F               	movf	sprintf@c& (0+255),w,b
  2573  000F64  B4D8               	btfsc	status,2,c
  2574  000F66  D00A               	goto	l4367
  2575                           
  2576                           ; BSR set to: 0
  2577                           ;doprnt.c: 1228: ((*sp++ = ('.')));
  2578  000F68  C065  FFD9         	movff	sprintf@sp,fsr2l
  2579  000F6C  C066  FFDA         	movff	sprintf@sp+1,fsr2h
  2580  000F70  0E2E               	movlw	46
  2581  000F72  6EDF               	movwf	indf2,c
  2582                           
  2583                           ; BSR set to: 0
  2584  000F74  0100               	movlb	0	; () banked
  2585  000F76  0100               	movlb	0	; () banked
  2586  000F78  4B65               	infsnz	sprintf@sp& (0+255),f,b
  2587  000F7A  2B66               	incf	(sprintf@sp+1)& (0+255),f,b
  2588  000F7C                     l4367:
  2589                           
  2590                           ; BSR set to: 0
  2591                           ;doprnt.c: 1234: _val._val = (long)(fval * scale(c));
  2592  000F7C  C08F  F037         	movff	sprintf@c,?_scale
  2593  000F80  ECE9  F008         	call	_scale	;wreg free
  2594  000F84  C039  F074         	movff	?_scale+2,_sprintf$1212+2
  2595  000F88  C038  F073         	movff	?_scale+1,_sprintf$1212+1
  2596  000F8C  C037  F072         	movff	?_scale,_sprintf$1212
  2597                           
  2598                           ;doprnt.c: 1234: _val._val = (long)(fval * scale(c));
  2599  000F90  C08C  F029         	movff	sprintf@fval,?___ftmul+3
  2600  000F94  C08D  F02A         	movff	sprintf@fval+1,?___ftmul+4
  2601  000F98  C08E  F02B         	movff	sprintf@fval+2,?___ftmul+5
  2602  000F9C  C072  F026         	movff	_sprintf$1212,?___ftmul
  2603  000FA0  C073  F027         	movff	_sprintf$1212+1,?___ftmul+1
  2604  000FA4  C074  F028         	movff	_sprintf$1212+2,?___ftmul+2
  2605  000FA8  ECC8  F00D         	call	___ftmul	;wreg free
  2606  000FAC  C028  F019         	movff	?___ftmul+2,?___fttol+2
  2607  000FB0  C027  F018         	movff	?___ftmul+1,?___fttol+1
  2608  000FB4  C026  F017         	movff	?___ftmul,?___fttol
  2609  000FB8  EC49  F00F         	call	___fttol	;wreg free
  2610  000FBC  C01A  F089         	movff	?___fttol+3,sprintf@_val+3
  2611  000FC0  C019  F088         	movff	?___fttol+2,sprintf@_val+2
  2612  000FC4  C018  F087         	movff	?___fttol+1,sprintf@_val+1
  2613  000FC8  C017  F086         	movff	?___fttol,sprintf@_val
  2614                           
  2615                           ;doprnt.c: 1235: while(c--) {
  2616  000FCC  D067               	goto	l4381
  2617  000FCE                     l4371:
  2618                           
  2619                           ;doprnt.c: 1236: unsigned vd = _val._val/dpowers[c];
  2620  000FCE  C086  F001         	movff	sprintf@_val,?___lldiv
  2621  000FD2  C087  F002         	movff	sprintf@_val+1,?___lldiv+1
  2622  000FD6  C088  F003         	movff	sprintf@_val+2,?___lldiv+2
  2623  000FDA  C089  F004         	movff	sprintf@_val+3,?___lldiv+3
  2624  000FDE  0100               	movlb	0	; () banked
  2625  000FE0  0100               	movlb	0	; () banked
  2626  000FE2  518F               	movf	sprintf@c& (0+255),w,b
  2627  000FE4  0D04               	mullw	4
  2628  000FE6  0E00               	movlw	low _dpowers
  2629  000FE8  24F3               	addwf	prodl,w,c
  2630  000FEA  6EF6               	movwf	tblptrl,c
  2631  000FEC  0E08               	movlw	high _dpowers
  2632  000FEE  20F4               	addwfc	prodh,w,c
  2633  000FF0  6EF7               	movwf	tblptrh,c
  2634  000FF2  0009               	tblrd		*+
  2635  000FF4  CFF5 F005          	movff	tablat,?___lldiv+4
  2636  000FF8  0009               	tblrd		*+
  2637  000FFA  CFF5 F006          	movff	tablat,?___lldiv+5
  2638  000FFE  0009               	tblrd		*+
  2639  001000  CFF5 F007          	movff	tablat,?___lldiv+6
  2640  001004  000A               	tblrd		*-
  2641  001006  CFF5 F008          	movff	tablat,?___lldiv+7
  2642  00100A  ECC9  F011         	call	___lldiv	;wreg free
  2643  00100E  C001  F07B         	movff	?___lldiv,sprintf@vd_597
  2644  001012  C002  F07C         	movff	?___lldiv+1,sprintf@vd_597+1
  2645                           
  2646                           ;doprnt.c: 1237: vd %= 10;
  2647  001016  C07B  F001         	movff	sprintf@vd_597,?___lwmod
  2648  00101A  C07C  F002         	movff	sprintf@vd_597+1,?___lwmod+1
  2649  00101E  0E00               	movlw	0
  2650  001020  6E04               	movwf	?___lwmod+3,c
  2651  001022  0E0A               	movlw	10
  2652  001024  6E03               	movwf	?___lwmod+2,c
  2653  001026  ECCB  F013         	call	___lwmod	;wreg free
  2654  00102A  C001  F07B         	movff	?___lwmod,sprintf@vd_597
  2655  00102E  C002  F07C         	movff	?___lwmod+1,sprintf@vd_597+1
  2656                           
  2657                           ;doprnt.c: 1238: ((*sp++ = ('0' + vd)));
  2658  001032  0100               	movlb	0	; () banked
  2659  001034  0100               	movlb	0	; () banked
  2660  001036  517B               	movf	sprintf@vd_597& (0+255),w,b
  2661  001038  0F30               	addlw	48
  2662  00103A  C065  FFD9         	movff	sprintf@sp,fsr2l
  2663  00103E  C066  FFDA         	movff	sprintf@sp+1,fsr2h
  2664  001042  6EDF               	movwf	indf2,c
  2665                           
  2666                           ; BSR set to: 0
  2667  001044  0100               	movlb	0	; () banked
  2668  001046  0100               	movlb	0	; () banked
  2669  001048  4B65               	infsnz	sprintf@sp& (0+255),f,b
  2670  00104A  2B66               	incf	(sprintf@sp+1)& (0+255),f,b
  2671                           
  2672                           ; BSR set to: 0
  2673                           ;doprnt.c: 1239: _val._val %= dpowers[c];
  2674  00104C  C086  F001         	movff	sprintf@_val,?___llmod
  2675  001050  C087  F002         	movff	sprintf@_val+1,?___llmod+1
  2676  001054  C088  F003         	movff	sprintf@_val+2,?___llmod+2
  2677  001058  C089  F004         	movff	sprintf@_val+3,?___llmod+3
  2678  00105C  0100               	movlb	0	; () banked
  2679  00105E  0100               	movlb	0	; () banked
  2680  001060  518F               	movf	sprintf@c& (0+255),w,b
  2681  001062  0D04               	mullw	4
  2682  001064  0E00               	movlw	low _dpowers
  2683  001066  24F3               	addwf	prodl,w,c
  2684  001068  6EF6               	movwf	tblptrl,c
  2685  00106A  0E08               	movlw	high _dpowers
  2686  00106C  20F4               	addwfc	prodh,w,c
  2687  00106E  6EF7               	movwf	tblptrh,c
  2688  001070  0009               	tblrd		*+
  2689  001072  CFF5 F005          	movff	tablat,?___llmod+4
  2690  001076  0009               	tblrd		*+
  2691  001078  CFF5 F006          	movff	tablat,?___llmod+5
  2692  00107C  0009               	tblrd		*+
  2693  00107E  CFF5 F007          	movff	tablat,?___llmod+6
  2694  001082  000A               	tblrd		*-
  2695  001084  CFF5 F008          	movff	tablat,?___llmod+7
  2696  001088  EC0E  F013         	call	___llmod	;wreg free
  2697  00108C  C004  F089         	movff	?___llmod+3,sprintf@_val+3
  2698  001090  C003  F088         	movff	?___llmod+2,sprintf@_val+2
  2699  001094  C002  F087         	movff	?___llmod+1,sprintf@_val+1
  2700  001098  C001  F086         	movff	?___llmod,sprintf@_val
  2701  00109C                     l4381:
  2702  00109C  0100               	movlb	0	; () banked
  2703  00109E  0100               	movlb	0	; () banked
  2704  0010A0  078F               	decf	sprintf@c& (0+255),f,b
  2705  0010A2  0100               	movlb	0	; () banked
  2706  0010A4  298F               	incf	sprintf@c& (0+255),w,b
  2707  0010A6  B4D8               	btfsc	status,2,c
  2708  0010A8  D010               	goto	l4389
  2709  0010AA  D791               	goto	l4371
  2710  0010AC                     l4383:
  2711                           
  2712                           ; BSR set to: 0
  2713                           ;doprnt.c: 1243: ((*sp++ = ('0')));
  2714  0010AC  C065  FFD9         	movff	sprintf@sp,fsr2l
  2715  0010B0  C066  FFDA         	movff	sprintf@sp+1,fsr2h
  2716  0010B4  0E30               	movlw	48
  2717  0010B6  6EDF               	movwf	indf2,c
  2718                           
  2719                           ; BSR set to: 0
  2720  0010B8  0100               	movlb	0	; () banked
  2721  0010BA  0100               	movlb	0	; () banked
  2722  0010BC  4B65               	infsnz	sprintf@sp& (0+255),f,b
  2723  0010BE  2B66               	incf	(sprintf@sp+1)& (0+255),f,b
  2724                           
  2725                           ; BSR set to: 0
  2726                           ;doprnt.c: 1244: prec--;
  2727  0010C0  0100               	movlb	0	; () banked
  2728  0010C2  0100               	movlb	0	; () banked
  2729  0010C4  078A               	decf	sprintf@prec& (0+255),f,b
  2730  0010C6  A0D8               	btfss	status,0,c
  2731  0010C8  078B               	decf	(sprintf@prec+1)& (0+255),f,b
  2732  0010CA                     l4389:
  2733                           
  2734                           ; BSR set to: 0
  2735  0010CA  0100               	movlb	0	; () banked
  2736  0010CC  0100               	movlb	0	; () banked
  2737  0010CE  518B               	movf	(sprintf@prec+1)& (0+255),w,b
  2738  0010D0  118A               	iorwf	sprintf@prec& (0+255),w,b
  2739  0010D2  B4D8               	btfsc	status,2,c
  2740  0010D4  D065               	goto	l4411
  2741  0010D6  D7EA               	goto	l4383
  2742  0010D8                     l4391:
  2743                           
  2744                           ; BSR set to: 0
  2745                           ;doprnt.c: 1253: }
  2746                           ;doprnt.c: 1297: if(prec == 0 && _val._val == 0)
  2747  0010D8  0100               	movlb	0	; () banked
  2748  0010DA  0100               	movlb	0	; () banked
  2749  0010DC  518B               	movf	(sprintf@prec+1)& (0+255),w,b
  2750  0010DE  118A               	iorwf	sprintf@prec& (0+255),w,b
  2751  0010E0  A4D8               	btfss	status,2,c
  2752  0010E2  D00C               	goto	l4397
  2753                           
  2754                           ; BSR set to: 0
  2755  0010E4  0100               	movlb	0	; () banked
  2756  0010E6  0100               	movlb	0	; () banked
  2757  0010E8  5189               	movf	(sprintf@_val+3)& (0+255),w,b
  2758  0010EA  1186               	iorwf	sprintf@_val& (0+255),w,b
  2759  0010EC  1187               	iorwf	(sprintf@_val+1)& (0+255),w,b
  2760  0010EE  1188               	iorwf	(sprintf@_val+2)& (0+255),w,b
  2761  0010F0  A4D8               	btfss	status,2,c
  2762  0010F2  D004               	goto	l4397
  2763                           
  2764                           ; BSR set to: 0
  2765                           ;doprnt.c: 1298: prec++;
  2766  0010F4  0100               	movlb	0	; () banked
  2767  0010F6  0100               	movlb	0	; () banked
  2768  0010F8  4B8A               	infsnz	sprintf@prec& (0+255),f,b
  2769  0010FA  2B8B               	incf	(sprintf@prec+1)& (0+255),f,b
  2770  0010FC                     l4397:
  2771                           
  2772                           ; BSR set to: 0
  2773                           ;doprnt.c: 1346: if(c < prec)
  2774  0010FC  0E80               	movlw	128
  2775  0010FE  0100               	movlb	0	; () banked
  2776  001100  0100               	movlb	0	; () banked
  2777  001102  BF8F               	btfsc	sprintf@c& (0+255),7,b
  2778  001104  0E7F               	movlw	127
  2779  001106  6F6C               	movwf	??_sprintf& (0+255),b
  2780  001108  0100               	movlb	0	; () banked
  2781  00110A  0100               	movlb	0	; () banked
  2782  00110C  518A               	movf	sprintf@prec& (0+255),w,b
  2783  00110E  0100               	movlb	0	; () banked
  2784  001110  0100               	movlb	0	; () banked
  2785  001112  5D8F               	subwf	sprintf@c& (0+255),w,b
  2786  001114  0100               	movlb	0	; () banked
  2787  001116  0100               	movlb	0	; () banked
  2788  001118  518B               	movf	(sprintf@prec+1)& (0+255),w,b
  2789  00111A  0A80               	xorlw	128
  2790  00111C  0100               	movlb	0	; () banked
  2791  00111E  596C               	subwfb	??_sprintf& (0+255),w,b
  2792  001120  B0D8               	btfsc	status,0,c
  2793  001122  D003               	goto	l4401
  2794                           
  2795                           ; BSR set to: 0
  2796                           ;doprnt.c: 1347: c = prec;
  2797  001124  C08A  F08F         	movff	sprintf@prec,sprintf@c
  2798  001128  D020               	goto	l4405
  2799  00112A                     l4401:
  2800                           
  2801                           ; BSR set to: 0
  2802                           ;doprnt.c: 1348: else if(prec < c)
  2803  00112A  0100               	movlb	0	; () banked
  2804  00112C  0100               	movlb	0	; () banked
  2805  00112E  518B               	movf	(sprintf@prec+1)& (0+255),w,b
  2806  001130  0A80               	xorlw	128
  2807  001132  0100               	movlb	0	; () banked
  2808  001134  6F6C               	movwf	??_sprintf& (0+255),b
  2809  001136  0100               	movlb	0	; () banked
  2810  001138  0100               	movlb	0	; () banked
  2811  00113A  518F               	movf	sprintf@c& (0+255),w,b
  2812  00113C  0100               	movlb	0	; () banked
  2813  00113E  0100               	movlb	0	; () banked
  2814  001140  5D8A               	subwf	sprintf@prec& (0+255),w,b
  2815  001142  0E80               	movlw	128
  2816  001144  0100               	movlb	0	; () banked
  2817  001146  0100               	movlb	0	; () banked
  2818  001148  BF8F               	btfsc	sprintf@c& (0+255),7,b
  2819  00114A  0E7F               	movlw	127
  2820  00114C  0100               	movlb	0	; () banked
  2821  00114E  596C               	subwfb	??_sprintf& (0+255),w,b
  2822  001150  B0D8               	btfsc	status,0,c
  2823  001152  D00B               	goto	l4405
  2824                           
  2825                           ; BSR set to: 0
  2826                           ;doprnt.c: 1349: prec = c;
  2827  001154  0100               	movlb	0	; () banked
  2828  001156  0100               	movlb	0	; () banked
  2829  001158  518F               	movf	sprintf@c& (0+255),w,b
  2830  00115A  0100               	movlb	0	; () banked
  2831  00115C  0100               	movlb	0	; () banked
  2832  00115E  6F8A               	movwf	sprintf@prec& (0+255),b
  2833  001160  0100               	movlb	0	; () banked
  2834  001162  6B8B               	clrf	(sprintf@prec+1)& (0+255),b
  2835  001164  0100               	movlb	0	; () banked
  2836  001166  BF8A               	btfsc	sprintf@prec& (0+255),7,b
  2837  001168  078B               	decf	(sprintf@prec+1)& (0+255),f,b
  2838  00116A                     l4405:
  2839                           
  2840                           ; BSR set to: 0
  2841                           ;doprnt.c: 1429: {
  2842                           ;doprnt.c: 1445: if(flag & 0x03)
  2843  00116A  0E03               	movlw	3
  2844  00116C  0100               	movlb	0	; () banked
  2845  00116E  0100               	movlb	0	; () banked
  2846  001170  157F               	andwf	sprintf@flag& (0+255),w,b
  2847  001172  0100               	movlb	0	; () banked
  2848  001174  6F6C               	movwf	??_sprintf& (0+255),b
  2849  001176  0E00               	movlw	0
  2850  001178  0100               	movlb	0	; () banked
  2851  00117A  0100               	movlb	0	; () banked
  2852  00117C  1580               	andwf	(sprintf@flag+1)& (0+255),w,b
  2853  00117E  0100               	movlb	0	; () banked
  2854  001180  6F6D               	movwf	(??_sprintf+1)& (0+255),b
  2855  001182  0100               	movlb	0	; () banked
  2856  001184  516D               	movf	(??_sprintf+1)& (0+255),w,b
  2857  001186  116C               	iorwf	??_sprintf& (0+255),w,b
  2858  001188  B4D8               	btfsc	status,2,c
  2859  00118A  D00A               	goto	l4411
  2860                           
  2861                           ; BSR set to: 0
  2862                           ;doprnt.c: 1446: ((*sp++ = ('-')));
  2863  00118C  C065  FFD9         	movff	sprintf@sp,fsr2l
  2864  001190  C066  FFDA         	movff	sprintf@sp+1,fsr2h
  2865  001194  0E2D               	movlw	45
  2866  001196  6EDF               	movwf	indf2,c
  2867  001198                     L1:
  2868                           
  2869                           ; BSR set to: 0
  2870  001198  0100               	movlb	0	; () banked
  2871  00119A  0100               	movlb	0	; () banked
  2872  00119C  4B65               	infsnz	sprintf@sp& (0+255),f,b
  2873  00119E  2B66               	incf	(sprintf@sp+1)& (0+255),f,b
  2874  0011A0                     l4411:
  2875                           
  2876                           ; BSR set to: 0
  2877  0011A0  0100               	movlb	0	; () banked
  2878  0011A2  C067  FFF6         	movff	sprintf@f,tblptrl
  2879  0011A6  0100               	movlb	0	; () banked
  2880  0011A8  C068  FFF7         	movff	sprintf@f+1,tblptrh
  2881  0011AC  0100               	movlb	0	; () banked
  2882  0011AE  0100               	movlb	0	; () banked
  2883  0011B0  4B67               	infsnz	sprintf@f& (0+255),f,b
  2884  0011B2  2B68               	incf	(sprintf@f+1)& (0+255),f,b
  2885  0011B4  0008               	tblrd		*
  2886  0011B6  0100               	movlb	0	; () banked
  2887  0011B8  CFF5 F08F          	movff	tablat,sprintf@c
  2888  0011BC  0100               	movlb	0	; () banked
  2889  0011BE  678F               	tstfsz	sprintf@c& (0+255),b
  2890  0011C0  EF51  F004         	goto	l4187
  2891  0011C4                     l4413:
  2892                           
  2893                           ; BSR set to: 0
  2894                           ;doprnt.c: 1545: *sp = 0;
  2895  0011C4  C065  FFD9         	movff	sprintf@sp,fsr2l
  2896  0011C8  C066  FFDA         	movff	sprintf@sp+1,fsr2h
  2897  0011CC  0E00               	movlw	0
  2898  0011CE  6EDF               	movwf	indf2,c
  2899                           
  2900                           ; BSR set to: 0
  2901                           
  2902                           ; BSR set to: 0
  2903                           ;doprnt.c: 1547: return 0;
  2904                           ;	Return value of _sprintf is never used
  2905  0011D0  0012               	return	
  2906  0011D2                     __end_of_sprintf:
  2907                           	opt stack 0
  2908                           tblptru	equ	0xFF8
  2909                           tblptrh	equ	0xFF7
  2910                           tblptrl	equ	0xFF6
  2911                           tablat	equ	0xFF5
  2912                           prodh	equ	0xFF4
  2913                           prodl	equ	0xFF3
  2914                           postinc0	equ	0xFEE
  2915                           wreg	equ	0xFE8
  2916                           indf1	equ	0xFE7
  2917                           fsr1h	equ	0xFE2
  2918                           fsr1l	equ	0xFE1
  2919                           indf2	equ	0xFDF
  2920                           postinc2	equ	0xFDE
  2921                           postdec2	equ	0xFDD
  2922                           fsr2h	equ	0xFDA
  2923                           fsr2l	equ	0xFD9
  2924                           status	equ	0xFD8
  2925                           
  2926 ;; *************** function ___lwmod *****************
  2927 ;; Defined at:
  2928 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\lwmod.c"
  2929 ;; Parameters:    Size  Location     Type
  2930 ;;  dividend        2    0[COMRAM] unsigned int 
  2931 ;;  divisor         2    2[COMRAM] unsigned int 
  2932 ;; Auto vars:     Size  Location     Type
  2933 ;;  counter         1    5[COMRAM] unsigned char 
  2934 ;; Return value:  Size  Location     Type
  2935 ;;                  2    0[COMRAM] unsigned int 
  2936 ;; Registers used:
  2937 ;;		wreg, status,2, status,0
  2938 ;; Tracked objects:
  2939 ;;		On entry : 0/0
  2940 ;;		On exit  : 0/0
  2941 ;;		Unchanged: 0/0
  2942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2943 ;;      Params:         4       0       0       0       0       0       0       0       0
  2944 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2945 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2946 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2947 ;;Total ram usage:        6 bytes
  2948 ;; Hardware stack levels used:    1
  2949 ;; This function calls:
  2950 ;;		Nothing
  2951 ;; This function is called by:
  2952 ;;		_sprintf
  2953 ;; This function uses a non-reentrant model
  2954 ;;
  2955                           
  2956                           	psect	text7
  2957  002796                     __ptext7:
  2958                           	opt stack 0
  2959  002796                     ___lwmod:
  2960                           	opt stack 29
  2961                           
  2962                           ; BSR set to: 0
  2963                           ;incstack = 0
  2964                           ;incstack = 0
  2965  002796  5004               	movf	___lwmod@divisor+1,w,c
  2966  002798  1003               	iorwf	___lwmod@divisor,w,c
  2967  00279A  B4D8               	btfsc	status,2,c
  2968  00279C  D01A               	goto	l841
  2969  00279E  6E05               	movwf	??___lwmod& (0+255),c
  2970  0027A0  0E01               	movlw	1
  2971  0027A2  6E06               	movwf	___lwmod@counter,c
  2972  0027A4  5005               	movf	??___lwmod& (0+255),w,c
  2973  0027A6  D004               	goto	l3669
  2974  0027A8                     l3667:
  2975  0027A8  90D8               	bcf	status,0,c
  2976  0027AA  3603               	rlcf	___lwmod@divisor,f,c
  2977  0027AC  3604               	rlcf	___lwmod@divisor+1,f,c
  2978  0027AE  2A06               	incf	___lwmod@counter,f,c
  2979  0027B0                     l3669:
  2980  0027B0  AE04               	btfss	___lwmod@divisor+1,7,c
  2981  0027B2  D7FA               	goto	l3667
  2982  0027B4                     l3671:
  2983  0027B4  5003               	movf	___lwmod@divisor,w,c
  2984  0027B6  5C01               	subwf	___lwmod@dividend,w,c
  2985  0027B8  5004               	movf	___lwmod@divisor+1,w,c
  2986  0027BA  5802               	subwfb	___lwmod@dividend+1,w,c
  2987  0027BC  A0D8               	btfss	status,0,c
  2988  0027BE  D004               	goto	l3675
  2989  0027C0  5003               	movf	___lwmod@divisor,w,c
  2990  0027C2  5E01               	subwf	___lwmod@dividend,f,c
  2991  0027C4  5004               	movf	___lwmod@divisor+1,w,c
  2992  0027C6  5A02               	subwfb	___lwmod@dividend+1,f,c
  2993  0027C8                     l3675:
  2994  0027C8  90D8               	bcf	status,0,c
  2995  0027CA  3204               	rrcf	___lwmod@divisor+1,f,c
  2996  0027CC  3203               	rrcf	___lwmod@divisor,f,c
  2997  0027CE  2E06               	decfsz	___lwmod@counter,f,c
  2998  0027D0  D7F1               	goto	l3671
  2999  0027D2                     l841:
  3000  0027D2  C001  F001         	movff	___lwmod@dividend,?___lwmod
  3001  0027D6  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
  3002  0027DA  0012               	return	
  3003  0027DC                     __end_of___lwmod:
  3004                           	opt stack 0
  3005                           tblptru	equ	0xFF8
  3006                           tblptrh	equ	0xFF7
  3007                           tblptrl	equ	0xFF6
  3008                           tablat	equ	0xFF5
  3009                           prodh	equ	0xFF4
  3010                           prodl	equ	0xFF3
  3011                           postinc0	equ	0xFEE
  3012                           wreg	equ	0xFE8
  3013                           indf1	equ	0xFE7
  3014                           fsr1h	equ	0xFE2
  3015                           fsr1l	equ	0xFE1
  3016                           indf2	equ	0xFDF
  3017                           postinc2	equ	0xFDE
  3018                           postdec2	equ	0xFDD
  3019                           fsr2h	equ	0xFDA
  3020                           fsr2l	equ	0xFD9
  3021                           status	equ	0xFD8
  3022                           
  3023 ;; *************** function ___lltoft *****************
  3024 ;; Defined at:
  3025 ;;		line 36 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\lltoft.c"
  3026 ;; Parameters:    Size  Location     Type
  3027 ;;  c               4    8[COMRAM] unsigned long 
  3028 ;; Auto vars:     Size  Location     Type
  3029 ;;  exp             1   16[COMRAM] unsigned char 
  3030 ;; Return value:  Size  Location     Type
  3031 ;;                  3    8[COMRAM] float 
  3032 ;; Registers used:
  3033 ;;		wreg, status,2, status,0, cstack
  3034 ;; Tracked objects:
  3035 ;;		On entry : 0/0
  3036 ;;		On exit  : 0/0
  3037 ;;		Unchanged: 0/0
  3038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3039 ;;      Params:         4       0       0       0       0       0       0       0       0
  3040 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3041 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3042 ;;      Totals:         9       0       0       0       0       0       0       0       0
  3043 ;;Total ram usage:        9 bytes
  3044 ;; Hardware stack levels used:    1
  3045 ;; Hardware stack levels required when called:    1
  3046 ;; This function calls:
  3047 ;;		___ftpack
  3048 ;; This function is called by:
  3049 ;;		_sprintf
  3050 ;; This function uses a non-reentrant model
  3051 ;;
  3052                           
  3053                           	psect	text8
  3054  002686                     __ptext8:
  3055                           	opt stack 0
  3056  002686                     ___lltoft:
  3057                           	opt stack 28
  3058                           
  3059                           ;incstack = 0
  3060                           ;incstack = 0
  3061  002686  6E0D               	movwf	??___lltoft& (0+255),c
  3062  002688  0E8E               	movlw	142
  3063  00268A  6E11               	movwf	___lltoft@exp,c
  3064  00268C  500D               	movf	??___lltoft& (0+255),w,c
  3065  00268E  D006               	goto	l3849
  3066  002690                     l3847:
  3067  002690  90D8               	bcf	status,0,c
  3068  002692  320C               	rrcf	___lltoft@c+3,f,c
  3069  002694  320B               	rrcf	___lltoft@c+2,f,c
  3070  002696  320A               	rrcf	___lltoft@c+1,f,c
  3071  002698  3209               	rrcf	___lltoft@c,f,c
  3072  00269A  2A11               	incf	___lltoft@exp,f,c
  3073  00269C                     l3849:
  3074  00269C  0E00               	movlw	0
  3075  00269E  1409               	andwf	___lltoft@c,w,c
  3076  0026A0  6E0D               	movwf	??___lltoft& (0+255),c
  3077  0026A2  0E00               	movlw	0
  3078  0026A4  140A               	andwf	___lltoft@c+1,w,c
  3079  0026A6  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  3080  0026A8  0E00               	movlw	0
  3081  0026AA  140B               	andwf	___lltoft@c+2,w,c
  3082  0026AC  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  3083  0026AE  0EFF               	movlw	255
  3084  0026B0  140C               	andwf	___lltoft@c+3,w,c
  3085  0026B2  6E10               	movwf	(??___lltoft+3)& (0+255),c
  3086  0026B4  5010               	movf	??___lltoft+3,w,c
  3087  0026B6  100D               	iorwf	??___lltoft,w,c
  3088  0026B8  100E               	iorwf	??___lltoft+1,w,c
  3089  0026BA  100F               	iorwf	??___lltoft+2,w,c
  3090  0026BC  A4D8               	btfss	status,2,c
  3091  0026BE  D7E8               	goto	l3847
  3092  0026C0  C009  F001         	movff	___lltoft@c,?___ftpack
  3093  0026C4  C00A  F002         	movff	___lltoft@c+1,?___ftpack+1
  3094  0026C8  C00B  F003         	movff	___lltoft@c+2,?___ftpack+2
  3095  0026CC  C011  F004         	movff	___lltoft@exp,?___ftpack+3
  3096  0026D0  6E0D               	movwf	??___lltoft& (0+255),c
  3097  0026D2  0E00               	movlw	0
  3098  0026D4  6E05               	movwf	?___ftpack+4,c
  3099  0026D6  500D               	movf	??___lltoft& (0+255),w,c
  3100  0026D8  EC81  F010         	call	___ftpack	;wreg free
  3101  0026DC  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  3102  0026E0  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  3103  0026E4  C001  F009         	movff	?___ftpack,?___lltoft
  3104  0026E8  0012               	return	
  3105  0026EA                     __end_of___lltoft:
  3106                           	opt stack 0
  3107                           tblptru	equ	0xFF8
  3108                           tblptrh	equ	0xFF7
  3109                           tblptrl	equ	0xFF6
  3110                           tablat	equ	0xFF5
  3111                           prodh	equ	0xFF4
  3112                           prodl	equ	0xFF3
  3113                           postinc0	equ	0xFEE
  3114                           wreg	equ	0xFE8
  3115                           indf1	equ	0xFE7
  3116                           fsr1h	equ	0xFE2
  3117                           fsr1l	equ	0xFE1
  3118                           indf2	equ	0xFDF
  3119                           postinc2	equ	0xFDE
  3120                           postdec2	equ	0xFDD
  3121                           fsr2h	equ	0xFDA
  3122                           fsr2l	equ	0xFD9
  3123                           status	equ	0xFD8
  3124                           
  3125 ;; *************** function ___llmod *****************
  3126 ;; Defined at:
  3127 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\llmod.c"
  3128 ;; Parameters:    Size  Location     Type
  3129 ;;  dividend        4    0[COMRAM] unsigned long 
  3130 ;;  divisor         4    4[COMRAM] unsigned long 
  3131 ;; Auto vars:     Size  Location     Type
  3132 ;;  counter         1    9[COMRAM] unsigned char 
  3133 ;; Return value:  Size  Location     Type
  3134 ;;                  4    0[COMRAM] unsigned long 
  3135 ;; Registers used:
  3136 ;;		wreg, status,2, status,0
  3137 ;; Tracked objects:
  3138 ;;		On entry : 0/0
  3139 ;;		On exit  : 0/0
  3140 ;;		Unchanged: 0/0
  3141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3142 ;;      Params:         8       0       0       0       0       0       0       0       0
  3143 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3144 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3145 ;;      Totals:        10       0       0       0       0       0       0       0       0
  3146 ;;Total ram usage:       10 bytes
  3147 ;; Hardware stack levels used:    1
  3148 ;; This function calls:
  3149 ;;		Nothing
  3150 ;; This function is called by:
  3151 ;;		_sprintf
  3152 ;; This function uses a non-reentrant model
  3153 ;;
  3154                           
  3155                           	psect	text9
  3156  00261C                     __ptext9:
  3157                           	opt stack 0
  3158  00261C                     ___llmod:
  3159                           	opt stack 29
  3160                           
  3161                           ;incstack = 0
  3162                           ;incstack = 0
  3163  00261C  5008               	movf	___llmod@divisor+3,w,c
  3164  00261E  1005               	iorwf	___llmod@divisor,w,c
  3165  002620  1006               	iorwf	___llmod@divisor+1,w,c
  3166  002622  1007               	iorwf	___llmod@divisor+2,w,c
  3167  002624  B4D8               	btfsc	status,2,c
  3168  002626  D026               	goto	l772
  3169  002628  6E09               	movwf	??___llmod& (0+255),c
  3170  00262A  0E01               	movlw	1
  3171  00262C  6E0A               	movwf	___llmod@counter,c
  3172  00262E  5009               	movf	??___llmod& (0+255),w,c
  3173  002630  D006               	goto	l3631
  3174  002632                     l3629:
  3175  002632  90D8               	bcf	status,0,c
  3176  002634  3605               	rlcf	___llmod@divisor,f,c
  3177  002636  3606               	rlcf	___llmod@divisor+1,f,c
  3178  002638  3607               	rlcf	___llmod@divisor+2,f,c
  3179  00263A  3608               	rlcf	___llmod@divisor+3,f,c
  3180  00263C  2A0A               	incf	___llmod@counter,f,c
  3181  00263E                     l3631:
  3182  00263E  AE08               	btfss	___llmod@divisor+3,7,c
  3183  002640  D7F8               	goto	l3629
  3184  002642                     l3633:
  3185  002642  5005               	movf	___llmod@divisor,w,c
  3186  002644  5C01               	subwf	___llmod@dividend,w,c
  3187  002646  5006               	movf	___llmod@divisor+1,w,c
  3188  002648  5802               	subwfb	___llmod@dividend+1,w,c
  3189  00264A  5007               	movf	___llmod@divisor+2,w,c
  3190  00264C  5803               	subwfb	___llmod@dividend+2,w,c
  3191  00264E  5008               	movf	___llmod@divisor+3,w,c
  3192  002650  5804               	subwfb	___llmod@dividend+3,w,c
  3193  002652  A0D8               	btfss	status,0,c
  3194  002654  D008               	goto	l3637
  3195  002656  5005               	movf	___llmod@divisor,w,c
  3196  002658  5E01               	subwf	___llmod@dividend,f,c
  3197  00265A  5006               	movf	___llmod@divisor+1,w,c
  3198  00265C  5A02               	subwfb	___llmod@dividend+1,f,c
  3199  00265E  5007               	movf	___llmod@divisor+2,w,c
  3200  002660  5A03               	subwfb	___llmod@dividend+2,f,c
  3201  002662  5008               	movf	___llmod@divisor+3,w,c
  3202  002664  5A04               	subwfb	___llmod@dividend+3,f,c
  3203  002666                     l3637:
  3204  002666  90D8               	bcf	status,0,c
  3205  002668  3208               	rrcf	___llmod@divisor+3,f,c
  3206  00266A  3207               	rrcf	___llmod@divisor+2,f,c
  3207  00266C  3206               	rrcf	___llmod@divisor+1,f,c
  3208  00266E  3205               	rrcf	___llmod@divisor,f,c
  3209  002670  2E0A               	decfsz	___llmod@counter,f,c
  3210  002672  D7E7               	goto	l3633
  3211  002674                     l772:
  3212  002674  C001  F001         	movff	___llmod@dividend,?___llmod
  3213  002678  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  3214  00267C  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  3215  002680  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  3216  002684  0012               	return	
  3217  002686                     __end_of___llmod:
  3218                           	opt stack 0
  3219                           tblptru	equ	0xFF8
  3220                           tblptrh	equ	0xFF7
  3221                           tblptrl	equ	0xFF6
  3222                           tablat	equ	0xFF5
  3223                           prodh	equ	0xFF4
  3224                           prodl	equ	0xFF3
  3225                           postinc0	equ	0xFEE
  3226                           wreg	equ	0xFE8
  3227                           indf1	equ	0xFE7
  3228                           fsr1h	equ	0xFE2
  3229                           fsr1l	equ	0xFE1
  3230                           indf2	equ	0xFDF
  3231                           postinc2	equ	0xFDE
  3232                           postdec2	equ	0xFDD
  3233                           fsr2h	equ	0xFDA
  3234                           fsr2l	equ	0xFD9
  3235                           status	equ	0xFD8
  3236                           
  3237 ;; *************** function ___lldiv *****************
  3238 ;; Defined at:
  3239 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\lldiv.c"
  3240 ;; Parameters:    Size  Location     Type
  3241 ;;  dividend        4    0[COMRAM] unsigned long 
  3242 ;;  divisor         4    4[COMRAM] unsigned long 
  3243 ;; Auto vars:     Size  Location     Type
  3244 ;;  quotient        4    9[COMRAM] unsigned long 
  3245 ;;  counter         1   13[COMRAM] unsigned char 
  3246 ;; Return value:  Size  Location     Type
  3247 ;;                  4    0[COMRAM] unsigned long 
  3248 ;; Registers used:
  3249 ;;		wreg, status,2, status,0
  3250 ;; Tracked objects:
  3251 ;;		On entry : 0/0
  3252 ;;		On exit  : 0/0
  3253 ;;		Unchanged: 0/0
  3254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3255 ;;      Params:         8       0       0       0       0       0       0       0       0
  3256 ;;      Locals:         5       0       0       0       0       0       0       0       0
  3257 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3258 ;;      Totals:        14       0       0       0       0       0       0       0       0
  3259 ;;Total ram usage:       14 bytes
  3260 ;; Hardware stack levels used:    1
  3261 ;; This function calls:
  3262 ;;		Nothing
  3263 ;; This function is called by:
  3264 ;;		_sprintf
  3265 ;; This function uses a non-reentrant model
  3266 ;;
  3267                           
  3268                           	psect	text10
  3269  002392                     __ptext10:
  3270                           	opt stack 0
  3271  002392                     ___lldiv:
  3272                           	opt stack 29
  3273                           
  3274                           ;incstack = 0
  3275                           ;incstack = 0
  3276  002392  0E00               	movlw	0
  3277  002394  6E0A               	movwf	___lldiv@quotient,c
  3278  002396  0E00               	movlw	0
  3279  002398  6E0B               	movwf	___lldiv@quotient+1,c
  3280  00239A  0E00               	movlw	0
  3281  00239C  6E0C               	movwf	___lldiv@quotient+2,c
  3282  00239E  0E00               	movlw	0
  3283  0023A0  6E0D               	movwf	___lldiv@quotient+3,c
  3284  0023A2  5008               	movf	___lldiv@divisor+3,w,c
  3285  0023A4  1005               	iorwf	___lldiv@divisor,w,c
  3286  0023A6  1006               	iorwf	___lldiv@divisor+1,w,c
  3287  0023A8  1007               	iorwf	___lldiv@divisor+2,w,c
  3288  0023AA  B4D8               	btfsc	status,2,c
  3289  0023AC  D02C               	goto	l762
  3290  0023AE  6E09               	movwf	??___lldiv& (0+255),c
  3291  0023B0  0E01               	movlw	1
  3292  0023B2  6E0E               	movwf	___lldiv@counter,c
  3293  0023B4  5009               	movf	??___lldiv& (0+255),w,c
  3294  0023B6  D006               	goto	l3611
  3295  0023B8                     l3609:
  3296  0023B8  90D8               	bcf	status,0,c
  3297  0023BA  3605               	rlcf	___lldiv@divisor,f,c
  3298  0023BC  3606               	rlcf	___lldiv@divisor+1,f,c
  3299  0023BE  3607               	rlcf	___lldiv@divisor+2,f,c
  3300  0023C0  3608               	rlcf	___lldiv@divisor+3,f,c
  3301  0023C2  2A0E               	incf	___lldiv@counter,f,c
  3302  0023C4                     l3611:
  3303  0023C4  AE08               	btfss	___lldiv@divisor+3,7,c
  3304  0023C6  D7F8               	goto	l3609
  3305  0023C8                     l3613:
  3306  0023C8  90D8               	bcf	status,0,c
  3307  0023CA  360A               	rlcf	___lldiv@quotient,f,c
  3308  0023CC  360B               	rlcf	___lldiv@quotient+1,f,c
  3309  0023CE  360C               	rlcf	___lldiv@quotient+2,f,c
  3310  0023D0  360D               	rlcf	___lldiv@quotient+3,f,c
  3311  0023D2  5005               	movf	___lldiv@divisor,w,c
  3312  0023D4  5C01               	subwf	___lldiv@dividend,w,c
  3313  0023D6  5006               	movf	___lldiv@divisor+1,w,c
  3314  0023D8  5802               	subwfb	___lldiv@dividend+1,w,c
  3315  0023DA  5007               	movf	___lldiv@divisor+2,w,c
  3316  0023DC  5803               	subwfb	___lldiv@dividend+2,w,c
  3317  0023DE  5008               	movf	___lldiv@divisor+3,w,c
  3318  0023E0  5804               	subwfb	___lldiv@dividend+3,w,c
  3319  0023E2  A0D8               	btfss	status,0,c
  3320  0023E4  D009               	goto	l3621
  3321  0023E6  5005               	movf	___lldiv@divisor,w,c
  3322  0023E8  5E01               	subwf	___lldiv@dividend,f,c
  3323  0023EA  5006               	movf	___lldiv@divisor+1,w,c
  3324  0023EC  5A02               	subwfb	___lldiv@dividend+1,f,c
  3325  0023EE  5007               	movf	___lldiv@divisor+2,w,c
  3326  0023F0  5A03               	subwfb	___lldiv@dividend+2,f,c
  3327  0023F2  5008               	movf	___lldiv@divisor+3,w,c
  3328  0023F4  5A04               	subwfb	___lldiv@dividend+3,f,c
  3329  0023F6  800A               	bsf	___lldiv@quotient,0,c
  3330  0023F8                     l3621:
  3331  0023F8  90D8               	bcf	status,0,c
  3332  0023FA  3208               	rrcf	___lldiv@divisor+3,f,c
  3333  0023FC  3207               	rrcf	___lldiv@divisor+2,f,c
  3334  0023FE  3206               	rrcf	___lldiv@divisor+1,f,c
  3335  002400  3205               	rrcf	___lldiv@divisor,f,c
  3336  002402  2E0E               	decfsz	___lldiv@counter,f,c
  3337  002404  D7E1               	goto	l3613
  3338  002406                     l762:
  3339  002406  C00A  F001         	movff	___lldiv@quotient,?___lldiv
  3340  00240A  C00B  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  3341  00240E  C00C  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  3342  002412  C00D  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  3343  002416  0012               	return	
  3344  002418                     __end_of___lldiv:
  3345                           	opt stack 0
  3346                           tblptru	equ	0xFF8
  3347                           tblptrh	equ	0xFF7
  3348                           tblptrl	equ	0xFF6
  3349                           tablat	equ	0xFF5
  3350                           prodh	equ	0xFF4
  3351                           prodl	equ	0xFF3
  3352                           postinc0	equ	0xFEE
  3353                           wreg	equ	0xFE8
  3354                           indf1	equ	0xFE7
  3355                           fsr1h	equ	0xFE2
  3356                           fsr1l	equ	0xFE1
  3357                           indf2	equ	0xFDF
  3358                           postinc2	equ	0xFDE
  3359                           postdec2	equ	0xFDD
  3360                           fsr2h	equ	0xFDA
  3361                           fsr2l	equ	0xFD9
  3362                           status	equ	0xFD8
  3363                           
  3364 ;; *************** function ___ftneg *****************
  3365 ;; Defined at:
  3366 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\ftneg.c"
  3367 ;; Parameters:    Size  Location     Type
  3368 ;;  f1              3    0[COMRAM] float 
  3369 ;; Auto vars:     Size  Location     Type
  3370 ;;		None
  3371 ;; Return value:  Size  Location     Type
  3372 ;;                  3    0[COMRAM] float 
  3373 ;; Registers used:
  3374 ;;		wreg, status,2, status,0
  3375 ;; Tracked objects:
  3376 ;;		On entry : 0/0
  3377 ;;		On exit  : 0/0
  3378 ;;		Unchanged: 0/0
  3379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3380 ;;      Params:         3       0       0       0       0       0       0       0       0
  3381 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3382 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3383 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3384 ;;Total ram usage:        3 bytes
  3385 ;; Hardware stack levels used:    1
  3386 ;; This function calls:
  3387 ;;		Nothing
  3388 ;; This function is called by:
  3389 ;;		_sprintf
  3390 ;; This function uses a non-reentrant model
  3391 ;;
  3392                           
  3393                           	psect	text11
  3394  002A0E                     __ptext11:
  3395                           	opt stack 0
  3396  002A0E                     ___ftneg:
  3397                           	opt stack 29
  3398                           
  3399                           ;incstack = 0
  3400                           ;incstack = 0
  3401  002A0E  0E7F               	movlw	127
  3402  002A10  1403               	andwf	___ftneg@f1+2,w,c
  3403  002A12  1002               	iorwf	___ftneg@f1+1,w,c
  3404  002A14  1001               	iorwf	___ftneg@f1,w,c
  3405  002A16  B4D8               	btfsc	status,2,c
  3406  002A18  D006               	goto	l708
  3407  002A1A  0E00               	movlw	0
  3408  002A1C  1A01               	xorwf	___ftneg@f1,f,c
  3409  002A1E  0E00               	movlw	0
  3410  002A20  1A02               	xorwf	___ftneg@f1+1,f,c
  3411  002A22  0E80               	movlw	128
  3412  002A24  1A03               	xorwf	___ftneg@f1+2,f,c
  3413  002A26                     l708:
  3414  002A26  C001  F001         	movff	___ftneg@f1,?___ftneg
  3415  002A2A  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  3416  002A2E  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  3417  002A32  0012               	return	
  3418  002A34                     __end_of___ftneg:
  3419                           	opt stack 0
  3420                           tblptru	equ	0xFF8
  3421                           tblptrh	equ	0xFF7
  3422                           tblptrl	equ	0xFF6
  3423                           tablat	equ	0xFF5
  3424                           prodh	equ	0xFF4
  3425                           prodl	equ	0xFF3
  3426                           postinc0	equ	0xFEE
  3427                           wreg	equ	0xFE8
  3428                           indf1	equ	0xFE7
  3429                           fsr1h	equ	0xFE2
  3430                           fsr1l	equ	0xFE1
  3431                           indf2	equ	0xFDF
  3432                           postinc2	equ	0xFDE
  3433                           postdec2	equ	0xFDD
  3434                           fsr2h	equ	0xFDA
  3435                           fsr2l	equ	0xFD9
  3436                           status	equ	0xFD8
  3437                           
  3438 ;; *************** function ___ftge *****************
  3439 ;; Defined at:
  3440 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\ftge.c"
  3441 ;; Parameters:    Size  Location     Type
  3442 ;;  ff1             3    0[COMRAM] float 
  3443 ;;  ff2             3    3[COMRAM] float 
  3444 ;; Auto vars:     Size  Location     Type
  3445 ;;		None
  3446 ;; Return value:  Size  Location     Type
  3447 ;;		None               void
  3448 ;; Registers used:
  3449 ;;		wreg, status,2, status,0
  3450 ;; Tracked objects:
  3451 ;;		On entry : 0/0
  3452 ;;		On exit  : 0/0
  3453 ;;		Unchanged: 0/0
  3454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3455 ;;      Params:         6       0       0       0       0       0       0       0       0
  3456 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3457 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3458 ;;      Totals:         9       0       0       0       0       0       0       0       0
  3459 ;;Total ram usage:        9 bytes
  3460 ;; Hardware stack levels used:    1
  3461 ;; This function calls:
  3462 ;;		Nothing
  3463 ;; This function is called by:
  3464 ;;		_sprintf
  3465 ;; This function uses a non-reentrant model
  3466 ;;
  3467                           
  3468                           	psect	text12
  3469  002272                     __ptext12:
  3470                           	opt stack 0
  3471  002272                     ___ftge:
  3472                           	opt stack 29
  3473                           
  3474                           ;incstack = 0
  3475                           ;incstack = 0
  3476  002272  AE03               	btfss	___ftge@ff1+2,7,c
  3477  002274  D016               	goto	l3585
  3478  002276  C001  F007         	movff	___ftge@ff1,??___ftge
  3479  00227A  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  3480  00227E  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  3481  002282  1E07               	comf	??___ftge,f,c
  3482  002284  1E08               	comf	??___ftge+1,f,c
  3483  002286  1E09               	comf	??___ftge+2,f,c
  3484  002288  2A07               	incf	??___ftge,f,c
  3485  00228A  0E00               	movlw	0
  3486  00228C  2208               	addwfc	??___ftge+1,f,c
  3487  00228E  2209               	addwfc	??___ftge+2,f,c
  3488  002290  0E00               	movlw	0
  3489  002292  2407               	addwf	??___ftge,w,c
  3490  002294  6E01               	movwf	___ftge@ff1,c
  3491  002296  0E00               	movlw	0
  3492  002298  2008               	addwfc	??___ftge+1,w,c
  3493  00229A  6E02               	movwf	___ftge@ff1+1,c
  3494  00229C  0E80               	movlw	128
  3495  00229E  2009               	addwfc	??___ftge+2,w,c
  3496  0022A0  6E03               	movwf	___ftge@ff1+2,c
  3497  0022A2                     l3585:
  3498  0022A2  AE06               	btfss	___ftge@ff2+2,7,c
  3499  0022A4  D016               	goto	l3589
  3500  0022A6  C004  F007         	movff	___ftge@ff2,??___ftge
  3501  0022AA  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  3502  0022AE  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  3503  0022B2  1E07               	comf	??___ftge,f,c
  3504  0022B4  1E08               	comf	??___ftge+1,f,c
  3505  0022B6  1E09               	comf	??___ftge+2,f,c
  3506  0022B8  2A07               	incf	??___ftge,f,c
  3507  0022BA  0E00               	movlw	0
  3508  0022BC  2208               	addwfc	??___ftge+1,f,c
  3509  0022BE  2209               	addwfc	??___ftge+2,f,c
  3510  0022C0  0E00               	movlw	0
  3511  0022C2  2407               	addwf	??___ftge,w,c
  3512  0022C4  6E04               	movwf	___ftge@ff2,c
  3513  0022C6  0E00               	movlw	0
  3514  0022C8  2008               	addwfc	??___ftge+1,w,c
  3515  0022CA  6E05               	movwf	___ftge@ff2+1,c
  3516  0022CC  0E80               	movlw	128
  3517  0022CE  2009               	addwfc	??___ftge+2,w,c
  3518  0022D0  6E06               	movwf	___ftge@ff2+2,c
  3519  0022D2                     l3589:
  3520  0022D2  0E00               	movlw	0
  3521  0022D4  1A01               	xorwf	___ftge@ff1,f,c
  3522  0022D6  0E00               	movlw	0
  3523  0022D8  1A02               	xorwf	___ftge@ff1+1,f,c
  3524  0022DA  0E80               	movlw	128
  3525  0022DC  1A03               	xorwf	___ftge@ff1+2,f,c
  3526  0022DE  0E00               	movlw	0
  3527  0022E0  1A04               	xorwf	___ftge@ff2,f,c
  3528  0022E2  0E00               	movlw	0
  3529  0022E4  1A05               	xorwf	___ftge@ff2+1,f,c
  3530  0022E6  0E80               	movlw	128
  3531  0022E8  1A06               	xorwf	___ftge@ff2+2,f,c
  3532  0022EA  5004               	movf	___ftge@ff2,w,c
  3533  0022EC  5C01               	subwf	___ftge@ff1,w,c
  3534  0022EE  5005               	movf	___ftge@ff2+1,w,c
  3535  0022F0  5802               	subwfb	___ftge@ff1+1,w,c
  3536  0022F2  5006               	movf	___ftge@ff2+2,w,c
  3537  0022F4  5803               	subwfb	___ftge@ff1+2,w,c
  3538  0022F6  B0D8               	btfsc	status,0,c
  3539  0022F8  D002               	goto	l3595
  3540  0022FA  90D8               	bcf	status,0,c
  3541  0022FC  D001               	goto	l692
  3542  0022FE                     l3595:
  3543  0022FE  80D8               	bsf	status,0,c
  3544  002300                     l692:
  3545  002300  0012               	return	
  3546  002302                     __end_of___ftge:
  3547                           	opt stack 0
  3548                           tblptru	equ	0xFF8
  3549                           tblptrh	equ	0xFF7
  3550                           tblptrl	equ	0xFF6
  3551                           tablat	equ	0xFF5
  3552                           prodh	equ	0xFF4
  3553                           prodl	equ	0xFF3
  3554                           postinc0	equ	0xFEE
  3555                           wreg	equ	0xFE8
  3556                           indf1	equ	0xFE7
  3557                           fsr1h	equ	0xFE2
  3558                           fsr1l	equ	0xFE1
  3559                           indf2	equ	0xFDF
  3560                           postinc2	equ	0xFDE
  3561                           postdec2	equ	0xFDD
  3562                           fsr2h	equ	0xFDA
  3563                           fsr2l	equ	0xFD9
  3564                           status	equ	0xFD8
  3565                           
  3566 ;; *************** function ___asftsub *****************
  3567 ;; Defined at:
  3568 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic18\asftsub.c"
  3569 ;; Parameters:    Size  Location     Type
  3570 ;;  f1p             2    0[BANK0 ] PTR float 
  3571 ;;		 -> sprintf@fval(3), 
  3572 ;;  f2              3    2[BANK0 ] float 
  3573 ;; Auto vars:     Size  Location     Type
  3574 ;;		None
  3575 ;; Return value:  Size  Location     Type
  3576 ;;                  3    0[BANK0 ] float 
  3577 ;; Registers used:
  3578 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3579 ;; Tracked objects:
  3580 ;;		On entry : 0/0
  3581 ;;		On exit  : 0/0
  3582 ;;		Unchanged: 0/0
  3583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3584 ;;      Params:         0       5       0       0       0       0       0       0       0
  3585 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3586 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3587 ;;      Totals:         0       5       0       0       0       0       0       0       0
  3588 ;;Total ram usage:        5 bytes
  3589 ;; Hardware stack levels used:    1
  3590 ;; Hardware stack levels required when called:    3
  3591 ;; This function calls:
  3592 ;;		___ftsub
  3593 ;; This function is called by:
  3594 ;;		_sprintf
  3595 ;; This function uses a non-reentrant model
  3596 ;;
  3597                           
  3598                           	psect	text13
  3599  002820                     __ptext13:
  3600                           	opt stack 0
  3601  002820                     ___asftsub:
  3602                           	opt stack 26
  3603                           
  3604                           ;	Return value of ___asftsub is never used
  3605                           
  3606                           ;incstack = 0
  3607                           ;incstack = 0
  3608  002820  C060  FFD9         	movff	___asftsub@f1p,fsr2l
  3609  002824  C061  FFDA         	movff	___asftsub@f1p+1,fsr2h
  3610  002828  CFDE F056          	movff	postinc2,?___ftsub
  3611  00282C  CFDE F057          	movff	postinc2,?___ftsub+1
  3612  002830  CFDD F058          	movff	postdec2,?___ftsub+2
  3613  002834  C062  F059         	movff	___asftsub@f2,?___ftsub+3
  3614  002838  C063  F05A         	movff	___asftsub@f2+1,?___ftsub+4
  3615  00283C  C064  F05B         	movff	___asftsub@f2+2,?___ftsub+5
  3616  002840  ECBF  F014         	call	___ftsub	;wreg free
  3617  002844  C060  FFD9         	movff	___asftsub@f1p,fsr2l
  3618  002848  C061  FFDA         	movff	___asftsub@f1p+1,fsr2h
  3619  00284C  C056  FFDE         	movff	?___ftsub,postinc2
  3620  002850  C057  FFDE         	movff	?___ftsub+1,postinc2
  3621  002854  C058  FFDD         	movff	?___ftsub+2,postdec2
  3622  002858  52DD               	movf	postdec2,f,c
  3623  00285A  0012               	return	
  3624  00285C                     __end_of___asftsub:
  3625                           	opt stack 0
  3626                           tblptru	equ	0xFF8
  3627                           tblptrh	equ	0xFF7
  3628                           tblptrl	equ	0xFF6
  3629                           tablat	equ	0xFF5
  3630                           prodh	equ	0xFF4
  3631                           prodl	equ	0xFF3
  3632                           postinc0	equ	0xFEE
  3633                           wreg	equ	0xFE8
  3634                           indf1	equ	0xFE7
  3635                           fsr1h	equ	0xFE2
  3636                           fsr1l	equ	0xFE1
  3637                           indf2	equ	0xFDF
  3638                           postinc2	equ	0xFDE
  3639                           postdec2	equ	0xFDD
  3640                           fsr2h	equ	0xFDA
  3641                           fsr2l	equ	0xFD9
  3642                           status	equ	0xFD8
  3643                           
  3644 ;; *************** function ___ftsub *****************
  3645 ;; Defined at:
  3646 ;;		line 22 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\ftsub.c"
  3647 ;; Parameters:    Size  Location     Type
  3648 ;;  f1              3   85[COMRAM] float 
  3649 ;;  f2              3   88[COMRAM] float 
  3650 ;; Auto vars:     Size  Location     Type
  3651 ;;		None
  3652 ;; Return value:  Size  Location     Type
  3653 ;;                  3   85[COMRAM] float 
  3654 ;; Registers used:
  3655 ;;		wreg, status,2, status,0, cstack
  3656 ;; Tracked objects:
  3657 ;;		On entry : 0/0
  3658 ;;		On exit  : 0/0
  3659 ;;		Unchanged: 0/0
  3660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3661 ;;      Params:         6       0       0       0       0       0       0       0       0
  3662 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3663 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3664 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3665 ;;Total ram usage:        6 bytes
  3666 ;; Hardware stack levels used:    1
  3667 ;; Hardware stack levels required when called:    2
  3668 ;; This function calls:
  3669 ;;		___ftadd
  3670 ;; This function is called by:
  3671 ;;		___asftsub
  3672 ;; This function uses a non-reentrant model
  3673 ;;
  3674                           
  3675                           	psect	text14
  3676  00297E                     __ptext14:
  3677                           	opt stack 0
  3678  00297E                     ___ftsub:
  3679                           	opt stack 26
  3680                           
  3681                           ;incstack = 0
  3682                           ;incstack = 0
  3683  00297E  0E00               	movlw	0
  3684  002980  1A59               	xorwf	___ftsub@f2,f,c
  3685  002982  0E00               	movlw	0
  3686  002984  1A5A               	xorwf	___ftsub@f2+1,f,c
  3687  002986  0E80               	movlw	128
  3688  002988  1A5B               	xorwf	___ftsub@f2+2,f,c
  3689  00298A  C056  F048         	movff	___ftsub@f1,?___ftadd
  3690  00298E  C057  F049         	movff	___ftsub@f1+1,?___ftadd+1
  3691  002992  C058  F04A         	movff	___ftsub@f1+2,?___ftadd+2
  3692  002996  C059  F04B         	movff	___ftsub@f2,?___ftadd+3
  3693  00299A  C05A  F04C         	movff	___ftsub@f2+1,?___ftadd+4
  3694  00299E  C05B  F04D         	movff	___ftsub@f2+2,?___ftadd+5
  3695  0029A2  EC51  F00C         	call	___ftadd	;wreg free
  3696  0029A6  C04A  F058         	movff	?___ftadd+2,?___ftsub+2
  3697  0029AA  C049  F057         	movff	?___ftadd+1,?___ftsub+1
  3698  0029AE  C048  F056         	movff	?___ftadd,?___ftsub
  3699  0029B2  0012               	return	
  3700  0029B4                     __end_of___ftsub:
  3701                           	opt stack 0
  3702                           tblptru	equ	0xFF8
  3703                           tblptrh	equ	0xFF7
  3704                           tblptrl	equ	0xFF6
  3705                           tablat	equ	0xFF5
  3706                           prodh	equ	0xFF4
  3707                           prodl	equ	0xFF3
  3708                           postinc0	equ	0xFEE
  3709                           wreg	equ	0xFE8
  3710                           indf1	equ	0xFE7
  3711                           fsr1h	equ	0xFE2
  3712                           fsr1l	equ	0xFE1
  3713                           indf2	equ	0xFDF
  3714                           postinc2	equ	0xFDE
  3715                           postdec2	equ	0xFDD
  3716                           fsr2h	equ	0xFDA
  3717                           fsr2l	equ	0xFD9
  3718                           status	equ	0xFD8
  3719                           
  3720 ;; *************** function ___asftmul *****************
  3721 ;; Defined at:
  3722 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic18\asftmul.c"
  3723 ;; Parameters:    Size  Location     Type
  3724 ;;  f1p             2   54[COMRAM] PTR float 
  3725 ;;		 -> sprintf@integ(3), 
  3726 ;;  f2              3   56[COMRAM] float 
  3727 ;; Auto vars:     Size  Location     Type
  3728 ;;		None
  3729 ;; Return value:  Size  Location     Type
  3730 ;;                  3   54[COMRAM] float 
  3731 ;; Registers used:
  3732 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3733 ;; Tracked objects:
  3734 ;;		On entry : 0/0
  3735 ;;		On exit  : 0/0
  3736 ;;		Unchanged: 0/0
  3737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3738 ;;      Params:         5       0       0       0       0       0       0       0       0
  3739 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3740 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3741 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3742 ;;Total ram usage:        5 bytes
  3743 ;; Hardware stack levels used:    1
  3744 ;; Hardware stack levels required when called:    2
  3745 ;; This function calls:
  3746 ;;		___ftmul
  3747 ;; This function is called by:
  3748 ;;		_sprintf
  3749 ;; This function uses a non-reentrant model
  3750 ;;
  3751                           
  3752                           	psect	text15
  3753  00285C                     __ptext15:
  3754                           	opt stack 0
  3755  00285C                     ___asftmul:
  3756                           	opt stack 27
  3757                           
  3758                           ;	Return value of ___asftmul is never used
  3759                           
  3760                           ;incstack = 0
  3761                           ;incstack = 0
  3762  00285C  C037  FFD9         	movff	___asftmul@f1p,fsr2l
  3763  002860  C038  FFDA         	movff	___asftmul@f1p+1,fsr2h
  3764  002864  CFDE F026          	movff	postinc2,?___ftmul
  3765  002868  CFDE F027          	movff	postinc2,?___ftmul+1
  3766  00286C  CFDD F028          	movff	postdec2,?___ftmul+2
  3767  002870  C039  F029         	movff	___asftmul@f2,?___ftmul+3
  3768  002874  C03A  F02A         	movff	___asftmul@f2+1,?___ftmul+4
  3769  002878  C03B  F02B         	movff	___asftmul@f2+2,?___ftmul+5
  3770  00287C  ECC8  F00D         	call	___ftmul	;wreg free
  3771  002880  C037  FFD9         	movff	___asftmul@f1p,fsr2l
  3772  002884  C038  FFDA         	movff	___asftmul@f1p+1,fsr2h
  3773  002888  C026  FFDE         	movff	?___ftmul,postinc2
  3774  00288C  C027  FFDE         	movff	?___ftmul+1,postinc2
  3775  002890  C028  FFDD         	movff	?___ftmul+2,postdec2
  3776  002894  52DD               	movf	postdec2,f,c
  3777  002896  0012               	return	
  3778  002898                     __end_of___asftmul:
  3779                           	opt stack 0
  3780                           tblptru	equ	0xFF8
  3781                           tblptrh	equ	0xFF7
  3782                           tblptrl	equ	0xFF6
  3783                           tablat	equ	0xFF5
  3784                           prodh	equ	0xFF4
  3785                           prodl	equ	0xFF3
  3786                           postinc0	equ	0xFEE
  3787                           wreg	equ	0xFE8
  3788                           indf1	equ	0xFE7
  3789                           fsr1h	equ	0xFE2
  3790                           fsr1l	equ	0xFE1
  3791                           indf2	equ	0xFDF
  3792                           postinc2	equ	0xFDE
  3793                           postdec2	equ	0xFDD
  3794                           fsr2h	equ	0xFDA
  3795                           fsr2l	equ	0xFD9
  3796                           status	equ	0xFD8
  3797                           
  3798 ;; *************** function ___asftadd *****************
  3799 ;; Defined at:
  3800 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic18\asftadd.c"
  3801 ;; Parameters:    Size  Location     Type
  3802 ;;  f1p             2   85[COMRAM] PTR float 
  3803 ;;		 -> sprintf@fval(3), 
  3804 ;;  f2              3   87[COMRAM] float 
  3805 ;; Auto vars:     Size  Location     Type
  3806 ;;		None
  3807 ;; Return value:  Size  Location     Type
  3808 ;;                  3   85[COMRAM] float 
  3809 ;; Registers used:
  3810 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3811 ;; Tracked objects:
  3812 ;;		On entry : 0/0
  3813 ;;		On exit  : 0/0
  3814 ;;		Unchanged: 0/0
  3815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3816 ;;      Params:         5       0       0       0       0       0       0       0       0
  3817 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3818 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3819 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3820 ;;Total ram usage:        5 bytes
  3821 ;; Hardware stack levels used:    1
  3822 ;; Hardware stack levels required when called:    2
  3823 ;; This function calls:
  3824 ;;		___ftadd
  3825 ;; This function is called by:
  3826 ;;		_sprintf
  3827 ;; This function uses a non-reentrant model
  3828 ;;
  3829                           
  3830                           	psect	text16
  3831  002898                     __ptext16:
  3832                           	opt stack 0
  3833  002898                     ___asftadd:
  3834                           	opt stack 27
  3835                           
  3836                           ;	Return value of ___asftadd is never used
  3837                           
  3838                           ;incstack = 0
  3839                           ;incstack = 0
  3840  002898  C056  FFD9         	movff	___asftadd@f1p,fsr2l
  3841  00289C  C057  FFDA         	movff	___asftadd@f1p+1,fsr2h
  3842  0028A0  CFDE F048          	movff	postinc2,?___ftadd
  3843  0028A4  CFDE F049          	movff	postinc2,?___ftadd+1
  3844  0028A8  CFDD F04A          	movff	postdec2,?___ftadd+2
  3845  0028AC  C058  F04B         	movff	___asftadd@f2,?___ftadd+3
  3846  0028B0  C059  F04C         	movff	___asftadd@f2+1,?___ftadd+4
  3847  0028B4  C05A  F04D         	movff	___asftadd@f2+2,?___ftadd+5
  3848  0028B8  EC51  F00C         	call	___ftadd	;wreg free
  3849  0028BC  C056  FFD9         	movff	___asftadd@f1p,fsr2l
  3850  0028C0  C057  FFDA         	movff	___asftadd@f1p+1,fsr2h
  3851  0028C4  C048  FFDE         	movff	?___ftadd,postinc2
  3852  0028C8  C049  FFDE         	movff	?___ftadd+1,postinc2
  3853  0028CC  C04A  FFDD         	movff	?___ftadd+2,postdec2
  3854  0028D0  52DD               	movf	postdec2,f,c
  3855  0028D2  0012               	return	
  3856  0028D4                     __end_of___asftadd:
  3857                           	opt stack 0
  3858                           tblptru	equ	0xFF8
  3859                           tblptrh	equ	0xFF7
  3860                           tblptrl	equ	0xFF6
  3861                           tablat	equ	0xFF5
  3862                           prodh	equ	0xFF4
  3863                           prodl	equ	0xFF3
  3864                           postinc0	equ	0xFEE
  3865                           wreg	equ	0xFE8
  3866                           indf1	equ	0xFE7
  3867                           fsr1h	equ	0xFE2
  3868                           fsr1l	equ	0xFE1
  3869                           indf2	equ	0xFDF
  3870                           postinc2	equ	0xFDE
  3871                           postdec2	equ	0xFDD
  3872                           fsr2h	equ	0xFDA
  3873                           fsr2l	equ	0xFD9
  3874                           status	equ	0xFD8
  3875                           
  3876 ;; *************** function __div_to_l_ *****************
  3877 ;; Defined at:
  3878 ;;		line 61 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\fldivl.c"
  3879 ;; Parameters:    Size  Location     Type
  3880 ;;  f1              3    0[COMRAM] float 
  3881 ;;  f2              3    3[COMRAM] float 
  3882 ;; Auto vars:     Size  Location     Type
  3883 ;;  quot            4    7[COMRAM] unsigned long 
  3884 ;;  exp1            1   12[COMRAM] unsigned char 
  3885 ;;  cntr            1   11[COMRAM] unsigned char 
  3886 ;; Return value:  Size  Location     Type
  3887 ;;                  4    0[COMRAM] unsigned long 
  3888 ;; Registers used:
  3889 ;;		wreg, status,2, status,0
  3890 ;; Tracked objects:
  3891 ;;		On entry : 0/0
  3892 ;;		On exit  : 0/0
  3893 ;;		Unchanged: 0/0
  3894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3895 ;;      Params:         6       0       0       0       0       0       0       0       0
  3896 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3897 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3898 ;;      Totals:        13       0       0       0       0       0       0       0       0
  3899 ;;Total ram usage:       13 bytes
  3900 ;; Hardware stack levels used:    1
  3901 ;; This function calls:
  3902 ;;		Nothing
  3903 ;; This function is called by:
  3904 ;;		_sprintf
  3905 ;; This function uses a non-reentrant model
  3906 ;;
  3907                           
  3908                           	psect	text17
  3909  001D9E                     __ptext17:
  3910                           	opt stack 0
  3911  001D9E                     __div_to_l_:
  3912                           	opt stack 29
  3913                           
  3914                           ;incstack = 0
  3915                           ;incstack = 0
  3916  001D9E  3403               	rlcf	(__div_to_l_@f1+2)& (0+255),w,c
  3917  001DA0  3404               	rlcf	(__div_to_l_@f1+3)& (0+255),w,c
  3918  001DA2  6E0D               	movwf	__div_to_l_@exp1,c
  3919  001DA4  660D               	tstfsz	__div_to_l_@exp1& (0+255),c
  3920  001DA6  D001               	goto	l3461
  3921  001DA8  D05A               	goto	u1810
  3922  001DAA                     l3461:
  3923  001DAA  3406               	rlcf	(__div_to_l_@f2+2)& (0+255),w,c
  3924  001DAC  3407               	rlcf	(__div_to_l_@f2+3)& (0+255),w,c
  3925  001DAE  6E0C               	movwf	__div_to_l_@cntr,c
  3926  001DB0  660C               	tstfsz	__div_to_l_@cntr& (0+255),c
  3927  001DB2  D001               	goto	l3467
  3928  001DB4  D054               	goto	u1810
  3929  001DB6                     l3467:
  3930  001DB6  8E03               	bsf	__div_to_l_@f1+2,7,c
  3931  001DB8  0EFF               	movlw	255
  3932  001DBA  1601               	andwf	__div_to_l_@f1,f,c
  3933  001DBC  0EFF               	movlw	255
  3934  001DBE  1602               	andwf	__div_to_l_@f1+1,f,c
  3935  001DC0  0EFF               	movlw	255
  3936  001DC2  1603               	andwf	__div_to_l_@f1+2,f,c
  3937  001DC4  0E00               	movlw	0
  3938  001DC6  1604               	andwf	__div_to_l_@f1+3,f,c
  3939  001DC8  8E06               	bsf	__div_to_l_@f2+2,7,c
  3940  001DCA  0EFF               	movlw	255
  3941  001DCC  1604               	andwf	__div_to_l_@f2,f,c
  3942  001DCE  0EFF               	movlw	255
  3943  001DD0  1605               	andwf	__div_to_l_@f2+1,f,c
  3944  001DD2  0EFF               	movlw	255
  3945  001DD4  1606               	andwf	__div_to_l_@f2+2,f,c
  3946  001DD6  0E00               	movlw	0
  3947  001DD8  1607               	andwf	__div_to_l_@f2+3,f,c
  3948  001DDA  0E00               	movlw	0
  3949  001DDC  6E08               	movwf	__div_to_l_@quot,c
  3950  001DDE  0E00               	movlw	0
  3951  001DE0  6E09               	movwf	__div_to_l_@quot+1,c
  3952  001DE2  0E00               	movlw	0
  3953  001DE4  6E0A               	movwf	__div_to_l_@quot+2,c
  3954  001DE6  0E00               	movlw	0
  3955  001DE8  6E0B               	movwf	__div_to_l_@quot+3,c
  3956  001DEA  0E7F               	movlw	127
  3957  001DEC  5E0D               	subwf	__div_to_l_@exp1,f,c
  3958  001DEE  500C               	movf	__div_to_l_@cntr,w,c
  3959  001DF0  0FA0               	addlw	160
  3960  001DF2  5E0D               	subwf	__div_to_l_@exp1,f,c
  3961  001DF4  6E07               	movwf	??__div_to_l_& (0+255),c
  3962  001DF6  0E20               	movlw	32
  3963  001DF8  6E0C               	movwf	__div_to_l_@cntr,c
  3964  001DFA  5007               	movf	??__div_to_l_& (0+255),w,c
  3965  001DFC                     l558:
  3966  001DFC  90D8               	bcf	status,0,c
  3967  001DFE  3608               	rlcf	__div_to_l_@quot,f,c
  3968  001E00  3609               	rlcf	__div_to_l_@quot+1,f,c
  3969  001E02  360A               	rlcf	__div_to_l_@quot+2,f,c
  3970  001E04  360B               	rlcf	__div_to_l_@quot+3,f,c
  3971  001E06  5004               	movf	__div_to_l_@f2,w,c
  3972  001E08  5C01               	subwf	__div_to_l_@f1,w,c
  3973  001E0A  5005               	movf	__div_to_l_@f2+1,w,c
  3974  001E0C  5802               	subwfb	__div_to_l_@f1+1,w,c
  3975  001E0E  5006               	movf	__div_to_l_@f2+2,w,c
  3976  001E10  5803               	subwfb	__div_to_l_@f1+2,w,c
  3977  001E12  5007               	movf	__div_to_l_@f2+3,w,c
  3978  001E14  5804               	subwfb	__div_to_l_@f1+3,w,c
  3979  001E16  A0D8               	btfss	status,0,c
  3980  001E18  D009               	goto	l3487
  3981  001E1A  5004               	movf	__div_to_l_@f2,w,c
  3982  001E1C  5E01               	subwf	__div_to_l_@f1,f,c
  3983  001E1E  5005               	movf	__div_to_l_@f2+1,w,c
  3984  001E20  5A02               	subwfb	__div_to_l_@f1+1,f,c
  3985  001E22  5006               	movf	__div_to_l_@f2+2,w,c
  3986  001E24  5A03               	subwfb	__div_to_l_@f1+2,f,c
  3987  001E26  5007               	movf	__div_to_l_@f2+3,w,c
  3988  001E28  5A04               	subwfb	__div_to_l_@f1+3,f,c
  3989  001E2A  8008               	bsf	__div_to_l_@quot,0,c
  3990  001E2C                     l3487:
  3991  001E2C  90D8               	bcf	status,0,c
  3992  001E2E  3601               	rlcf	__div_to_l_@f1,f,c
  3993  001E30  3602               	rlcf	__div_to_l_@f1+1,f,c
  3994  001E32  3603               	rlcf	__div_to_l_@f1+2,f,c
  3995  001E34  3604               	rlcf	__div_to_l_@f1+3,f,c
  3996  001E36  2E0C               	decfsz	__div_to_l_@cntr,f,c
  3997  001E38  D7E1               	goto	l558
  3998  001E3A  AE0D               	btfss	__div_to_l_@exp1,7,c
  3999  001E3C  D00D               	goto	l3501
  4000  001E3E  500D               	movf	__div_to_l_@exp1,w,c
  4001  001E40  0A80               	xorlw	128
  4002  001E42  0F9F               	addlw	159
  4003  001E44  A0D8               	btfss	status,0,c
  4004  001E46  D00B               	goto	u1810
  4005  001E48                     l3497:
  4006  001E48  90D8               	bcf	status,0,c
  4007  001E4A  320B               	rrcf	__div_to_l_@quot+3,f,c
  4008  001E4C  320A               	rrcf	__div_to_l_@quot+2,f,c
  4009  001E4E  3209               	rrcf	__div_to_l_@quot+1,f,c
  4010  001E50  3208               	rrcf	__div_to_l_@quot,f,c
  4011  001E52  3E0D               	incfsz	__div_to_l_@exp1,f,c
  4012  001E54  D7F9               	goto	l3497
  4013  001E56  D014               	goto	l565
  4014  001E58                     l3501:
  4015  001E58  0E1F               	movlw	31
  4016  001E5A  640D               	cpfsgt	__div_to_l_@exp1,c
  4017  001E5C  D00F               	goto	l3509
  4018  001E5E                     u1810:
  4019  001E5E  0E00               	movlw	0
  4020  001E60  6E01               	movwf	?__div_to_l_,c
  4021  001E62  0E00               	movlw	0
  4022  001E64  6E02               	movwf	?__div_to_l_+1,c
  4023  001E66  0E00               	movlw	0
  4024  001E68  6E03               	movwf	?__div_to_l_+2,c
  4025  001E6A  0E00               	movlw	0
  4026  001E6C  6E04               	movwf	?__div_to_l_+3,c
  4027  001E6E  D010               	goto	l556
  4028  001E70                     l3507:
  4029  001E70  90D8               	bcf	status,0,c
  4030  001E72  3608               	rlcf	__div_to_l_@quot,f,c
  4031  001E74  3609               	rlcf	__div_to_l_@quot+1,f,c
  4032  001E76  360A               	rlcf	__div_to_l_@quot+2,f,c
  4033  001E78  360B               	rlcf	__div_to_l_@quot+3,f,c
  4034  001E7A  060D               	decf	__div_to_l_@exp1,f,c
  4035  001E7C                     l3509:
  4036  001E7C  660D               	tstfsz	__div_to_l_@exp1,c
  4037  001E7E  D7F8               	goto	l3507
  4038  001E80                     l565:
  4039  001E80  C008  F001         	movff	__div_to_l_@quot,?__div_to_l_
  4040  001E84  C009  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4041  001E88  C00A  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4042  001E8C  C00B  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4043  001E90                     l556:
  4044  001E90  0012               	return	
  4045  001E92                     __end_of__div_to_l_:
  4046                           	opt stack 0
  4047                           tblptru	equ	0xFF8
  4048                           tblptrh	equ	0xFF7
  4049                           tblptrl	equ	0xFF6
  4050                           tablat	equ	0xFF5
  4051                           prodh	equ	0xFF4
  4052                           prodl	equ	0xFF3
  4053                           postinc0	equ	0xFEE
  4054                           wreg	equ	0xFE8
  4055                           indf1	equ	0xFE7
  4056                           fsr1h	equ	0xFE2
  4057                           fsr1l	equ	0xFE1
  4058                           indf2	equ	0xFDF
  4059                           postinc2	equ	0xFDE
  4060                           postdec2	equ	0xFDD
  4061                           fsr2h	equ	0xFDA
  4062                           fsr2l	equ	0xFD9
  4063                           status	equ	0xFD8
  4064                           
  4065 ;; *************** function __tdiv_to_l_ *****************
  4066 ;; Defined at:
  4067 ;;		line 61 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\ftdivl.c"
  4068 ;; Parameters:    Size  Location     Type
  4069 ;;  f1              3    0[COMRAM] float 
  4070 ;;  f2              3    3[COMRAM] float 
  4071 ;; Auto vars:     Size  Location     Type
  4072 ;;  quot            4   11[COMRAM] unsigned long 
  4073 ;;  exp1            1   16[COMRAM] unsigned char 
  4074 ;;  cntr            1   15[COMRAM] unsigned char 
  4075 ;; Return value:  Size  Location     Type
  4076 ;;                  4    0[COMRAM] unsigned long 
  4077 ;; Registers used:
  4078 ;;		wreg, status,2, status,0
  4079 ;; Tracked objects:
  4080 ;;		On entry : 0/0
  4081 ;;		On exit  : 0/0
  4082 ;;		Unchanged: 0/0
  4083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4084 ;;      Params:         6       0       0       0       0       0       0       0       0
  4085 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4086 ;;      Temps:          5       0       0       0       0       0       0       0       0
  4087 ;;      Totals:        17       0       0       0       0       0       0       0       0
  4088 ;;Total ram usage:       17 bytes
  4089 ;; Hardware stack levels used:    1
  4090 ;; This function calls:
  4091 ;;		Nothing
  4092 ;; This function is called by:
  4093 ;;		_sprintf
  4094 ;; This function uses a non-reentrant model
  4095 ;;
  4096                           
  4097                           	psect	text18
  4098  001A6E                     __ptext18:
  4099                           	opt stack 0
  4100  001A6E                     __tdiv_to_l_:
  4101                           	opt stack 29
  4102                           
  4103                           ;incstack = 0
  4104                           ;incstack = 0
  4105  001A6E  0E0F               	movlw	15
  4106  001A70  6E07               	movwf	??__tdiv_to_l_& (0+255),c
  4107  001A72  C001  F008         	movff	__tdiv_to_l_@f1,??__tdiv_to_l_+1
  4108  001A76  C002  F009         	movff	__tdiv_to_l_@f1+1,??__tdiv_to_l_+2
  4109  001A7A  C003  F00A         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_+3
  4110  001A7E  2807               	incf	??__tdiv_to_l_,w,c
  4111  001A80  6E0B               	movwf	(??__tdiv_to_l_+4)& (0+255),c
  4112  001A82  D004               	goto	u1670
  4113  001A84                     u1675:
  4114  001A84  90D8               	bcf	status,0,c
  4115  001A86  320A               	rrcf	??__tdiv_to_l_+3,f,c
  4116  001A88  3209               	rrcf	??__tdiv_to_l_+2,f,c
  4117  001A8A  3208               	rrcf	??__tdiv_to_l_+1,f,c
  4118  001A8C                     u1670:
  4119  001A8C  2E0B               	decfsz	(??__tdiv_to_l_+4)& (0+255),f,c
  4120  001A8E  D7FA               	goto	u1675
  4121  001A90  5008               	movf	??__tdiv_to_l_+1,w,c
  4122  001A92  6E11               	movwf	__tdiv_to_l_@exp1,c
  4123  001A94  6611               	tstfsz	__tdiv_to_l_@exp1& (0+255),c
  4124  001A96  D001               	goto	l3405
  4125  001A98  D061               	goto	u1740
  4126  001A9A                     l3405:
  4127  001A9A  0E0F               	movlw	15
  4128  001A9C  6E07               	movwf	??__tdiv_to_l_& (0+255),c
  4129  001A9E  C004  F008         	movff	__tdiv_to_l_@f2,??__tdiv_to_l_+1
  4130  001AA2  C005  F009         	movff	__tdiv_to_l_@f2+1,??__tdiv_to_l_+2
  4131  001AA6  C006  F00A         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_+3
  4132  001AAA  2807               	incf	??__tdiv_to_l_,w,c
  4133  001AAC  6E0B               	movwf	(??__tdiv_to_l_+4)& (0+255),c
  4134  001AAE  D004               	goto	u1690
  4135  001AB0                     u1695:
  4136  001AB0  90D8               	bcf	status,0,c
  4137  001AB2  320A               	rrcf	??__tdiv_to_l_+3,f,c
  4138  001AB4  3209               	rrcf	??__tdiv_to_l_+2,f,c
  4139  001AB6  3208               	rrcf	??__tdiv_to_l_+1,f,c
  4140  001AB8                     u1690:
  4141  001AB8  2E0B               	decfsz	(??__tdiv_to_l_+4)& (0+255),f,c
  4142  001ABA  D7FA               	goto	u1695
  4143  001ABC  5008               	movf	??__tdiv_to_l_+1,w,c
  4144  001ABE  6E10               	movwf	__tdiv_to_l_@cntr,c
  4145  001AC0  6610               	tstfsz	__tdiv_to_l_@cntr& (0+255),c
  4146  001AC2  D001               	goto	l3411
  4147  001AC4  D04B               	goto	u1740
  4148  001AC6                     l3411:
  4149  001AC6  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  4150  001AC8  0EFF               	movlw	255
  4151  001ACA  1601               	andwf	__tdiv_to_l_@f1,f,c
  4152  001ACC  0EFF               	movlw	255
  4153  001ACE  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  4154  001AD0  0E00               	movlw	0
  4155  001AD2  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  4156  001AD4  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  4157  001AD6  0EFF               	movlw	255
  4158  001AD8  1604               	andwf	__tdiv_to_l_@f2,f,c
  4159  001ADA  0EFF               	movlw	255
  4160  001ADC  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  4161  001ADE  0E00               	movlw	0
  4162  001AE0  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  4163  001AE2  0E00               	movlw	0
  4164  001AE4  6E0C               	movwf	__tdiv_to_l_@quot,c
  4165  001AE6  0E00               	movlw	0
  4166  001AE8  6E0D               	movwf	__tdiv_to_l_@quot+1,c
  4167  001AEA  0E00               	movlw	0
  4168  001AEC  6E0E               	movwf	__tdiv_to_l_@quot+2,c
  4169  001AEE  0E00               	movlw	0
  4170  001AF0  6E0F               	movwf	__tdiv_to_l_@quot+3,c
  4171  001AF2  0E7F               	movlw	127
  4172  001AF4  5E11               	subwf	__tdiv_to_l_@exp1,f,c
  4173  001AF6  5010               	movf	__tdiv_to_l_@cntr,w,c
  4174  001AF8  0F98               	addlw	152
  4175  001AFA  5E11               	subwf	__tdiv_to_l_@exp1,f,c
  4176  001AFC  6E07               	movwf	??__tdiv_to_l_& (0+255),c
  4177  001AFE  0E18               	movlw	24
  4178  001B00  6E10               	movwf	__tdiv_to_l_@cntr,c
  4179  001B02  5007               	movf	??__tdiv_to_l_& (0+255),w,c
  4180  001B04                     l3425:
  4181  001B04  90D8               	bcf	status,0,c
  4182  001B06  360C               	rlcf	__tdiv_to_l_@quot,f,c
  4183  001B08  360D               	rlcf	__tdiv_to_l_@quot+1,f,c
  4184  001B0A  360E               	rlcf	__tdiv_to_l_@quot+2,f,c
  4185  001B0C  360F               	rlcf	__tdiv_to_l_@quot+3,f,c
  4186  001B0E  5004               	movf	__tdiv_to_l_@f2,w,c
  4187  001B10  5C01               	subwf	__tdiv_to_l_@f1,w,c
  4188  001B12  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4189  001B14  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  4190  001B16  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4191  001B18  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  4192  001B1A  A0D8               	btfss	status,0,c
  4193  001B1C  D007               	goto	l677
  4194  001B1E  5004               	movf	__tdiv_to_l_@f2,w,c
  4195  001B20  5E01               	subwf	__tdiv_to_l_@f1,f,c
  4196  001B22  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4197  001B24  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  4198  001B26  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4199  001B28  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  4200  001B2A  800C               	bsf	__tdiv_to_l_@quot,0,c
  4201  001B2C                     l677:
  4202  001B2C  90D8               	bcf	status,0,c
  4203  001B2E  3601               	rlcf	__tdiv_to_l_@f1,f,c
  4204  001B30  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  4205  001B32  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  4206  001B34  2E10               	decfsz	__tdiv_to_l_@cntr,f,c
  4207  001B36  D7E6               	goto	l3425
  4208  001B38  AE11               	btfss	__tdiv_to_l_@exp1,7,c
  4209  001B3A  D00D               	goto	l3445
  4210  001B3C  5011               	movf	__tdiv_to_l_@exp1,w,c
  4211  001B3E  0A80               	xorlw	128
  4212  001B40  0F97               	addlw	151
  4213  001B42  A0D8               	btfss	status,0,c
  4214  001B44  D00B               	goto	u1740
  4215  001B46                     l3441:
  4216  001B46  90D8               	bcf	status,0,c
  4217  001B48  320F               	rrcf	__tdiv_to_l_@quot+3,f,c
  4218  001B4A  320E               	rrcf	__tdiv_to_l_@quot+2,f,c
  4219  001B4C  320D               	rrcf	__tdiv_to_l_@quot+1,f,c
  4220  001B4E  320C               	rrcf	__tdiv_to_l_@quot,f,c
  4221  001B50  3E11               	incfsz	__tdiv_to_l_@exp1,f,c
  4222  001B52  D7F9               	goto	l3441
  4223  001B54  D014               	goto	l683
  4224  001B56                     l3445:
  4225  001B56  0E17               	movlw	23
  4226  001B58  6411               	cpfsgt	__tdiv_to_l_@exp1,c
  4227  001B5A  D00F               	goto	l3453
  4228  001B5C                     u1740:
  4229  001B5C  0E00               	movlw	0
  4230  001B5E  6E01               	movwf	?__tdiv_to_l_,c
  4231  001B60  0E00               	movlw	0
  4232  001B62  6E02               	movwf	?__tdiv_to_l_+1,c
  4233  001B64  0E00               	movlw	0
  4234  001B66  6E03               	movwf	?__tdiv_to_l_+2,c
  4235  001B68  0E00               	movlw	0
  4236  001B6A  6E04               	movwf	?__tdiv_to_l_+3,c
  4237  001B6C  D010               	goto	l674
  4238  001B6E                     l3451:
  4239  001B6E  90D8               	bcf	status,0,c
  4240  001B70  360C               	rlcf	__tdiv_to_l_@quot,f,c
  4241  001B72  360D               	rlcf	__tdiv_to_l_@quot+1,f,c
  4242  001B74  360E               	rlcf	__tdiv_to_l_@quot+2,f,c
  4243  001B76  360F               	rlcf	__tdiv_to_l_@quot+3,f,c
  4244  001B78  0611               	decf	__tdiv_to_l_@exp1,f,c
  4245  001B7A                     l3453:
  4246  001B7A  6611               	tstfsz	__tdiv_to_l_@exp1,c
  4247  001B7C  D7F8               	goto	l3451
  4248  001B7E                     l683:
  4249  001B7E  C00C  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4250  001B82  C00D  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4251  001B86  C00E  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4252  001B8A  C00F  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4253  001B8E                     l674:
  4254  001B8E  0012               	return	
  4255  001B90                     __end_of__tdiv_to_l_:
  4256                           	opt stack 0
  4257                           tblptru	equ	0xFF8
  4258                           tblptrh	equ	0xFF7
  4259                           tblptrl	equ	0xFF6
  4260                           tablat	equ	0xFF5
  4261                           prodh	equ	0xFF4
  4262                           prodl	equ	0xFF3
  4263                           postinc0	equ	0xFEE
  4264                           wreg	equ	0xFE8
  4265                           indf1	equ	0xFE7
  4266                           fsr1h	equ	0xFE2
  4267                           fsr1l	equ	0xFE1
  4268                           indf2	equ	0xFDF
  4269                           postinc2	equ	0xFDE
  4270                           postdec2	equ	0xFDD
  4271                           fsr2h	equ	0xFDA
  4272                           fsr2l	equ	0xFD9
  4273                           status	equ	0xFD8
  4274                           
  4275 ;; *************** function _isdigit *****************
  4276 ;; Defined at:
  4277 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\isdigit.c"
  4278 ;; Parameters:    Size  Location     Type
  4279 ;;  c               1    0[COMRAM] unsigned char 
  4280 ;; Auto vars:     Size  Location     Type
  4281 ;;		None
  4282 ;; Return value:  Size  Location     Type
  4283 ;;		None               void
  4284 ;; Registers used:
  4285 ;;		wreg, status,2, status,0
  4286 ;; Tracked objects:
  4287 ;;		On entry : 0/0
  4288 ;;		On exit  : 0/0
  4289 ;;		Unchanged: 0/0
  4290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4291 ;;      Params:         1       0       0       0       0       0       0       0       0
  4292 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4293 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4294 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4295 ;;Total ram usage:        3 bytes
  4296 ;; Hardware stack levels used:    1
  4297 ;; This function calls:
  4298 ;;		Nothing
  4299 ;; This function is called by:
  4300 ;;		_sprintf
  4301 ;; This function uses a non-reentrant model
  4302 ;;
  4303                           
  4304                           	psect	text19
  4305  002A34                     __ptext19:
  4306                           	opt stack 0
  4307  002A34                     _isdigit:
  4308                           	opt stack 29
  4309                           
  4310                           ;incstack = 0
  4311                           ;incstack = 0
  4312  002A34  6E02               	movwf	??_isdigit& (0+255),c
  4313  002A36  0E00               	movlw	0
  4314  002A38  6E03               	movwf	_isdigit$870,c
  4315  002A3A  5002               	movf	??_isdigit& (0+255),w,c
  4316  002A3C  0E3A               	movlw	58
  4317  002A3E  6001               	cpfslt	isdigit@c,c
  4318  002A40  D007               	goto	l3395
  4319  002A42  0E2F               	movlw	47
  4320  002A44  6401               	cpfsgt	isdigit@c,c
  4321  002A46  D004               	goto	l3395
  4322  002A48  6E02               	movwf	??_isdigit& (0+255),c
  4323  002A4A  0E01               	movlw	1
  4324  002A4C  6E03               	movwf	_isdigit$870,c
  4325  002A4E  5002               	movf	??_isdigit& (0+255),w,c
  4326  002A50                     l3395:
  4327  002A50  C003  F002         	movff	_isdigit$870,??_isdigit
  4328  002A54  3002               	rrcf	??_isdigit,w,c
  4329  002A56  0012               	return	
  4330  002A58                     __end_of_isdigit:
  4331                           	opt stack 0
  4332                           tblptru	equ	0xFF8
  4333                           tblptrh	equ	0xFF7
  4334                           tblptrl	equ	0xFF6
  4335                           tablat	equ	0xFF5
  4336                           prodh	equ	0xFF4
  4337                           prodl	equ	0xFF3
  4338                           postinc0	equ	0xFEE
  4339                           wreg	equ	0xFE8
  4340                           indf1	equ	0xFE7
  4341                           fsr1h	equ	0xFE2
  4342                           fsr1l	equ	0xFE1
  4343                           indf2	equ	0xFDF
  4344                           postinc2	equ	0xFDE
  4345                           postdec2	equ	0xFDD
  4346                           fsr2h	equ	0xFDA
  4347                           fsr2l	equ	0xFD9
  4348                           status	equ	0xFD8
  4349                           
  4350 ;; *************** function _scale *****************
  4351 ;; Defined at:
  4352 ;;		line 426 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\doprnt.c"
  4353 ;; Parameters:    Size  Location     Type
  4354 ;;  scl             1   54[COMRAM] char 
  4355 ;; Auto vars:     Size  Location     Type
  4356 ;;		None
  4357 ;; Return value:  Size  Location     Type
  4358 ;;                  3   54[COMRAM] char 
  4359 ;; Registers used:
  4360 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4361 ;; Tracked objects:
  4362 ;;		On entry : 0/0
  4363 ;;		On exit  : 0/0
  4364 ;;		Unchanged: 0/0
  4365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4366 ;;      Params:         3       0       0       0       0       0       0       0       0
  4367 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4368 ;;      Temps:          6       0       0       0       0       0       0       0       0
  4369 ;;      Totals:        12       0       0       0       0       0       0       0       0
  4370 ;;Total ram usage:       12 bytes
  4371 ;; Hardware stack levels used:    1
  4372 ;; Hardware stack levels required when called:    2
  4373 ;; This function calls:
  4374 ;;		___ftmul
  4375 ;;		___awdiv
  4376 ;;		___awmod
  4377 ;;		___wmul
  4378 ;; This function is called by:
  4379 ;;		_sprintf
  4380 ;; This function uses a non-reentrant model
  4381 ;;
  4382                           
  4383                           	psect	text20
  4384  0011D2                     __ptext20:
  4385                           	opt stack 0
  4386  0011D2                     _scale:
  4387                           	opt stack 27
  4388                           
  4389                           ;doprnt.c: 428: if(scl < 0) {
  4390                           
  4391                           ;incstack = 0
  4392                           ;incstack = 0
  4393  0011D2  AE37               	btfss	scale@scl,7,c
  4394  0011D4  D108               	goto	l4149
  4395                           
  4396                           ;doprnt.c: 429: scl = -scl;
  4397  0011D6  6C37               	negf	scale@scl,c
  4398                           
  4399                           ;doprnt.c: 430: if(scl>=110)
  4400  0011D8  5037               	movf	scale@scl,w,c
  4401  0011DA  0A80               	xorlw	128
  4402  0011DC  0F12               	addlw	-238
  4403  0011DE  A0D8               	btfss	status,0,c
  4404  0011E0  D09D               	goto	l4139
  4405                           
  4406                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4407  0011E2  0E00               	movlw	0
  4408  0011E4  6E14               	movwf	?___wmul+3,c
  4409  0011E6  0E03               	movlw	3
  4410  0011E8  6E13               	movwf	?___wmul+2,c
  4411  0011EA  0E00               	movlw	0
  4412  0011EC  6E0B               	movwf	?___awdiv+3,c
  4413  0011EE  0E0A               	movlw	10
  4414  0011F0  6E0A               	movwf	?___awdiv+2,c
  4415  0011F2  0E00               	movlw	0
  4416  0011F4  6E04               	movwf	?___awmod+3,c
  4417  0011F6  0E64               	movlw	100
  4418  0011F8  6E03               	movwf	?___awmod+2,c
  4419  0011FA  5037               	movf	scale@scl,w,c
  4420  0011FC  6E01               	movwf	?___awmod,c
  4421  0011FE  6A02               	clrf	?___awmod+1,c
  4422  001200  BE01               	btfsc	?___awmod,7,c
  4423  001202  0602               	decf	?___awmod+1,f,c
  4424  001204  ECD0  F012         	call	___awmod	;wreg free
  4425  001208  C001  F008         	movff	?___awmod,?___awdiv
  4426  00120C  C002  F009         	movff	?___awmod+1,?___awdiv+1
  4427  001210  EC81  F011         	call	___awdiv	;wreg free
  4428  001214  0E09               	movlw	9
  4429  001216  2408               	addwf	?___awdiv,w,c
  4430  001218  6E11               	movwf	?___wmul,c
  4431  00121A  0E00               	movlw	0
  4432  00121C  2009               	addwfc	?___awdiv+1,w,c
  4433  00121E  6E12               	movwf	?___wmul+1,c
  4434  001220  EC87  F014         	call	___wmul	;wreg free
  4435  001224  0E28               	movlw	low __npowers_
  4436  001226  2411               	addwf	?___wmul,w,c
  4437  001228  6EF6               	movwf	tblptrl,c
  4438  00122A  0E08               	movlw	high __npowers_
  4439  00122C  2012               	addwfc	?___wmul+1,w,c
  4440  00122E  6EF7               	movwf	tblptrh,c
  4441  001230  0009               	tblrd		*+
  4442  001232  CFF5 F03A          	movff	tablat,??_scale
  4443  001236  0009               	tblrd		*+
  4444  001238  CFF5 F03B          	movff	tablat,??_scale+1
  4445  00123C  0009               	tblrd		*+
  4446  00123E  CFF5 F03C          	movff	tablat,??_scale+2
  4447  001242  C03C  F02B         	movff	??_scale+2,?___ftmul+5
  4448  001246  C03B  F02A         	movff	??_scale+1,?___ftmul+4
  4449  00124A  C03A  F029         	movff	??_scale,?___ftmul+3
  4450  00124E  0E00               	movlw	0
  4451  001250  6E14               	movwf	?___wmul+3,c
  4452  001252  0E03               	movlw	3
  4453  001254  6E13               	movwf	?___wmul+2,c
  4454  001256  0E00               	movlw	0
  4455  001258  6E0B               	movwf	?___awdiv+3,c
  4456  00125A  0E64               	movlw	100
  4457  00125C  6E0A               	movwf	?___awdiv+2,c
  4458  00125E  5037               	movf	scale@scl,w,c
  4459  001260  6E08               	movwf	?___awdiv,c
  4460  001262  6A09               	clrf	?___awdiv+1,c
  4461  001264  BE08               	btfsc	?___awdiv,7,c
  4462  001266  0609               	decf	?___awdiv+1,f,c
  4463  001268  EC81  F011         	call	___awdiv	;wreg free
  4464  00126C  0E12               	movlw	18
  4465  00126E  2408               	addwf	?___awdiv,w,c
  4466  001270  6E11               	movwf	?___wmul,c
  4467  001272  0E00               	movlw	0
  4468  001274  2009               	addwfc	?___awdiv+1,w,c
  4469  001276  6E12               	movwf	?___wmul+1,c
  4470  001278  EC87  F014         	call	___wmul	;wreg free
  4471  00127C  0E28               	movlw	low __npowers_
  4472  00127E  2411               	addwf	?___wmul,w,c
  4473  001280  6EF6               	movwf	tblptrl,c
  4474  001282  0E08               	movlw	high __npowers_
  4475  001284  2012               	addwfc	?___wmul+1,w,c
  4476  001286  6EF7               	movwf	tblptrh,c
  4477  001288  0009               	tblrd		*+
  4478  00128A  CFF5 F03D          	movff	tablat,??_scale+3
  4479  00128E  0009               	tblrd		*+
  4480  001290  CFF5 F03E          	movff	tablat,??_scale+4
  4481  001294  0009               	tblrd		*+
  4482  001296  CFF5 F03F          	movff	tablat,??_scale+5
  4483  00129A  C03F  F028         	movff	??_scale+5,?___ftmul+2
  4484  00129E  C03E  F027         	movff	??_scale+4,?___ftmul+1
  4485  0012A2  C03D  F026         	movff	??_scale+3,?___ftmul
  4486  0012A6  ECC8  F00D         	call	___ftmul	;wreg free
  4487  0012AA  C028  F042         	movff	?___ftmul+2,_scale$1211+2
  4488  0012AE  C027  F041         	movff	?___ftmul+1,_scale$1211+1
  4489  0012B2  C026  F040         	movff	?___ftmul,_scale$1211
  4490                           
  4491                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4492  0012B6  C040  F026         	movff	_scale$1211,?___ftmul
  4493  0012BA  C041  F027         	movff	_scale$1211+1,?___ftmul+1
  4494  0012BE  C042  F028         	movff	_scale$1211+2,?___ftmul+2
  4495  0012C2  0E00               	movlw	0
  4496  0012C4  6E14               	movwf	?___wmul+3,c
  4497  0012C6  0E03               	movlw	3
  4498  0012C8  6E13               	movwf	?___wmul+2,c
  4499  0012CA  0E00               	movlw	0
  4500  0012CC  6E04               	movwf	?___awmod+3,c
  4501  0012CE  0E0A               	movlw	10
  4502  0012D0  6E03               	movwf	?___awmod+2,c
  4503  0012D2  5037               	movf	scale@scl,w,c
  4504  0012D4  6E01               	movwf	?___awmod,c
  4505  0012D6  6A02               	clrf	?___awmod+1,c
  4506  0012D8  BE01               	btfsc	?___awmod,7,c
  4507  0012DA  0602               	decf	?___awmod+1,f,c
  4508  0012DC  ECD0  F012         	call	___awmod	;wreg free
  4509  0012E0  C001  F011         	movff	?___awmod,?___wmul
  4510  0012E4  C002  F012         	movff	?___awmod+1,?___wmul+1
  4511  0012E8  EC87  F014         	call	___wmul	;wreg free
  4512  0012EC  0E28               	movlw	low __npowers_
  4513  0012EE  2411               	addwf	?___wmul,w,c
  4514  0012F0  6EF6               	movwf	tblptrl,c
  4515  0012F2  0E08               	movlw	high __npowers_
  4516  0012F4  2012               	addwfc	?___wmul+1,w,c
  4517  0012F6  6EF7               	movwf	tblptrh,c
  4518  0012F8  0009               	tblrd		*+
  4519  0012FA  CFF5 F03A          	movff	tablat,??_scale
  4520  0012FE  0009               	tblrd		*+
  4521  001300  CFF5 F03B          	movff	tablat,??_scale+1
  4522  001304  0009               	tblrd		*+
  4523  001306  CFF5 F03C          	movff	tablat,??_scale+2
  4524  00130A  C03C  F02B         	movff	??_scale+2,?___ftmul+5
  4525  00130E  C03B  F02A         	movff	??_scale+1,?___ftmul+4
  4526  001312  C03A  F029         	movff	??_scale,?___ftmul+3
  4527  001316  ECC8  F00D         	call	___ftmul	;wreg free
  4528  00131A  D164               	goto	L8
  4529  00131C                     l4139:
  4530                           
  4531                           ;doprnt.c: 432: else if(scl > 10)
  4532  00131C  5037               	movf	scale@scl,w,c
  4533  00131E  0A80               	xorlw	128
  4534  001320  0F75               	addlw	-139
  4535  001322  A0D8               	btfss	status,0,c
  4536  001324  D059               	goto	l4145
  4537                           
  4538                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  4539  001326  0E00               	movlw	0
  4540  001328  6E14               	movwf	?___wmul+3,c
  4541  00132A  0E03               	movlw	3
  4542  00132C  6E13               	movwf	?___wmul+2,c
  4543  00132E  0E00               	movlw	0
  4544  001330  6E0B               	movwf	?___awdiv+3,c
  4545  001332  0E0A               	movlw	10
  4546  001334  6E0A               	movwf	?___awdiv+2,c
  4547  001336  5037               	movf	scale@scl,w,c
  4548  001338  6E08               	movwf	?___awdiv,c
  4549  00133A  6A09               	clrf	?___awdiv+1,c
  4550  00133C  BE08               	btfsc	?___awdiv,7,c
  4551  00133E  0609               	decf	?___awdiv+1,f,c
  4552  001340  EC81  F011         	call	___awdiv	;wreg free
  4553  001344  0E09               	movlw	9
  4554  001346  2408               	addwf	?___awdiv,w,c
  4555  001348  6E11               	movwf	?___wmul,c
  4556  00134A  0E00               	movlw	0
  4557  00134C  2009               	addwfc	?___awdiv+1,w,c
  4558  00134E  6E12               	movwf	?___wmul+1,c
  4559  001350  EC87  F014         	call	___wmul	;wreg free
  4560  001354  0E28               	movlw	low __npowers_
  4561  001356  2411               	addwf	?___wmul,w,c
  4562  001358  6EF6               	movwf	tblptrl,c
  4563  00135A  0E08               	movlw	high __npowers_
  4564  00135C  2012               	addwfc	?___wmul+1,w,c
  4565  00135E  6EF7               	movwf	tblptrh,c
  4566  001360  0009               	tblrd		*+
  4567  001362  CFF5 F03A          	movff	tablat,??_scale
  4568  001366  0009               	tblrd		*+
  4569  001368  CFF5 F03B          	movff	tablat,??_scale+1
  4570  00136C  0009               	tblrd		*+
  4571  00136E  CFF5 F03C          	movff	tablat,??_scale+2
  4572  001372  C03C  F028         	movff	??_scale+2,?___ftmul+2
  4573  001376  C03B  F027         	movff	??_scale+1,?___ftmul+1
  4574  00137A  C03A  F026         	movff	??_scale,?___ftmul
  4575  00137E  0E00               	movlw	0
  4576  001380  6E14               	movwf	?___wmul+3,c
  4577  001382  0E03               	movlw	3
  4578  001384  6E13               	movwf	?___wmul+2,c
  4579  001386  0E00               	movlw	0
  4580  001388  6E04               	movwf	?___awmod+3,c
  4581  00138A  0E0A               	movlw	10
  4582  00138C  6E03               	movwf	?___awmod+2,c
  4583  00138E  5037               	movf	scale@scl,w,c
  4584  001390  6E01               	movwf	?___awmod,c
  4585  001392  6A02               	clrf	?___awmod+1,c
  4586  001394  BE01               	btfsc	?___awmod,7,c
  4587  001396  0602               	decf	?___awmod+1,f,c
  4588  001398  ECD0  F012         	call	___awmod	;wreg free
  4589  00139C  C001  F011         	movff	?___awmod,?___wmul
  4590  0013A0  C002  F012         	movff	?___awmod+1,?___wmul+1
  4591  0013A4  EC87  F014         	call	___wmul	;wreg free
  4592  0013A8  0E28               	movlw	low __npowers_
  4593  0013AA  2411               	addwf	?___wmul,w,c
  4594  0013AC  6EF6               	movwf	tblptrl,c
  4595  0013AE  0E08               	movlw	high __npowers_
  4596  0013B0  2012               	addwfc	?___wmul+1,w,c
  4597  0013B2  6EF7               	movwf	tblptrh,c
  4598  0013B4  0009               	tblrd		*+
  4599  0013B6  CFF5 F03D          	movff	tablat,??_scale+3
  4600  0013BA  0009               	tblrd		*+
  4601  0013BC  CFF5 F03E          	movff	tablat,??_scale+4
  4602  0013C0  0009               	tblrd		*+
  4603  0013C2  CFF5 F03F          	movff	tablat,??_scale+5
  4604  0013C6  C03F  F02B         	movff	??_scale+5,?___ftmul+5
  4605  0013CA  C03E  F02A         	movff	??_scale+4,?___ftmul+4
  4606  0013CE  C03D  F029         	movff	??_scale+3,?___ftmul+3
  4607  0013D2  ECC8  F00D         	call	___ftmul	;wreg free
  4608  0013D6  D106               	goto	L8
  4609  0013D8                     l4145:
  4610                           
  4611                           ;doprnt.c: 434: return _npowers_[scl];
  4612  0013D8  5037               	movf	scale@scl,w,c
  4613  0013DA  0D03               	mullw	3
  4614  0013DC  0E28               	movlw	low __npowers_
  4615  0013DE  24F3               	addwf	prodl,w,c
  4616  0013E0  6EF6               	movwf	tblptrl,c
  4617  0013E2  0E08               	movlw	high __npowers_
  4618  0013E4  D10C               	goto	L7
  4619  0013E6                     l4149:
  4620                           
  4621                           ;doprnt.c: 435: }
  4622                           ;doprnt.c: 436: if(scl>=110)
  4623  0013E6  5037               	movf	scale@scl,w,c
  4624  0013E8  0A80               	xorlw	128
  4625  0013EA  0F12               	addlw	-238
  4626  0013EC  A0D8               	btfss	status,0,c
  4627  0013EE  D09D               	goto	l4157
  4628                           
  4629                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4630  0013F0  0E00               	movlw	0
  4631  0013F2  6E14               	movwf	?___wmul+3,c
  4632  0013F4  0E03               	movlw	3
  4633  0013F6  6E13               	movwf	?___wmul+2,c
  4634  0013F8  0E00               	movlw	0
  4635  0013FA  6E0B               	movwf	?___awdiv+3,c
  4636  0013FC  0E0A               	movlw	10
  4637  0013FE  6E0A               	movwf	?___awdiv+2,c
  4638  001400  0E00               	movlw	0
  4639  001402  6E04               	movwf	?___awmod+3,c
  4640  001404  0E64               	movlw	100
  4641  001406  6E03               	movwf	?___awmod+2,c
  4642  001408  5037               	movf	scale@scl,w,c
  4643  00140A  6E01               	movwf	?___awmod,c
  4644  00140C  6A02               	clrf	?___awmod+1,c
  4645  00140E  BE01               	btfsc	?___awmod,7,c
  4646  001410  0602               	decf	?___awmod+1,f,c
  4647  001412  ECD0  F012         	call	___awmod	;wreg free
  4648  001416  C001  F008         	movff	?___awmod,?___awdiv
  4649  00141A  C002  F009         	movff	?___awmod+1,?___awdiv+1
  4650  00141E  EC81  F011         	call	___awdiv	;wreg free
  4651  001422  0E09               	movlw	9
  4652  001424  2408               	addwf	?___awdiv,w,c
  4653  001426  6E11               	movwf	?___wmul,c
  4654  001428  0E00               	movlw	0
  4655  00142A  2009               	addwfc	?___awdiv+1,w,c
  4656  00142C  6E12               	movwf	?___wmul+1,c
  4657  00142E  EC87  F014         	call	___wmul	;wreg free
  4658  001432  0E4F               	movlw	low __powers_
  4659  001434  2411               	addwf	?___wmul,w,c
  4660  001436  6EF6               	movwf	tblptrl,c
  4661  001438  0E08               	movlw	high __powers_
  4662  00143A  2012               	addwfc	?___wmul+1,w,c
  4663  00143C  6EF7               	movwf	tblptrh,c
  4664  00143E  0009               	tblrd		*+
  4665  001440  CFF5 F03A          	movff	tablat,??_scale
  4666  001444  0009               	tblrd		*+
  4667  001446  CFF5 F03B          	movff	tablat,??_scale+1
  4668  00144A  0009               	tblrd		*+
  4669  00144C  CFF5 F03C          	movff	tablat,??_scale+2
  4670  001450  C03C  F02B         	movff	??_scale+2,?___ftmul+5
  4671  001454  C03B  F02A         	movff	??_scale+1,?___ftmul+4
  4672  001458  C03A  F029         	movff	??_scale,?___ftmul+3
  4673  00145C  0E00               	movlw	0
  4674  00145E  6E14               	movwf	?___wmul+3,c
  4675  001460  0E03               	movlw	3
  4676  001462  6E13               	movwf	?___wmul+2,c
  4677  001464  0E00               	movlw	0
  4678  001466  6E0B               	movwf	?___awdiv+3,c
  4679  001468  0E64               	movlw	100
  4680  00146A  6E0A               	movwf	?___awdiv+2,c
  4681  00146C  5037               	movf	scale@scl,w,c
  4682  00146E  6E08               	movwf	?___awdiv,c
  4683  001470  6A09               	clrf	?___awdiv+1,c
  4684  001472  BE08               	btfsc	?___awdiv,7,c
  4685  001474  0609               	decf	?___awdiv+1,f,c
  4686  001476  EC81  F011         	call	___awdiv	;wreg free
  4687  00147A  0E12               	movlw	18
  4688  00147C  2408               	addwf	?___awdiv,w,c
  4689  00147E  6E11               	movwf	?___wmul,c
  4690  001480  0E00               	movlw	0
  4691  001482  2009               	addwfc	?___awdiv+1,w,c
  4692  001484  6E12               	movwf	?___wmul+1,c
  4693  001486  EC87  F014         	call	___wmul	;wreg free
  4694  00148A  0E4F               	movlw	low __powers_
  4695  00148C  2411               	addwf	?___wmul,w,c
  4696  00148E  6EF6               	movwf	tblptrl,c
  4697  001490  0E08               	movlw	high __powers_
  4698  001492  2012               	addwfc	?___wmul+1,w,c
  4699  001494  6EF7               	movwf	tblptrh,c
  4700  001496  0009               	tblrd		*+
  4701  001498  CFF5 F03D          	movff	tablat,??_scale+3
  4702  00149C  0009               	tblrd		*+
  4703  00149E  CFF5 F03E          	movff	tablat,??_scale+4
  4704  0014A2  0009               	tblrd		*+
  4705  0014A4  CFF5 F03F          	movff	tablat,??_scale+5
  4706  0014A8  C03F  F028         	movff	??_scale+5,?___ftmul+2
  4707  0014AC  C03E  F027         	movff	??_scale+4,?___ftmul+1
  4708  0014B0  C03D  F026         	movff	??_scale+3,?___ftmul
  4709  0014B4  ECC8  F00D         	call	___ftmul	;wreg free
  4710  0014B8  C028  F042         	movff	?___ftmul+2,_scale$1211+2
  4711  0014BC  C027  F041         	movff	?___ftmul+1,_scale$1211+1
  4712  0014C0  C026  F040         	movff	?___ftmul,_scale$1211
  4713                           
  4714                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4715  0014C4  C040  F026         	movff	_scale$1211,?___ftmul
  4716  0014C8  C041  F027         	movff	_scale$1211+1,?___ftmul+1
  4717  0014CC  C042  F028         	movff	_scale$1211+2,?___ftmul+2
  4718  0014D0  0E00               	movlw	0
  4719  0014D2  6E14               	movwf	?___wmul+3,c
  4720  0014D4  0E03               	movlw	3
  4721  0014D6  6E13               	movwf	?___wmul+2,c
  4722  0014D8  0E00               	movlw	0
  4723  0014DA  6E04               	movwf	?___awmod+3,c
  4724  0014DC  0E0A               	movlw	10
  4725  0014DE  6E03               	movwf	?___awmod+2,c
  4726  0014E0  5037               	movf	scale@scl,w,c
  4727  0014E2  6E01               	movwf	?___awmod,c
  4728  0014E4  6A02               	clrf	?___awmod+1,c
  4729  0014E6  BE01               	btfsc	?___awmod,7,c
  4730  0014E8  0602               	decf	?___awmod+1,f,c
  4731  0014EA  ECD0  F012         	call	___awmod	;wreg free
  4732  0014EE  C001  F011         	movff	?___awmod,?___wmul
  4733  0014F2  C002  F012         	movff	?___awmod+1,?___wmul+1
  4734  0014F6  EC87  F014         	call	___wmul	;wreg free
  4735  0014FA  0E4F               	movlw	low __powers_
  4736  0014FC  2411               	addwf	?___wmul,w,c
  4737  0014FE  6EF6               	movwf	tblptrl,c
  4738  001500  0E08               	movlw	high __powers_
  4739  001502  2012               	addwfc	?___wmul+1,w,c
  4740  001504  6EF7               	movwf	tblptrh,c
  4741  001506  0009               	tblrd		*+
  4742  001508  CFF5 F03A          	movff	tablat,??_scale
  4743  00150C  0009               	tblrd		*+
  4744  00150E  CFF5 F03B          	movff	tablat,??_scale+1
  4745  001512  0009               	tblrd		*+
  4746  001514  CFF5 F03C          	movff	tablat,??_scale+2
  4747  001518  C03C  F02B         	movff	??_scale+2,?___ftmul+5
  4748  00151C  C03B  F02A         	movff	??_scale+1,?___ftmul+4
  4749  001520  C03A  F029         	movff	??_scale,?___ftmul+3
  4750  001524  ECC8  F00D         	call	___ftmul	;wreg free
  4751  001528  D05D               	goto	L8
  4752  00152A                     l4157:
  4753                           
  4754                           ;doprnt.c: 438: else if(scl > 10)
  4755  00152A  5037               	movf	scale@scl,w,c
  4756  00152C  0A80               	xorlw	128
  4757  00152E  0F75               	addlw	-139
  4758  001530  A0D8               	btfss	status,0,c
  4759  001532  D05F               	goto	l4163
  4760                           
  4761                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  4762  001534  0E00               	movlw	0
  4763  001536  6E14               	movwf	?___wmul+3,c
  4764  001538  0E03               	movlw	3
  4765  00153A  6E13               	movwf	?___wmul+2,c
  4766  00153C  0E00               	movlw	0
  4767  00153E  6E0B               	movwf	?___awdiv+3,c
  4768  001540  0E0A               	movlw	10
  4769  001542  6E0A               	movwf	?___awdiv+2,c
  4770  001544  5037               	movf	scale@scl,w,c
  4771  001546  6E08               	movwf	?___awdiv,c
  4772  001548  6A09               	clrf	?___awdiv+1,c
  4773  00154A  BE08               	btfsc	?___awdiv,7,c
  4774  00154C  0609               	decf	?___awdiv+1,f,c
  4775  00154E  EC81  F011         	call	___awdiv	;wreg free
  4776  001552  0E09               	movlw	9
  4777  001554  2408               	addwf	?___awdiv,w,c
  4778  001556  6E11               	movwf	?___wmul,c
  4779  001558  0E00               	movlw	0
  4780  00155A  2009               	addwfc	?___awdiv+1,w,c
  4781  00155C  6E12               	movwf	?___wmul+1,c
  4782  00155E  EC87  F014         	call	___wmul	;wreg free
  4783  001562  0E4F               	movlw	low __powers_
  4784  001564  2411               	addwf	?___wmul,w,c
  4785  001566  6EF6               	movwf	tblptrl,c
  4786  001568  0E08               	movlw	high __powers_
  4787  00156A  2012               	addwfc	?___wmul+1,w,c
  4788  00156C  6EF7               	movwf	tblptrh,c
  4789  00156E  0009               	tblrd		*+
  4790  001570  CFF5 F03A          	movff	tablat,??_scale
  4791  001574  0009               	tblrd		*+
  4792  001576  CFF5 F03B          	movff	tablat,??_scale+1
  4793  00157A  0009               	tblrd		*+
  4794  00157C  CFF5 F03C          	movff	tablat,??_scale+2
  4795  001580  C03C  F028         	movff	??_scale+2,?___ftmul+2
  4796  001584  C03B  F027         	movff	??_scale+1,?___ftmul+1
  4797  001588  C03A  F026         	movff	??_scale,?___ftmul
  4798  00158C  0E00               	movlw	0
  4799  00158E  6E14               	movwf	?___wmul+3,c
  4800  001590  0E03               	movlw	3
  4801  001592  6E13               	movwf	?___wmul+2,c
  4802  001594  0E00               	movlw	0
  4803  001596  6E04               	movwf	?___awmod+3,c
  4804  001598  0E0A               	movlw	10
  4805  00159A  6E03               	movwf	?___awmod+2,c
  4806  00159C  5037               	movf	scale@scl,w,c
  4807  00159E  6E01               	movwf	?___awmod,c
  4808  0015A0  6A02               	clrf	?___awmod+1,c
  4809  0015A2  BE01               	btfsc	?___awmod,7,c
  4810  0015A4  0602               	decf	?___awmod+1,f,c
  4811  0015A6  ECD0  F012         	call	___awmod	;wreg free
  4812  0015AA  C001  F011         	movff	?___awmod,?___wmul
  4813  0015AE  C002  F012         	movff	?___awmod+1,?___wmul+1
  4814  0015B2  EC87  F014         	call	___wmul	;wreg free
  4815  0015B6  0E4F               	movlw	low __powers_
  4816  0015B8  2411               	addwf	?___wmul,w,c
  4817  0015BA  6EF6               	movwf	tblptrl,c
  4818  0015BC  0E08               	movlw	high __powers_
  4819  0015BE  2012               	addwfc	?___wmul+1,w,c
  4820  0015C0  6EF7               	movwf	tblptrh,c
  4821  0015C2  0009               	tblrd		*+
  4822  0015C4  CFF5 F03D          	movff	tablat,??_scale+3
  4823  0015C8  0009               	tblrd		*+
  4824  0015CA  CFF5 F03E          	movff	tablat,??_scale+4
  4825  0015CE  0009               	tblrd		*+
  4826  0015D0  CFF5 F03F          	movff	tablat,??_scale+5
  4827  0015D4  C03F  F02B         	movff	??_scale+5,?___ftmul+5
  4828  0015D8  C03E  F02A         	movff	??_scale+4,?___ftmul+4
  4829  0015DC  C03D  F029         	movff	??_scale+3,?___ftmul+3
  4830  0015E0  ECC8  F00D         	call	___ftmul	;wreg free
  4831  0015E4                     L8:
  4832  0015E4  C028  F039         	movff	?___ftmul+2,?_scale+2
  4833  0015E8  C027  F038         	movff	?___ftmul+1,?_scale+1
  4834  0015EC  C026  F037         	movff	?___ftmul,?_scale
  4835  0015F0  D017               	goto	l214
  4836  0015F2                     l4163:
  4837                           
  4838                           ;doprnt.c: 440: return _powers_[scl];
  4839  0015F2  5037               	movf	scale@scl,w,c
  4840  0015F4  0D03               	mullw	3
  4841  0015F6  0E4F               	movlw	low __powers_
  4842  0015F8  24F3               	addwf	prodl,w,c
  4843  0015FA  6EF6               	movwf	tblptrl,c
  4844  0015FC  0E08               	movlw	high __powers_
  4845  0015FE                     L7:
  4846  0015FE  20F4               	addwfc	prodh,w,c
  4847  001600  6EF7               	movwf	tblptrh,c
  4848  001602  0009               	tblrd		*+
  4849  001604  CFF5 F03A          	movff	tablat,??_scale
  4850  001608  0009               	tblrd		*+
  4851  00160A  CFF5 F03B          	movff	tablat,??_scale+1
  4852  00160E  0009               	tblrd		*+
  4853  001610  CFF5 F03C          	movff	tablat,??_scale+2
  4854  001614  C03C  F039         	movff	??_scale+2,?_scale+2
  4855  001618  C03B  F038         	movff	??_scale+1,?_scale+1
  4856  00161C  C03A  F037         	movff	??_scale,?_scale
  4857  001620                     l214:
  4858  001620  0012               	return	
  4859  001622                     __end_of_scale:
  4860                           	opt stack 0
  4861                           tblptru	equ	0xFF8
  4862                           tblptrh	equ	0xFF7
  4863                           tblptrl	equ	0xFF6
  4864                           tablat	equ	0xFF5
  4865                           prodh	equ	0xFF4
  4866                           prodl	equ	0xFF3
  4867                           postinc0	equ	0xFEE
  4868                           wreg	equ	0xFE8
  4869                           indf1	equ	0xFE7
  4870                           fsr1h	equ	0xFE2
  4871                           fsr1l	equ	0xFE1
  4872                           indf2	equ	0xFDF
  4873                           postinc2	equ	0xFDE
  4874                           postdec2	equ	0xFDD
  4875                           fsr2h	equ	0xFDA
  4876                           fsr2l	equ	0xFD9
  4877                           status	equ	0xFD8
  4878                           
  4879 ;; *************** function _fround *****************
  4880 ;; Defined at:
  4881 ;;		line 410 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\doprnt.c"
  4882 ;; Parameters:    Size  Location     Type
  4883 ;;  prec            1   54[COMRAM] unsigned char 
  4884 ;; Auto vars:     Size  Location     Type
  4885 ;;		None
  4886 ;; Return value:  Size  Location     Type
  4887 ;;                  3   54[COMRAM] unsigned char 
  4888 ;; Registers used:
  4889 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4890 ;; Tracked objects:
  4891 ;;		On entry : 0/0
  4892 ;;		On exit  : 0/0
  4893 ;;		Unchanged: 0/0
  4894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4895 ;;      Params:         3       0       0       0       0       0       0       0       0
  4896 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4897 ;;      Temps:          6       0       0       0       0       0       0       0       0
  4898 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4899 ;;Total ram usage:       15 bytes
  4900 ;; Hardware stack levels used:    1
  4901 ;; Hardware stack levels required when called:    2
  4902 ;; This function calls:
  4903 ;;		___ftmul
  4904 ;;		___awdiv
  4905 ;;		___awmod
  4906 ;;		___wmul
  4907 ;; This function is called by:
  4908 ;;		_sprintf
  4909 ;; This function uses a non-reentrant model
  4910 ;;
  4911                           
  4912                           	psect	text21
  4913  001622                     __ptext21:
  4914                           	opt stack 0
  4915  001622                     _fround:
  4916                           	opt stack 27
  4917                           
  4918                           ;doprnt.c: 413: if(prec>=110)
  4919                           
  4920                           ;incstack = 0
  4921                           ;incstack = 0
  4922  001622  0E6D               	movlw	109
  4923  001624  6437               	cpfsgt	fround@prec,c
  4924  001626  D0AB               	goto	l4115
  4925                           
  4926                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4927  001628  0E00               	movlw	0
  4928  00162A  6E14               	movwf	?___wmul+3,c
  4929  00162C  0E03               	movlw	3
  4930  00162E  6E13               	movwf	?___wmul+2,c
  4931  001630  0E00               	movlw	0
  4932  001632  6E0B               	movwf	?___awdiv+3,c
  4933  001634  0E0A               	movlw	10
  4934  001636  6E0A               	movwf	?___awdiv+2,c
  4935  001638  0E00               	movlw	0
  4936  00163A  6E04               	movwf	?___awmod+3,c
  4937  00163C  0E64               	movlw	100
  4938  00163E  6E03               	movwf	?___awmod+2,c
  4939  001640  C037  F001         	movff	fround@prec,?___awmod
  4940  001644  6A02               	clrf	?___awmod+1,c
  4941  001646  ECD0  F012         	call	___awmod	;wreg free
  4942  00164A  C001  F008         	movff	?___awmod,?___awdiv
  4943  00164E  C002  F009         	movff	?___awmod+1,?___awdiv+1
  4944  001652  EC81  F011         	call	___awdiv	;wreg free
  4945  001656  0E09               	movlw	9
  4946  001658  2408               	addwf	?___awdiv,w,c
  4947  00165A  6E11               	movwf	?___wmul,c
  4948  00165C  0E00               	movlw	0
  4949  00165E  2009               	addwfc	?___awdiv+1,w,c
  4950  001660  6E12               	movwf	?___wmul+1,c
  4951  001662  EC87  F014         	call	___wmul	;wreg free
  4952  001666  0E28               	movlw	low __npowers_
  4953  001668  2411               	addwf	?___wmul,w,c
  4954  00166A  6EF6               	movwf	tblptrl,c
  4955  00166C  0E08               	movlw	high __npowers_
  4956  00166E  2012               	addwfc	?___wmul+1,w,c
  4957  001670  6EF7               	movwf	tblptrh,c
  4958  001672  0009               	tblrd		*+
  4959  001674  CFF5 F03A          	movff	tablat,??_fround
  4960  001678  0009               	tblrd		*+
  4961  00167A  CFF5 F03B          	movff	tablat,??_fround+1
  4962  00167E  0009               	tblrd		*+
  4963  001680  CFF5 F03C          	movff	tablat,??_fround+2
  4964  001684  C03C  F02B         	movff	??_fround+2,?___ftmul+5
  4965  001688  C03B  F02A         	movff	??_fround+1,?___ftmul+4
  4966  00168C  C03A  F029         	movff	??_fround,?___ftmul+3
  4967  001690  0E00               	movlw	0
  4968  001692  6E14               	movwf	?___wmul+3,c
  4969  001694  0E03               	movlw	3
  4970  001696  6E13               	movwf	?___wmul+2,c
  4971  001698  0E00               	movlw	0
  4972  00169A  6E0B               	movwf	?___awdiv+3,c
  4973  00169C  0E64               	movlw	100
  4974  00169E  6E0A               	movwf	?___awdiv+2,c
  4975  0016A0  C037  F008         	movff	fround@prec,?___awdiv
  4976  0016A4  6A09               	clrf	?___awdiv+1,c
  4977  0016A6  EC81  F011         	call	___awdiv	;wreg free
  4978  0016AA  0E12               	movlw	18
  4979  0016AC  2408               	addwf	?___awdiv,w,c
  4980  0016AE  6E11               	movwf	?___wmul,c
  4981  0016B0  0E00               	movlw	0
  4982  0016B2  2009               	addwfc	?___awdiv+1,w,c
  4983  0016B4  6E12               	movwf	?___wmul+1,c
  4984  0016B6  EC87  F014         	call	___wmul	;wreg free
  4985  0016BA  0E28               	movlw	low __npowers_
  4986  0016BC  2411               	addwf	?___wmul,w,c
  4987  0016BE  6EF6               	movwf	tblptrl,c
  4988  0016C0  0E08               	movlw	high __npowers_
  4989  0016C2  2012               	addwfc	?___wmul+1,w,c
  4990  0016C4  6EF7               	movwf	tblptrh,c
  4991  0016C6  0009               	tblrd		*+
  4992  0016C8  CFF5 F03D          	movff	tablat,??_fround+3
  4993  0016CC  0009               	tblrd		*+
  4994  0016CE  CFF5 F03E          	movff	tablat,??_fround+4
  4995  0016D2  0009               	tblrd		*+
  4996  0016D4  CFF5 F03F          	movff	tablat,??_fround+5
  4997  0016D8  C03F  F028         	movff	??_fround+5,?___ftmul+2
  4998  0016DC  C03E  F027         	movff	??_fround+4,?___ftmul+1
  4999  0016E0  C03D  F026         	movff	??_fround+3,?___ftmul
  5000  0016E4  ECC8  F00D         	call	___ftmul	;wreg free
  5001  0016E8  C028  F045         	movff	?___ftmul+2,_fround$1209+2
  5002  0016EC  C027  F044         	movff	?___ftmul+1,_fround$1209+1
  5003  0016F0  C026  F043         	movff	?___ftmul,_fround$1209
  5004                           
  5005                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5006  0016F4  0E00               	movlw	0
  5007  0016F6  6E14               	movwf	?___wmul+3,c
  5008  0016F8  0E03               	movlw	3
  5009  0016FA  6E13               	movwf	?___wmul+2,c
  5010  0016FC  0E00               	movlw	0
  5011  0016FE  6E04               	movwf	?___awmod+3,c
  5012  001700  0E0A               	movlw	10
  5013  001702  6E03               	movwf	?___awmod+2,c
  5014  001704  C037  F001         	movff	fround@prec,?___awmod
  5015  001708  6A02               	clrf	?___awmod+1,c
  5016  00170A  ECD0  F012         	call	___awmod	;wreg free
  5017  00170E  C001  F011         	movff	?___awmod,?___wmul
  5018  001712  C002  F012         	movff	?___awmod+1,?___wmul+1
  5019  001716  EC87  F014         	call	___wmul	;wreg free
  5020  00171A  0E28               	movlw	low __npowers_
  5021  00171C  2411               	addwf	?___wmul,w,c
  5022  00171E  6EF6               	movwf	tblptrl,c
  5023  001720  0E08               	movlw	high __npowers_
  5024  001722  2012               	addwfc	?___wmul+1,w,c
  5025  001724  6EF7               	movwf	tblptrh,c
  5026  001726  0009               	tblrd		*+
  5027  001728  CFF5 F03A          	movff	tablat,??_fround
  5028  00172C  0009               	tblrd		*+
  5029  00172E  CFF5 F03B          	movff	tablat,??_fround+1
  5030  001732  0009               	tblrd		*+
  5031  001734  CFF5 F03C          	movff	tablat,??_fround+2
  5032  001738  C03C  F02B         	movff	??_fround+2,?___ftmul+5
  5033  00173C  C03B  F02A         	movff	??_fround+1,?___ftmul+4
  5034  001740  C03A  F029         	movff	??_fround,?___ftmul+3
  5035  001744  C043  F026         	movff	_fround$1209,?___ftmul
  5036  001748  C044  F027         	movff	_fround$1209+1,?___ftmul+1
  5037  00174C  C045  F028         	movff	_fround$1209+2,?___ftmul+2
  5038  001750  ECC8  F00D         	call	___ftmul	;wreg free
  5039  001754  C028  F042         	movff	?___ftmul+2,_fround$1210+2
  5040  001758  C027  F041         	movff	?___ftmul+1,_fround$1210+1
  5041  00175C  C026  F040         	movff	?___ftmul,_fround$1210
  5042                           
  5043                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5044  001760  C040  F026         	movff	_fround$1210,?___ftmul
  5045  001764  C041  F027         	movff	_fround$1210+1,?___ftmul+1
  5046  001768  C042  F028         	movff	_fround$1210+2,?___ftmul+2
  5047  00176C  0E00               	movlw	0
  5048  00176E  6E29               	movwf	?___ftmul+3,c
  5049  001770  0E00               	movlw	0
  5050  001772  6E2A               	movwf	?___ftmul+4,c
  5051  001774  0E3F               	movlw	63
  5052  001776  6E2B               	movwf	?___ftmul+5,c
  5053  001778  ECC8  F00D         	call	___ftmul	;wreg free
  5054  00177C  D08B               	goto	L10
  5055  00177E                     l4115:
  5056                           
  5057                           ;doprnt.c: 415: else if(prec > 10)
  5058  00177E  0E0A               	movlw	10
  5059  001780  6437               	cpfsgt	fround@prec,c
  5060  001782  D069               	goto	l4123
  5061                           
  5062                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5063  001784  0E00               	movlw	0
  5064  001786  6E14               	movwf	?___wmul+3,c
  5065  001788  0E03               	movlw	3
  5066  00178A  6E13               	movwf	?___wmul+2,c
  5067  00178C  0E00               	movlw	0
  5068  00178E  6E04               	movwf	?___awmod+3,c
  5069  001790  0E0A               	movlw	10
  5070  001792  6E03               	movwf	?___awmod+2,c
  5071  001794  C037  F001         	movff	fround@prec,?___awmod
  5072  001798  6A02               	clrf	?___awmod+1,c
  5073  00179A  ECD0  F012         	call	___awmod	;wreg free
  5074  00179E  C001  F011         	movff	?___awmod,?___wmul
  5075  0017A2  C002  F012         	movff	?___awmod+1,?___wmul+1
  5076  0017A6  EC87  F014         	call	___wmul	;wreg free
  5077  0017AA  0E28               	movlw	low __npowers_
  5078  0017AC  2411               	addwf	?___wmul,w,c
  5079  0017AE  6EF6               	movwf	tblptrl,c
  5080  0017B0  0E08               	movlw	high __npowers_
  5081  0017B2  2012               	addwfc	?___wmul+1,w,c
  5082  0017B4  6EF7               	movwf	tblptrh,c
  5083  0017B6  0009               	tblrd		*+
  5084  0017B8  CFF5 F03A          	movff	tablat,??_fround
  5085  0017BC  0009               	tblrd		*+
  5086  0017BE  CFF5 F03B          	movff	tablat,??_fround+1
  5087  0017C2  0009               	tblrd		*+
  5088  0017C4  CFF5 F03C          	movff	tablat,??_fround+2
  5089  0017C8  C03C  F02B         	movff	??_fround+2,?___ftmul+5
  5090  0017CC  C03B  F02A         	movff	??_fround+1,?___ftmul+4
  5091  0017D0  C03A  F029         	movff	??_fround,?___ftmul+3
  5092  0017D4  0E00               	movlw	0
  5093  0017D6  6E14               	movwf	?___wmul+3,c
  5094  0017D8  0E03               	movlw	3
  5095  0017DA  6E13               	movwf	?___wmul+2,c
  5096  0017DC  0E00               	movlw	0
  5097  0017DE  6E0B               	movwf	?___awdiv+3,c
  5098  0017E0  0E0A               	movlw	10
  5099  0017E2  6E0A               	movwf	?___awdiv+2,c
  5100  0017E4  C037  F008         	movff	fround@prec,?___awdiv
  5101  0017E8  6A09               	clrf	?___awdiv+1,c
  5102  0017EA  EC81  F011         	call	___awdiv	;wreg free
  5103  0017EE  0E09               	movlw	9
  5104  0017F0  2408               	addwf	?___awdiv,w,c
  5105  0017F2  6E11               	movwf	?___wmul,c
  5106  0017F4  0E00               	movlw	0
  5107  0017F6  2009               	addwfc	?___awdiv+1,w,c
  5108  0017F8  6E12               	movwf	?___wmul+1,c
  5109  0017FA  EC87  F014         	call	___wmul	;wreg free
  5110  0017FE  0E28               	movlw	low __npowers_
  5111  001800  2411               	addwf	?___wmul,w,c
  5112  001802  6EF6               	movwf	tblptrl,c
  5113  001804  0E08               	movlw	high __npowers_
  5114  001806  2012               	addwfc	?___wmul+1,w,c
  5115  001808  6EF7               	movwf	tblptrh,c
  5116  00180A  0009               	tblrd		*+
  5117  00180C  CFF5 F03D          	movff	tablat,??_fround+3
  5118  001810  0009               	tblrd		*+
  5119  001812  CFF5 F03E          	movff	tablat,??_fround+4
  5120  001816  0009               	tblrd		*+
  5121  001818  CFF5 F03F          	movff	tablat,??_fround+5
  5122  00181C  C03F  F028         	movff	??_fround+5,?___ftmul+2
  5123  001820  C03E  F027         	movff	??_fround+4,?___ftmul+1
  5124  001824  C03D  F026         	movff	??_fround+3,?___ftmul
  5125  001828  ECC8  F00D         	call	___ftmul	;wreg free
  5126  00182C  C028  F045         	movff	?___ftmul+2,_fround$1209+2
  5127  001830  C027  F044         	movff	?___ftmul+1,_fround$1209+1
  5128  001834  C026  F043         	movff	?___ftmul,_fround$1209
  5129                           
  5130                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5131  001838  C043  F026         	movff	_fround$1209,?___ftmul
  5132  00183C  C044  F027         	movff	_fround$1209+1,?___ftmul+1
  5133  001840  C045  F028         	movff	_fround$1209+2,?___ftmul+2
  5134  001844  0E00               	movlw	0
  5135  001846  6E29               	movwf	?___ftmul+3,c
  5136  001848  0E00               	movlw	0
  5137  00184A  6E2A               	movwf	?___ftmul+4,c
  5138  00184C  0E3F               	movlw	63
  5139  00184E  6E2B               	movwf	?___ftmul+5,c
  5140  001850  ECC8  F00D         	call	___ftmul	;wreg free
  5141  001854  D01F               	goto	L10
  5142  001856                     l4123:
  5143                           
  5144                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  5145  001856  5037               	movf	fround@prec,w,c
  5146  001858  0D03               	mullw	3
  5147  00185A  0E28               	movlw	low __npowers_
  5148  00185C  24F3               	addwf	prodl,w,c
  5149  00185E  6EF6               	movwf	tblptrl,c
  5150  001860  0E08               	movlw	high __npowers_
  5151  001862  20F4               	addwfc	prodh,w,c
  5152  001864  6EF7               	movwf	tblptrh,c
  5153  001866  0009               	tblrd		*+
  5154  001868  CFF5 F03A          	movff	tablat,??_fround
  5155  00186C  0009               	tblrd		*+
  5156  00186E  CFF5 F03B          	movff	tablat,??_fround+1
  5157  001872  0009               	tblrd		*+
  5158  001874  CFF5 F03C          	movff	tablat,??_fround+2
  5159  001878  C03C  F028         	movff	??_fround+2,?___ftmul+2
  5160  00187C  C03B  F027         	movff	??_fround+1,?___ftmul+1
  5161  001880  C03A  F026         	movff	??_fround,?___ftmul
  5162  001884  0E00               	movlw	0
  5163  001886  6E29               	movwf	?___ftmul+3,c
  5164  001888  0E00               	movlw	0
  5165  00188A  6E2A               	movwf	?___ftmul+4,c
  5166  00188C  0E3F               	movlw	63
  5167  00188E  6E2B               	movwf	?___ftmul+5,c
  5168  001890  ECC8  F00D         	call	___ftmul	;wreg free
  5169  001894                     L10:
  5170  001894  C028  F039         	movff	?___ftmul+2,?_fround+2
  5171  001898  C027  F038         	movff	?___ftmul+1,?_fround+1
  5172  00189C  C026  F037         	movff	?___ftmul,?_fround
  5173  0018A0  0012               	return	
  5174  0018A2                     __end_of_fround:
  5175                           	opt stack 0
  5176                           tblptru	equ	0xFF8
  5177                           tblptrh	equ	0xFF7
  5178                           tblptrl	equ	0xFF6
  5179                           tablat	equ	0xFF5
  5180                           prodh	equ	0xFF4
  5181                           prodl	equ	0xFF3
  5182                           postinc0	equ	0xFEE
  5183                           wreg	equ	0xFE8
  5184                           indf1	equ	0xFE7
  5185                           fsr1h	equ	0xFE2
  5186                           fsr1l	equ	0xFE1
  5187                           indf2	equ	0xFDF
  5188                           postinc2	equ	0xFDE
  5189                           postdec2	equ	0xFDD
  5190                           fsr2h	equ	0xFDA
  5191                           fsr2l	equ	0xFD9
  5192                           status	equ	0xFD8
  5193                           
  5194 ;; *************** function ___wmul *****************
  5195 ;; Defined at:
  5196 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\wmul.c"
  5197 ;; Parameters:    Size  Location     Type
  5198 ;;  multiplier      2   16[COMRAM] unsigned int 
  5199 ;;  multiplicand    2   18[COMRAM] unsigned int 
  5200 ;; Auto vars:     Size  Location     Type
  5201 ;;  product         2   20[COMRAM] unsigned int 
  5202 ;; Return value:  Size  Location     Type
  5203 ;;                  2   16[COMRAM] unsigned int 
  5204 ;; Registers used:
  5205 ;;		wreg, status,2, status,0, prodl, prodh
  5206 ;; Tracked objects:
  5207 ;;		On entry : 0/0
  5208 ;;		On exit  : 0/0
  5209 ;;		Unchanged: 0/0
  5210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5211 ;;      Params:         4       0       0       0       0       0       0       0       0
  5212 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5213 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5214 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5215 ;;Total ram usage:        6 bytes
  5216 ;; Hardware stack levels used:    1
  5217 ;; This function calls:
  5218 ;;		Nothing
  5219 ;; This function is called by:
  5220 ;;		_fround
  5221 ;;		_scale
  5222 ;;		_sprintf
  5223 ;; This function uses a non-reentrant model
  5224 ;;
  5225                           
  5226                           	psect	text22
  5227  00290E                     __ptext22:
  5228                           	opt stack 0
  5229  00290E                     ___wmul:
  5230                           	opt stack 29
  5231                           
  5232                           ;incstack = 0
  5233                           ;incstack = 0
  5234  00290E  5011               	movf	___wmul@multiplier,w,c
  5235  002910  0213               	mulwf	___wmul@multiplicand,c
  5236  002912  CFF3 F015          	movff	prodl,___wmul@product
  5237  002916  CFF4 F016          	movff	prodh,___wmul@product+1
  5238  00291A  5011               	movf	___wmul@multiplier,w,c
  5239  00291C  0214               	mulwf	___wmul@multiplicand+1,c
  5240  00291E  CFF3 FFF4          	movff	prodl,prodh
  5241  002922  6AF3               	clrf	prodl,c
  5242  002924  50F3               	movf	prodl,w,c
  5243  002926  2615               	addwf	___wmul@product,f,c
  5244  002928  50F4               	movf	prodh,w,c
  5245  00292A  2216               	addwfc	___wmul@product+1,f,c
  5246  00292C  5012               	movf	___wmul@multiplier+1,w,c
  5247  00292E  0213               	mulwf	___wmul@multiplicand,c
  5248  002930  CFF3 FFF4          	movff	prodl,prodh
  5249  002934  6AF3               	clrf	prodl,c
  5250  002936  50F3               	movf	prodl,w,c
  5251  002938  2615               	addwf	___wmul@product,f,c
  5252  00293A  50F4               	movf	prodh,w,c
  5253  00293C  2216               	addwfc	___wmul@product+1,f,c
  5254  00293E  C015  F011         	movff	___wmul@product,?___wmul
  5255  002942  C016  F012         	movff	___wmul@product+1,?___wmul+1
  5256  002946  0012               	return	
  5257  002948                     __end_of___wmul:
  5258                           	opt stack 0
  5259                           tblptru	equ	0xFF8
  5260                           tblptrh	equ	0xFF7
  5261                           tblptrl	equ	0xFF6
  5262                           tablat	equ	0xFF5
  5263                           prodh	equ	0xFF4
  5264                           prodl	equ	0xFF3
  5265                           postinc0	equ	0xFEE
  5266                           wreg	equ	0xFE8
  5267                           indf1	equ	0xFE7
  5268                           fsr1h	equ	0xFE2
  5269                           fsr1l	equ	0xFE1
  5270                           indf2	equ	0xFDF
  5271                           postinc2	equ	0xFDE
  5272                           postdec2	equ	0xFDD
  5273                           fsr2h	equ	0xFDA
  5274                           fsr2l	equ	0xFD9
  5275                           status	equ	0xFD8
  5276                           
  5277 ;; *************** function ___awmod *****************
  5278 ;; Defined at:
  5279 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\awmod.c"
  5280 ;; Parameters:    Size  Location     Type
  5281 ;;  dividend        2    0[COMRAM] int 
  5282 ;;  divisor         2    2[COMRAM] int 
  5283 ;; Auto vars:     Size  Location     Type
  5284 ;;  sign            1    6[COMRAM] unsigned char 
  5285 ;;  counter         1    5[COMRAM] unsigned char 
  5286 ;; Return value:  Size  Location     Type
  5287 ;;                  2    0[COMRAM] int 
  5288 ;; Registers used:
  5289 ;;		wreg, status,2, status,0
  5290 ;; Tracked objects:
  5291 ;;		On entry : 0/0
  5292 ;;		On exit  : 0/0
  5293 ;;		Unchanged: 0/0
  5294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5295 ;;      Params:         4       0       0       0       0       0       0       0       0
  5296 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5297 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5298 ;;      Totals:         7       0       0       0       0       0       0       0       0
  5299 ;;Total ram usage:        7 bytes
  5300 ;; Hardware stack levels used:    1
  5301 ;; This function calls:
  5302 ;;		Nothing
  5303 ;; This function is called by:
  5304 ;;		_fround
  5305 ;;		_scale
  5306 ;; This function uses a non-reentrant model
  5307 ;;
  5308                           
  5309                           	psect	text23
  5310  0025A0                     __ptext23:
  5311                           	opt stack 0
  5312  0025A0                     ___awmod:
  5313                           	opt stack 28
  5314                           
  5315                           ;incstack = 0
  5316                           ;incstack = 0
  5317  0025A0  6E05               	movwf	??___awmod& (0+255),c
  5318  0025A2  0E00               	movlw	0
  5319  0025A4  6E07               	movwf	___awmod@sign,c
  5320  0025A6  5005               	movf	??___awmod& (0+255),w,c
  5321  0025A8  AE02               	btfss	___awmod@dividend+1,7,c
  5322  0025AA  D008               	goto	l3553
  5323  0025AC  6C01               	negf	___awmod@dividend,c
  5324  0025AE  1E02               	comf	___awmod@dividend+1,f,c
  5325  0025B0  B0D8               	btfsc	status,0,c
  5326  0025B2  2A02               	incf	___awmod@dividend+1,f,c
  5327  0025B4  6E05               	movwf	??___awmod& (0+255),c
  5328  0025B6  0E01               	movlw	1
  5329  0025B8  6E07               	movwf	___awmod@sign,c
  5330  0025BA  5005               	movf	??___awmod& (0+255),w,c
  5331  0025BC                     l3553:
  5332  0025BC  AE04               	btfss	___awmod@divisor+1,7,c
  5333  0025BE  D004               	goto	l3557
  5334  0025C0  6C03               	negf	___awmod@divisor,c
  5335  0025C2  1E04               	comf	___awmod@divisor+1,f,c
  5336  0025C4  B0D8               	btfsc	status,0,c
  5337  0025C6  2A04               	incf	___awmod@divisor+1,f,c
  5338  0025C8                     l3557:
  5339  0025C8  5004               	movf	___awmod@divisor+1,w,c
  5340  0025CA  1003               	iorwf	___awmod@divisor,w,c
  5341  0025CC  B4D8               	btfsc	status,2,c
  5342  0025CE  D01A               	goto	l3573
  5343  0025D0  6E05               	movwf	??___awmod& (0+255),c
  5344  0025D2  0E01               	movlw	1
  5345  0025D4  6E06               	movwf	___awmod@counter,c
  5346  0025D6  5005               	movf	??___awmod& (0+255),w,c
  5347  0025D8  D004               	goto	l3563
  5348  0025DA                     l3561:
  5349  0025DA  90D8               	bcf	status,0,c
  5350  0025DC  3603               	rlcf	___awmod@divisor,f,c
  5351  0025DE  3604               	rlcf	___awmod@divisor+1,f,c
  5352  0025E0  2A06               	incf	___awmod@counter,f,c
  5353  0025E2                     l3563:
  5354  0025E2  AE04               	btfss	___awmod@divisor+1,7,c
  5355  0025E4  D7FA               	goto	l3561
  5356  0025E6                     l3565:
  5357  0025E6  5003               	movf	___awmod@divisor,w,c
  5358  0025E8  5C01               	subwf	___awmod@dividend,w,c
  5359  0025EA  5004               	movf	___awmod@divisor+1,w,c
  5360  0025EC  5802               	subwfb	___awmod@dividend+1,w,c
  5361  0025EE  A0D8               	btfss	status,0,c
  5362  0025F0  D004               	goto	l3569
  5363  0025F2  5003               	movf	___awmod@divisor,w,c
  5364  0025F4  5E01               	subwf	___awmod@dividend,f,c
  5365  0025F6  5004               	movf	___awmod@divisor+1,w,c
  5366  0025F8  5A02               	subwfb	___awmod@dividend+1,f,c
  5367  0025FA                     l3569:
  5368  0025FA  90D8               	bcf	status,0,c
  5369  0025FC  3204               	rrcf	___awmod@divisor+1,f,c
  5370  0025FE  3203               	rrcf	___awmod@divisor,f,c
  5371  002600  2E06               	decfsz	___awmod@counter,f,c
  5372  002602  D7F1               	goto	l3565
  5373  002604                     l3573:
  5374  002604  5007               	movf	___awmod@sign,w,c
  5375  002606  B4D8               	btfsc	status,2,c
  5376  002608  D004               	goto	l3577
  5377  00260A  6C01               	negf	___awmod@dividend,c
  5378  00260C  1E02               	comf	___awmod@dividend+1,f,c
  5379  00260E  B0D8               	btfsc	status,0,c
  5380  002610  2A02               	incf	___awmod@dividend+1,f,c
  5381  002612                     l3577:
  5382  002612  C001  F001         	movff	___awmod@dividend,?___awmod
  5383  002616  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  5384  00261A  0012               	return	
  5385  00261C                     __end_of___awmod:
  5386                           	opt stack 0
  5387                           tblptru	equ	0xFF8
  5388                           tblptrh	equ	0xFF7
  5389                           tblptrl	equ	0xFF6
  5390                           tablat	equ	0xFF5
  5391                           prodh	equ	0xFF4
  5392                           prodl	equ	0xFF3
  5393                           postinc0	equ	0xFEE
  5394                           wreg	equ	0xFE8
  5395                           indf1	equ	0xFE7
  5396                           fsr1h	equ	0xFE2
  5397                           fsr1l	equ	0xFE1
  5398                           indf2	equ	0xFDF
  5399                           postinc2	equ	0xFDE
  5400                           postdec2	equ	0xFDD
  5401                           fsr2h	equ	0xFDA
  5402                           fsr2l	equ	0xFD9
  5403                           status	equ	0xFD8
  5404                           
  5405 ;; *************** function ___awdiv *****************
  5406 ;; Defined at:
  5407 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\awdiv.c"
  5408 ;; Parameters:    Size  Location     Type
  5409 ;;  dividend        2    7[COMRAM] int 
  5410 ;;  divisor         2    9[COMRAM] int 
  5411 ;; Auto vars:     Size  Location     Type
  5412 ;;  quotient        2   14[COMRAM] int 
  5413 ;;  sign            1   13[COMRAM] unsigned char 
  5414 ;;  counter         1   12[COMRAM] unsigned char 
  5415 ;; Return value:  Size  Location     Type
  5416 ;;                  2    7[COMRAM] int 
  5417 ;; Registers used:
  5418 ;;		wreg, status,2, status,0
  5419 ;; Tracked objects:
  5420 ;;		On entry : 0/0
  5421 ;;		On exit  : 0/0
  5422 ;;		Unchanged: 0/0
  5423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5424 ;;      Params:         4       0       0       0       0       0       0       0       0
  5425 ;;      Locals:         4       0       0       0       0       0       0       0       0
  5426 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5427 ;;      Totals:         9       0       0       0       0       0       0       0       0
  5428 ;;Total ram usage:        9 bytes
  5429 ;; Hardware stack levels used:    1
  5430 ;; This function calls:
  5431 ;;		Nothing
  5432 ;; This function is called by:
  5433 ;;		_fround
  5434 ;;		_scale
  5435 ;;		_sprintf
  5436 ;; This function uses a non-reentrant model
  5437 ;;
  5438                           
  5439                           	psect	text24
  5440  002302                     __ptext24:
  5441                           	opt stack 0
  5442  002302                     ___awdiv:
  5443                           	opt stack 29
  5444                           
  5445                           ;incstack = 0
  5446                           ;incstack = 0
  5447  002302  6E0C               	movwf	??___awdiv& (0+255),c
  5448  002304  0E00               	movlw	0
  5449  002306  6E0E               	movwf	___awdiv@sign,c
  5450  002308  500C               	movf	??___awdiv& (0+255),w,c
  5451  00230A  AE0B               	btfss	___awdiv@divisor+1,7,c
  5452  00230C  D008               	goto	l3751
  5453  00230E  6C0A               	negf	___awdiv@divisor,c
  5454  002310  1E0B               	comf	___awdiv@divisor+1,f,c
  5455  002312  B0D8               	btfsc	status,0,c
  5456  002314  2A0B               	incf	___awdiv@divisor+1,f,c
  5457  002316  6E0C               	movwf	??___awdiv& (0+255),c
  5458  002318  0E01               	movlw	1
  5459  00231A  6E0E               	movwf	___awdiv@sign,c
  5460  00231C  500C               	movf	??___awdiv& (0+255),w,c
  5461  00231E                     l3751:
  5462  00231E  AE09               	btfss	___awdiv@dividend+1,7,c
  5463  002320  D006               	goto	l3757
  5464  002322  6C08               	negf	___awdiv@dividend,c
  5465  002324  1E09               	comf	___awdiv@dividend+1,f,c
  5466  002326  B0D8               	btfsc	status,0,c
  5467  002328  2A09               	incf	___awdiv@dividend+1,f,c
  5468  00232A  0E01               	movlw	1
  5469  00232C  1A0E               	xorwf	___awdiv@sign,f,c
  5470  00232E                     l3757:
  5471  00232E  0E00               	movlw	0
  5472  002330  6E10               	movwf	___awdiv@quotient+1,c
  5473  002332  0E00               	movlw	0
  5474  002334  6E0F               	movwf	___awdiv@quotient,c
  5475  002336  500B               	movf	___awdiv@divisor+1,w,c
  5476  002338  100A               	iorwf	___awdiv@divisor,w,c
  5477  00233A  B4D8               	btfsc	status,2,c
  5478  00233C  D01E               	goto	l3779
  5479  00233E  6E0C               	movwf	??___awdiv& (0+255),c
  5480  002340  0E01               	movlw	1
  5481  002342  6E0D               	movwf	___awdiv@counter,c
  5482  002344  500C               	movf	??___awdiv& (0+255),w,c
  5483  002346  D004               	goto	l3765
  5484  002348                     l3763:
  5485  002348  90D8               	bcf	status,0,c
  5486  00234A  360A               	rlcf	___awdiv@divisor,f,c
  5487  00234C  360B               	rlcf	___awdiv@divisor+1,f,c
  5488  00234E  2A0D               	incf	___awdiv@counter,f,c
  5489  002350                     l3765:
  5490  002350  AE0B               	btfss	___awdiv@divisor+1,7,c
  5491  002352  D7FA               	goto	l3763
  5492  002354                     l3767:
  5493  002354  90D8               	bcf	status,0,c
  5494  002356  360F               	rlcf	___awdiv@quotient,f,c
  5495  002358  3610               	rlcf	___awdiv@quotient+1,f,c
  5496  00235A  500A               	movf	___awdiv@divisor,w,c
  5497  00235C  5C08               	subwf	___awdiv@dividend,w,c
  5498  00235E  500B               	movf	___awdiv@divisor+1,w,c
  5499  002360  5809               	subwfb	___awdiv@dividend+1,w,c
  5500  002362  A0D8               	btfss	status,0,c
  5501  002364  D005               	goto	l3775
  5502  002366  500A               	movf	___awdiv@divisor,w,c
  5503  002368  5E08               	subwf	___awdiv@dividend,f,c
  5504  00236A  500B               	movf	___awdiv@divisor+1,w,c
  5505  00236C  5A09               	subwfb	___awdiv@dividend+1,f,c
  5506  00236E  800F               	bsf	___awdiv@quotient,0,c
  5507  002370                     l3775:
  5508  002370  90D8               	bcf	status,0,c
  5509  002372  320B               	rrcf	___awdiv@divisor+1,f,c
  5510  002374  320A               	rrcf	___awdiv@divisor,f,c
  5511  002376  2E0D               	decfsz	___awdiv@counter,f,c
  5512  002378  D7ED               	goto	l3767
  5513  00237A                     l3779:
  5514  00237A  500E               	movf	___awdiv@sign,w,c
  5515  00237C  B4D8               	btfsc	status,2,c
  5516  00237E  D004               	goto	l3783
  5517  002380  6C0F               	negf	___awdiv@quotient,c
  5518  002382  1E10               	comf	___awdiv@quotient+1,f,c
  5519  002384  B0D8               	btfsc	status,0,c
  5520  002386  2A10               	incf	___awdiv@quotient+1,f,c
  5521  002388                     l3783:
  5522  002388  C00F  F008         	movff	___awdiv@quotient,?___awdiv
  5523  00238C  C010  F009         	movff	___awdiv@quotient+1,?___awdiv+1
  5524  002390  0012               	return	
  5525  002392                     __end_of___awdiv:
  5526                           	opt stack 0
  5527                           tblptru	equ	0xFF8
  5528                           tblptrh	equ	0xFF7
  5529                           tblptrl	equ	0xFF6
  5530                           tablat	equ	0xFF5
  5531                           prodh	equ	0xFF4
  5532                           prodl	equ	0xFF3
  5533                           postinc0	equ	0xFEE
  5534                           wreg	equ	0xFE8
  5535                           indf1	equ	0xFE7
  5536                           fsr1h	equ	0xFE2
  5537                           fsr1l	equ	0xFE1
  5538                           indf2	equ	0xFDF
  5539                           postinc2	equ	0xFDE
  5540                           postdec2	equ	0xFDD
  5541                           fsr2h	equ	0xFDA
  5542                           fsr2l	equ	0xFD9
  5543                           status	equ	0xFD8
  5544                           
  5545 ;; *************** function _Read_LDR *****************
  5546 ;; Defined at:
  5547 ;;		line 198 in file "main.c"
  5548 ;; Parameters:    Size  Location     Type
  5549 ;;		None
  5550 ;; Auto vars:     Size  Location     Type
  5551 ;;  analog_readi    3   78[COMRAM] float 
  5552 ;; Return value:  Size  Location     Type
  5553 ;;                  3   71[COMRAM] float 
  5554 ;; Registers used:
  5555 ;;		wreg, status,2, status,0, cstack
  5556 ;; Tracked objects:
  5557 ;;		On entry : 0/0
  5558 ;;		On exit  : 0/0
  5559 ;;		Unchanged: 0/0
  5560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5561 ;;      Params:         3       0       0       0       0       0       0       0       0
  5562 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5563 ;;      Temps:          4       0       0       0       0       0       0       0       0
  5564 ;;      Totals:        10       0       0       0       0       0       0       0       0
  5565 ;;Total ram usage:       10 bytes
  5566 ;; Hardware stack levels used:    1
  5567 ;; Hardware stack levels required when called:    2
  5568 ;; This function calls:
  5569 ;;		___ftdiv
  5570 ;;		___ftmul
  5571 ;;		___awtoft
  5572 ;; This function is called by:
  5573 ;;		_main
  5574 ;; This function uses a non-reentrant model
  5575 ;;
  5576                           
  5577                           	psect	text25
  5578  002048                     __ptext25:
  5579                           	opt stack 0
  5580  002048                     _Read_LDR:
  5581                           	opt stack 28
  5582                           
  5583                           ;main.c: 199: float analog_reading = 0;
  5584                           
  5585                           ;incstack = 0
  5586                           ;incstack = 0
  5587  002048  0E00               	movlw	0
  5588  00204A  6E4F               	movwf	Read_LDR@analog_reading,c
  5589  00204C  0E00               	movlw	0
  5590  00204E  6E50               	movwf	Read_LDR@analog_reading+1,c
  5591  002050  0E00               	movlw	0
  5592  002052  6E51               	movwf	Read_LDR@analog_reading+2,c
  5593                           
  5594                           ;main.c: 200: ADCON0 |= ((1 << ADON) | (1 << GO));
  5595  002054  0E00               	movlw	0
  5596  002056  B2C2               	btfsc	4034,1,c	;volatile
  5597  002058  0E01               	movlw	1
  5598  00205A  6E4B               	movwf	??_Read_LDR& (0+255),c
  5599  00205C  0E01               	movlw	1
  5600  00205E  6E4C               	movwf	(??_Read_LDR+1)& (0+255),c
  5601  002060  2A4B               	incf	??_Read_LDR,f,c
  5602  002062  D002               	goto	u2694
  5603  002064                     u2695:
  5604  002064  90D8               	bcf	status,0,c
  5605  002066  364C               	rlcf	??_Read_LDR+1,f,c
  5606  002068                     u2694:
  5607  002068  2E4B               	decfsz	??_Read_LDR,f,c
  5608  00206A  D7FC               	goto	u2695
  5609  00206C  0E00               	movlw	0
  5610  00206E  B0C2               	btfsc	4034,0,c	;volatile
  5611  002070  0E01               	movlw	1
  5612  002072  6E4D               	movwf	(??_Read_LDR+2)& (0+255),c
  5613  002074  0E01               	movlw	1
  5614  002076  6E4E               	movwf	(??_Read_LDR+3)& (0+255),c
  5615  002078  2A4D               	incf	??_Read_LDR+2,f,c
  5616  00207A  D002               	goto	u2704
  5617  00207C                     u2705:
  5618  00207C  90D8               	bcf	status,0,c
  5619  00207E  364E               	rlcf	??_Read_LDR+3,f,c
  5620  002080                     u2704:
  5621  002080  2E4D               	decfsz	??_Read_LDR+2,f,c
  5622  002082  D7FC               	goto	u2705
  5623  002084  504E               	movf	??_Read_LDR+3,w,c
  5624  002086  104C               	iorwf	??_Read_LDR+1,w,c
  5625  002088  12C2               	iorwf	4034,f,c	;volatile
  5626  00208A                     l184:
  5627  00208A  B2C2               	btfsc	4034,1,c	;volatile
  5628  00208C  D7FE               	goto	l184
  5629                           
  5630                           ;main.c: 202: analog_reading = (ADRESH * 256) + (ADRESL);
  5631  00208E  50C4               	movf	4036,w,c	;volatile
  5632  002090  6E4C               	movwf	(??_Read_LDR+1)& (0+255),c
  5633  002092  6A4B               	clrf	??_Read_LDR& (0+255),c
  5634  002094  50C3               	movf	4035,w,c	;volatile
  5635  002096  244B               	addwf	??_Read_LDR,w,c
  5636  002098  6E09               	movwf	?___awtoft,c
  5637  00209A  0E00               	movlw	0
  5638  00209C  204C               	addwfc	??_Read_LDR+1,w,c
  5639  00209E  6E0A               	movwf	?___awtoft+1,c
  5640  0020A0  ECEE  F013         	call	___awtoft	;wreg free
  5641  0020A4  C00B  F051         	movff	?___awtoft+2,Read_LDR@analog_reading+2
  5642  0020A8  C00A  F050         	movff	?___awtoft+1,Read_LDR@analog_reading+1
  5643  0020AC  C009  F04F         	movff	?___awtoft,Read_LDR@analog_reading
  5644                           
  5645                           ;main.c: 203: analog_reading = analog_reading*5/1023;
  5646  0020B0  0E00               	movlw	0
  5647  0020B2  6E29               	movwf	?___ftmul+3,c
  5648  0020B4  0EA0               	movlw	160
  5649  0020B6  6E2A               	movwf	?___ftmul+4,c
  5650  0020B8  0E40               	movlw	64
  5651  0020BA  6E2B               	movwf	?___ftmul+5,c
  5652  0020BC  C04F  F026         	movff	Read_LDR@analog_reading,?___ftmul
  5653  0020C0  C050  F027         	movff	Read_LDR@analog_reading+1,?___ftmul+1
  5654  0020C4  C051  F028         	movff	Read_LDR@analog_reading+2,?___ftmul+2
  5655  0020C8  ECC8  F00D         	call	___ftmul	;wreg free
  5656  0020CC  C028  F039         	movff	?___ftmul+2,?___ftdiv+2
  5657  0020D0  C027  F038         	movff	?___ftmul+1,?___ftdiv+1
  5658  0020D4  C026  F037         	movff	?___ftmul,?___ftdiv
  5659  0020D8  0EC0               	movlw	192
  5660  0020DA  6E3A               	movwf	?___ftdiv+3,c
  5661  0020DC  0E7F               	movlw	127
  5662  0020DE  6E3B               	movwf	?___ftdiv+4,c
  5663  0020E0  0E44               	movlw	68
  5664  0020E2  6E3C               	movwf	?___ftdiv+5,c
  5665  0020E4  EC50  F00E         	call	___ftdiv	;wreg free
  5666  0020E8  C039  F051         	movff	?___ftdiv+2,Read_LDR@analog_reading+2
  5667  0020EC  C038  F050         	movff	?___ftdiv+1,Read_LDR@analog_reading+1
  5668  0020F0  C037  F04F         	movff	?___ftdiv,Read_LDR@analog_reading
  5669                           
  5670                           ;main.c: 204: return analog_reading;
  5671  0020F4  C04F  F048         	movff	Read_LDR@analog_reading,?_Read_LDR
  5672  0020F8  C050  F049         	movff	Read_LDR@analog_reading+1,?_Read_LDR+1
  5673  0020FC  C051  F04A         	movff	Read_LDR@analog_reading+2,?_Read_LDR+2
  5674  002100  0012               	return	
  5675  002102                     __end_of_Read_LDR:
  5676                           	opt stack 0
  5677                           tblptru	equ	0xFF8
  5678                           tblptrh	equ	0xFF7
  5679                           tblptrl	equ	0xFF6
  5680                           tablat	equ	0xFF5
  5681                           prodh	equ	0xFF4
  5682                           prodl	equ	0xFF3
  5683                           postinc0	equ	0xFEE
  5684                           wreg	equ	0xFE8
  5685                           indf1	equ	0xFE7
  5686                           fsr1h	equ	0xFE2
  5687                           fsr1l	equ	0xFE1
  5688                           indf2	equ	0xFDF
  5689                           postinc2	equ	0xFDE
  5690                           postdec2	equ	0xFDD
  5691                           fsr2h	equ	0xFDA
  5692                           fsr2l	equ	0xFD9
  5693                           status	equ	0xFD8
  5694                           
  5695 ;; *************** function ___awtoft *****************
  5696 ;; Defined at:
  5697 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\awtoft.c"
  5698 ;; Parameters:    Size  Location     Type
  5699 ;;  c               2    8[COMRAM] int 
  5700 ;; Auto vars:     Size  Location     Type
  5701 ;;  sign            1   12[COMRAM] unsigned char 
  5702 ;; Return value:  Size  Location     Type
  5703 ;;                  3    8[COMRAM] float 
  5704 ;; Registers used:
  5705 ;;		wreg, status,2, status,0, cstack
  5706 ;; Tracked objects:
  5707 ;;		On entry : 0/0
  5708 ;;		On exit  : 0/0
  5709 ;;		Unchanged: 0/0
  5710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5711 ;;      Params:         3       0       0       0       0       0       0       0       0
  5712 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5713 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5714 ;;      Totals:         5       0       0       0       0       0       0       0       0
  5715 ;;Total ram usage:        5 bytes
  5716 ;; Hardware stack levels used:    1
  5717 ;; Hardware stack levels required when called:    1
  5718 ;; This function calls:
  5719 ;;		___ftpack
  5720 ;; This function is called by:
  5721 ;;		_Read_LDR
  5722 ;; This function uses a non-reentrant model
  5723 ;;
  5724                           
  5725                           	psect	text26
  5726  0027DC                     __ptext26:
  5727                           	opt stack 0
  5728  0027DC                     ___awtoft:
  5729                           	opt stack 28
  5730                           
  5731                           ;incstack = 0
  5732                           ;incstack = 0
  5733  0027DC  6E0C               	movwf	??___awtoft& (0+255),c
  5734  0027DE  0E00               	movlw	0
  5735  0027E0  6E0D               	movwf	___awtoft@sign,c
  5736  0027E2  500C               	movf	??___awtoft& (0+255),w,c
  5737  0027E4  AE0A               	btfss	___awtoft@c+1,7,c
  5738  0027E6  D008               	goto	l3795
  5739  0027E8  6C09               	negf	___awtoft@c,c
  5740  0027EA  1E0A               	comf	___awtoft@c+1,f,c
  5741  0027EC  B0D8               	btfsc	status,0,c
  5742  0027EE  2A0A               	incf	___awtoft@c+1,f,c
  5743  0027F0  6E0C               	movwf	??___awtoft& (0+255),c
  5744  0027F2  0E01               	movlw	1
  5745  0027F4  6E0D               	movwf	___awtoft@sign,c
  5746  0027F6  500C               	movf	??___awtoft& (0+255),w,c
  5747  0027F8                     l3795:
  5748  0027F8  C009  F001         	movff	___awtoft@c,?___ftpack
  5749  0027FC  C00A  F002         	movff	___awtoft@c+1,?___ftpack+1
  5750  002800  6A03               	clrf	?___ftpack+2,c
  5751  002802  6E0C               	movwf	??___awtoft& (0+255),c
  5752  002804  0E8E               	movlw	142
  5753  002806  6E04               	movwf	?___ftpack+3,c
  5754  002808  500C               	movf	??___awtoft& (0+255),w,c
  5755  00280A  C00D  F005         	movff	___awtoft@sign,?___ftpack+4
  5756  00280E  EC81  F010         	call	___ftpack	;wreg free
  5757  002812  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  5758  002816  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  5759  00281A  C001  F009         	movff	?___ftpack,?___awtoft
  5760  00281E  0012               	return	
  5761  002820                     __end_of___awtoft:
  5762                           	opt stack 0
  5763                           tblptru	equ	0xFF8
  5764                           tblptrh	equ	0xFF7
  5765                           tblptrl	equ	0xFF6
  5766                           tablat	equ	0xFF5
  5767                           prodh	equ	0xFF4
  5768                           prodl	equ	0xFF3
  5769                           postinc0	equ	0xFEE
  5770                           wreg	equ	0xFE8
  5771                           indf1	equ	0xFE7
  5772                           fsr1h	equ	0xFE2
  5773                           fsr1l	equ	0xFE1
  5774                           indf2	equ	0xFDF
  5775                           postinc2	equ	0xFDE
  5776                           postdec2	equ	0xFDD
  5777                           fsr2h	equ	0xFDA
  5778                           fsr2l	equ	0xFD9
  5779                           status	equ	0xFD8
  5780                           
  5781 ;; *************** function ___ftmul *****************
  5782 ;; Defined at:
  5783 ;;		line 52 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\ftmul.c"
  5784 ;; Parameters:    Size  Location     Type
  5785 ;;  f1              3   37[COMRAM] float 
  5786 ;;  f2              3   40[COMRAM] float 
  5787 ;; Auto vars:     Size  Location     Type
  5788 ;;  f3_as_produc    3   49[COMRAM] unsigned um
  5789 ;;  sign            1   53[COMRAM] unsigned char 
  5790 ;;  cntr            1   52[COMRAM] unsigned char 
  5791 ;;  exp             1   48[COMRAM] unsigned char 
  5792 ;; Return value:  Size  Location     Type
  5793 ;;                  3   37[COMRAM] float 
  5794 ;; Registers used:
  5795 ;;		wreg, status,2, status,0, cstack
  5796 ;; Tracked objects:
  5797 ;;		On entry : 0/0
  5798 ;;		On exit  : 0/0
  5799 ;;		Unchanged: 0/0
  5800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5801 ;;      Params:         6       0       0       0       0       0       0       0       0
  5802 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5803 ;;      Temps:          5       0       0       0       0       0       0       0       0
  5804 ;;      Totals:        17       0       0       0       0       0       0       0       0
  5805 ;;Total ram usage:       17 bytes
  5806 ;; Hardware stack levels used:    1
  5807 ;; Hardware stack levels required when called:    1
  5808 ;; This function calls:
  5809 ;;		___ftpack
  5810 ;; This function is called by:
  5811 ;;		_Read_LDR
  5812 ;;		_fround
  5813 ;;		_scale
  5814 ;;		_sprintf
  5815 ;;		___asftmul
  5816 ;; This function uses a non-reentrant model
  5817 ;;
  5818                           
  5819                           	psect	text27
  5820  001B90                     __ptext27:
  5821                           	opt stack 0
  5822  001B90                     ___ftmul:
  5823                           	opt stack 28
  5824                           
  5825                           ;incstack = 0
  5826                           ;incstack = 0
  5827  001B90  0E0F               	movlw	15
  5828  001B92  6E2C               	movwf	??___ftmul& (0+255),c
  5829  001B94  C026  F02D         	movff	___ftmul@f1,??___ftmul+1
  5830  001B98  C027  F02E         	movff	___ftmul@f1+1,??___ftmul+2
  5831  001B9C  C028  F02F         	movff	___ftmul@f1+2,??___ftmul+3
  5832  001BA0  282C               	incf	??___ftmul,w,c
  5833  001BA2  6E30               	movwf	(??___ftmul+4)& (0+255),c
  5834  001BA4  D004               	goto	u2630
  5835  001BA6                     u2635:
  5836  001BA6  90D8               	bcf	status,0,c
  5837  001BA8  322F               	rrcf	??___ftmul+3,f,c
  5838  001BAA  322E               	rrcf	??___ftmul+2,f,c
  5839  001BAC  322D               	rrcf	??___ftmul+1,f,c
  5840  001BAE                     u2630:
  5841  001BAE  2E30               	decfsz	(??___ftmul+4)& (0+255),f,c
  5842  001BB0  D7FA               	goto	u2635
  5843  001BB2  502D               	movf	??___ftmul+1,w,c
  5844  001BB4  6E31               	movwf	___ftmul@exp,c
  5845  001BB6  6631               	tstfsz	___ftmul@exp& (0+255),c
  5846  001BB8  D001               	goto	l4029
  5847  001BBA  D015               	goto	u2660
  5848  001BBC                     l4029:
  5849  001BBC  0E0F               	movlw	15
  5850  001BBE  6E2C               	movwf	??___ftmul& (0+255),c
  5851  001BC0  C029  F02D         	movff	___ftmul@f2,??___ftmul+1
  5852  001BC4  C02A  F02E         	movff	___ftmul@f2+1,??___ftmul+2
  5853  001BC8  C02B  F02F         	movff	___ftmul@f2+2,??___ftmul+3
  5854  001BCC  282C               	incf	??___ftmul,w,c
  5855  001BCE  6E30               	movwf	(??___ftmul+4)& (0+255),c
  5856  001BD0  D004               	goto	u2650
  5857  001BD2                     u2655:
  5858  001BD2  90D8               	bcf	status,0,c
  5859  001BD4  322F               	rrcf	??___ftmul+3,f,c
  5860  001BD6  322E               	rrcf	??___ftmul+2,f,c
  5861  001BD8  322D               	rrcf	??___ftmul+1,f,c
  5862  001BDA                     u2650:
  5863  001BDA  2E30               	decfsz	(??___ftmul+4)& (0+255),f,c
  5864  001BDC  D7FA               	goto	u2655
  5865  001BDE  502D               	movf	??___ftmul+1,w,c
  5866  001BE0  6E36               	movwf	___ftmul@sign,c
  5867  001BE2  6636               	tstfsz	___ftmul@sign& (0+255),c
  5868  001BE4  D007               	goto	l4035
  5869  001BE6                     u2660:
  5870  001BE6  0E00               	movlw	0
  5871  001BE8  6E26               	movwf	?___ftmul,c
  5872  001BEA  0E00               	movlw	0
  5873  001BEC  6E27               	movwf	?___ftmul+1,c
  5874  001BEE  0E00               	movlw	0
  5875  001BF0  6E28               	movwf	?___ftmul+2,c
  5876  001BF2  D055               	goto	l698
  5877  001BF4                     l4035:
  5878  001BF4  5036               	movf	___ftmul@sign,w,c
  5879  001BF6  0F7B               	addlw	123
  5880  001BF8  2631               	addwf	___ftmul@exp,f,c
  5881  001BFA  C028  F036         	movff	___ftmul@f1+2,___ftmul@sign
  5882  001BFE  502B               	movf	(___ftmul@f2+2)& (0+255),w,c
  5883  001C00  1A36               	xorwf	___ftmul@sign,f,c
  5884  001C02  0E80               	movlw	128
  5885  001C04  1636               	andwf	___ftmul@sign,f,c
  5886  001C06  8E27               	bsf	___ftmul@f1+1,7,c
  5887  001C08  8E2A               	bsf	___ftmul@f2+1,7,c
  5888  001C0A  0EFF               	movlw	255
  5889  001C0C  1629               	andwf	___ftmul@f2,f,c
  5890  001C0E  0EFF               	movlw	255
  5891  001C10  162A               	andwf	___ftmul@f2+1,f,c
  5892  001C12  0E00               	movlw	0
  5893  001C14  162B               	andwf	___ftmul@f2+2,f,c
  5894  001C16  0E00               	movlw	0
  5895  001C18  6E32               	movwf	___ftmul@f3_as_product,c
  5896  001C1A  0E00               	movlw	0
  5897  001C1C  6E33               	movwf	___ftmul@f3_as_product+1,c
  5898  001C1E  0E00               	movlw	0
  5899  001C20  6E34               	movwf	___ftmul@f3_as_product+2,c
  5900  001C22  6E2C               	movwf	??___ftmul& (0+255),c
  5901  001C24  0E07               	movlw	7
  5902  001C26  6E35               	movwf	___ftmul@cntr,c
  5903  001C28  502C               	movf	??___ftmul& (0+255),w,c
  5904  001C2A                     l4049:
  5905  001C2A  A026               	btfss	___ftmul@f1,0,c
  5906  001C2C  D006               	goto	l4053
  5907  001C2E  5029               	movf	___ftmul@f2,w,c
  5908  001C30  2632               	addwf	___ftmul@f3_as_product,f,c
  5909  001C32  502A               	movf	___ftmul@f2+1,w,c
  5910  001C34  2233               	addwfc	___ftmul@f3_as_product+1,f,c
  5911  001C36  502B               	movf	___ftmul@f2+2,w,c
  5912  001C38  2234               	addwfc	___ftmul@f3_as_product+2,f,c
  5913  001C3A                     l4053:
  5914  001C3A  90D8               	bcf	status,0,c
  5915  001C3C  3228               	rrcf	___ftmul@f1+2,f,c
  5916  001C3E  3227               	rrcf	___ftmul@f1+1,f,c
  5917  001C40  3226               	rrcf	___ftmul@f1,f,c
  5918  001C42  90D8               	bcf	status,0,c
  5919  001C44  3629               	rlcf	___ftmul@f2,f,c
  5920  001C46  362A               	rlcf	___ftmul@f2+1,f,c
  5921  001C48  362B               	rlcf	___ftmul@f2+2,f,c
  5922  001C4A  2E35               	decfsz	___ftmul@cntr,f,c
  5923  001C4C  D7EE               	goto	l4049
  5924  001C4E  6E2C               	movwf	??___ftmul& (0+255),c
  5925  001C50  0E09               	movlw	9
  5926  001C52  6E35               	movwf	___ftmul@cntr,c
  5927  001C54  502C               	movf	??___ftmul& (0+255),w,c
  5928  001C56                     l4059:
  5929  001C56  A026               	btfss	___ftmul@f1,0,c
  5930  001C58  D006               	goto	l4063
  5931  001C5A  5029               	movf	___ftmul@f2,w,c
  5932  001C5C  2632               	addwf	___ftmul@f3_as_product,f,c
  5933  001C5E  502A               	movf	___ftmul@f2+1,w,c
  5934  001C60  2233               	addwfc	___ftmul@f3_as_product+1,f,c
  5935  001C62  502B               	movf	___ftmul@f2+2,w,c
  5936  001C64  2234               	addwfc	___ftmul@f3_as_product+2,f,c
  5937  001C66                     l4063:
  5938  001C66  90D8               	bcf	status,0,c
  5939  001C68  3228               	rrcf	___ftmul@f1+2,f,c
  5940  001C6A  3227               	rrcf	___ftmul@f1+1,f,c
  5941  001C6C  3226               	rrcf	___ftmul@f1,f,c
  5942  001C6E  90D8               	bcf	status,0,c
  5943  001C70  3234               	rrcf	___ftmul@f3_as_product+2,f,c
  5944  001C72  3233               	rrcf	___ftmul@f3_as_product+1,f,c
  5945  001C74  3232               	rrcf	___ftmul@f3_as_product,f,c
  5946  001C76  2E35               	decfsz	___ftmul@cntr,f,c
  5947  001C78  D7EE               	goto	l4059
  5948  001C7A  C032  F001         	movff	___ftmul@f3_as_product,?___ftpack
  5949  001C7E  C033  F002         	movff	___ftmul@f3_as_product+1,?___ftpack+1
  5950  001C82  C034  F003         	movff	___ftmul@f3_as_product+2,?___ftpack+2
  5951  001C86  C031  F004         	movff	___ftmul@exp,?___ftpack+3
  5952  001C8A  C036  F005         	movff	___ftmul@sign,?___ftpack+4
  5953  001C8E  EC81  F010         	call	___ftpack	;wreg free
  5954  001C92  C003  F028         	movff	?___ftpack+2,?___ftmul+2
  5955  001C96  C002  F027         	movff	?___ftpack+1,?___ftmul+1
  5956  001C9A  C001  F026         	movff	?___ftpack,?___ftmul
  5957  001C9E                     l698:
  5958  001C9E  0012               	return	
  5959  001CA0                     __end_of___ftmul:
  5960                           	opt stack 0
  5961                           tblptru	equ	0xFF8
  5962                           tblptrh	equ	0xFF7
  5963                           tblptrl	equ	0xFF6
  5964                           tablat	equ	0xFF5
  5965                           prodh	equ	0xFF4
  5966                           prodl	equ	0xFF3
  5967                           postinc0	equ	0xFEE
  5968                           wreg	equ	0xFE8
  5969                           indf1	equ	0xFE7
  5970                           fsr1h	equ	0xFE2
  5971                           fsr1l	equ	0xFE1
  5972                           indf2	equ	0xFDF
  5973                           postinc2	equ	0xFDE
  5974                           postdec2	equ	0xFDD
  5975                           fsr2h	equ	0xFDA
  5976                           fsr2l	equ	0xFD9
  5977                           status	equ	0xFD8
  5978                           
  5979 ;; *************** function _Obtener_Distancia *****************
  5980 ;; Defined at:
  5981 ;;		line 158 in file "main.c"
  5982 ;; Parameters:    Size  Location     Type
  5983 ;;		None
  5984 ;; Auto vars:     Size  Location     Type
  5985 ;;  Duracion        2   14[COMRAM] unsigned int 
  5986 ;;  Distancia       2   12[COMRAM] unsigned int 
  5987 ;;  Timer_1         2   10[COMRAM] unsigned int 
  5988 ;; Return value:  Size  Location     Type
  5989 ;;                  2    8[COMRAM] unsigned int 
  5990 ;; Registers used:
  5991 ;;		wreg, status,2, status,0, cstack
  5992 ;; Tracked objects:
  5993 ;;		On entry : 0/0
  5994 ;;		On exit  : 0/0
  5995 ;;		Unchanged: 0/0
  5996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5997 ;;      Params:         2       0       0       0       0       0       0       0       0
  5998 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5999 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6000 ;;      Totals:         8       0       0       0       0       0       0       0       0
  6001 ;;Total ram usage:        8 bytes
  6002 ;; Hardware stack levels used:    1
  6003 ;; Hardware stack levels required when called:    1
  6004 ;; This function calls:
  6005 ;;		___lwdiv
  6006 ;; This function is called by:
  6007 ;;		_main
  6008 ;; This function uses a non-reentrant model
  6009 ;;
  6010                           
  6011                           	psect	text28
  6012  002522                     __ptext28:
  6013                           	opt stack 0
  6014  002522                     _Obtener_Distancia:
  6015                           	opt stack 29
  6016                           
  6017                           ;main.c: 159: uint16_t Duracion;
  6018                           ;main.c: 160: uint16_t Distancia;
  6019                           ;main.c: 161: uint16_t Timer_1;
  6020                           ;main.c: 163: LATAbits.LATA1=1;
  6021                           
  6022                           ;incstack = 0
  6023                           ;incstack = 0
  6024  002522  8289               	bsf	3977,1,c	;volatile
  6025                           
  6026                           ;main.c: 164: _delay((unsigned long)((10)*(8000000/4000000.0)));
  6027  002524  0E06               	movlw	6
  6028  002526                     u3187:
  6029  002526  2EE8               	decfsz	wreg,f,c
  6030  002528  D7FE               	goto	u3187
  6031  00252A  D000               	nop2		;nop
  6032                           
  6033                           ;main.c: 165: LATAbits.LATA1=0;
  6034  00252C  9289               	bcf	3977,1,c	;volatile
  6035  00252E                     l168:
  6036  00252E  A480               	btfss	3968,2,c	;volatile
  6037  002530  D7FE               	goto	l168
  6038                           
  6039                           ;main.c: 167: T1CONbits.TMR1ON=1;
  6040  002532  80CD               	bsf	4045,0,c	;volatile
  6041  002534                     l171:
  6042  002534  B480               	btfsc	3968,2,c	;volatile
  6043  002536  D7FE               	goto	l171
  6044                           
  6045                           ;main.c: 169: T1CONbits.TMR1ON=0;
  6046  002538  90CD               	bcf	4045,0,c	;volatile
  6047                           
  6048                           ;main.c: 170: Timer_1=TMR1;
  6049  00253A  CFCE F00B          	movff	4046,Obtener_Distancia@Timer_1	;volatile
  6050  00253E  CFCF F00C          	movff	4047,Obtener_Distancia@Timer_1+1	;volatile
  6051                           
  6052                           ;main.c: 171: Duracion=Timer_1/2;
  6053  002542  90D8               	bcf	status,0,c
  6054  002544  300C               	rrcf	Obtener_Distancia@Timer_1+1,w,c
  6055  002546  6E10               	movwf	Obtener_Distancia@Duracion+1,c
  6056  002548  300B               	rrcf	Obtener_Distancia@Timer_1,w,c
  6057  00254A  6E0F               	movwf	Obtener_Distancia@Duracion,c
  6058                           
  6059                           ;main.c: 172: if(Duracion<=23200)
  6060  00254C  0EA1               	movlw	161
  6061  00254E  5C0F               	subwf	Obtener_Distancia@Duracion,w,c
  6062  002550  0E5A               	movlw	90
  6063  002552  5810               	subwfb	Obtener_Distancia@Duracion+1,w,c
  6064  002554  B0D8               	btfsc	status,0,c
  6065  002556  D00F               	goto	l3717
  6066                           
  6067                           ;main.c: 173: {
  6068                           ;main.c: 174: Distancia=Duracion/58;
  6069  002558  C00F  F001         	movff	Obtener_Distancia@Duracion,?___lwdiv
  6070  00255C  C010  F002         	movff	Obtener_Distancia@Duracion+1,?___lwdiv+1
  6071  002560  0E00               	movlw	0
  6072  002562  6E04               	movwf	?___lwdiv+3,c
  6073  002564  0E3A               	movlw	58
  6074  002566  6E03               	movwf	?___lwdiv+2,c
  6075  002568  ECA0  F013         	call	___lwdiv	;wreg free
  6076  00256C  C001  F00D         	movff	?___lwdiv,Obtener_Distancia@Distancia
  6077  002570  C002  F00E         	movff	?___lwdiv+1,Obtener_Distancia@Distancia+1
  6078                           
  6079                           ;main.c: 175: }
  6080  002574  D008               	goto	l175
  6081  002576                     l3717:
  6082                           
  6083                           ;main.c: 176: else if(Duracion<116)
  6084  002576  0E74               	movlw	116
  6085  002578  5C0F               	subwf	Obtener_Distancia@Duracion,w,c
  6086  00257A  0E00               	movlw	0
  6087  00257C  5810               	subwfb	Obtener_Distancia@Duracion+1,w,c
  6088                           
  6089                           ;main.c: 180: else
  6090                           ;main.c: 181: {
  6091                           ;main.c: 182: Distancia=0;
  6092                           
  6093                           ;main.c: 179: }
  6094                           
  6095                           ;main.c: 177: {
  6096                           ;main.c: 178: Distancia=0;
  6097  00257E  0E00               	movlw	0
  6098  002580  6E0E               	movwf	Obtener_Distancia@Distancia+1,c
  6099  002582  0E00               	movlw	0
  6100  002584  6E0D               	movwf	Obtener_Distancia@Distancia,c
  6101  002586                     l175:
  6102                           
  6103                           ;main.c: 183: }
  6104                           ;main.c: 184: Duracion=0;
  6105  002586  0E00               	movlw	0
  6106  002588  6E10               	movwf	Obtener_Distancia@Duracion+1,c
  6107  00258A  0E00               	movlw	0
  6108  00258C  6E0F               	movwf	Obtener_Distancia@Duracion,c
  6109                           
  6110                           ;main.c: 185: TMR1=0;
  6111  00258E  0E00               	movlw	0
  6112  002590  6ECF               	movwf	4047,c	;volatile
  6113  002592  0E00               	movlw	0
  6114  002594  6ECE               	movwf	4046,c	;volatile
  6115                           
  6116                           ;main.c: 187: return Distancia;
  6117  002596  C00D  F009         	movff	Obtener_Distancia@Distancia,?_Obtener_Distancia
  6118  00259A  C00E  F00A         	movff	Obtener_Distancia@Distancia+1,?_Obtener_Distancia+1
  6119  00259E  0012               	return	
  6120  0025A0                     __end_of_Obtener_Distancia:
  6121                           	opt stack 0
  6122                           tblptru	equ	0xFF8
  6123                           tblptrh	equ	0xFF7
  6124                           tblptrl	equ	0xFF6
  6125                           tablat	equ	0xFF5
  6126                           prodh	equ	0xFF4
  6127                           prodl	equ	0xFF3
  6128                           postinc0	equ	0xFEE
  6129                           wreg	equ	0xFE8
  6130                           indf1	equ	0xFE7
  6131                           fsr1h	equ	0xFE2
  6132                           fsr1l	equ	0xFE1
  6133                           indf2	equ	0xFDF
  6134                           postinc2	equ	0xFDE
  6135                           postdec2	equ	0xFDD
  6136                           fsr2h	equ	0xFDA
  6137                           fsr2l	equ	0xFD9
  6138                           status	equ	0xFD8
  6139                           
  6140 ;; *************** function ___lwdiv *****************
  6141 ;; Defined at:
  6142 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\lwdiv.c"
  6143 ;; Parameters:    Size  Location     Type
  6144 ;;  dividend        2    0[COMRAM] unsigned int 
  6145 ;;  divisor         2    2[COMRAM] unsigned int 
  6146 ;; Auto vars:     Size  Location     Type
  6147 ;;  quotient        2    5[COMRAM] unsigned int 
  6148 ;;  counter         1    7[COMRAM] unsigned char 
  6149 ;; Return value:  Size  Location     Type
  6150 ;;                  2    0[COMRAM] unsigned int 
  6151 ;; Registers used:
  6152 ;;		wreg, status,2, status,0
  6153 ;; Tracked objects:
  6154 ;;		On entry : 0/0
  6155 ;;		On exit  : 0/0
  6156 ;;		Unchanged: 0/0
  6157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6158 ;;      Params:         4       0       0       0       0       0       0       0       0
  6159 ;;      Locals:         3       0       0       0       0       0       0       0       0
  6160 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6161 ;;      Totals:         8       0       0       0       0       0       0       0       0
  6162 ;;Total ram usage:        8 bytes
  6163 ;; Hardware stack levels used:    1
  6164 ;; This function calls:
  6165 ;;		Nothing
  6166 ;; This function is called by:
  6167 ;;		_Obtener_Distancia
  6168 ;; This function uses a non-reentrant model
  6169 ;;
  6170                           
  6171                           	psect	text29
  6172  002740                     __ptext29:
  6173                           	opt stack 0
  6174  002740                     ___lwdiv:
  6175                           	opt stack 29
  6176                           
  6177                           ;incstack = 0
  6178                           ;incstack = 0
  6179  002740  0E00               	movlw	0
  6180  002742  6E07               	movwf	___lwdiv@quotient+1,c
  6181  002744  0E00               	movlw	0
  6182  002746  6E06               	movwf	___lwdiv@quotient,c
  6183  002748  5004               	movf	___lwdiv@divisor+1,w,c
  6184  00274A  1003               	iorwf	___lwdiv@divisor,w,c
  6185  00274C  B4D8               	btfsc	status,2,c
  6186  00274E  D01E               	goto	l831
  6187  002750  6E05               	movwf	??___lwdiv& (0+255),c
  6188  002752  0E01               	movlw	1
  6189  002754  6E08               	movwf	___lwdiv@counter,c
  6190  002756  5005               	movf	??___lwdiv& (0+255),w,c
  6191  002758  D004               	goto	l3649
  6192  00275A                     l3647:
  6193  00275A  90D8               	bcf	status,0,c
  6194  00275C  3603               	rlcf	___lwdiv@divisor,f,c
  6195  00275E  3604               	rlcf	___lwdiv@divisor+1,f,c
  6196  002760  2A08               	incf	___lwdiv@counter,f,c
  6197  002762                     l3649:
  6198  002762  AE04               	btfss	___lwdiv@divisor+1,7,c
  6199  002764  D7FA               	goto	l3647
  6200  002766                     l3651:
  6201  002766  90D8               	bcf	status,0,c
  6202  002768  3606               	rlcf	___lwdiv@quotient,f,c
  6203  00276A  3607               	rlcf	___lwdiv@quotient+1,f,c
  6204  00276C  5003               	movf	___lwdiv@divisor,w,c
  6205  00276E  5C01               	subwf	___lwdiv@dividend,w,c
  6206  002770  5004               	movf	___lwdiv@divisor+1,w,c
  6207  002772  5802               	subwfb	___lwdiv@dividend+1,w,c
  6208  002774  A0D8               	btfss	status,0,c
  6209  002776  D005               	goto	l3659
  6210  002778  5003               	movf	___lwdiv@divisor,w,c
  6211  00277A  5E01               	subwf	___lwdiv@dividend,f,c
  6212  00277C  5004               	movf	___lwdiv@divisor+1,w,c
  6213  00277E  5A02               	subwfb	___lwdiv@dividend+1,f,c
  6214  002780  8006               	bsf	___lwdiv@quotient,0,c
  6215  002782                     l3659:
  6216  002782  90D8               	bcf	status,0,c
  6217  002784  3204               	rrcf	___lwdiv@divisor+1,f,c
  6218  002786  3203               	rrcf	___lwdiv@divisor,f,c
  6219  002788  2E08               	decfsz	___lwdiv@counter,f,c
  6220  00278A  D7ED               	goto	l3651
  6221  00278C                     l831:
  6222  00278C  C006  F001         	movff	___lwdiv@quotient,?___lwdiv
  6223  002790  C007  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6224  002794  0012               	return	
  6225  002796                     __end_of___lwdiv:
  6226                           	opt stack 0
  6227                           tblptru	equ	0xFF8
  6228                           tblptrh	equ	0xFF7
  6229                           tblptrl	equ	0xFF6
  6230                           tablat	equ	0xFF5
  6231                           prodh	equ	0xFF4
  6232                           prodl	equ	0xFF3
  6233                           postinc0	equ	0xFEE
  6234                           wreg	equ	0xFE8
  6235                           indf1	equ	0xFE7
  6236                           fsr1h	equ	0xFE2
  6237                           fsr1l	equ	0xFE1
  6238                           indf2	equ	0xFDF
  6239                           postinc2	equ	0xFDE
  6240                           postdec2	equ	0xFDD
  6241                           fsr2h	equ	0xFDA
  6242                           fsr2l	equ	0xFD9
  6243                           status	equ	0xFD8
  6244                           
  6245 ;; *************** function _USART_Init *****************
  6246 ;; Defined at:
  6247 ;;		line 101 in file "main.c"
  6248 ;; Parameters:    Size  Location     Type
  6249 ;;		None
  6250 ;; Auto vars:     Size  Location     Type
  6251 ;;  baud_rate       4   85[COMRAM] long 
  6252 ;;  temp            3   89[COMRAM] float 
  6253 ;; Return value:  Size  Location     Type
  6254 ;;		None               void
  6255 ;; Registers used:
  6256 ;;		wreg, status,2, status,0, cstack
  6257 ;; Tracked objects:
  6258 ;;		On entry : 0/0
  6259 ;;		On exit  : 0/0
  6260 ;;		Unchanged: 0/0
  6261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6262 ;;      Params:         0       0       0       0       0       0       0       0       0
  6263 ;;      Locals:         7       0       0       0       0       0       0       0       0
  6264 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6265 ;;      Totals:         7       0       0       0       0       0       0       0       0
  6266 ;;Total ram usage:        7 bytes
  6267 ;; Hardware stack levels used:    1
  6268 ;; Hardware stack levels required when called:    2
  6269 ;; This function calls:
  6270 ;;		___altoft
  6271 ;;		___ftadd
  6272 ;;		___ftdiv
  6273 ;;		___fttol
  6274 ;; This function is called by:
  6275 ;;		_main
  6276 ;; This function uses a non-reentrant model
  6277 ;;
  6278                           
  6279                           	psect	text30
  6280  002418                     __ptext30:
  6281                           	opt stack 0
  6282  002418                     _USART_Init:
  6283                           	opt stack 28
  6284                           
  6285                           ;main.c: 102: long int baud_rate = 115200;
  6286                           
  6287                           ;incstack = 0
  6288                           ;incstack = 0
  6289  002418  0E00               	movlw	0
  6290  00241A  6E56               	movwf	USART_Init@baud_rate,c
  6291  00241C  0EC2               	movlw	194
  6292  00241E  6E57               	movwf	USART_Init@baud_rate+1,c
  6293  002420  0E01               	movlw	1
  6294  002422  6E58               	movwf	USART_Init@baud_rate+2,c
  6295  002424  0E00               	movlw	0
  6296  002426  6E59               	movwf	USART_Init@baud_rate+3,c
  6297                           
  6298                           ;main.c: 103: float temp;
  6299                           ;main.c: 104: TRISC6=0;
  6300  002428  9C94               	bcf	3988,6,c	;volatile
  6301                           
  6302                           ;main.c: 105: TRISC7=1;
  6303  00242A  8E94               	bsf	3988,7,c	;volatile
  6304                           
  6305                           ;main.c: 108: temp= (( (float) (200000/64) / (float) baud_rate ) - 1); ;
  6306  00242C  C056  F009         	movff	USART_Init@baud_rate,?___altoft
  6307  002430  C057  F00A         	movff	USART_Init@baud_rate+1,?___altoft+1
  6308  002434  C058  F00B         	movff	USART_Init@baud_rate+2,?___altoft+2
  6309  002438  C059  F00C         	movff	USART_Init@baud_rate+3,?___altoft+3
  6310  00243C  EC4F  F012         	call	___altoft	;wreg free
  6311  002440  C00B  F03C         	movff	?___altoft+2,?___ftdiv+5
  6312  002444  C00A  F03B         	movff	?___altoft+1,?___ftdiv+4
  6313  002448  C009  F03A         	movff	?___altoft,?___ftdiv+3
  6314  00244C  0E50               	movlw	80
  6315  00244E  6E37               	movwf	?___ftdiv,c
  6316  002450  0E43               	movlw	67
  6317  002452  6E38               	movwf	?___ftdiv+1,c
  6318  002454  0E45               	movlw	69
  6319  002456  6E39               	movwf	?___ftdiv+2,c
  6320  002458  EC50  F00E         	call	___ftdiv	;wreg free
  6321  00245C  C039  F04A         	movff	?___ftdiv+2,?___ftadd+2
  6322  002460  C038  F049         	movff	?___ftdiv+1,?___ftadd+1
  6323  002464  C037  F048         	movff	?___ftdiv,?___ftadd
  6324  002468  0E00               	movlw	0
  6325  00246A  6E4B               	movwf	?___ftadd+3,c
  6326  00246C  0E80               	movlw	128
  6327  00246E  6E4C               	movwf	?___ftadd+4,c
  6328  002470  0EBF               	movlw	191
  6329  002472  6E4D               	movwf	?___ftadd+5,c
  6330  002474  EC51  F00C         	call	___ftadd	;wreg free
  6331  002478  C04A  F05C         	movff	?___ftadd+2,USART_Init@temp+2
  6332  00247C  C049  F05B         	movff	?___ftadd+1,USART_Init@temp+1
  6333  002480  C048  F05A         	movff	?___ftadd,USART_Init@temp
  6334                           
  6335                           ;main.c: 109: SPBRG = (int) temp;
  6336  002484  C05A  F017         	movff	USART_Init@temp,?___fttol
  6337  002488  C05B  F018         	movff	USART_Init@temp+1,?___fttol+1
  6338  00248C  C05C  F019         	movff	USART_Init@temp+2,?___fttol+2
  6339  002490  EC49  F00F         	call	___fttol	;wreg free
  6340  002494  5017               	movf	?___fttol,w,c
  6341  002496  6EAF               	movwf	4015,c	;volatile
  6342                           
  6343                           ;main.c: 112: RCSTA = 0x90;
  6344  002498  0E90               	movlw	144
  6345  00249A  6EAB               	movwf	4011,c	;volatile
  6346  00249C  0012               	return	
  6347  00249E                     __end_of_USART_Init:
  6348                           	opt stack 0
  6349                           tblptru	equ	0xFF8
  6350                           tblptrh	equ	0xFF7
  6351                           tblptrl	equ	0xFF6
  6352                           tablat	equ	0xFF5
  6353                           prodh	equ	0xFF4
  6354                           prodl	equ	0xFF3
  6355                           postinc0	equ	0xFEE
  6356                           wreg	equ	0xFE8
  6357                           indf1	equ	0xFE7
  6358                           fsr1h	equ	0xFE2
  6359                           fsr1l	equ	0xFE1
  6360                           indf2	equ	0xFDF
  6361                           postinc2	equ	0xFDE
  6362                           postdec2	equ	0xFDD
  6363                           fsr2h	equ	0xFDA
  6364                           fsr2l	equ	0xFD9
  6365                           status	equ	0xFD8
  6366                           
  6367 ;; *************** function ___ftdiv *****************
  6368 ;; Defined at:
  6369 ;;		line 50 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\ftdiv.c"
  6370 ;; Parameters:    Size  Location     Type
  6371 ;;  f1              3   54[COMRAM] float 
  6372 ;;  f2              3   57[COMRAM] float 
  6373 ;; Auto vars:     Size  Location     Type
  6374 ;;  f3              3   66[COMRAM] float 
  6375 ;;  sign            1   70[COMRAM] unsigned char 
  6376 ;;  exp             1   69[COMRAM] unsigned char 
  6377 ;;  cntr            1   65[COMRAM] unsigned char 
  6378 ;; Return value:  Size  Location     Type
  6379 ;;                  3   54[COMRAM] float 
  6380 ;; Registers used:
  6381 ;;		wreg, status,2, status,0, cstack
  6382 ;; Tracked objects:
  6383 ;;		On entry : 0/0
  6384 ;;		On exit  : 0/0
  6385 ;;		Unchanged: 0/0
  6386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6387 ;;      Params:         6       0       0       0       0       0       0       0       0
  6388 ;;      Locals:         6       0       0       0       0       0       0       0       0
  6389 ;;      Temps:          5       0       0       0       0       0       0       0       0
  6390 ;;      Totals:        17       0       0       0       0       0       0       0       0
  6391 ;;Total ram usage:       17 bytes
  6392 ;; Hardware stack levels used:    1
  6393 ;; Hardware stack levels required when called:    1
  6394 ;; This function calls:
  6395 ;;		___ftpack
  6396 ;; This function is called by:
  6397 ;;		_USART_Init
  6398 ;;		_Read_LDR
  6399 ;; This function uses a non-reentrant model
  6400 ;;
  6401                           
  6402                           	psect	text31
  6403  001CA0                     __ptext31:
  6404                           	opt stack 0
  6405  001CA0                     ___ftdiv:
  6406                           	opt stack 28
  6407                           
  6408                           ;incstack = 0
  6409                           ;incstack = 0
  6410  001CA0  0E0F               	movlw	15
  6411  001CA2  6E3D               	movwf	??___ftdiv& (0+255),c
  6412  001CA4  C037  F03E         	movff	___ftdiv@f1,??___ftdiv+1
  6413  001CA8  C038  F03F         	movff	___ftdiv@f1+1,??___ftdiv+2
  6414  001CAC  C039  F040         	movff	___ftdiv@f1+2,??___ftdiv+3
  6415  001CB0  283D               	incf	??___ftdiv,w,c
  6416  001CB2  6E41               	movwf	(??___ftdiv+4)& (0+255),c
  6417  001CB4  D004               	goto	u2580
  6418  001CB6                     u2585:
  6419  001CB6  90D8               	bcf	status,0,c
  6420  001CB8  3240               	rrcf	??___ftdiv+3,f,c
  6421  001CBA  323F               	rrcf	??___ftdiv+2,f,c
  6422  001CBC  323E               	rrcf	??___ftdiv+1,f,c
  6423  001CBE                     u2580:
  6424  001CBE  2E41               	decfsz	(??___ftdiv+4)& (0+255),f,c
  6425  001CC0  D7FA               	goto	u2585
  6426  001CC2  503E               	movf	??___ftdiv+1,w,c
  6427  001CC4  6E46               	movwf	___ftdiv@exp,c
  6428  001CC6  6646               	tstfsz	___ftdiv@exp& (0+255),c
  6429  001CC8  D001               	goto	l3985
  6430  001CCA  D015               	goto	u2610
  6431  001CCC                     l3985:
  6432  001CCC  0E0F               	movlw	15
  6433  001CCE  6E3D               	movwf	??___ftdiv& (0+255),c
  6434  001CD0  C03A  F03E         	movff	___ftdiv@f2,??___ftdiv+1
  6435  001CD4  C03B  F03F         	movff	___ftdiv@f2+1,??___ftdiv+2
  6436  001CD8  C03C  F040         	movff	___ftdiv@f2+2,??___ftdiv+3
  6437  001CDC  283D               	incf	??___ftdiv,w,c
  6438  001CDE  6E41               	movwf	(??___ftdiv+4)& (0+255),c
  6439  001CE0  D004               	goto	u2600
  6440  001CE2                     u2605:
  6441  001CE2  90D8               	bcf	status,0,c
  6442  001CE4  3240               	rrcf	??___ftdiv+3,f,c
  6443  001CE6  323F               	rrcf	??___ftdiv+2,f,c
  6444  001CE8  323E               	rrcf	??___ftdiv+1,f,c
  6445  001CEA                     u2600:
  6446  001CEA  2E41               	decfsz	(??___ftdiv+4)& (0+255),f,c
  6447  001CEC  D7FA               	goto	u2605
  6448  001CEE  503E               	movf	??___ftdiv+1,w,c
  6449  001CF0  6E47               	movwf	___ftdiv@sign,c
  6450  001CF2  6647               	tstfsz	___ftdiv@sign& (0+255),c
  6451  001CF4  D007               	goto	l3991
  6452  001CF6                     u2610:
  6453  001CF6  0E00               	movlw	0
  6454  001CF8  6E37               	movwf	?___ftdiv,c
  6455  001CFA  0E00               	movlw	0
  6456  001CFC  6E38               	movwf	?___ftdiv+1,c
  6457  001CFE  0E00               	movlw	0
  6458  001D00  6E39               	movwf	?___ftdiv+2,c
  6459  001D02  D04C               	goto	l666
  6460  001D04                     l3991:
  6461  001D04  0E00               	movlw	0
  6462  001D06  6E43               	movwf	___ftdiv@f3,c
  6463  001D08  0E00               	movlw	0
  6464  001D0A  6E44               	movwf	___ftdiv@f3+1,c
  6465  001D0C  0E00               	movlw	0
  6466  001D0E  6E45               	movwf	___ftdiv@f3+2,c
  6467  001D10  5047               	movf	___ftdiv@sign,w,c
  6468  001D12  0F89               	addlw	137
  6469  001D14  5E46               	subwf	___ftdiv@exp,f,c
  6470  001D16  C039  F047         	movff	___ftdiv@f1+2,___ftdiv@sign
  6471  001D1A  503C               	movf	(___ftdiv@f2+2)& (0+255),w,c
  6472  001D1C  1A47               	xorwf	___ftdiv@sign,f,c
  6473  001D1E  0E80               	movlw	128
  6474  001D20  1647               	andwf	___ftdiv@sign,f,c
  6475  001D22  8E38               	bsf	___ftdiv@f1+1,7,c
  6476  001D24  0EFF               	movlw	255
  6477  001D26  1637               	andwf	___ftdiv@f1,f,c
  6478  001D28  0EFF               	movlw	255
  6479  001D2A  1638               	andwf	___ftdiv@f1+1,f,c
  6480  001D2C  0E00               	movlw	0
  6481  001D2E  1639               	andwf	___ftdiv@f1+2,f,c
  6482  001D30  8E3B               	bsf	___ftdiv@f2+1,7,c
  6483  001D32  0EFF               	movlw	255
  6484  001D34  163A               	andwf	___ftdiv@f2,f,c
  6485  001D36  0EFF               	movlw	255
  6486  001D38  163B               	andwf	___ftdiv@f2+1,f,c
  6487  001D3A  0E00               	movlw	0
  6488  001D3C  163C               	andwf	___ftdiv@f2+2,f,c
  6489  001D3E  6E3D               	movwf	??___ftdiv& (0+255),c
  6490  001D40  0E18               	movlw	24
  6491  001D42  6E42               	movwf	___ftdiv@cntr,c
  6492  001D44  503D               	movf	??___ftdiv& (0+255),w,c
  6493  001D46                     l668:
  6494  001D46  90D8               	bcf	status,0,c
  6495  001D48  3643               	rlcf	___ftdiv@f3,f,c
  6496  001D4A  3644               	rlcf	___ftdiv@f3+1,f,c
  6497  001D4C  3645               	rlcf	___ftdiv@f3+2,f,c
  6498  001D4E  503A               	movf	___ftdiv@f2,w,c
  6499  001D50  5C37               	subwf	___ftdiv@f1,w,c
  6500  001D52  503B               	movf	___ftdiv@f2+1,w,c
  6501  001D54  5838               	subwfb	___ftdiv@f1+1,w,c
  6502  001D56  503C               	movf	___ftdiv@f2+2,w,c
  6503  001D58  5839               	subwfb	___ftdiv@f1+2,w,c
  6504  001D5A  A0D8               	btfss	status,0,c
  6505  001D5C  D007               	goto	l669
  6506  001D5E  503A               	movf	___ftdiv@f2,w,c
  6507  001D60  5E37               	subwf	___ftdiv@f1,f,c
  6508  001D62  503B               	movf	___ftdiv@f2+1,w,c
  6509  001D64  5A38               	subwfb	___ftdiv@f1+1,f,c
  6510  001D66  503C               	movf	___ftdiv@f2+2,w,c
  6511  001D68  5A39               	subwfb	___ftdiv@f1+2,f,c
  6512  001D6A  8043               	bsf	___ftdiv@f3,0,c
  6513  001D6C                     l669:
  6514  001D6C  90D8               	bcf	status,0,c
  6515  001D6E  3637               	rlcf	___ftdiv@f1,f,c
  6516  001D70  3638               	rlcf	___ftdiv@f1+1,f,c
  6517  001D72  3639               	rlcf	___ftdiv@f1+2,f,c
  6518  001D74  2E42               	decfsz	___ftdiv@cntr,f,c
  6519  001D76  D7E7               	goto	l668
  6520  001D78  C043  F001         	movff	___ftdiv@f3,?___ftpack
  6521  001D7C  C044  F002         	movff	___ftdiv@f3+1,?___ftpack+1
  6522  001D80  C045  F003         	movff	___ftdiv@f3+2,?___ftpack+2
  6523  001D84  C046  F004         	movff	___ftdiv@exp,?___ftpack+3
  6524  001D88  C047  F005         	movff	___ftdiv@sign,?___ftpack+4
  6525  001D8C  EC81  F010         	call	___ftpack	;wreg free
  6526  001D90  C003  F039         	movff	?___ftpack+2,?___ftdiv+2
  6527  001D94  C002  F038         	movff	?___ftpack+1,?___ftdiv+1
  6528  001D98  C001  F037         	movff	?___ftpack,?___ftdiv
  6529  001D9C                     l666:
  6530  001D9C  0012               	return	
  6531  001D9E                     __end_of___ftdiv:
  6532                           	opt stack 0
  6533                           tblptru	equ	0xFF8
  6534                           tblptrh	equ	0xFF7
  6535                           tblptrl	equ	0xFF6
  6536                           tablat	equ	0xFF5
  6537                           prodh	equ	0xFF4
  6538                           prodl	equ	0xFF3
  6539                           postinc0	equ	0xFEE
  6540                           wreg	equ	0xFE8
  6541                           indf1	equ	0xFE7
  6542                           fsr1h	equ	0xFE2
  6543                           fsr1l	equ	0xFE1
  6544                           indf2	equ	0xFDF
  6545                           postinc2	equ	0xFDE
  6546                           postdec2	equ	0xFDD
  6547                           fsr2h	equ	0xFDA
  6548                           fsr2l	equ	0xFD9
  6549                           status	equ	0xFD8
  6550                           
  6551 ;; *************** function ___ftadd *****************
  6552 ;; Defined at:
  6553 ;;		line 87 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\ftadd.c"
  6554 ;; Parameters:    Size  Location     Type
  6555 ;;  f1              3   71[COMRAM] float 
  6556 ;;  f2              3   74[COMRAM] float 
  6557 ;; Auto vars:     Size  Location     Type
  6558 ;;  exp1            1   84[COMRAM] unsigned char 
  6559 ;;  exp2            1   83[COMRAM] unsigned char 
  6560 ;;  sign            1   82[COMRAM] unsigned char 
  6561 ;; Return value:  Size  Location     Type
  6562 ;;                  3   71[COMRAM] float 
  6563 ;; Registers used:
  6564 ;;		wreg, status,2, status,0, cstack
  6565 ;; Tracked objects:
  6566 ;;		On entry : 0/0
  6567 ;;		On exit  : 0/0
  6568 ;;		Unchanged: 0/0
  6569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6570 ;;      Params:         6       0       0       0       0       0       0       0       0
  6571 ;;      Locals:         3       0       0       0       0       0       0       0       0
  6572 ;;      Temps:          5       0       0       0       0       0       0       0       0
  6573 ;;      Totals:        14       0       0       0       0       0       0       0       0
  6574 ;;Total ram usage:       14 bytes
  6575 ;; Hardware stack levels used:    1
  6576 ;; Hardware stack levels required when called:    1
  6577 ;; This function calls:
  6578 ;;		___ftpack
  6579 ;; This function is called by:
  6580 ;;		_USART_Init
  6581 ;;		___asftadd
  6582 ;;		___ftsub
  6583 ;; This function uses a non-reentrant model
  6584 ;;
  6585                           
  6586                           	psect	text32
  6587  0018A2                     __ptext32:
  6588                           	opt stack 0
  6589  0018A2                     ___ftadd:
  6590                           	opt stack 26
  6591                           
  6592                           ;incstack = 0
  6593                           ;incstack = 0
  6594  0018A2  0E0F               	movlw	15
  6595  0018A4  6E4E               	movwf	??___ftadd& (0+255),c
  6596  0018A6  C048  F04F         	movff	___ftadd@f1,??___ftadd+1
  6597  0018AA  C049  F050         	movff	___ftadd@f1+1,??___ftadd+2
  6598  0018AE  C04A  F051         	movff	___ftadd@f1+2,??___ftadd+3
  6599  0018B2  284E               	incf	??___ftadd,w,c
  6600  0018B4  6E52               	movwf	(??___ftadd+4)& (0+255),c
  6601  0018B6  D004               	goto	u2370
  6602  0018B8                     u2375:
  6603  0018B8  90D8               	bcf	status,0,c
  6604  0018BA  3251               	rrcf	??___ftadd+3,f,c
  6605  0018BC  3250               	rrcf	??___ftadd+2,f,c
  6606  0018BE  324F               	rrcf	??___ftadd+1,f,c
  6607  0018C0                     u2370:
  6608  0018C0  2E52               	decfsz	(??___ftadd+4)& (0+255),f,c
  6609  0018C2  D7FA               	goto	u2375
  6610  0018C4  504F               	movf	??___ftadd+1,w,c
  6611  0018C6  6E55               	movwf	___ftadd@exp1,c
  6612  0018C8  0E0F               	movlw	15
  6613  0018CA  6E4E               	movwf	??___ftadd& (0+255),c
  6614  0018CC  C04B  F04F         	movff	___ftadd@f2,??___ftadd+1
  6615  0018D0  C04C  F050         	movff	___ftadd@f2+1,??___ftadd+2
  6616  0018D4  C04D  F051         	movff	___ftadd@f2+2,??___ftadd+3
  6617  0018D8  284E               	incf	??___ftadd,w,c
  6618  0018DA  6E52               	movwf	(??___ftadd+4)& (0+255),c
  6619  0018DC  D004               	goto	u2380
  6620  0018DE                     u2385:
  6621  0018DE  90D8               	bcf	status,0,c
  6622  0018E0  3251               	rrcf	??___ftadd+3,f,c
  6623  0018E2  3250               	rrcf	??___ftadd+2,f,c
  6624  0018E4  324F               	rrcf	??___ftadd+1,f,c
  6625  0018E6                     u2380:
  6626  0018E6  2E52               	decfsz	(??___ftadd+4)& (0+255),f,c
  6627  0018E8  D7FA               	goto	u2385
  6628  0018EA  504F               	movf	??___ftadd+1,w,c
  6629  0018EC  6E54               	movwf	___ftadd@exp2,c
  6630  0018EE  5055               	movf	___ftadd@exp1,w,c
  6631  0018F0  B4D8               	btfsc	status,2,c
  6632  0018F2  D00B               	goto	l634
  6633  0018F4  5054               	movf	___ftadd@exp2,w,c
  6634  0018F6  6055               	cpfslt	___ftadd@exp1,c
  6635  0018F8  D00F               	goto	l3917
  6636  0018FA  5055               	movf	___ftadd@exp1,w,c
  6637  0018FC  0800               	sublw	0
  6638  0018FE  2454               	addwf	___ftadd@exp2,w,c
  6639  001900  6E4E               	movwf	??___ftadd& (0+255),c
  6640  001902  0E19               	movlw	25
  6641  001904  5C4E               	subwf	??___ftadd,w,c
  6642  001906  A0D8               	btfss	status,0,c
  6643  001908  D007               	goto	l3917
  6644  00190A                     l634:
  6645  00190A  C04B  F048         	movff	___ftadd@f2,?___ftadd
  6646  00190E  C04C  F049         	movff	___ftadd@f2+1,?___ftadd+1
  6647  001912  C04D  F04A         	movff	___ftadd@f2+2,?___ftadd+2
  6648  001916  D0AA               	goto	l635
  6649  001918                     l3917:
  6650  001918  5054               	movf	___ftadd@exp2,w,c
  6651  00191A  B4D8               	btfsc	status,2,c
  6652  00191C  D00B               	goto	l638
  6653  00191E  5055               	movf	___ftadd@exp1,w,c
  6654  001920  6054               	cpfslt	___ftadd@exp2,c
  6655  001922  D00F               	goto	l3923
  6656  001924  5054               	movf	___ftadd@exp2,w,c
  6657  001926  0800               	sublw	0
  6658  001928  2455               	addwf	___ftadd@exp1,w,c
  6659  00192A  6E4E               	movwf	??___ftadd& (0+255),c
  6660  00192C  0E19               	movlw	25
  6661  00192E  5C4E               	subwf	??___ftadd,w,c
  6662  001930  A0D8               	btfss	status,0,c
  6663  001932  D007               	goto	l3923
  6664  001934                     l638:
  6665  001934  C048  F048         	movff	___ftadd@f1,?___ftadd
  6666  001938  C049  F049         	movff	___ftadd@f1+1,?___ftadd+1
  6667  00193C  C04A  F04A         	movff	___ftadd@f1+2,?___ftadd+2
  6668  001940  D095               	goto	l635
  6669  001942                     l3923:
  6670  001942  6E4E               	movwf	??___ftadd& (0+255),c
  6671  001944  0E06               	movlw	6
  6672  001946  6E53               	movwf	___ftadd@sign,c
  6673  001948  504E               	movf	??___ftadd& (0+255),w,c
  6674  00194A  BE4A               	btfsc	___ftadd@f1+2,7,c
  6675  00194C  8E53               	bsf	___ftadd@sign,7,c
  6676  00194E  BE4D               	btfsc	___ftadd@f2+2,7,c
  6677  001950  8C53               	bsf	___ftadd@sign,6,c
  6678  001952  8E49               	bsf	___ftadd@f1+1,7,c
  6679  001954  0EFF               	movlw	255
  6680  001956  1648               	andwf	___ftadd@f1,f,c
  6681  001958  0EFF               	movlw	255
  6682  00195A  1649               	andwf	___ftadd@f1+1,f,c
  6683  00195C  0E00               	movlw	0
  6684  00195E  164A               	andwf	___ftadd@f1+2,f,c
  6685  001960  8E4C               	bsf	___ftadd@f2+1,7,c
  6686  001962  0EFF               	movlw	255
  6687  001964  164B               	andwf	___ftadd@f2,f,c
  6688  001966  0EFF               	movlw	255
  6689  001968  164C               	andwf	___ftadd@f2+1,f,c
  6690  00196A  0E00               	movlw	0
  6691  00196C  164D               	andwf	___ftadd@f2+2,f,c
  6692  00196E  5054               	movf	___ftadd@exp2,w,c
  6693  001970  6055               	cpfslt	___ftadd@exp1,c
  6694  001972  D018               	goto	l3949
  6695  001974                     l3939:
  6696  001974  90D8               	bcf	status,0,c
  6697  001976  364B               	rlcf	___ftadd@f2,f,c
  6698  001978  364C               	rlcf	___ftadd@f2+1,f,c
  6699  00197A  364D               	rlcf	___ftadd@f2+2,f,c
  6700  00197C  0654               	decf	___ftadd@exp2,f,c
  6701  00197E  5054               	movf	___ftadd@exp2,w,c
  6702  001980  1855               	xorwf	___ftadd@exp1,w,c
  6703  001982  B4D8               	btfsc	status,2,c
  6704  001984  D00B               	goto	l3947
  6705  001986  0653               	decf	___ftadd@sign,f,c
  6706  001988  5053               	movf	___ftadd@sign& (0+255),w,c
  6707  00198A  0B07               	andlw	7
  6708  00198C  B4D8               	btfsc	status,2,c
  6709  00198E  D006               	goto	l3947
  6710  001990  D7F1               	goto	l3939
  6711  001992                     l3945:
  6712  001992  90D8               	bcf	status,0,c
  6713  001994  324A               	rrcf	___ftadd@f1+2,f,c
  6714  001996  3249               	rrcf	___ftadd@f1+1,f,c
  6715  001998  3248               	rrcf	___ftadd@f1,f,c
  6716  00199A  2A55               	incf	___ftadd@exp1,f,c
  6717  00199C                     l3947:
  6718  00199C  5054               	movf	___ftadd@exp2,w,c
  6719  00199E  6255               	cpfseq	___ftadd@exp1,c
  6720  0019A0  D7F8               	goto	l3945
  6721  0019A2  D01A               	goto	l649
  6722  0019A4                     l3949:
  6723  0019A4  5055               	movf	___ftadd@exp1,w,c
  6724  0019A6  6054               	cpfslt	___ftadd@exp2,c
  6725  0019A8  D017               	goto	l649
  6726  0019AA                     l3951:
  6727  0019AA  90D8               	bcf	status,0,c
  6728  0019AC  3648               	rlcf	___ftadd@f1,f,c
  6729  0019AE  3649               	rlcf	___ftadd@f1+1,f,c
  6730  0019B0  364A               	rlcf	___ftadd@f1+2,f,c
  6731  0019B2  0655               	decf	___ftadd@exp1,f,c
  6732  0019B4  5054               	movf	___ftadd@exp2,w,c
  6733  0019B6  1855               	xorwf	___ftadd@exp1,w,c
  6734  0019B8  B4D8               	btfsc	status,2,c
  6735  0019BA  D00B               	goto	l3959
  6736  0019BC  0653               	decf	___ftadd@sign,f,c
  6737  0019BE  5053               	movf	___ftadd@sign& (0+255),w,c
  6738  0019C0  0B07               	andlw	7
  6739  0019C2  B4D8               	btfsc	status,2,c
  6740  0019C4  D006               	goto	l3959
  6741  0019C6  D7F1               	goto	l3951
  6742  0019C8                     l3957:
  6743  0019C8  90D8               	bcf	status,0,c
  6744  0019CA  324D               	rrcf	___ftadd@f2+2,f,c
  6745  0019CC  324C               	rrcf	___ftadd@f2+1,f,c
  6746  0019CE  324B               	rrcf	___ftadd@f2,f,c
  6747  0019D0  2A54               	incf	___ftadd@exp2,f,c
  6748  0019D2                     l3959:
  6749  0019D2  5054               	movf	___ftadd@exp2,w,c
  6750  0019D4  6255               	cpfseq	___ftadd@exp1,c
  6751  0019D6  D7F8               	goto	l3957
  6752  0019D8                     l649:
  6753  0019D8  AE53               	btfss	___ftadd@sign,7,c
  6754  0019DA  D00C               	goto	l658
  6755  0019DC  0EFF               	movlw	255
  6756  0019DE  1A48               	xorwf	___ftadd@f1,f,c
  6757  0019E0  0EFF               	movlw	255
  6758  0019E2  1A49               	xorwf	___ftadd@f1+1,f,c
  6759  0019E4  0EFF               	movlw	255
  6760  0019E6  1A4A               	xorwf	___ftadd@f1+2,f,c
  6761  0019E8  0E01               	movlw	1
  6762  0019EA  2648               	addwf	___ftadd@f1,f,c
  6763  0019EC  0E00               	movlw	0
  6764  0019EE  2249               	addwfc	___ftadd@f1+1,f,c
  6765  0019F0  0E00               	movlw	0
  6766  0019F2  224A               	addwfc	___ftadd@f1+2,f,c
  6767  0019F4                     l658:
  6768  0019F4  AC53               	btfss	___ftadd@sign,6,c
  6769  0019F6  D00C               	goto	l3965
  6770  0019F8  0EFF               	movlw	255
  6771  0019FA  1A4B               	xorwf	___ftadd@f2,f,c
  6772  0019FC  0EFF               	movlw	255
  6773  0019FE  1A4C               	xorwf	___ftadd@f2+1,f,c
  6774  001A00  0EFF               	movlw	255
  6775  001A02  1A4D               	xorwf	___ftadd@f2+2,f,c
  6776  001A04  0E01               	movlw	1
  6777  001A06  264B               	addwf	___ftadd@f2,f,c
  6778  001A08  0E00               	movlw	0
  6779  001A0A  224C               	addwfc	___ftadd@f2+1,f,c
  6780  001A0C  0E00               	movlw	0
  6781  001A0E  224D               	addwfc	___ftadd@f2+2,f,c
  6782  001A10                     l3965:
  6783  001A10  6E4E               	movwf	??___ftadd& (0+255),c
  6784  001A12  0E00               	movlw	0
  6785  001A14  6E53               	movwf	___ftadd@sign,c
  6786  001A16  504E               	movf	??___ftadd& (0+255),w,c
  6787  001A18  5048               	movf	___ftadd@f1,w,c
  6788  001A1A  264B               	addwf	___ftadd@f2,f,c
  6789  001A1C  5049               	movf	___ftadd@f1+1,w,c
  6790  001A1E  224C               	addwfc	___ftadd@f2+1,f,c
  6791  001A20  504A               	movf	___ftadd@f1+2,w,c
  6792  001A22  224D               	addwfc	___ftadd@f2+2,f,c
  6793  001A24  AE4D               	btfss	___ftadd@f2+2,7,c
  6794  001A26  D010               	goto	l3975
  6795  001A28  0EFF               	movlw	255
  6796  001A2A  1A4B               	xorwf	___ftadd@f2,f,c
  6797  001A2C  0EFF               	movlw	255
  6798  001A2E  1A4C               	xorwf	___ftadd@f2+1,f,c
  6799  001A30  0EFF               	movlw	255
  6800  001A32  1A4D               	xorwf	___ftadd@f2+2,f,c
  6801  001A34  0E01               	movlw	1
  6802  001A36  264B               	addwf	___ftadd@f2,f,c
  6803  001A38  0E00               	movlw	0
  6804  001A3A  224C               	addwfc	___ftadd@f2+1,f,c
  6805  001A3C  0E00               	movlw	0
  6806  001A3E  224D               	addwfc	___ftadd@f2+2,f,c
  6807  001A40  6E4E               	movwf	??___ftadd& (0+255),c
  6808  001A42  0E01               	movlw	1
  6809  001A44  6E53               	movwf	___ftadd@sign,c
  6810  001A46  504E               	movf	??___ftadd& (0+255),w,c
  6811  001A48                     l3975:
  6812  001A48  C04B  F001         	movff	___ftadd@f2,?___ftpack
  6813  001A4C  C04C  F002         	movff	___ftadd@f2+1,?___ftpack+1
  6814  001A50  C04D  F003         	movff	___ftadd@f2+2,?___ftpack+2
  6815  001A54  C055  F004         	movff	___ftadd@exp1,?___ftpack+3
  6816  001A58  C053  F005         	movff	___ftadd@sign,?___ftpack+4
  6817  001A5C  EC81  F010         	call	___ftpack	;wreg free
  6818  001A60  C003  F04A         	movff	?___ftpack+2,?___ftadd+2
  6819  001A64  C002  F049         	movff	?___ftpack+1,?___ftadd+1
  6820  001A68  C001  F048         	movff	?___ftpack,?___ftadd
  6821  001A6C                     l635:
  6822  001A6C  0012               	return	
  6823  001A6E                     __end_of___ftadd:
  6824                           	opt stack 0
  6825                           tblptru	equ	0xFF8
  6826                           tblptrh	equ	0xFF7
  6827                           tblptrl	equ	0xFF6
  6828                           tablat	equ	0xFF5
  6829                           prodh	equ	0xFF4
  6830                           prodl	equ	0xFF3
  6831                           postinc0	equ	0xFEE
  6832                           wreg	equ	0xFE8
  6833                           indf1	equ	0xFE7
  6834                           fsr1h	equ	0xFE2
  6835                           fsr1l	equ	0xFE1
  6836                           indf2	equ	0xFDF
  6837                           postinc2	equ	0xFDE
  6838                           postdec2	equ	0xFDD
  6839                           fsr2h	equ	0xFDA
  6840                           fsr2l	equ	0xFD9
  6841                           status	equ	0xFD8
  6842                           
  6843 ;; *************** function ___altoft *****************
  6844 ;; Defined at:
  6845 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\altoft.c"
  6846 ;; Parameters:    Size  Location     Type
  6847 ;;  c               4    8[COMRAM] long 
  6848 ;; Auto vars:     Size  Location     Type
  6849 ;;  sign            1   17[COMRAM] unsigned char 
  6850 ;;  exp             1   16[COMRAM] unsigned char 
  6851 ;; Return value:  Size  Location     Type
  6852 ;;                  3    8[COMRAM] float 
  6853 ;; Registers used:
  6854 ;;		wreg, status,2, status,0, cstack
  6855 ;; Tracked objects:
  6856 ;;		On entry : 0/0
  6857 ;;		On exit  : 0/0
  6858 ;;		Unchanged: 0/0
  6859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6860 ;;      Params:         4       0       0       0       0       0       0       0       0
  6861 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6862 ;;      Temps:          4       0       0       0       0       0       0       0       0
  6863 ;;      Totals:        10       0       0       0       0       0       0       0       0
  6864 ;;Total ram usage:       10 bytes
  6865 ;; Hardware stack levels used:    1
  6866 ;; Hardware stack levels required when called:    1
  6867 ;; This function calls:
  6868 ;;		___ftpack
  6869 ;; This function is called by:
  6870 ;;		_USART_Init
  6871 ;; This function uses a non-reentrant model
  6872 ;;
  6873                           
  6874                           	psect	text33
  6875  00249E                     __ptext33:
  6876                           	opt stack 0
  6877  00249E                     ___altoft:
  6878                           	opt stack 28
  6879                           
  6880                           ;incstack = 0
  6881                           ;incstack = 0
  6882  00249E  6E0D               	movwf	??___altoft& (0+255),c
  6883  0024A0  0E00               	movlw	0
  6884  0024A2  6E12               	movwf	___altoft@sign,c
  6885  0024A4  500D               	movf	??___altoft& (0+255),w,c
  6886  0024A6  6E0D               	movwf	??___altoft& (0+255),c
  6887  0024A8  0E8E               	movlw	142
  6888  0024AA  6E11               	movwf	___altoft@exp,c
  6889  0024AC  500D               	movf	??___altoft& (0+255),w,c
  6890  0024AE  AE0C               	btfss	___altoft@c+3,7,c
  6891  0024B0  D013               	goto	l3737
  6892  0024B2  1E0C               	comf	___altoft@c+3,f,c
  6893  0024B4  1E0B               	comf	___altoft@c+2,f,c
  6894  0024B6  1E0A               	comf	___altoft@c+1,f,c
  6895  0024B8  6C09               	negf	___altoft@c,c
  6896  0024BA  0E00               	movlw	0
  6897  0024BC  220A               	addwfc	___altoft@c+1,f,c
  6898  0024BE  220B               	addwfc	___altoft@c+2,f,c
  6899  0024C0  220C               	addwfc	___altoft@c+3,f,c
  6900  0024C2  6E0D               	movwf	??___altoft& (0+255),c
  6901  0024C4  0E01               	movlw	1
  6902  0024C6  6E12               	movwf	___altoft@sign,c
  6903  0024C8  500D               	movf	??___altoft& (0+255),w,c
  6904  0024CA  D006               	goto	l3737
  6905  0024CC                     l3735:
  6906  0024CC  90D8               	bcf	status,0,c
  6907  0024CE  320C               	rrcf	___altoft@c+3,f,c
  6908  0024D0  320B               	rrcf	___altoft@c+2,f,c
  6909  0024D2  320A               	rrcf	___altoft@c+1,f,c
  6910  0024D4  3209               	rrcf	___altoft@c,f,c
  6911  0024D6  2A11               	incf	___altoft@exp,f,c
  6912  0024D8                     l3737:
  6913  0024D8  0E00               	movlw	0
  6914  0024DA  1409               	andwf	___altoft@c,w,c
  6915  0024DC  6E0D               	movwf	??___altoft& (0+255),c
  6916  0024DE  0E00               	movlw	0
  6917  0024E0  140A               	andwf	___altoft@c+1,w,c
  6918  0024E2  6E0E               	movwf	(??___altoft+1)& (0+255),c
  6919  0024E4  0E00               	movlw	0
  6920  0024E6  140B               	andwf	___altoft@c+2,w,c
  6921  0024E8  6E0F               	movwf	(??___altoft+2)& (0+255),c
  6922  0024EA  0EFF               	movlw	255
  6923  0024EC  140C               	andwf	___altoft@c+3,w,c
  6924  0024EE  6E10               	movwf	(??___altoft+3)& (0+255),c
  6925  0024F0  5010               	movf	??___altoft+3,w,c
  6926  0024F2  100D               	iorwf	??___altoft,w,c
  6927  0024F4  100E               	iorwf	??___altoft+1,w,c
  6928  0024F6  100F               	iorwf	??___altoft+2,w,c
  6929  0024F8  A4D8               	btfss	status,2,c
  6930  0024FA  D7E8               	goto	l3735
  6931  0024FC  C009  F001         	movff	___altoft@c,?___ftpack
  6932  002500  C00A  F002         	movff	___altoft@c+1,?___ftpack+1
  6933  002504  C00B  F003         	movff	___altoft@c+2,?___ftpack+2
  6934  002508  C011  F004         	movff	___altoft@exp,?___ftpack+3
  6935  00250C  C012  F005         	movff	___altoft@sign,?___ftpack+4
  6936  002510  EC81  F010         	call	___ftpack	;wreg free
  6937  002514  C003  F00B         	movff	?___ftpack+2,?___altoft+2
  6938  002518  C002  F00A         	movff	?___ftpack+1,?___altoft+1
  6939  00251C  C001  F009         	movff	?___ftpack,?___altoft
  6940  002520  0012               	return	
  6941  002522                     __end_of___altoft:
  6942                           	opt stack 0
  6943                           tblptru	equ	0xFF8
  6944                           tblptrh	equ	0xFF7
  6945                           tblptrl	equ	0xFF6
  6946                           tablat	equ	0xFF5
  6947                           prodh	equ	0xFF4
  6948                           prodl	equ	0xFF3
  6949                           postinc0	equ	0xFEE
  6950                           wreg	equ	0xFE8
  6951                           indf1	equ	0xFE7
  6952                           fsr1h	equ	0xFE2
  6953                           fsr1l	equ	0xFE1
  6954                           indf2	equ	0xFDF
  6955                           postinc2	equ	0xFDE
  6956                           postdec2	equ	0xFDD
  6957                           fsr2h	equ	0xFDA
  6958                           fsr2l	equ	0xFD9
  6959                           status	equ	0xFD8
  6960                           
  6961 ;; *************** function ___ftpack *****************
  6962 ;; Defined at:
  6963 ;;		line 63 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\float.c"
  6964 ;; Parameters:    Size  Location     Type
  6965 ;;  arg             3    0[COMRAM] unsigned um
  6966 ;;  exp             1    3[COMRAM] unsigned char 
  6967 ;;  sign            1    4[COMRAM] unsigned char 
  6968 ;; Auto vars:     Size  Location     Type
  6969 ;;		None
  6970 ;; Return value:  Size  Location     Type
  6971 ;;                  3    0[COMRAM] float 
  6972 ;; Registers used:
  6973 ;;		wreg, status,2, status,0
  6974 ;; Tracked objects:
  6975 ;;		On entry : 0/0
  6976 ;;		On exit  : 0/0
  6977 ;;		Unchanged: 0/0
  6978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6979 ;;      Params:         5       0       0       0       0       0       0       0       0
  6980 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6981 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6982 ;;      Totals:         8       0       0       0       0       0       0       0       0
  6983 ;;Total ram usage:        8 bytes
  6984 ;; Hardware stack levels used:    1
  6985 ;; This function calls:
  6986 ;;		Nothing
  6987 ;; This function is called by:
  6988 ;;		___altoft
  6989 ;;		___awtoft
  6990 ;;		___ftadd
  6991 ;;		___ftdiv
  6992 ;;		___ftmul
  6993 ;;		___lltoft
  6994 ;; This function uses a non-reentrant model
  6995 ;;
  6996                           
  6997                           	psect	text34
  6998  002102                     __ptext34:
  6999                           	opt stack 0
  7000  002102                     ___ftpack:
  7001                           	opt stack 28
  7002                           
  7003                           ;incstack = 0
  7004                           ;incstack = 0
  7005  002102  5004               	movf	___ftpack@exp,w,c
  7006  002104  B4D8               	btfsc	status,2,c
  7007  002106  D005               	goto	l3515
  7008  002108  5001               	movf	___ftpack@arg,w,c
  7009  00210A  1002               	iorwf	___ftpack@arg+1,w,c
  7010  00210C  1003               	iorwf	___ftpack@arg+2,w,c
  7011  00210E  A4D8               	btfss	status,2,c
  7012  002110  D00C               	goto	l3521
  7013  002112                     l3515:
  7014  002112  0E00               	movlw	0
  7015  002114  6E01               	movwf	?___ftpack,c
  7016  002116  0E00               	movlw	0
  7017  002118  6E02               	movwf	?___ftpack+1,c
  7018  00211A  0E00               	movlw	0
  7019  00211C  6E03               	movwf	?___ftpack+2,c
  7020  00211E  D04C               	goto	l597
  7021  002120                     l3519:
  7022  002120  2A04               	incf	___ftpack@exp,f,c
  7023  002122  90D8               	bcf	status,0,c
  7024  002124  3203               	rrcf	___ftpack@arg+2,f,c
  7025  002126  3202               	rrcf	___ftpack@arg+1,f,c
  7026  002128  3201               	rrcf	___ftpack@arg,f,c
  7027  00212A                     l3521:
  7028  00212A  0E00               	movlw	0
  7029  00212C  1401               	andwf	___ftpack@arg,w,c
  7030  00212E  6E06               	movwf	??___ftpack& (0+255),c
  7031  002130  0E00               	movlw	0
  7032  002132  1402               	andwf	___ftpack@arg+1,w,c
  7033  002134  6E07               	movwf	(??___ftpack+1)& (0+255),c
  7034  002136  0EFE               	movlw	254
  7035  002138  1403               	andwf	___ftpack@arg+2,w,c
  7036  00213A  6E08               	movwf	(??___ftpack+2)& (0+255),c
  7037  00213C  5006               	movf	??___ftpack,w,c
  7038  00213E  1007               	iorwf	??___ftpack+1,w,c
  7039  002140  1008               	iorwf	??___ftpack+2,w,c
  7040  002142  B4D8               	btfsc	status,2,c
  7041  002144  D00C               	goto	l3527
  7042  002146  D7EC               	goto	l3519
  7043  002148                     l3523:
  7044  002148  2A04               	incf	___ftpack@exp,f,c
  7045  00214A  0E01               	movlw	1
  7046  00214C  2601               	addwf	___ftpack@arg,f,c
  7047  00214E  0E00               	movlw	0
  7048  002150  2202               	addwfc	___ftpack@arg+1,f,c
  7049  002152  0E00               	movlw	0
  7050  002154  2203               	addwfc	___ftpack@arg+2,f,c
  7051  002156  90D8               	bcf	status,0,c
  7052  002158  3203               	rrcf	___ftpack@arg+2,f,c
  7053  00215A  3202               	rrcf	___ftpack@arg+1,f,c
  7054  00215C  3201               	rrcf	___ftpack@arg,f,c
  7055  00215E                     l3527:
  7056  00215E  0E00               	movlw	0
  7057  002160  1401               	andwf	___ftpack@arg,w,c
  7058  002162  6E06               	movwf	??___ftpack& (0+255),c
  7059  002164  0E00               	movlw	0
  7060  002166  1402               	andwf	___ftpack@arg+1,w,c
  7061  002168  6E07               	movwf	(??___ftpack+1)& (0+255),c
  7062  00216A  0EFF               	movlw	255
  7063  00216C  1403               	andwf	___ftpack@arg+2,w,c
  7064  00216E  6E08               	movwf	(??___ftpack+2)& (0+255),c
  7065  002170  5006               	movf	??___ftpack,w,c
  7066  002172  1007               	iorwf	??___ftpack+1,w,c
  7067  002174  1008               	iorwf	??___ftpack+2,w,c
  7068  002176  B4D8               	btfsc	status,2,c
  7069  002178  D006               	goto	l3531
  7070  00217A  D7E6               	goto	l3523
  7071  00217C                     l3529:
  7072  00217C  0604               	decf	___ftpack@exp,f,c
  7073  00217E  90D8               	bcf	status,0,c
  7074  002180  3601               	rlcf	___ftpack@arg,f,c
  7075  002182  3602               	rlcf	___ftpack@arg+1,f,c
  7076  002184  3603               	rlcf	___ftpack@arg+2,f,c
  7077  002186                     l3531:
  7078  002186  AE02               	btfss	___ftpack@arg+1,7,c
  7079  002188  D7F9               	goto	l3529
  7080  00218A  A004               	btfss	___ftpack@exp,0,c
  7081  00218C  9E02               	bcf	___ftpack@arg+1,7,c
  7082  00218E  90D8               	bcf	status,0,c
  7083  002190  3204               	rrcf	___ftpack@exp,f,c
  7084  002192  5004               	movf	___ftpack@exp,w,c
  7085  002194  6E08               	movwf	(??___ftpack+2)& (0+255),c
  7086  002196  6A07               	clrf	(??___ftpack+1)& (0+255),c
  7087  002198  6A06               	clrf	??___ftpack& (0+255),c
  7088  00219A  5006               	movf	??___ftpack,w,c
  7089  00219C  1201               	iorwf	___ftpack@arg,f,c
  7090  00219E  5007               	movf	??___ftpack+1,w,c
  7091  0021A0  1202               	iorwf	___ftpack@arg+1,f,c
  7092  0021A2  5008               	movf	??___ftpack+2,w,c
  7093  0021A4  1203               	iorwf	___ftpack@arg+2,f,c
  7094  0021A6  5005               	movf	___ftpack@sign,w,c
  7095  0021A8  A4D8               	btfss	status,2,c
  7096  0021AA  8E03               	bsf	___ftpack@arg+2,7,c
  7097  0021AC  C001  F001         	movff	___ftpack@arg,?___ftpack
  7098  0021B0  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  7099  0021B4  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  7100  0021B8                     l597:
  7101  0021B8  0012               	return	
  7102  0021BA                     __end_of___ftpack:
  7103                           	opt stack 0
  7104                           tblptru	equ	0xFF8
  7105                           tblptrh	equ	0xFF7
  7106                           tblptrl	equ	0xFF6
  7107                           tablat	equ	0xFF5
  7108                           prodh	equ	0xFF4
  7109                           prodl	equ	0xFF3
  7110                           postinc0	equ	0xFEE
  7111                           wreg	equ	0xFE8
  7112                           indf1	equ	0xFE7
  7113                           fsr1h	equ	0xFE2
  7114                           fsr1l	equ	0xFE1
  7115                           indf2	equ	0xFDF
  7116                           postinc2	equ	0xFDE
  7117                           postdec2	equ	0xFDD
  7118                           fsr2h	equ	0xFDA
  7119                           fsr2l	equ	0xFD9
  7120                           status	equ	0xFD8
  7121                           
  7122 ;; *************** function _Init_AD *****************
  7123 ;; Defined at:
  7124 ;;		line 190 in file "main.c"
  7125 ;; Parameters:    Size  Location     Type
  7126 ;;		None
  7127 ;; Auto vars:     Size  Location     Type
  7128 ;;		None
  7129 ;; Return value:  Size  Location     Type
  7130 ;;		None               void
  7131 ;; Registers used:
  7132 ;;		wreg, status,2
  7133 ;; Tracked objects:
  7134 ;;		On entry : 0/0
  7135 ;;		On exit  : 0/0
  7136 ;;		Unchanged: 0/0
  7137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7138 ;;      Params:         0       0       0       0       0       0       0       0       0
  7139 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7140 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7141 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7142 ;;Total ram usage:        0 bytes
  7143 ;; Hardware stack levels used:    1
  7144 ;; This function calls:
  7145 ;;		Nothing
  7146 ;; This function is called by:
  7147 ;;		_main
  7148 ;; This function uses a non-reentrant model
  7149 ;;
  7150                           
  7151                           	psect	text35
  7152  002A8E                     __ptext35:
  7153                           	opt stack 0
  7154  002A8E                     _Init_AD:
  7155                           	opt stack 30
  7156                           
  7157                           ;main.c: 191: TRISA0 = 1;
  7158                           
  7159                           ;incstack = 0
  7160                           ;incstack = 0
  7161  002A8E  8092               	bsf	3986,0,c	;volatile
  7162                           
  7163                           ;main.c: 192: ADCON1 = 0x0e;
  7164  002A90  0E0E               	movlw	14
  7165  002A92  6EC1               	movwf	4033,c	;volatile
  7166                           
  7167                           ;main.c: 193: ADCON2 = 0x92;
  7168  002A94  0E92               	movlw	146
  7169  002A96  6EC0               	movwf	4032,c	;volatile
  7170                           
  7171                           ;main.c: 194: ADRESH=0;
  7172  002A98  0E00               	movlw	0
  7173  002A9A  6EC4               	movwf	4036,c	;volatile
  7174                           
  7175                           ;main.c: 195: ADRESL=0;
  7176  002A9C  0E00               	movlw	0
  7177  002A9E  6EC3               	movwf	4035,c	;volatile
  7178  002AA0  0012               	return	
  7179  002AA2                     __end_of_Init_AD:
  7180                           	opt stack 0
  7181                           tblptru	equ	0xFF8
  7182                           tblptrh	equ	0xFF7
  7183                           tblptrl	equ	0xFF6
  7184                           tablat	equ	0xFF5
  7185                           prodh	equ	0xFF4
  7186                           prodl	equ	0xFF3
  7187                           postinc0	equ	0xFEE
  7188                           wreg	equ	0xFE8
  7189                           indf1	equ	0xFE7
  7190                           fsr1h	equ	0xFE2
  7191                           fsr1l	equ	0xFE1
  7192                           indf2	equ	0xFDF
  7193                           postinc2	equ	0xFDE
  7194                           postdec2	equ	0xFDD
  7195                           fsr2h	equ	0xFDA
  7196                           fsr2l	equ	0xFD9
  7197                           status	equ	0xFD8
  7198                           
  7199 ;; *************** function _Timer1_Init *****************
  7200 ;; Defined at:
  7201 ;;		line 147 in file "main.c"
  7202 ;; Parameters:    Size  Location     Type
  7203 ;;		None
  7204 ;; Auto vars:     Size  Location     Type
  7205 ;;		None
  7206 ;; Return value:  Size  Location     Type
  7207 ;;		None               void
  7208 ;; Registers used:
  7209 ;;		wreg, status,2
  7210 ;; Tracked objects:
  7211 ;;		On entry : 0/0
  7212 ;;		On exit  : 0/0
  7213 ;;		Unchanged: 0/0
  7214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7215 ;;      Params:         0       0       0       0       0       0       0       0       0
  7216 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7217 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7218 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7219 ;;Total ram usage:        0 bytes
  7220 ;; Hardware stack levels used:    1
  7221 ;; This function calls:
  7222 ;;		Nothing
  7223 ;; This function is called by:
  7224 ;;		_main
  7225 ;; This function uses a non-reentrant model
  7226 ;;
  7227                           
  7228                           	psect	text36
  7229  002AA2                     __ptext36:
  7230                           	opt stack 0
  7231  002AA2                     _Timer1_Init:
  7232                           	opt stack 30
  7233                           
  7234                           ;main.c: 148: T1CONbits.RD16=1;
  7235                           
  7236                           ;incstack = 0
  7237                           ;incstack = 0
  7238  002AA2  8ECD               	bsf	4045,7,c	;volatile
  7239                           
  7240                           ;main.c: 149: T1CONbits.T1CKPS=0b00;
  7241  002AA4  0ECF               	movlw	-49
  7242  002AA6  16CD               	andwf	4045,f,c	;volatile
  7243                           
  7244                           ;main.c: 150: T1CONbits.TMR1CS=0;
  7245  002AA8  92CD               	bcf	4045,1,c	;volatile
  7246                           
  7247                           ;main.c: 151: TMR1=0;
  7248  002AAA  0E00               	movlw	0
  7249  002AAC  6ECF               	movwf	4047,c	;volatile
  7250  002AAE  0E00               	movlw	0
  7251  002AB0  6ECE               	movwf	4046,c	;volatile
  7252                           
  7253                           ;main.c: 152: TMR1ON=0;
  7254  002AB2  90CD               	bcf	4045,0,c	;volatile
  7255  002AB4  0012               	return	
  7256  002AB6                     __end_of_Timer1_Init:
  7257                           	opt stack 0
  7258                           tblptru	equ	0xFF8
  7259                           tblptrh	equ	0xFF7
  7260                           tblptrl	equ	0xFF6
  7261                           tablat	equ	0xFF5
  7262                           prodh	equ	0xFF4
  7263                           prodl	equ	0xFF3
  7264                           postinc0	equ	0xFEE
  7265                           wreg	equ	0xFE8
  7266                           indf1	equ	0xFE7
  7267                           fsr1h	equ	0xFE2
  7268                           fsr1l	equ	0xFE1
  7269                           indf2	equ	0xFDF
  7270                           postinc2	equ	0xFDE
  7271                           postdec2	equ	0xFDD
  7272                           fsr2h	equ	0xFDA
  7273                           fsr2l	equ	0xFD9
  7274                           status	equ	0xFD8
  7275                           
  7276 ;; *************** function _Configuracion_Registros *****************
  7277 ;; Defined at:
  7278 ;;		line 136 in file "main.c"
  7279 ;; Parameters:    Size  Location     Type
  7280 ;;		None
  7281 ;; Auto vars:     Size  Location     Type
  7282 ;;		None
  7283 ;; Return value:  Size  Location     Type
  7284 ;;		None               void
  7285 ;; Registers used:
  7286 ;;		wreg, status,2, status,0
  7287 ;; Tracked objects:
  7288 ;;		On entry : 0/0
  7289 ;;		On exit  : 0/0
  7290 ;;		Unchanged: 0/0
  7291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7292 ;;      Params:         0       0       0       0       0       0       0       0       0
  7293 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7294 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7295 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7296 ;;Total ram usage:        0 bytes
  7297 ;; Hardware stack levels used:    1
  7298 ;; This function calls:
  7299 ;;		Nothing
  7300 ;; This function is called by:
  7301 ;;		_main
  7302 ;; This function uses a non-reentrant model
  7303 ;;
  7304                           
  7305                           	psect	text37
  7306  002AC8                     __ptext37:
  7307                           	opt stack 0
  7308  002AC8                     _Configuracion_Registros:
  7309                           	opt stack 30
  7310                           
  7311                           ;main.c: 137: ADCON1bits.PCFG=0b1111;
  7312                           
  7313                           ;incstack = 0
  7314                           ;incstack = 0
  7315  002AC8  80C1               	bsf	4033,0,c	;volatile
  7316  002ACA  82C1               	bsf	4033,1,c	;volatile
  7317  002ACC  84C1               	bsf	4033,2,c	;volatile
  7318  002ACE  86C1               	bsf	4033,3,c	;volatile
  7319                           
  7320                           ;main.c: 138: TRISA&=~(1<<1);
  7321  002AD0  9292               	bcf	3986,1,c	;volatile
  7322                           
  7323                           ;main.c: 139: TRISA|=(1<<2);
  7324  002AD2  8492               	bsf	3986,2,c	;volatile
  7325                           
  7326                           ;main.c: 141: TRISB = 0;
  7327  002AD4  0E00               	movlw	0
  7328  002AD6  6E93               	movwf	3987,c	;volatile
  7329  002AD8  0012               	return	
  7330  002ADA                     __end_of_Configuracion_Registros:
  7331                           	opt stack 0
  7332                           tblptru	equ	0xFF8
  7333                           tblptrh	equ	0xFF7
  7334                           tblptrl	equ	0xFF6
  7335                           tablat	equ	0xFF5
  7336                           prodh	equ	0xFF4
  7337                           prodl	equ	0xFF3
  7338                           postinc0	equ	0xFEE
  7339                           wreg	equ	0xFE8
  7340                           indf1	equ	0xFE7
  7341                           fsr1h	equ	0xFE2
  7342                           fsr1l	equ	0xFE1
  7343                           indf2	equ	0xFDF
  7344                           postinc2	equ	0xFDE
  7345                           postdec2	equ	0xFDD
  7346                           fsr2h	equ	0xFDA
  7347                           fsr2l	equ	0xFD9
  7348                           status	equ	0xFD8
  7349                           
  7350 ;; *************** function _lcd_init *****************
  7351 ;; Defined at:
  7352 ;;		line 95 in file "lcd.h"
  7353 ;; Parameters:    Size  Location     Type
  7354 ;;		None
  7355 ;; Auto vars:     Size  Location     Type
  7356 ;;		None
  7357 ;; Return value:  Size  Location     Type
  7358 ;;		None               void
  7359 ;; Registers used:
  7360 ;;		wreg, status,2, cstack
  7361 ;; Tracked objects:
  7362 ;;		On entry : 0/0
  7363 ;;		On exit  : 0/0
  7364 ;;		Unchanged: 0/0
  7365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7366 ;;      Params:         0       0       0       0       0       0       0       0       0
  7367 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7368 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7369 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7370 ;;Total ram usage:        1 bytes
  7371 ;; Hardware stack levels used:    1
  7372 ;; Hardware stack levels required when called:    2
  7373 ;; This function calls:
  7374 ;;		_Lcd_Port
  7375 ;;		_Lcd_Cmd
  7376 ;; This function is called by:
  7377 ;;		_main
  7378 ;; This function uses a non-reentrant model
  7379 ;;
  7380                           
  7381                           	psect	text38
  7382  0021BA                     __ptext38:
  7383                           	opt stack 0
  7384  0021BA                     _lcd_init:
  7385                           	opt stack 28
  7386                           
  7387                           ;lcd.h: 96: TRISD=0x00;
  7388                           
  7389                           ;incstack = 0
  7390                           ;incstack = 0
  7391  0021BA  0E00               	movlw	0
  7392  0021BC  6E95               	movwf	3989,c	;volatile
  7393                           
  7394                           ;lcd.h: 97: Lcd_Port(0x00);
  7395  0021BE  6E04               	movwf	??_lcd_init& (0+255),c
  7396  0021C0  0E00               	movlw	0
  7397  0021C2  6E01               	movwf	?_Lcd_Port,c
  7398  0021C4  5004               	movf	??_lcd_init& (0+255),w,c
  7399  0021C6  ECF2  F014         	call	_Lcd_Port	;wreg free
  7400                           
  7401                           ;lcd.h: 98: _delay((unsigned long)((20)*(8000000/4000.0)));
  7402  0021CA  0E34               	movlw	52
  7403  0021CC  6E04               	movwf	??_lcd_init& (0+255),c
  7404  0021CE  0EF1               	movlw	241
  7405  0021D0                     u3197:
  7406  0021D0  2EE8               	decfsz	wreg,f,c
  7407  0021D2  D7FE               	goto	u3197
  7408  0021D4  2E04               	decfsz	??_lcd_init& (0+255),f,c
  7409  0021D6  D7FC               	goto	u3197
  7410  0021D8  D000               	nop2	
  7411                           
  7412                           ;lcd.h: 99: Lcd_Cmd(0x03);
  7413  0021DA  6E04               	movwf	??_lcd_init& (0+255),c
  7414  0021DC  0E03               	movlw	3
  7415  0021DE  6E02               	movwf	?_Lcd_Cmd,c
  7416  0021E0  5004               	movf	??_lcd_init& (0+255),w,c
  7417  0021E2  EC2C  F015         	call	_Lcd_Cmd	;wreg free
  7418                           
  7419                           ;lcd.h: 100: _delay((unsigned long)((5)*(8000000/4000.0)));
  7420  0021E6  0E0D               	movlw	13
  7421  0021E8  6E04               	movwf	??_lcd_init& (0+255),c
  7422  0021EA  0EFB               	movlw	251
  7423  0021EC                     u3207:
  7424  0021EC  2EE8               	decfsz	wreg,f,c
  7425  0021EE  D7FE               	goto	u3207
  7426  0021F0  2E04               	decfsz	??_lcd_init& (0+255),f,c
  7427  0021F2  D7FC               	goto	u3207
  7428  0021F4  D000               	nop2	
  7429                           
  7430                           ;lcd.h: 101: Lcd_Cmd(0x03);
  7431  0021F6  6E04               	movwf	??_lcd_init& (0+255),c
  7432  0021F8  0E03               	movlw	3
  7433  0021FA  6E02               	movwf	?_Lcd_Cmd,c
  7434  0021FC  5004               	movf	??_lcd_init& (0+255),w,c
  7435  0021FE  EC2C  F015         	call	_Lcd_Cmd	;wreg free
  7436                           
  7437                           ;lcd.h: 102: _delay((unsigned long)((11)*(8000000/4000.0)));
  7438  002202  0E1D               	movlw	29
  7439  002204  6E04               	movwf	??_lcd_init& (0+255),c
  7440  002206  0E91               	movlw	145
  7441  002208                     u3217:
  7442  002208  2EE8               	decfsz	wreg,f,c
  7443  00220A  D7FE               	goto	u3217
  7444  00220C  2E04               	decfsz	??_lcd_init& (0+255),f,c
  7445  00220E  D7FC               	goto	u3217
  7446                           
  7447                           ;lcd.h: 103: Lcd_Cmd(0x03);
  7448  002210  6E04               	movwf	??_lcd_init& (0+255),c
  7449  002212  0E03               	movlw	3
  7450  002214  6E02               	movwf	?_Lcd_Cmd,c
  7451  002216  5004               	movf	??_lcd_init& (0+255),w,c
  7452  002218  EC2C  F015         	call	_Lcd_Cmd	;wreg free
  7453                           
  7454                           ;lcd.h: 105: Lcd_Cmd(0x02);
  7455  00221C  6E04               	movwf	??_lcd_init& (0+255),c
  7456  00221E  0E02               	movlw	2
  7457  002220  6E02               	movwf	?_Lcd_Cmd,c
  7458  002222  5004               	movf	??_lcd_init& (0+255),w,c
  7459  002224  EC2C  F015         	call	_Lcd_Cmd	;wreg free
  7460                           
  7461                           ;lcd.h: 106: Lcd_Cmd(0x02);
  7462  002228  6E04               	movwf	??_lcd_init& (0+255),c
  7463  00222A  0E02               	movlw	2
  7464  00222C  6E02               	movwf	?_Lcd_Cmd,c
  7465  00222E  5004               	movf	??_lcd_init& (0+255),w,c
  7466  002230  EC2C  F015         	call	_Lcd_Cmd	;wreg free
  7467                           
  7468                           ;lcd.h: 107: Lcd_Cmd(0x08);
  7469  002234  6E04               	movwf	??_lcd_init& (0+255),c
  7470  002236  0E08               	movlw	8
  7471  002238  6E02               	movwf	?_Lcd_Cmd,c
  7472  00223A  5004               	movf	??_lcd_init& (0+255),w,c
  7473  00223C  EC2C  F015         	call	_Lcd_Cmd	;wreg free
  7474                           
  7475                           ;lcd.h: 108: Lcd_Cmd(0x00);
  7476  002240  6E04               	movwf	??_lcd_init& (0+255),c
  7477  002242  0E00               	movlw	0
  7478  002244  6E02               	movwf	?_Lcd_Cmd,c
  7479  002246  5004               	movf	??_lcd_init& (0+255),w,c
  7480  002248  EC2C  F015         	call	_Lcd_Cmd	;wreg free
  7481                           
  7482                           ;lcd.h: 109: Lcd_Cmd(0x0C);
  7483  00224C  6E04               	movwf	??_lcd_init& (0+255),c
  7484  00224E  0E0C               	movlw	12
  7485  002250  6E02               	movwf	?_Lcd_Cmd,c
  7486  002252  5004               	movf	??_lcd_init& (0+255),w,c
  7487  002254  EC2C  F015         	call	_Lcd_Cmd	;wreg free
  7488                           
  7489                           ;lcd.h: 110: Lcd_Cmd(0x00);
  7490  002258  6E04               	movwf	??_lcd_init& (0+255),c
  7491  00225A  0E00               	movlw	0
  7492  00225C  6E02               	movwf	?_Lcd_Cmd,c
  7493  00225E  5004               	movf	??_lcd_init& (0+255),w,c
  7494  002260  EC2C  F015         	call	_Lcd_Cmd	;wreg free
  7495                           
  7496                           ;lcd.h: 111: Lcd_Cmd(0x06);
  7497  002264  6E04               	movwf	??_lcd_init& (0+255),c
  7498  002266  0E06               	movlw	6
  7499  002268  6E02               	movwf	?_Lcd_Cmd,c
  7500  00226A  5004               	movf	??_lcd_init& (0+255),w,c
  7501  00226C  EC2C  F015         	call	_Lcd_Cmd	;wreg free
  7502  002270  0012               	return	
  7503  002272                     __end_of_lcd_init:
  7504                           	opt stack 0
  7505                           tblptru	equ	0xFF8
  7506                           tblptrh	equ	0xFF7
  7507                           tblptrl	equ	0xFF6
  7508                           tablat	equ	0xFF5
  7509                           prodh	equ	0xFF4
  7510                           prodl	equ	0xFF3
  7511                           postinc0	equ	0xFEE
  7512                           wreg	equ	0xFE8
  7513                           indf1	equ	0xFE7
  7514                           fsr1h	equ	0xFE2
  7515                           fsr1l	equ	0xFE1
  7516                           indf2	equ	0xFDF
  7517                           postinc2	equ	0xFDE
  7518                           postdec2	equ	0xFDD
  7519                           fsr2h	equ	0xFDA
  7520                           fsr2l	equ	0xFD9
  7521                           status	equ	0xFD8
  7522                           
  7523 ;; *************** function _Lcd_Cmd *****************
  7524 ;; Defined at:
  7525 ;;		line 53 in file "lcd.h"
  7526 ;; Parameters:    Size  Location     Type
  7527 ;;  a               1    1[COMRAM] unsigned char 
  7528 ;; Auto vars:     Size  Location     Type
  7529 ;;		None
  7530 ;; Return value:  Size  Location     Type
  7531 ;;		None               void
  7532 ;; Registers used:
  7533 ;;		wreg, cstack
  7534 ;; Tracked objects:
  7535 ;;		On entry : 0/0
  7536 ;;		On exit  : 0/0
  7537 ;;		Unchanged: 0/0
  7538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7539 ;;      Params:         1       0       0       0       0       0       0       0       0
  7540 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7541 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7542 ;;      Totals:         2       0       0       0       0       0       0       0       0
  7543 ;;Total ram usage:        2 bytes
  7544 ;; Hardware stack levels used:    1
  7545 ;; Hardware stack levels required when called:    1
  7546 ;; This function calls:
  7547 ;;		_Lcd_Port
  7548 ;; This function is called by:
  7549 ;;		_lcd_gotoxy
  7550 ;;		_lcd_init
  7551 ;;		_lcd_clear
  7552 ;;		_lcd_shift_right
  7553 ;;		_lcd_shift_left
  7554 ;; This function uses a non-reentrant model
  7555 ;;
  7556                           
  7557                           	psect	text39
  7558  002A58                     __ptext39:
  7559                           	opt stack 0
  7560  002A58                     _Lcd_Cmd:
  7561                           	opt stack 27
  7562                           
  7563                           ;lcd.h: 54: RD2 = 0;
  7564                           
  7565                           ;incstack = 0
  7566                           ;incstack = 0
  7567  002A58  9483               	bcf	3971,2,c	;volatile
  7568                           
  7569                           ;lcd.h: 55: Lcd_Port(a);
  7570  002A5A  C002  F001         	movff	Lcd_Cmd@a,?_Lcd_Port
  7571  002A5E  ECF2  F014         	call	_Lcd_Port	;wreg free
  7572                           
  7573                           ;lcd.h: 56: RD3 = 1;
  7574  002A62  8683               	bsf	3971,3,c	;volatile
  7575                           
  7576                           ;lcd.h: 57: _delay((unsigned long)((4)*(8000000/4000.0)));
  7577  002A64  0E0B               	movlw	11
  7578  002A66  6E03               	movwf	??_Lcd_Cmd& (0+255),c
  7579  002A68  0E62               	movlw	98
  7580  002A6A                     u3227:
  7581  002A6A  2EE8               	decfsz	wreg,f,c
  7582  002A6C  D7FE               	goto	u3227
  7583  002A6E  2E03               	decfsz	??_Lcd_Cmd& (0+255),f,c
  7584  002A70  D7FC               	goto	u3227
  7585  002A72  F000               	nop	
  7586                           
  7587                           ;lcd.h: 58: RD3 = 0;
  7588  002A74  9683               	bcf	3971,3,c	;volatile
  7589  002A76  0012               	return	
  7590  002A78                     __end_of_Lcd_Cmd:
  7591                           	opt stack 0
  7592                           tblptru	equ	0xFF8
  7593                           tblptrh	equ	0xFF7
  7594                           tblptrl	equ	0xFF6
  7595                           tablat	equ	0xFF5
  7596                           prodh	equ	0xFF4
  7597                           prodl	equ	0xFF3
  7598                           postinc0	equ	0xFEE
  7599                           wreg	equ	0xFE8
  7600                           indf1	equ	0xFE7
  7601                           fsr1h	equ	0xFE2
  7602                           fsr1l	equ	0xFE1
  7603                           indf2	equ	0xFDF
  7604                           postinc2	equ	0xFDE
  7605                           postdec2	equ	0xFDD
  7606                           fsr2h	equ	0xFDA
  7607                           fsr2l	equ	0xFD9
  7608                           status	equ	0xFD8
  7609                           
  7610 ;; *************** function _Lcd_Port *****************
  7611 ;; Defined at:
  7612 ;;		line 28 in file "lcd.h"
  7613 ;; Parameters:    Size  Location     Type
  7614 ;;  a               1    0[COMRAM] unsigned char 
  7615 ;; Auto vars:     Size  Location     Type
  7616 ;;		None
  7617 ;; Return value:  Size  Location     Type
  7618 ;;		None               void
  7619 ;; Registers used:
  7620 ;;		None
  7621 ;; Tracked objects:
  7622 ;;		On entry : 0/0
  7623 ;;		On exit  : 0/0
  7624 ;;		Unchanged: 0/0
  7625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7626 ;;      Params:         1       0       0       0       0       0       0       0       0
  7627 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7628 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7629 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7630 ;;Total ram usage:        1 bytes
  7631 ;; Hardware stack levels used:    1
  7632 ;; This function calls:
  7633 ;;		Nothing
  7634 ;; This function is called by:
  7635 ;;		_Lcd_Cmd
  7636 ;;		_lcd_init
  7637 ;;		_lcd_write_char
  7638 ;; This function uses a non-reentrant model
  7639 ;;
  7640                           
  7641                           	psect	text40
  7642  0029E4                     __ptext40:
  7643                           	opt stack 0
  7644  0029E4                     _Lcd_Port:
  7645                           	opt stack 27
  7646                           
  7647                           ;lcd.h: 29: if(a & 1)
  7648                           
  7649                           ;incstack = 0
  7650                           ;incstack = 0
  7651  0029E4  A001               	btfss	Lcd_Port@a,0,c
  7652  0029E6  D002               	goto	l93
  7653                           
  7654                           ;lcd.h: 30: RD4 = 1;
  7655  0029E8  8883               	bsf	3971,4,c	;volatile
  7656  0029EA  D001               	goto	l94
  7657  0029EC                     l93:
  7658                           
  7659                           ;lcd.h: 31: else
  7660                           ;lcd.h: 32: RD4 = 0;
  7661  0029EC  9883               	bcf	3971,4,c	;volatile
  7662  0029EE                     l94:
  7663                           
  7664                           ;lcd.h: 34: if(a & 2)
  7665  0029EE  A201               	btfss	Lcd_Port@a,1,c
  7666  0029F0  D002               	goto	l95
  7667                           
  7668                           ;lcd.h: 35: RD5 = 1;
  7669  0029F2  8A83               	bsf	3971,5,c	;volatile
  7670  0029F4  D001               	goto	l96
  7671  0029F6                     l95:
  7672                           
  7673                           ;lcd.h: 36: else
  7674                           ;lcd.h: 37: RD5 = 0;
  7675  0029F6  9A83               	bcf	3971,5,c	;volatile
  7676  0029F8                     l96:
  7677                           
  7678                           ;lcd.h: 39: if(a & 4)
  7679  0029F8  A401               	btfss	Lcd_Port@a,2,c
  7680  0029FA  D002               	goto	l97
  7681                           
  7682                           ;lcd.h: 40: RD6 = 1;
  7683  0029FC  8C83               	bsf	3971,6,c	;volatile
  7684  0029FE  D001               	goto	l98
  7685  002A00                     l97:
  7686                           
  7687                           ;lcd.h: 41: else
  7688                           ;lcd.h: 42: RD6 = 0;
  7689  002A00  9C83               	bcf	3971,6,c	;volatile
  7690  002A02                     l98:
  7691                           
  7692                           ;lcd.h: 44: if(a & 8)
  7693  002A02  A601               	btfss	Lcd_Port@a,3,c
  7694  002A04  D002               	goto	l99
  7695                           
  7696                           ;lcd.h: 45: RD7 = 1;
  7697  002A06  8E83               	bsf	3971,7,c	;volatile
  7698  002A08  D001               	goto	l101
  7699  002A0A                     l99:
  7700                           
  7701                           ;lcd.h: 46: else
  7702                           ;lcd.h: 47: RD7 = 0;
  7703  002A0A  9E83               	bcf	3971,7,c	;volatile
  7704  002A0C                     l101:
  7705  002A0C  0012               	return	
  7706  002A0E                     __end_of_Lcd_Port:
  7707                           	opt stack 0
  7708                           tblptru	equ	0xFF8
  7709                           tblptrh	equ	0xFF7
  7710                           tblptrl	equ	0xFF6
  7711                           tablat	equ	0xFF5
  7712                           prodh	equ	0xFF4
  7713                           prodl	equ	0xFF3
  7714                           postinc0	equ	0xFEE
  7715                           wreg	equ	0xFE8
  7716                           indf1	equ	0xFE7
  7717                           fsr1h	equ	0xFE2
  7718                           fsr1l	equ	0xFE1
  7719                           indf2	equ	0xFDF
  7720                           postinc2	equ	0xFDE
  7721                           postdec2	equ	0xFDD
  7722                           fsr2h	equ	0xFDA
  7723                           fsr2l	equ	0xFD9
  7724                           status	equ	0xFD8
  7725                           
  7726 ;; *************** function ___fttol *****************
  7727 ;; Defined at:
  7728 ;;		line 45 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\fttol.c"
  7729 ;; Parameters:    Size  Location     Type
  7730 ;;  f1              3   22[COMRAM] float 
  7731 ;; Auto vars:     Size  Location     Type
  7732 ;;  lval            4   32[COMRAM] unsigned long 
  7733 ;;  exp1            1   36[COMRAM] unsigned char 
  7734 ;;  sign1           1   31[COMRAM] unsigned char 
  7735 ;; Return value:  Size  Location     Type
  7736 ;;                  4   22[COMRAM] long 
  7737 ;; Registers used:
  7738 ;;		wreg, status,2, status,0
  7739 ;; Tracked objects:
  7740 ;;		On entry : 0/0
  7741 ;;		On exit  : 0/0
  7742 ;;		Unchanged: 0/0
  7743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7744 ;;      Params:         4       0       0       0       0       0       0       0       0
  7745 ;;      Locals:         6       0       0       0       0       0       0       0       0
  7746 ;;      Temps:          5       0       0       0       0       0       0       0       0
  7747 ;;      Totals:        15       0       0       0       0       0       0       0       0
  7748 ;;Total ram usage:       15 bytes
  7749 ;; Hardware stack levels used:    1
  7750 ;; This function calls:
  7751 ;;		Nothing
  7752 ;; This function is called by:
  7753 ;;		_USART_Init
  7754 ;;		_sprintf
  7755 ;; This function uses a non-reentrant model
  7756 ;;
  7757                           
  7758                           	psect	text41
  7759  001E92                     __ptext41:
  7760                           	opt stack 0
  7761  001E92                     ___fttol:
  7762                           	opt stack 29
  7763                           
  7764                           ;incstack = 0
  7765                           ;incstack = 0
  7766  001E92  0E0F               	movlw	15
  7767  001E94  6E1B               	movwf	??___fttol& (0+255),c
  7768  001E96  C017  F01C         	movff	___fttol@f1,??___fttol+1
  7769  001E9A  C018  F01D         	movff	___fttol@f1+1,??___fttol+2
  7770  001E9E  C019  F01E         	movff	___fttol@f1+2,??___fttol+3
  7771  001EA2  281B               	incf	??___fttol,w,c
  7772  001EA4  6E1F               	movwf	(??___fttol+4)& (0+255),c
  7773  001EA6  D004               	goto	u2250
  7774  001EA8                     u2255:
  7775  001EA8  90D8               	bcf	status,0,c
  7776  001EAA  321E               	rrcf	??___fttol+3,f,c
  7777  001EAC  321D               	rrcf	??___fttol+2,f,c
  7778  001EAE  321C               	rrcf	??___fttol+1,f,c
  7779  001EB0                     u2250:
  7780  001EB0  2E1F               	decfsz	(??___fttol+4)& (0+255),f,c
  7781  001EB2  D7FA               	goto	u2255
  7782  001EB4  501C               	movf	??___fttol+1,w,c
  7783  001EB6  6E25               	movwf	___fttol@exp1,c
  7784  001EB8  6625               	tstfsz	___fttol@exp1& (0+255),c
  7785  001EBA  D001               	goto	l3805
  7786  001EBC  D035               	goto	u2300
  7787  001EBE                     l3805:
  7788  001EBE  0E17               	movlw	23
  7789  001EC0  6E1B               	movwf	??___fttol& (0+255),c
  7790  001EC2  C017  F01C         	movff	___fttol@f1,??___fttol+1
  7791  001EC6  C018  F01D         	movff	___fttol@f1+1,??___fttol+2
  7792  001ECA  C019  F01E         	movff	___fttol@f1+2,??___fttol+3
  7793  001ECE  281B               	incf	??___fttol,w,c
  7794  001ED0  6E1F               	movwf	(??___fttol+4)& (0+255),c
  7795  001ED2  D004               	goto	u2270
  7796  001ED4                     u2275:
  7797  001ED4  90D8               	bcf	status,0,c
  7798  001ED6  321E               	rrcf	??___fttol+3,f,c
  7799  001ED8  321D               	rrcf	??___fttol+2,f,c
  7800  001EDA  321C               	rrcf	??___fttol+1,f,c
  7801  001EDC                     u2270:
  7802  001EDC  2E1F               	decfsz	(??___fttol+4)& (0+255),f,c
  7803  001EDE  D7FA               	goto	u2275
  7804  001EE0  501C               	movf	??___fttol+1,w,c
  7805  001EE2  6E20               	movwf	___fttol@sign1,c
  7806  001EE4  8E18               	bsf	___fttol@f1+1,7,c
  7807  001EE6  0EFF               	movlw	255
  7808  001EE8  1617               	andwf	___fttol@f1,f,c
  7809  001EEA  0EFF               	movlw	255
  7810  001EEC  1618               	andwf	___fttol@f1+1,f,c
  7811  001EEE  0E00               	movlw	0
  7812  001EF0  1619               	andwf	___fttol@f1+2,f,c
  7813  001EF2  5017               	movf	___fttol@f1,w,c
  7814  001EF4  6E21               	movwf	___fttol@lval,c
  7815  001EF6  5018               	movf	___fttol@f1+1,w,c
  7816  001EF8  6E22               	movwf	___fttol@lval+1,c
  7817  001EFA  5019               	movf	___fttol@f1+2,w,c
  7818  001EFC  6E23               	movwf	___fttol@lval+2,c
  7819  001EFE  6A24               	clrf	___fttol@lval+3,c
  7820  001F00  0E8E               	movlw	142
  7821  001F02  5E25               	subwf	___fttol@exp1,f,c
  7822  001F04  AE25               	btfss	___fttol@exp1,7,c
  7823  001F06  D00D               	goto	l3827
  7824  001F08  5025               	movf	___fttol@exp1,w,c
  7825  001F0A  0A80               	xorlw	128
  7826  001F0C  0F8F               	addlw	143
  7827  001F0E  A0D8               	btfss	status,0,c
  7828  001F10  D00B               	goto	u2300
  7829  001F12                     l3823:
  7830  001F12  90D8               	bcf	status,0,c
  7831  001F14  3224               	rrcf	___fttol@lval+3,f,c
  7832  001F16  3223               	rrcf	___fttol@lval+2,f,c
  7833  001F18  3222               	rrcf	___fttol@lval+1,f,c
  7834  001F1A  3221               	rrcf	___fttol@lval,f,c
  7835  001F1C  3E25               	incfsz	___fttol@exp1,f,c
  7836  001F1E  D7F9               	goto	l3823
  7837  001F20  D014               	goto	l3837
  7838  001F22                     l3827:
  7839  001F22  0E17               	movlw	23
  7840  001F24  6425               	cpfsgt	___fttol@exp1,c
  7841  001F26  D00F               	goto	l3835
  7842  001F28                     u2300:
  7843  001F28  0E00               	movlw	0
  7844  001F2A  6E17               	movwf	?___fttol,c
  7845  001F2C  0E00               	movlw	0
  7846  001F2E  6E18               	movwf	?___fttol+1,c
  7847  001F30  0E00               	movlw	0
  7848  001F32  6E19               	movwf	?___fttol+2,c
  7849  001F34  0E00               	movlw	0
  7850  001F36  6E1A               	movwf	?___fttol+3,c
  7851  001F38  D01B               	goto	l718
  7852  001F3A                     l3833:
  7853  001F3A  90D8               	bcf	status,0,c
  7854  001F3C  3621               	rlcf	___fttol@lval,f,c
  7855  001F3E  3622               	rlcf	___fttol@lval+1,f,c
  7856  001F40  3623               	rlcf	___fttol@lval+2,f,c
  7857  001F42  3624               	rlcf	___fttol@lval+3,f,c
  7858  001F44  0625               	decf	___fttol@exp1,f,c
  7859  001F46                     l3835:
  7860  001F46  6625               	tstfsz	___fttol@exp1,c
  7861  001F48  D7F8               	goto	l3833
  7862  001F4A                     l3837:
  7863  001F4A  5020               	movf	___fttol@sign1,w,c
  7864  001F4C  B4D8               	btfsc	status,2,c
  7865  001F4E  D008               	goto	l3841
  7866  001F50  1E24               	comf	___fttol@lval+3,f,c
  7867  001F52  1E23               	comf	___fttol@lval+2,f,c
  7868  001F54  1E22               	comf	___fttol@lval+1,f,c
  7869  001F56  6C21               	negf	___fttol@lval,c
  7870  001F58  0E00               	movlw	0
  7871  001F5A  2222               	addwfc	___fttol@lval+1,f,c
  7872  001F5C  2223               	addwfc	___fttol@lval+2,f,c
  7873  001F5E  2224               	addwfc	___fttol@lval+3,f,c
  7874  001F60                     l3841:
  7875  001F60  C021  F017         	movff	___fttol@lval,?___fttol
  7876  001F64  C022  F018         	movff	___fttol@lval+1,?___fttol+1
  7877  001F68  C023  F019         	movff	___fttol@lval+2,?___fttol+2
  7878  001F6C  C024  F01A         	movff	___fttol@lval+3,?___fttol+3
  7879  001F70                     l718:
  7880  001F70  0012               	return	
  7881  001F72                     __end_of___fttol:
  7882                           	opt stack 0
  7883                           tblptru	equ	0xFF8
  7884                           tblptrh	equ	0xFF7
  7885                           tblptrl	equ	0xFF6
  7886                           tablat	equ	0xFF5
  7887                           prodh	equ	0xFF4
  7888                           prodl	equ	0xFF3
  7889                           postinc0	equ	0xFEE
  7890                           wreg	equ	0xFE8
  7891                           indf1	equ	0xFE7
  7892                           fsr1h	equ	0xFE2
  7893                           fsr1l	equ	0xFE1
  7894                           indf2	equ	0xFDF
  7895                           postinc2	equ	0xFDE
  7896                           postdec2	equ	0xFDD
  7897                           fsr2h	equ	0xFDA
  7898                           fsr2l	equ	0xFD9
  7899                           status	equ	0xFD8
  7900                           tblptru	equ	0xFF8
  7901                           tblptrh	equ	0xFF7
  7902                           tblptrl	equ	0xFF6
  7903                           tablat	equ	0xFF5
  7904                           prodh	equ	0xFF4
  7905                           prodl	equ	0xFF3
  7906                           postinc0	equ	0xFEE
  7907                           wreg	equ	0xFE8
  7908                           indf1	equ	0xFE7
  7909                           fsr1h	equ	0xFE2
  7910                           fsr1l	equ	0xFE1
  7911                           indf2	equ	0xFDF
  7912                           postinc2	equ	0xFDE
  7913                           postdec2	equ	0xFDD
  7914                           fsr2h	equ	0xFDA
  7915                           fsr2l	equ	0xFD9
  7916                           status	equ	0xFD8
  7917                           
  7918                           	psect	rparam
  7919  0000                     tblptru	equ	0xFF8
  7920                           tblptrh	equ	0xFF7
  7921                           tblptrl	equ	0xFF6
  7922                           tablat	equ	0xFF5
  7923                           prodh	equ	0xFF4
  7924                           prodl	equ	0xFF3
  7925                           postinc0	equ	0xFEE
  7926                           wreg	equ	0xFE8
  7927                           indf1	equ	0xFE7
  7928                           fsr1h	equ	0xFE2
  7929                           fsr1l	equ	0xFE1
  7930                           indf2	equ	0xFDF
  7931                           postinc2	equ	0xFDE
  7932                           postdec2	equ	0xFDD
  7933                           fsr2h	equ	0xFDA
  7934                           fsr2l	equ	0xFD9
  7935                           status	equ	0xFD8


Data Sizes:
    Strings     20
    Constant    118
    Data        0
    BSS         32
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     94      94
    BANK0           160     54      86
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ?___ftsub	float  size(2) Largest target is 0

    ?___ftpack	float  size(2) Largest target is 0

    ?___llmod	unsigned long  size(2) Largest target is 0

    ?___lwmod	unsigned int  size(2) Largest target is 0

    ?___lldiv	unsigned long  size(2) Largest target is 0

    ?___asftsub	float  size(2) Largest target is 0

    ?___lltoft	float  size(2) Largest target is 0

    ?__tdiv_to_l_	unsigned long  size(2) Largest target is 0

    ?__div_to_l_	unsigned long  size(2) Largest target is 0

    ?___asftadd	float  size(2) Largest target is 0

    ?___asftmul	float  size(2) Largest target is 0

    ?___ftneg	float  size(2) Largest target is 0

    ?_scale	float  size(2) Largest target is 0

    ?_fround	float  size(2) Largest target is 0

    ?___awdiv	int  size(2) Largest target is 0

    ?___wmul	unsigned int  size(2) Largest target is 0

    ?___awmod	int  size(2) Largest target is 0

    ?_Read_LDR	float  size(2) Largest target is 0

    ?___ftmul	float  size(2) Largest target is 0

    ?___awtoft	float  size(2) Largest target is 0

    ?_Obtener_Distancia	unsigned int  size(2) Largest target is 0

    ?___lwdiv	unsigned int  size(2) Largest target is 0

    ?___fttol	long  size(2) Largest target is 4
		 -> USART_Init@baud_rate(COMRAM[4]), 

    ?___ftadd	float  size(2) Largest target is 0

    ?___ftdiv	float  size(2) Largest target is 0

    ?___altoft	float  size(2) Largest target is 0

    __asftsub@f1p	PTR float  size(2) Largest target is 3
		 -> sprintf@fval(BANK0[3]), 

    __asftmul@f1p	PTR float  size(2) Largest target is 3
		 -> sprintf@integ(BANK0[3]), 

    __asftadd@f1p	PTR float  size(2) Largest target is 3
		 -> sprintf@fval(BANK0[3]), 

    sprintf@_val._cp	PTR const unsigned char  size(2) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_2(CODE[10]), STR_1(CODE[10]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 32
		 -> LCD_Buffer(BANK0[32]), 

    ?_sprintf	int  size(2) Largest target is 0

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S582$_cp	PTR const unsigned char  size(2) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    lcd_putc@a	PTR unsigned char  size(2) Largest target is 32
		 -> LCD_Buffer(BANK0[32]), 


Critical Paths under _main in COMRAM

    _main->_USART_Init
    _states_LED->_lcd_gotoxy
    _states_LED->_lcd_putc
    _lcd_putc->_lcd_write_char
    _lcd_write_char->_Lcd_Port
    _lcd_gotoxy->_Lcd_Cmd
    ___lltoft->___ftpack
    ___asftsub->___ftsub
    ___ftsub->___ftadd
    ___asftmul->___ftmul
    ___asftadd->___ftadd
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___awdiv->___awmod
    _Read_LDR->___ftdiv
    ___awtoft->___ftpack
    ___ftmul->___fttol
    _Obtener_Distancia->___lwdiv
    _USART_Init->___ftadd
    ___ftdiv->___ftmul
    ___ftadd->___ftdiv
    ___altoft->___ftpack
    _lcd_init->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port
    ___fttol->___wmul

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___asftsub

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0   16829
                                             92 COMRAM     2     2      0
                                             48 BANK0      6     6      0
                         _lcd_gotoxy
                           _lcd_init
                           _lcd_putc
            _Configuracion_Registros
                        _Timer1_Init
                            _Init_AD
                         _USART_Init
                  _Obtener_Distancia
                           _Read_LDR
                            _sprintf
                  _USART_ReceiveChar
                         _states_LED
 ---------------------------------------------------------------------------------
 (1) _states_LED                                           3     2      1     670
                                              8 COMRAM     3     2      1
                         _lcd_gotoxy
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (2) _lcd_putc                                             4     2      2     268
                                              4 COMRAM     4     2      2
                     _lcd_write_char
 ---------------------------------------------------------------------------------
 (3) _lcd_write_char                                       3     2      1     178
                                              1 COMRAM     3     2      1
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _lcd_gotoxy                                           5     3      2     380
                                              3 COMRAM     5     3      2
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _USART_ReceiveChar                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             49    42      7   11411
                                              5 BANK0     43    36      7
                             _fround
                              _scale
                            _isdigit
                        __tdiv_to_l_
                         __div_to_l_
                          ___asftadd
                          ___asftmul
                            ___ftmul
                          ___asftsub
                            ___awdiv
                             ___ftge
                            ___ftneg
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     159
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4     278
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                             10     2      8     159
                                              0 COMRAM    10     2      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     162
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3      45
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     136
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (2) ___asftsub                                            5     0      5    1160
                                              0 BANK0      5     0      5
                            ___ftsub
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    1094
                                             85 COMRAM     6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (2) ___asftmul                                            5     0      5     601
                                             54 COMRAM     5     0      5
                            ___ftmul
 ---------------------------------------------------------------------------------
 (2) ___asftadd                                            5     0      5    1115
                                             85 COMRAM     5     0      5
                             _fround (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          13     7      6     446
                                              0 COMRAM    13     7      6
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         17    11      6     303
                                              0 COMRAM    17    11      6
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     2      1      68
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (2) _scale                                               15    12      3    1779
                                             54 COMRAM    12     9      3
                            ___ftmul
                            ___awdiv
                            ___awmod
                            ___fttol (ARG)
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _fround                                              18    15      3    1581
                                             54 COMRAM    15    12      3
                            ___ftmul
                            ___awdiv
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     159
                                             16 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     296
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     300
                                              7 COMRAM     9     5      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Read_LDR                                            10     7      3    1371
                                             71 COMRAM    10     7      3
                            ___ftdiv
                            ___ftmul
                           ___awtoft
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             5     2      3     300
                                              8 COMRAM     5     2      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             17    11      6     535
                                             37 COMRAM    17    11      6
                           ___ftpack
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___fttol (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Obtener_Distancia                                    8     6      2     278
                                              8 COMRAM     8     6      2
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     162
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _USART_Init                                           7     7      0    2183
                                             85 COMRAM     7     7      0
                           ___altoft
                            ___ftadd
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             17    11      6     489
                                             54 COMRAM    17    11      6
                           ___ftpack
                           ___altoft (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             14     8      6    1049
                                             71 COMRAM    14     8      6
                           ___ftpack
                           ___altoft (ARG)
                            ___ftdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___altoft                                            10     6      4     347
                                              8 COMRAM    10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5     209
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _Init_AD                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer1_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Configuracion_Registros                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0     198
                                              3 COMRAM     1     1      0
                           _Lcd_Port
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              2     1      1     110
                                              1 COMRAM     2     1      1
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     0      1      88
                                              0 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     252
                                             22 COMRAM    15    11      4
                           ___ftpack (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcd_gotoxy
     _Lcd_Cmd
       _Lcd_Port
   _lcd_init
     _Lcd_Port
     _Lcd_Cmd
       _Lcd_Port
   _lcd_putc
     _lcd_write_char
       _Lcd_Port
   _Configuracion_Registros
   _Timer1_Init
   _Init_AD
   _USART_Init
     ___altoft
       ___ftpack
     ___ftadd
       ___ftpack
       ___altoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___altoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fttol (ARG)
             ___ftpack (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     ___ftdiv
       ___ftpack
       ___altoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___fttol (ARG)
           ___ftpack (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___fttol
       ___ftpack (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _Obtener_Distancia
     ___lwdiv
   _Read_LDR
     ___ftdiv
       ___ftpack
       ___altoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___fttol (ARG)
           ___ftpack (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftmul
       ___ftpack
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___fttol (ARG)
         ___ftpack (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___awtoft
       ___ftpack
   _sprintf
     _fround
       ___ftmul
         ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___fttol (ARG)
           ___ftpack (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _scale
       ___ftmul
         ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___fttol (ARG)
           ___ftpack (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___fttol (ARG)
         ___ftpack (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     __tdiv_to_l_
     __div_to_l_
     ___asftadd
       _fround (ARG)
         ___ftmul
           ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fttol (ARG)
             ___ftpack (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftadd (ARG)
         ___ftpack
         ___altoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___altoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___fttol (ARG)
               ___ftpack (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     ___asftmul
       ___ftmul
         ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___fttol (ARG)
           ___ftpack (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftmul
       ___ftpack
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___fttol (ARG)
         ___ftpack (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___asftsub
       ___ftsub
         ___ftadd
           ___ftpack
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___altoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___fttol (ARG)
                 ___ftpack (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___awdiv
       ___awmod (ARG)
     ___ftge
     ___ftneg
     ___fttol
       ___ftpack (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___lwmod
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _USART_ReceiveChar
   _states_LED
     _lcd_gotoxy
       _Lcd_Cmd
         _Lcd_Port
     _lcd_putc
       _lcd_write_char
         _Lcd_Port

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     36      56       5       53.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5E      5E       1       98.9%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       5       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B4      20        0.0%
DATA                 0      0      B9       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.20 build 52243 
Symbol Table                                                                                   Wed Jun 08 22:29:18 2022

                    ___asftadd@f2 0058                      ___altoft@exp 0011  
                   ___asftadd@f1p 0056                     ___altoft@sign 0012  
       __end_of_Obtener_Distancia 25A0                                l93 29EC  
                              l94 29EE                                l95 29F6  
                              l96 29F8                                l97 2A00  
                              _GO 007E11                                l98 2A02  
                              l99 2A0A                      ___awdiv@sign 000E  
             ___wmul@multiplicand 0013                       __CFG_BORV$3 000000  
                    ___asftmul@f2 0039                      __CFG_CP0$OFF 000000  
                    ___asftsub@f2 0062                      __CFG_CP1$OFF 000000  
                    __CFG_CP2$OFF 000000                      __CFG_CP3$OFF 000000  
                    ___ftadd@exp1 0055                      ___ftadd@exp2 0054  
                    ___ftadd@sign 0053                               l101 2A0C  
                             l113 273E                               l214 1620  
                             l143 29E2                               l171 2534  
                             l155 2AB6                               l175 2586  
                             l271 0F40                               l168 252E  
                             l184 208A                               l634 190A  
                             l635 1A6C                               l556 1E90  
                             l708 2A26                               l565 1E80  
                             l718 1F70                               l638 1934  
                             l558 1DFC                               l831 278C  
                             l649 19D8                               l841 27D2  
                             l658 19F4                               l666 1D9C  
                             l674 1B8E                               l762 2406  
                             l683 1B7E                               l668 1D46  
                             l692 2300                               l772 2674  
                             l597 21B8                               l669 1D6C  
                             l677 1B2C                               l698 1C9E  
                    __CFG_CPB$OFF 000000                               _RD2 007C1A  
                             _RD3 007C1B                               _RD4 007C1C  
                             _RD5 007C1D                               _RD6 007C1E  
                             _RD7 007C1F                      __CFG_CPD$OFF 000000  
                    __CFG_BOR$OFF 000000                      ___awmod@sign 0007  
                             wreg 000FE8                      __CFG_FOSC$HS 000000  
                   ___asftmul@f1p 0037                       _sprintf$595 0075  
                   main@Distancia 0090                     ___asftsub@f1p 0060  
                     lcd_gotoxy@a 0004                       lcd_gotoxy@b 0005  
                     lcd_gotoxy@y 0007                       lcd_gotoxy@z 0006  
                    __CFG_LVP$OFF 000000                      ___ftdiv@cntr 0042  
                    ___ftdiv@sign 0047                      __CFG_WDT$OFF 000000  
                            l4201 0902                              l4035 1BF4  
                            l4123 1856                              l4115 177E  
                            l3411 1AC6                              l4211 0978  
                            l4053 1C3A                              l4029 1BBC  
                            l3405 1A9A                              l3501 1E58  
                            l4213 0980                              l4205 0946  
                            l4063 1C66                              l4311 0D6A  
                            l4231 0A0C                              l4207 0962  
                            l3521 212A                              l4049 1C2A  
                            l4145 13D8                              l3441 1B46  
                            l3425 1B04                              l4401 112A  
                            l4225 09D6                              l3531 2186  
                            l3523 2148                              l3515 2112  
                            l4059 1C56                              l4163 15F2  
                            l4139 131C                              l3451 1B6E  
                            l3507 1E70                              l3611 23C4  
                            l4331 0E2C                              l4227 09EE  
                            l4219 09B2                              l4411 11A0  
                            l4157 152A                              l4149 13E6  
                            l3453 1B7A                              l3445 1B56  
                            l3509 1E7C                              l3461 1DAA  
                            l3621 23F8                              l3613 23C8  
                            l4405 116A                              l4317 0DCE  
                            l4245 0A84                              l4413 11C4  
                            l4237 0A2E                              l3527 215E  
                            l3519 2120                              l3631 263E  
                            l4271 0BB2                              l4255 0AEE  
                            l4239 0A62                              l3383 2AC4  
                            l3529 217C                              l3561 25DA  
                            l3553 25BC                              l3609 23B8  
                            l3633 2642                              l4353 0F06  
                            l4337 0E5A                              l4345 0ED8  
                            l4193 08C0                              l3651 2766  
                            l3563 25E2                              l3395 2A50  
                            l3467 1DB6                              l4371 0FCE  
                            l4347 0EE8                              l4283 0C3C  
                            l4187 08A2                              l3805 1EBE  
                            l3717 2576                              l3565 25E6  
                            l3573 2604                              l3557 25C8  
                            l3637 2666                              l3629 2632  
                            l4381 109C                              l4429 1F92  
                            l3823 1F12                              l3735 24CC  
                            l3647 275A                              l3751 231E  
                            l3487 1E2C                              l3671 27B4  
                            l4383 10AC                              l4367 0F7C  
                            l4359 0F44                              l4295 0CCC  
                            l4287 0C74                              l4279 0C14  
                            l4391 10D8                              l3903 2952  
                            l3841 1F60                              l3833 1F3A  
                            l3737 24D8                              l3649 2762  
                            l3577 2612                              l3569 25FA  
                            l3497 1E48                              l3585 22A2  
                            l3835 1F46                              l3827 1F22  
                            l3923 1942                              l3659 2782  
                            l3763 2348                              l3595 22FE  
                            l3675 27C8                              l3667 27A8  
                            l4299 0CF2                              l3907 296A  
                            l3837 1F4A                              l3917 1918  
                            l3765 2350                              l3757 232E  
                            l3589 22D2                              l3669 27B0  
                            l4397 10FC                              l4389 10CA  
                            l3951 19AA                              l3783 2388  
                            l3775 2370                              l3767 2354  
                            l3847 2690                              l3863 2714  
                            l3945 1992                              l3849 269C  
                            l3947 199C                              l3939 1974  
                            l3795 27F8                              l3779 237A  
                            l3965 1A10                              l3957 19C8  
                            l3949 19A4                              l3975 1A48  
                            l3959 19D2                              l3991 1D04  
                            l3985 1CCC                              _ADON 007E10  
                            STR_1 0880                              STR_2 0876  
                            _CREN 007D5C                              u2300 1F28  
                            _LATB 000F8A                              u2250 1EB0  
                            u2270 1EDC                              u2255 1EA8  
                            u3207 21EC                              u2600 1CEA  
                            u3217 2208                              u2370 18C0  
                            u2610 1CF6                              u1810 1E5E  
                            u2275 1ED4                              u3227 2A6A  
                            u2380 18E6                              u1740 1B5C  
                            u2605 1CE2                              u2630 1BAE  
                            u1670 1A8C                              u2375 18B8  
                            u3167 28F0                              u2704 2080  
                            u2385 18DE                              u2705 207C  
                            u3177 2904                              u2650 1BDA  
                            u1690 1AB8                              u3187 2526  
                            u2635 1BA6                              u1675 1A84  
                            u2580 1CBE                              u2660 1BE6  
                            u2900 0B42                              u3197 21D0  
                            u2655 1BD2                              u1695 1AB0  
                            u2585 1CB6                              u2905 0B36  
                            u2694 2068                              u2695 2064  
                            _RCIF 007CF5                              u2885 0AC6  
                            _TMR1 000FCE                              _TXIF 007CF4  
                 lcd_write_char@a 0002                   lcd_write_char@y 0004  
          __end_of_lcd_write_char 290E        Obtener_Distancia@Distancia 000D  
                            _main 1F72                      ___ftpack@arg 0001  
                    ___ftpack@exp 0004                              fsr1h 000FE2  
                            fsr2h 000FDA                              indf1 000FE7  
                            fsr1l 000FE1                              indf2 000FDF  
                            fsr2l 000FD9                              prodh 000FF4  
                            prodl 000FF3                              start 0000  
                   __CFG_IESO$OFF 000000                      _sprintf$1212 0072  
                 __end_of_Lcd_Cmd 2A78                     __CFG_MCLRE$ON 000000  
                    ___ftmul@cntr 0035                      ___ftmul@sign 0036  
                 __end_of_Init_AD 2AA2                      ___fttol@exp1 0025  
                    ___fttol@lval 0021                     __CFG_PLLDIV$1 000000  
                  __CFG_CCP2MX$ON 000000                             ?_main 0001  
                 __end_of___awdiv 2392                   __end_of___ftadd 1A6E  
                 __end_of___awmod 261C                   __end_of___ftdiv 1D9E  
                 __end_of___ftneg 2A34                   __end_of___lldiv 2418  
                 __end_of___ftmul 1CA0                   ___awdiv@divisor 000A  
                 __end_of___llmod 2686                   __end_of___ftsub 29B4  
                 __end_of___fttol 1F72                   __end_of___lwdiv 2796  
                 __end_of___lwmod 27DC                   ___awdiv@counter 000D  
                           _RCREG 000FAE                             _RCSTA 000FAB  
                           _SPBRG 000FAF                     __CFG_USBDIV$1 000000  
                           _TRISA 000F92                             _TRISB 000F93  
                           _TRISD 000F95                             _TXREG 000FAD  
                   __CFG_PWRT$OFF 000000                     __CFG_WRT0$OFF 000000  
                   __CFG_WRT1$OFF 000000                     __CFG_WRT2$OFF 000000  
                   __CFG_WRT3$OFF 000000                      ___lltoft@exp 0011  
                  __CFG_EBTR0$OFF 000000                    __CFG_FCMEN$OFF 000000  
                  __CFG_EBTR1$OFF 000000                    __CFG_EBTR2$OFF 000000  
                  __CFG_EBTR3$OFF 000000                     __CFG_WRTB$OFF 000000  
                   __CFG_WRTC$OFF 000000                     __CFG_WRTD$OFF 000000  
                  __CFG_EBTRB$OFF 000000                     ___awtoft@sign 000D  
                 __end_of_dpowers 0828                             _scale 11D2  
                 __end_of_isdigit 2A58                     ___ftpack@sign 0005  
                           tablat 000FF5                   ?_lcd_write_char 0002  
                           status 000FD8                   __end_of_sprintf 11D2  
                  __CFG_ICPRT$OFF 000000                    __CFG_PBADEN$ON 000000  
                     ?_USART_Init 0001                  __end_of_Lcd_Port 2A0E  
                 __initialization 2A78                      __end_of_main 2048  
                __end_of_Read_LDR 2102        __size_of_Obtener_Distancia 007E  
                          ??_main 005D                     ___fttol@sign1 0020  
                   __activetblptr 000002              __size_of__tdiv_to_l_ 0122  
                          _ADCON0 000FC2                            _ADCON1 000FC1  
                          _ADCON2 000FC0                  __end_of___altoft 2522  
                ___llmod@dividend 0001                            ?_scale 0037  
                          _ADRESH 000FC4                            _ADRESL 000FC3  
                ___awdiv@dividend 0008                  __end_of___awtoft 2820  
                __end_of___ftpack 21BA                  __end_of___lltoft 26EA  
                       ??_Lcd_Cmd 0003                            _TMR1ON 007E68  
                          _TRISA0 007C90                            _TRISC6 007CA6  
                          _TRISC7 007CA7                         ??_Init_AD 0001  
                   ??_Timer1_Init 0001                    __CFG_XINST$OFF 000000  
                __end_of__powers_ 0876                  __end_of_lcd_init 2272  
                __end_of_lcd_putc 297E                            ___ftge 2272  
                          ___wmul 290E                         ??___awdiv 000C  
                       ??___ftadd 004E                    __CFG_STVREN$ON 000000  
                       ??___awmod 0005                         ??___ftdiv 003D  
                       ??___ftneg 0004                         ??___lldiv 0009  
                       ??___ftmul 002C                         ??___llmod 0009  
                       ??___ftsub 005C                         ??___fttol 001B  
                       ??___lwdiv 0005                         ??___lwmod 0005  
                          _fround 1622                            clear_0 2A7E  
                ___awdiv@quotient 000F                   ___awmod@divisor 0003  
                 ___awmod@counter 0006             ___ftmul@f3_as_product 0032  
                       ??_isdigit 0002                      __mediumconst 0000  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8               __size_of_USART_Init 0086  
                       ??_sprintf 006C                __size_of___asftadd 003C  
              __size_of___asftmul 003C                __size_of___asftsub 003C  
        ?_Configuracion_Registros 0001                        __accesstop 0060  
         __end_of__initialization 2A84                        ___altoft@c 0009  
                      ___ftadd@f1 0048                        ___ftadd@f2 004B  
                      ___ftge@ff1 0001                        ___ftge@ff2 0004  
                      ___ftdiv@f1 0037                        ___ftdiv@f2 003A  
                      ___ftdiv@f3 0043                        ___ftneg@f1 0001  
                      ___awtoft@c 0009                        ___ftmul@f1 0026  
                      ___ftmul@f2 0029                        ___ftsub@f1 0056  
                      ___ftsub@f2 0059                        ___fttol@f1 0017  
                  __pcstackCOMRAM 0001                        ___lltoft@c 0009  
                   __end_of_scale 1622               __end_of_Timer1_Init 2AB6  
          Read_LDR@analog_reading 004F                    lcd_gotoxy@temp 0008  
                      __div_to_l_ 1D9E                         ?_Lcd_Port 0001  
                 __div_to_l_@exp1 000D                   __div_to_l_@cntr 000C  
                    sprintf@integ 0081                           ??_scale 003A  
                 __div_to_l_@quot 0008                        __pbssBANK0 0096  
                       ?_Read_LDR 0048                     __div_to_l_@f1 0001  
                   __div_to_l_@f2 0004                           ?___ftge 0001  
                         ?___wmul 0011                         ?___altoft 0009  
               __end_of___asftadd 28D4                           ?_fround 0037  
               __end_of___asftmul 2898                 __end_of___asftsub 285C  
                       ?___awtoft 0009                         ?___ftpack 0001  
                       ?___lltoft 0009                        _lcd_gotoxy 26EA  
 __end_of_Configuracion_Registros 2ADA                  ??_lcd_write_char 0003  
                      ??_Lcd_Port 0002                         ?_lcd_init 0001  
                       ?_lcd_putc 0005                        ??_Read_LDR 004B  
                 __CFG_VREGEN$OFF 000000                lcd_write_char@temp 0003  
                         _Lcd_Cmd 2A58                           _Init_AD 2A8E  
                    ??_USART_Init 0056                 __end_of__npowers_ 084F  
                         __Hparam 0000                        _scale$1211 0040  
                     _Timer1_Init 2AA2                           __Lparam 0000  
                 __size_of___ftge 0090                           ___awdiv 2302  
                         ___ftadd 18A2                           ___awmod 25A0  
                         ___ftdiv 1CA0                           ___ftneg 2A0E  
                         ___lldiv 2392                   __size_of___wmul 003A  
                         ___ftmul 1B90                           ___llmod 261C  
                         ___ftsub 297E                           ___fttol 1E92  
                         ___lwdiv 2740                           ___lwmod 2796  
                    __psmallconst 0800                        ??___altoft 000D  
                         __pcinit 2A78                        ??___awtoft 000C  
                      ??___ftpack 0006                   __size_of_fround 0280  
                         __ramtop 0800                        ??___lltoft 000D  
                         __ptext0 1F72                           __ptext1 29B4  
                         __ptext2 2948                           __ptext3 28D4  
                         __ptext4 26EA                           __ptext5 2AB6  
                         __ptext6 088C                           __ptext7 2796  
                         __ptext8 2686                           __ptext9 261C  
                       _T1CONbits 000FCD                       ?__div_to_l_ 0001  
                  USART_Init@temp 005A                           _dpowers 0800  
                         _isdigit 2A34                  ___awmod@dividend 0001  
              __end_of_USART_Init 249E                           _sprintf 088C  
                      ??_lcd_init 0004                        ??_lcd_putc 0007  
            end_of_initialization 2A84                     __Lmediumconst 0000  
                 ___lldiv@divisor 0005                   ___lldiv@counter 000E  
                       _RCSTAbits 000FAB                           postdec2 000FDD  
                         postinc0 000FEE                           postinc2 000FDE  
                       Lcd_Port@a 0001                    __tdiv_to_l_@f1 0001  
                  __tdiv_to_l_@f2 0004                     ??__tdiv_to_l_ 0007  
                       _PORTAbits 000F80                       ?_lcd_gotoxy 0004  
                      _states_LED 29B4               USART_Init@baud_rate 0056  
                     ___ftdiv@exp 0046               __size_of__div_to_l_ 00F4  
       Obtener_Distancia@Duracion 000F                       ___ftmul@exp 0031  
__size_of_Configuracion_Registros 0012                    __end_of___ftge 2302  
                  __end_of___wmul 2948                    __end_of_fround 18A2  
             start_initialization 2A78               __end_of__tdiv_to_l_ 1B90  
               __size_of_Lcd_Port 002A                   ___llmod@divisor 0005  
                 ___llmod@counter 000A                 __size_of_Read_LDR 00BA  
               _USART_ReceiveChar 2AB6                          ??___ftge 0007  
              ?_USART_ReceiveChar 0001               __size_of_lcd_gotoxy 0056  
                        ??___wmul 0015                     sprintf@vd_597 007B  
                __CFG_LPT1OSC$OFF 000000                          ??_fround 003A  
             ??_USART_ReceiveChar 0001                 __size_of___altoft 0084  
                      fround@prec 0037                 __size_of___awtoft 0044  
               __size_of___ftpack 00B8                         ___asftadd 2898  
                       ___asftmul 285C                         ___asftsub 2820  
               __size_of___lltoft 0064                     __pcstackBANK0 0060  
             __end_of__stringdata 088A                       ?_states_LED 0009  
                        ?_Lcd_Cmd 0002                 __size_of_lcd_init 00B8  
                     sprintf@_val 0086                       sprintf@flag 007F  
               __size_of_lcd_putc 0036                       sprintf@fval 008C  
                     sprintf@prec 008A         __end_of_USART_ReceiveChar 2AC8  
                        ?_Init_AD 0001                      ?_Timer1_Init 0001  
                ___lwdiv@dividend 0001                          ?___awdiv 0008  
                        ?___ftadd 0048                          ?___awmod 0001  
                        ?___ftdiv 0037                          ?___ftneg 0001  
                        ?___lldiv 0001                          ?___ftmul 0026  
                        ?___llmod 0001                          ?___ftsub 0056  
                       __npowers_ 0828                          ?___fttol 0017  
                        ?___lwdiv 0001                          ?___lwmod 0001  
                     __tdiv_to_l_ 1A6E                      ??__div_to_l_ 0007  
                     __smallconst 0800                        ?___asftadd 0056  
                        ?_isdigit 0001                        ?___asftmul 0037  
                      ?___asftsub 0060                  ___lwdiv@quotient 0006  
                        ?_sprintf 0065                    __size_of_scale 0450  
                  ___wmul@product 0015                          _LATAbits 000F89  
                        Lcd_Cmd@a 0002                __end_of__div_to_l_ 1E92  
                __CFG_WDTPS$32768 000000           _Configuracion_Registros 2AC8  
             __size_of_states_LED 0030                    states_LED@data 0009  
                      _ADCON0bits 000FC2                        _ADCON1bits 000FC1  
                     __stringdata 0876                 ___wmul@multiplier 0011  
                       lcd_putc@a 0005                         lcd_putc@i 0007  
                    ??_lcd_gotoxy 0006                          _Lcd_Port 29E4  
                        _Read_LDR 2048        __size_of_USART_ReceiveChar 0012  
                __size_of_Lcd_Cmd 0020           __size_of_lcd_write_char 003A  
                __size_of_Init_AD 0014                          __Hrparam 0000  
                        __Lrparam 0000                __end_of_lcd_gotoxy 2740  
                __size_of___awdiv 0090                  __size_of___ftadd 01CC  
                __size_of___awmod 007C                  __size_of___ftdiv 00FE  
                __size_of___ftneg 0026                  __size_of___lldiv 0086  
                        ___altoft 249E                  __size_of___ftmul 0110  
                __size_of___llmod 006A                  __size_of___ftsub 0036  
                __size_of___fttol 00E0                  __size_of___lwdiv 0056  
                __size_of___lwmod 0046                          ___awtoft 27DC  
                        ___ftpack 2102                       _fround$1210 0040  
                     _fround$1209 0043                          ___lltoft 2686  
                     _isdigit$870 0003                       ??___asftadd 005B  
                      sprintf@exp 0084                       ??___asftmul 003C  
                     ??___asftsub 005C                  __size_of_isdigit 0024  
                 ___lwdiv@divisor 0003                   ___lwdiv@counter 0008  
                        __ptext10 2392                          __ptext11 2A0E  
                        __ptext20 11D2                          __ptext12 2272  
                        __ptext21 1622                          __ptext13 2820  
                        __ptext30 2418                          __ptext22 290E  
                        __ptext14 297E                          __ptext31 1CA0  
                        __ptext23 25A0                          __ptext15 285C  
                        __ptext40 29E4                          __ptext32 18A2  
                        __ptext24 2302                          __ptext16 2898  
                        __ptext41 1E92                          __ptext33 249E  
                        __ptext25 2048                          __ptext17 1D9E  
                        __ptext34 2102                          __ptext26 27DC  
                        __ptext18 1A6E                          __ptext35 2A8E  
                        __ptext27 1B90                          __ptext19 2A34  
                        __ptext36 2AA2                          __ptext28 2522  
                        __ptext37 2AC8                          __ptext29 2740  
                        __ptext38 21BA                          __ptext39 2A58  
                        __powers_ 084F                          _lcd_init 21BA  
                        _lcd_putc 2948                  __size_of_sprintf 0946  
                   __size_of_main 00D6         ??_Configuracion_Registros 0001  
             main@esp_server_data 0095                        _LCD_Buffer 0096  
            __size_of_Timer1_Init 0014             __CFG_CPUDIV$OSC1_PLL2 000000  
                        isdigit@c 0001                          scale@scl 0037  
                    ??_states_LED 000A                         sprintf@ap 007D  
                __tdiv_to_l_@exp1 0011                         sprintf@vd 0079  
                __tdiv_to_l_@cntr 0010                         sprintf@sp 0065  
                __tdiv_to_l_@quot 000C                  ___lwmod@dividend 0001  
                ___lldiv@dividend 0001                __end_of_states_LED 29E4  
                   main@LDR_value 0092                      ?__tdiv_to_l_ 0001  
               _Obtener_Distancia 2522                          sprintf@c 008F  
                        sprintf@f 0067                  ___lldiv@quotient 000A  
                 ___lwmod@divisor 0003                ?_Obtener_Distancia 0009  
                 ___lwmod@counter 0006               ??_Obtener_Distancia 000B  
        Obtener_Distancia@Timer_1 000B                    _lcd_write_char 28D4  
                      _USART_Init 2418  
