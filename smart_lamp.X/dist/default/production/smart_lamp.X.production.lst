

Microchip Technology PIC18 LITE Macro Assembler V1.20 build 52243 
                                                                                               Sun Jun 05 23:06:10 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 52243
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1
    37                           	psect	text27,global,reloc=2,class=CODE,delta=1
    38                           	psect	text28,global,reloc=2,class=CODE,delta=1
    39                           	psect	text29,global,reloc=2,class=CODE,delta=1
    40                           	psect	text30,global,reloc=2,class=CODE,delta=1
    41                           	psect	text31,global,reloc=2,class=CODE,delta=1
    42                           	psect	text32,global,reloc=2,class=CODE,delta=1
    43                           	psect	text33,global,reloc=2,class=CODE,delta=1
    44                           	psect	text34,global,reloc=2,class=CODE,delta=1
    45                           	psect	text35,global,reloc=2,class=CODE,delta=1
    46                           	psect	text36,global,reloc=2,class=CODE,delta=1
    47                           	psect	text37,global,reloc=2,class=CODE,delta=1
    48                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    49                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    50  0000                     
    51                           	psect	smallconst
    52  000800                     __psmallconst:
    53                           	opt stack 0
    54  000800                     _dpowers:
    55                           	opt stack 0
    56  000800  0001               	dw	1
    57  000802  0000               	dw	0
    58  000804  000A               	dw	10
    59  000806  0000               	dw	0
    60  000808  0064               	dw	100
    61  00080A  0000               	dw	0
    62  00080C  03E8               	dw	1000
    63  00080E  0000               	dw	0
    64  000810  2710               	dw	10000
    65  000812  0000               	dw	0
    66  000814  86A0               	dw	34464
    67  000816  0001               	dw	1
    68  000818  4240               	dw	16960
    69  00081A  000F               	dw	15
    70  00081C  9680               	dw	38528
    71  00081E  0098               	dw	152
    72  000820  E100               	dw	57600
    73  000822  05F5               	dw	1525
    74  000824  CA00               	dw	51712
    75  000826  3B9A               	dw	15258
    76  000828                     __end_of_dpowers:
    77                           	opt stack 0
    78  000828                     __npowers_:
    79                           	opt stack 0
    80  000828  00                 	db	0
    81  000829  80                 	db	128
    82  00082A  3F                 	db	63
    83  00082B  CD                 	db	205
    84  00082C  CC                 	db	204
    85  00082D  3D                 	db	61
    86  00082E  D7                 	db	215
    87  00082F  23                 	db	35
    88  000830  3C                 	db	60
    89  000831  12                 	db	18
    90  000832  83                 	db	131
    91  000833  3A                 	db	58
    92  000834  B7                 	db	183
    93  000835  D1                 	db	209
    94  000836  38                 	db	56
    95  000837  C6                 	db	198
    96  000838  27                 	db	39
    97  000839  37                 	db	55
    98  00083A  38                 	db	56
    99  00083B  86                 	db	134
   100  00083C  35                 	db	53
   101  00083D  C0                 	db	192
   102  00083E  D6                 	db	214
   103  00083F  33                 	db	51
   104  000840  CC                 	db	204
   105  000841  2B                 	db	43
   106  000842  32                 	db	50
   107  000843  70                 	db	112
   108  000844  89                 	db	137
   109  000845  30                 	db	48
   110  000846  E7                 	db	231
   111  000847  DB                 	db	219
   112  000848  2E                 	db	46
   113  000849  E5                 	db	229
   114  00084A  3C                 	db	60
   115  00084B  1E                 	db	30
   116  00084C  42                 	db	66
   117  00084D  A2                 	db	162
   118  00084E  0D                 	db	13
   119  00084F                     __end_of__npowers_:
   120                           	opt stack 0
   121  00084F                     __powers_:
   122                           	opt stack 0
   123  00084F  00                 	db	0
   124  000850  80                 	db	128
   125  000851  3F                 	db	63
   126  000852  00                 	db	0
   127  000853  20                 	db	32
   128  000854  41                 	db	65
   129  000855  00                 	db	0
   130  000856  C8                 	db	200
   131  000857  42                 	db	66
   132  000858  00                 	db	0
   133  000859  7A                 	db	122
   134  00085A  44                 	db	68
   135  00085B  40                 	db	64
   136  00085C  1C                 	db	28
   137  00085D  46                 	db	70
   138  00085E  50                 	db	80
   139  00085F  C3                 	db	195
   140  000860  47                 	db	71
   141  000861  24                 	db	36
   142  000862  74                 	db	116
   143  000863  49                 	db	73
   144  000864  97                 	db	151
   145  000865  18                 	db	24
   146  000866  4B                 	db	75
   147  000867  BC                 	db	188
   148  000868  BE                 	db	190
   149  000869  4C                 	db	76
   150  00086A  6B                 	db	107
   151  00086B  6E                 	db	110
   152  00086C  4E                 	db	78
   153  00086D  03                 	db	3
   154  00086E  15                 	db	21
   155  00086F  50                 	db	80
   156  000870  79                 	db	121
   157  000871  AD                 	db	173
   158  000872  60                 	db	96
   159  000873  F3                 	db	243
   160  000874  49                 	db	73
   161  000875  71                 	db	113
   162  000876                     __end_of__powers_:
   163                           	opt stack 0
   164  0000                     _TMR1	set	4046
   165  0000                     _ADCON0	set	4034
   166  0000                     _ADCON0bits	set	4034
   167  0000                     _ADCON1	set	4033
   168  0000                     _ADCON1bits	set	4033
   169  0000                     _ADCON2	set	4032
   170  0000                     _ADRESH	set	4036
   171  0000                     _ADRESL	set	4035
   172  0000                     _LATAbits	set	3977
   173  0000                     _PORTAbits	set	3968
   174  0000                     _T1CONbits	set	4045
   175  0000                     _TRISA	set	3986
   176  0000                     _TRISB	set	3987
   177  0000                     _TRISD	set	3989
   178  0000                     _ADON	set	32272
   179  0000                     _GO	set	32273
   180  0000                     _RD2	set	31770
   181  0000                     _RD3	set	31771
   182  0000                     _RD4	set	31772
   183  0000                     _RD5	set	31773
   184  0000                     _RD6	set	31774
   185  0000                     _RD7	set	31775
   186  0000                     _TMR1ON	set	32360
   187  0000                     _TRISA0	set	31888
   188  000876                     __stringdata:
   189                           	opt stack 0
   190  000876                     STR_2:
   191                           
   192                           ; BSR set to: 0
   193  000876  44                 	db	68	;'D'
   194  000877  69                 	db	105	;'i'
   195  000878  73                 	db	115	;'s'
   196  000879  74                 	db	116	;'t'
   197  00087A  61                 	db	97	;'a'
   198  00087B  6E                 	db	110	;'n'
   199  00087C  63                 	db	99	;'c'
   200  00087D  69                 	db	105	;'i'
   201  00087E  61                 	db	97	;'a'
   202  00087F  3A                 	db	58	;':'
   203  000880  20                 	db	32
   204  000881  25                 	db	37
   205  000882  30                 	db	48	;'0'
   206  000883  33                 	db	51	;'3'
   207  000884  64                 	db	100	;'d'
   208  000885  63                 	db	99	;'c'
   209  000886  6D                 	db	109	;'m'
   210  000887  00                 	db	0
   211  000888                     STR_1:
   212                           
   213                           ; BSR set to: 0
   214  000888  4C                 	db	76	;'L'
   215  000889  44                 	db	68	;'D'
   216  00088A  52                 	db	82	;'R'
   217  00088B  3A                 	db	58	;':'
   218  00088C  20                 	db	32
   219  00088D  25                 	db	37
   220  00088E  2E                 	db	46
   221  00088F  32                 	db	50	;'2'
   222  000890  66                 	db	102	;'f'
   223  000891  00                 	db	0
   224  000892                     __end_of__stringdata:
   225                           	opt stack 0
   226                           
   227                           ; #config settings
   228  000892  00                 	db	0	; dummy byte at the end
   229  0000                     
   230                           	psect	cinit
   231  002C72                     __pcinit:
   232                           	opt stack 0
   233  002C72                     start_initialization:
   234                           	opt stack 0
   235  002C72                     __initialization:
   236                           	opt stack 0
   237                           
   238                           ; Clear objects allocated to BANK0 (32 bytes)
   239  002C72  EE00  F081         	lfsr	0,__pbssBANK0
   240  002C76  0E20               	movlw	32
   241  002C78                     clear_0:
   242  002C78  6AEE               	clrf	postinc0,c
   243  002C7A  06E8               	decf	wreg,f,c
   244  002C7C  E1FD               	bnz	clear_0
   245  002C7E                     end_of_initialization:
   246                           	opt stack 0
   247  002C7E                     __end_of__initialization:
   248                           	opt stack 0
   249  002C7E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   250  002C80  6EF8               	movwf	tblptru,c
   251  002C82  0100               	movlb	0
   252  002C84  EF61  F011         	goto	_main	;jump to C main() function
   253                           tblptru	equ	0xFF8
   254                           postinc0	equ	0xFEE
   255                           wreg	equ	0xFE8
   256                           
   257                           	psect	bssBANK0
   258  000081                     __pbssBANK0:
   259                           	opt stack 0
   260  000081                     _LCD_Buffer:
   261                           	opt stack 0
   262  000081                     	ds	32
   263                           tblptru	equ	0xFF8
   264                           postinc0	equ	0xFEE
   265                           wreg	equ	0xFE8
   266                           
   267                           	psect	cstackBANK0
   268  000060                     __pcstackBANK0:
   269                           	opt stack 0
   270  000060                     _sprintf$1131:
   271                           	opt stack 0
   272                           
   273                           ; 3 bytes @ 0x0
   274  000060                     	ds	3
   275  000063                     _sprintf$518:
   276                           	opt stack 0
   277                           
   278                           ; 4 bytes @ 0x3
   279  000063                     	ds	4
   280  000067                     sprintf@vd:
   281                           	opt stack 0
   282                           
   283                           ; 2 bytes @ 0x7
   284  000067                     	ds	2
   285  000069                     sprintf@vd_520:
   286                           	opt stack 0
   287                           
   288                           ; 2 bytes @ 0x9
   289  000069                     	ds	2
   290  00006B                     sprintf@ap:
   291                           	opt stack 0
   292                           
   293                           ; 2 bytes @ 0xB
   294  00006B                     	ds	2
   295  00006D                     sprintf@integ:
   296                           	opt stack 0
   297                           
   298                           ; 3 bytes @ 0xD
   299  00006D                     	ds	3
   300  000070                     sprintf@_val:
   301                           	opt stack 0
   302                           
   303                           ; 5 bytes @ 0x10
   304  000070                     	ds	5
   305  000075                     sprintf@flag:
   306                           	opt stack 0
   307                           
   308                           ; 2 bytes @ 0x15
   309  000075                     	ds	2
   310  000077                     sprintf@exp:
   311                           	opt stack 0
   312                           
   313                           ; 2 bytes @ 0x17
   314  000077                     	ds	2
   315  000079                     sprintf@width:
   316                           	opt stack 0
   317                           
   318                           ; 2 bytes @ 0x19
   319  000079                     	ds	2
   320  00007B                     sprintf@fval:
   321                           	opt stack 0
   322                           
   323                           ; 3 bytes @ 0x1B
   324  00007B                     	ds	3
   325  00007E                     sprintf@prec:
   326                           	opt stack 0
   327                           
   328                           ; 2 bytes @ 0x1E
   329  00007E                     	ds	2
   330  000080                     sprintf@c:
   331                           	opt stack 0
   332                           
   333                           ; 1 bytes @ 0x20
   334  000080                     	ds	1
   335                           tblptru	equ	0xFF8
   336                           postinc0	equ	0xFEE
   337                           wreg	equ	0xFE8
   338                           
   339                           	psect	cstackCOMRAM
   340  000001                     __pcstackCOMRAM:
   341                           	opt stack 0
   342  000001                     ?_isdigit:
   343                           	opt stack 0
   344  000001                     ?_Lcd_Port:
   345                           	opt stack 0
   346  000001                     ?___ftge:
   347                           	opt stack 0
   348  000001                     ?___awmod:
   349                           	opt stack 0
   350  000001                     ?___lwdiv:
   351                           	opt stack 0
   352  000001                     ?___lwmod:
   353                           	opt stack 0
   354  000001                     ?___ftpack:
   355                           	opt stack 0
   356  000001                     ?___ftneg:
   357                           	opt stack 0
   358  000001                     ?__tdiv_to_l_:
   359                           	opt stack 0
   360  000001                     ?__div_to_l_:
   361                           	opt stack 0
   362  000001                     ?___lldiv:
   363                           	opt stack 0
   364  000001                     Lcd_Port@a:
   365                           	opt stack 0
   366  000001                     isdigit@c:
   367                           	opt stack 0
   368  000001                     ___awmod@dividend:
   369                           	opt stack 0
   370  000001                     ___lwdiv@dividend:
   371                           	opt stack 0
   372  000001                     ___lwmod@dividend:
   373                           	opt stack 0
   374  000001                     __div_to_l_@f1:
   375                           	opt stack 0
   376  000001                     ___ftpack@arg:
   377                           	opt stack 0
   378  000001                     __tdiv_to_l_@f1:
   379                           	opt stack 0
   380  000001                     ___ftge@ff1:
   381                           	opt stack 0
   382  000001                     ___ftneg@f1:
   383                           	opt stack 0
   384  000001                     ___lldiv@dividend:
   385                           	opt stack 0
   386                           
   387                           ; 4 bytes @ 0x0
   388  000001                     	ds	1
   389  000002                     ??_isdigit:
   390  000002                     ?_Lcd_Cmd:
   391                           	opt stack 0
   392  000002                     ?_lcd_write_char:
   393                           	opt stack 0
   394  000002                     Lcd_Cmd@a:
   395                           	opt stack 0
   396  000002                     lcd_write_char@a:
   397                           	opt stack 0
   398                           
   399                           ; 1 bytes @ 0x1
   400  000002                     	ds	1
   401  000003                     ??_Lcd_Cmd:
   402  000003                     lcd_write_char@temp:
   403                           	opt stack 0
   404  000003                     _isdigit$793:
   405                           	opt stack 0
   406  000003                     ___awmod@divisor:
   407                           	opt stack 0
   408  000003                     ___lwdiv@divisor:
   409                           	opt stack 0
   410  000003                     ___lwmod@divisor:
   411                           	opt stack 0
   412                           
   413                           ; 2 bytes @ 0x2
   414  000003                     	ds	1
   415  000004                     ?_lcd_gotoxy:
   416                           	opt stack 0
   417  000004                     ??_lcd_init:
   418  000004                     lcd_gotoxy@a:
   419                           	opt stack 0
   420  000004                     lcd_write_char@y:
   421                           	opt stack 0
   422  000004                     ___ftpack@exp:
   423                           	opt stack 0
   424  000004                     __div_to_l_@f2:
   425                           	opt stack 0
   426  000004                     __tdiv_to_l_@f2:
   427                           	opt stack 0
   428  000004                     ___ftge@ff2:
   429                           	opt stack 0
   430                           
   431                           ; 3 bytes @ 0x3
   432  000004                     	ds	1
   433  000005                     ?_lcd_putc:
   434                           	opt stack 0
   435  000005                     ??___awmod:
   436  000005                     ??___lwdiv:
   437  000005                     ??___lwmod:
   438  000005                     lcd_gotoxy@b:
   439                           	opt stack 0
   440  000005                     ___ftpack@sign:
   441                           	opt stack 0
   442  000005                     lcd_putc@a:
   443                           	opt stack 0
   444  000005                     ___lldiv@divisor:
   445                           	opt stack 0
   446                           
   447                           ; 4 bytes @ 0x4
   448  000005                     	ds	1
   449  000006                     ??___ftpack:
   450  000006                     lcd_gotoxy@z:
   451                           	opt stack 0
   452  000006                     ___awmod@counter:
   453                           	opt stack 0
   454  000006                     ___lwmod@counter:
   455                           	opt stack 0
   456  000006                     ___lwdiv@quotient:
   457                           	opt stack 0
   458                           
   459                           ; 2 bytes @ 0x5
   460  000006                     	ds	1
   461  000007                     ??__tdiv_to_l_:
   462  000007                     ??__div_to_l_:
   463  000007                     ??___ftge:
   464  000007                     lcd_gotoxy@y:
   465                           	opt stack 0
   466  000007                     ___awmod@sign:
   467                           	opt stack 0
   468  000007                     lcd_putc@i:
   469                           	opt stack 0
   470                           
   471                           ; 2 bytes @ 0x6
   472  000007                     	ds	1
   473  000008                     ?___awdiv:
   474                           	opt stack 0
   475  000008                     lcd_gotoxy@temp:
   476                           	opt stack 0
   477  000008                     ___lwdiv@counter:
   478                           	opt stack 0
   479  000008                     ___awdiv@dividend:
   480                           	opt stack 0
   481  000008                     __div_to_l_@quot:
   482                           	opt stack 0
   483                           
   484                           ; 4 bytes @ 0x7
   485  000008                     	ds	1
   486  000009                     ??___lldiv:
   487  000009                     ?_Obtener_Distancia:
   488                           	opt stack 0
   489  000009                     ?___ftadd:
   490                           	opt stack 0
   491  000009                     ?___awtoft:
   492                           	opt stack 0
   493  000009                     ?___lltoft:
   494                           	opt stack 0
   495  000009                     ___awtoft@c:
   496                           	opt stack 0
   497  000009                     ___ftadd@f1:
   498                           	opt stack 0
   499  000009                     ___lltoft@c:
   500                           	opt stack 0
   501                           
   502                           ; 4 bytes @ 0x8
   503  000009                     	ds	1
   504  00000A                     ___awdiv@divisor:
   505                           	opt stack 0
   506  00000A                     ___lldiv@quotient:
   507                           	opt stack 0
   508                           
   509                           ; 4 bytes @ 0x9
   510  00000A                     	ds	1
   511  00000B                     Obtener_Distancia@Timer_1:
   512                           	opt stack 0
   513                           
   514                           ; 2 bytes @ 0xA
   515  00000B                     	ds	1
   516  00000C                     ??___awdiv:
   517  00000C                     ??___awtoft:
   518  00000C                     __div_to_l_@cntr:
   519                           	opt stack 0
   520  00000C                     ___ftadd@f2:
   521                           	opt stack 0
   522  00000C                     __tdiv_to_l_@quot:
   523                           	opt stack 0
   524                           
   525                           ; 4 bytes @ 0xB
   526  00000C                     	ds	1
   527  00000D                     ??___lltoft:
   528  00000D                     ___awdiv@counter:
   529                           	opt stack 0
   530  00000D                     ___awtoft@sign:
   531                           	opt stack 0
   532  00000D                     __div_to_l_@exp1:
   533                           	opt stack 0
   534  00000D                     Obtener_Distancia@Distancia:
   535                           	opt stack 0
   536                           
   537                           ; 2 bytes @ 0xC
   538  00000D                     	ds	1
   539  00000E                     ___awdiv@sign:
   540                           	opt stack 0
   541  00000E                     ___lldiv@counter:
   542                           	opt stack 0
   543                           
   544                           ; 1 bytes @ 0xD
   545  00000E                     	ds	1
   546  00000F                     ??___ftadd:
   547  00000F                     ?___llmod:
   548                           	opt stack 0
   549  00000F                     Obtener_Distancia@Duracion:
   550                           	opt stack 0
   551  00000F                     ___awdiv@quotient:
   552                           	opt stack 0
   553  00000F                     ___llmod@dividend:
   554                           	opt stack 0
   555                           
   556                           ; 4 bytes @ 0xE
   557  00000F                     	ds	1
   558  000010                     __tdiv_to_l_@cntr:
   559                           	opt stack 0
   560                           
   561                           ; 1 bytes @ 0xF
   562  000010                     	ds	1
   563  000011                     ?___wmul:
   564                           	opt stack 0
   565  000011                     __tdiv_to_l_@exp1:
   566                           	opt stack 0
   567  000011                     ___lltoft@exp:
   568                           	opt stack 0
   569  000011                     ___wmul@multiplier:
   570                           	opt stack 0
   571                           
   572                           ; 2 bytes @ 0x10
   573  000011                     	ds	2
   574  000013                     ___wmul@multiplicand:
   575                           	opt stack 0
   576  000013                     ___llmod@divisor:
   577                           	opt stack 0
   578                           
   579                           ; 4 bytes @ 0x12
   580  000013                     	ds	1
   581  000014                     ___ftadd@sign:
   582                           	opt stack 0
   583                           
   584                           ; 1 bytes @ 0x13
   585  000014                     	ds	1
   586  000015                     ___ftadd@exp2:
   587                           	opt stack 0
   588  000015                     ___wmul@product:
   589                           	opt stack 0
   590                           
   591                           ; 2 bytes @ 0x14
   592  000015                     	ds	1
   593  000016                     ___ftadd@exp1:
   594                           	opt stack 0
   595                           
   596                           ; 1 bytes @ 0x15
   597  000016                     	ds	1
   598  000017                     ??___llmod:
   599  000017                     ?___ftsub:
   600                           	opt stack 0
   601  000017                     ?___fttol:
   602                           	opt stack 0
   603  000017                     ___ftsub@f1:
   604                           	opt stack 0
   605  000017                     ___fttol@f1:
   606                           	opt stack 0
   607                           
   608                           ; 3 bytes @ 0x16
   609  000017                     	ds	1
   610  000018                     ___llmod@counter:
   611                           	opt stack 0
   612                           
   613                           ; 1 bytes @ 0x17
   614  000018                     	ds	2
   615  00001A                     ___ftsub@f2:
   616                           	opt stack 0
   617                           
   618                           ; 3 bytes @ 0x19
   619  00001A                     	ds	1
   620  00001B                     ??___fttol:
   621                           
   622                           ; 0 bytes @ 0x1A
   623  00001B                     	ds	2
   624  00001D                     ?___asftsub:
   625                           	opt stack 0
   626  00001D                     ___asftsub@f1p:
   627                           	opt stack 0
   628                           
   629                           ; 2 bytes @ 0x1C
   630  00001D                     	ds	2
   631  00001F                     ___asftsub@f2:
   632                           	opt stack 0
   633                           
   634                           ; 3 bytes @ 0x1E
   635  00001F                     	ds	1
   636  000020                     ___fttol@sign1:
   637                           	opt stack 0
   638                           
   639                           ; 1 bytes @ 0x1F
   640  000020                     	ds	1
   641  000021                     ___fttol@lval:
   642                           	opt stack 0
   643                           
   644                           ; 4 bytes @ 0x20
   645  000021                     	ds	1
   646  000022                     
   647                           ; 0 bytes @ 0x21
   648  000022                     	ds	3
   649  000025                     ___fttol@exp1:
   650                           	opt stack 0
   651                           
   652                           ; 1 bytes @ 0x24
   653  000025                     	ds	1
   654  000026                     ?___ftmul:
   655                           	opt stack 0
   656  000026                     ___ftmul@f1:
   657                           	opt stack 0
   658                           
   659                           ; 3 bytes @ 0x25
   660  000026                     	ds	3
   661  000029                     ___ftmul@f2:
   662                           	opt stack 0
   663                           
   664                           ; 3 bytes @ 0x28
   665  000029                     	ds	3
   666  00002C                     ??___ftmul:
   667                           
   668                           ; 0 bytes @ 0x2B
   669  00002C                     	ds	5
   670  000031                     ___ftmul@exp:
   671                           	opt stack 0
   672                           
   673                           ; 1 bytes @ 0x30
   674  000031                     	ds	1
   675  000032                     ___ftmul@f3_as_product:
   676                           	opt stack 0
   677                           
   678                           ; 3 bytes @ 0x31
   679  000032                     	ds	3
   680  000035                     ___ftmul@cntr:
   681                           	opt stack 0
   682                           
   683                           ; 1 bytes @ 0x34
   684  000035                     	ds	1
   685  000036                     ___ftmul@sign:
   686                           	opt stack 0
   687                           
   688                           ; 1 bytes @ 0x35
   689  000036                     	ds	1
   690  000037                     ?___ftdiv:
   691                           	opt stack 0
   692  000037                     ?_fround:
   693                           	opt stack 0
   694  000037                     ?_scale:
   695                           	opt stack 0
   696  000037                     ?___asftmul:
   697                           	opt stack 0
   698  000037                     fround@prec:
   699                           	opt stack 0
   700  000037                     scale@scl:
   701                           	opt stack 0
   702  000037                     ___asftmul@f1p:
   703                           	opt stack 0
   704  000037                     ___ftdiv@f1:
   705                           	opt stack 0
   706                           
   707                           ; 3 bytes @ 0x36
   708  000037                     	ds	2
   709  000039                     ___asftmul@f2:
   710                           	opt stack 0
   711                           
   712                           ; 3 bytes @ 0x38
   713  000039                     	ds	1
   714  00003A                     ??_fround:
   715  00003A                     ??_scale:
   716  00003A                     ___ftdiv@f2:
   717                           	opt stack 0
   718                           
   719                           ; 3 bytes @ 0x39
   720  00003A                     	ds	2
   721  00003C                     
   722                           ; 0 bytes @ 0x3B
   723  00003C                     	ds	1
   724  00003D                     ??___ftdiv:
   725                           
   726                           ; 0 bytes @ 0x3C
   727  00003D                     	ds	3
   728  000040                     _fround$1129:
   729                           	opt stack 0
   730  000040                     _scale$1130:
   731                           	opt stack 0
   732                           
   733                           ; 3 bytes @ 0x3F
   734  000040                     	ds	2
   735  000042                     ___ftdiv@cntr:
   736                           	opt stack 0
   737                           
   738                           ; 1 bytes @ 0x41
   739  000042                     	ds	1
   740  000043                     ___ftdiv@f3:
   741                           	opt stack 0
   742  000043                     _fround$1128:
   743                           	opt stack 0
   744                           
   745                           ; 3 bytes @ 0x42
   746  000043                     	ds	3
   747  000046                     ?___asftadd:
   748                           	opt stack 0
   749  000046                     ___ftdiv@exp:
   750                           	opt stack 0
   751  000046                     ___asftadd@f1p:
   752                           	opt stack 0
   753                           
   754                           ; 2 bytes @ 0x45
   755  000046                     	ds	1
   756  000047                     ___ftdiv@sign:
   757                           	opt stack 0
   758                           
   759                           ; 1 bytes @ 0x46
   760  000047                     	ds	1
   761  000048                     ?_Read_LDR:
   762                           	opt stack 0
   763  000048                     ___asftadd@f2:
   764                           	opt stack 0
   765                           
   766                           ; 3 bytes @ 0x47
   767  000048                     	ds	3
   768  00004B                     ??_Read_LDR:
   769  00004B                     ?_sprintf:
   770                           	opt stack 0
   771  00004B                     sprintf@sp:
   772                           	opt stack 0
   773                           
   774                           ; 2 bytes @ 0x4A
   775  00004B                     	ds	2
   776  00004D                     sprintf@f:
   777                           	opt stack 0
   778                           
   779                           ; 2 bytes @ 0x4C
   780  00004D                     	ds	2
   781  00004F                     Read_LDR@analog_reading:
   782                           	opt stack 0
   783                           
   784                           ; 3 bytes @ 0x4E
   785  00004F                     	ds	3
   786  000052                     ??_sprintf:
   787                           
   788                           ; 0 bytes @ 0x51
   789  000052                     	ds	6
   790  000058                     ??_main:
   791                           
   792                           ; 0 bytes @ 0x57
   793  000058                     	ds	2
   794  00005A                     main@LDR_value:
   795                           	opt stack 0
   796                           
   797                           ; 3 bytes @ 0x59
   798  00005A                     	ds	3
   799  00005D                     main@Distancia:
   800                           	opt stack 0
   801                           
   802                           ; 2 bytes @ 0x5C
   803  00005D                     	ds	2
   804                           tblptru	equ	0xFF8
   805                           postinc0	equ	0xFEE
   806                           wreg	equ	0xFE8
   807                           
   808 ;;
   809 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   810 ;;
   811 ;; *************** function _main *****************
   812 ;; Defined at:
   813 ;;		line 50 in file "main.c"
   814 ;; Parameters:    Size  Location     Type
   815 ;;		None
   816 ;; Auto vars:     Size  Location     Type
   817 ;;  LDR_value       3   89[COMRAM] float 
   818 ;;  Distancia       2   92[COMRAM] unsigned int 
   819 ;; Return value:  Size  Location     Type
   820 ;;		None               void
   821 ;; Registers used:
   822 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   823 ;; Tracked objects:
   824 ;;		On entry : 0/0
   825 ;;		On exit  : 0/0
   826 ;;		Unchanged: 0/0
   827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   828 ;;      Params:         0       0       0       0       0       0       0       0       0
   829 ;;      Locals:         5       0       0       0       0       0       0       0       0
   830 ;;      Temps:          2       0       0       0       0       0       0       0       0
   831 ;;      Totals:         7       0       0       0       0       0       0       0       0
   832 ;;Total ram usage:        7 bytes
   833 ;; Hardware stack levels required when called:    5
   834 ;; This function calls:
   835 ;;		_lcd_gotoxy
   836 ;;		_lcd_init
   837 ;;		_lcd_putc
   838 ;;		_Configuracion_Registros
   839 ;;		_Timer1_Init
   840 ;;		_Init_AD
   841 ;;		_Obtener_Distancia
   842 ;;		_Read_LDR
   843 ;;		_sprintf
   844 ;; This function is called by:
   845 ;;		Startup code after reset
   846 ;; This function uses a non-reentrant model
   847 ;;
   848                           
   849                           	psect	text0
   850  0022C2                     __ptext0:
   851                           	opt stack 0
   852  0022C2                     _main:
   853                           	opt stack 26
   854                           
   855                           ;main.c: 51: uint16_t Distancia;
   856                           ;main.c: 52: float LDR_value;
   857                           ;main.c: 54: Configuracion_Registros();
   858                           
   859                           ; BSR set to: 0
   860                           ;incstack = 0
   861                           ;incstack = 0
   862  0022C2  EC58  F016         	call	_Configuracion_Registros	;wreg free
   863                           
   864                           ;main.c: 55: Timer1_Init();
   865  0022C6  EC4E  F016         	call	_Timer1_Init	;wreg free
   866                           
   867                           ;main.c: 56: lcd_init();
   868  0022CA  EC77  F012         	call	_lcd_init	;wreg free
   869                           
   870                           ;main.c: 57: Init_AD();
   871  0022CE  EC44  F016         	call	_Init_AD	;wreg free
   872  0022D2                     l4506:
   873                           
   874                           ;main.c: 60: {
   875                           ;main.c: 61: Distancia=Obtener_Distancia();
   876  0022D2  ECA6  F013         	call	_Obtener_Distancia	;wreg free
   877  0022D6  C009  F05D         	movff	?_Obtener_Distancia,main@Distancia
   878  0022DA  C00A  F05E         	movff	?_Obtener_Distancia+1,main@Distancia+1
   879                           
   880                           ;main.c: 62: LDR_value=Read_LDR();
   881  0022DE  ECBE  F011         	call	_Read_LDR	;wreg free
   882  0022E2  C04A  F05C         	movff	?_Read_LDR+2,main@LDR_value+2
   883  0022E6  C049  F05B         	movff	?_Read_LDR+1,main@LDR_value+1
   884  0022EA  C048  F05A         	movff	?_Read_LDR,main@LDR_value
   885                           
   886                           ;main.c: 63: lcd_gotoxy(1,1);
   887  0022EE  6E58               	movwf	??_main& (0+255),c
   888  0022F0  0E01               	movlw	1
   889  0022F2  6E04               	movwf	?_lcd_gotoxy,c
   890  0022F4  5058               	movf	??_main& (0+255),w,c
   891  0022F6  6E59               	movwf	(??_main+1)& (0+255),c
   892  0022F8  0E01               	movlw	1
   893  0022FA  6E05               	movwf	?_lcd_gotoxy+1,c
   894  0022FC  5059               	movf	(??_main+1)& (0+255),w,c
   895  0022FE  ECB5  F014         	call	_lcd_gotoxy	;wreg free
   896                           
   897                           ;main.c: 64: sprintf(LCD_Buffer,"LDR: %.2f", LDR_value);
   898  002302  0100               	movlb	0	; () banked
   899  002304  0E00               	movlw	high _LCD_Buffer
   900  002306  6E4C               	movwf	?_sprintf+1,c
   901  002308  0100               	movlb	0	; () banked
   902  00230A  0E81               	movlw	low _LCD_Buffer
   903  00230C  6E4B               	movwf	?_sprintf,c
   904  00230E  0E08               	movlw	high STR_1
   905  002310  6E4E               	movwf	?_sprintf+3,c
   906  002312  0E88               	movlw	low STR_1
   907  002314  6E4D               	movwf	?_sprintf+2,c
   908  002316  C05A  F04F         	movff	main@LDR_value,?_sprintf+4
   909  00231A  C05B  F050         	movff	main@LDR_value+1,?_sprintf+5
   910  00231E  C05C  F051         	movff	main@LDR_value+2,?_sprintf+6
   911  002322  EC4A  F004         	call	_sprintf	;wreg free
   912                           
   913                           ;main.c: 65: lcd_putc(LCD_Buffer);
   914  002326  0100               	movlb	0	; () banked
   915  002328  0E00               	movlw	high _LCD_Buffer
   916  00232A  6E06               	movwf	?_lcd_putc+1,c
   917  00232C  0100               	movlb	0	; () banked
   918  00232E  0E81               	movlw	low _LCD_Buffer
   919  002330  6E05               	movwf	?_lcd_putc,c
   920  002332  ECD4  F015         	call	_lcd_putc	;wreg free
   921                           
   922                           ;main.c: 66: sprintf(LCD_Buffer,"Distancia: %03dcm", Distancia);
   923  002336  0100               	movlb	0	; () banked
   924  002338  0E00               	movlw	high _LCD_Buffer
   925  00233A  6E4C               	movwf	?_sprintf+1,c
   926  00233C  0100               	movlb	0	; () banked
   927  00233E  0E81               	movlw	low _LCD_Buffer
   928  002340  6E4B               	movwf	?_sprintf,c
   929  002342  0E08               	movlw	high STR_2
   930  002344  6E4E               	movwf	?_sprintf+3,c
   931  002346  0E76               	movlw	low STR_2
   932  002348  6E4D               	movwf	?_sprintf+2,c
   933  00234A  C05D  F04F         	movff	main@Distancia,?_sprintf+4
   934  00234E  C05E  F050         	movff	main@Distancia+1,?_sprintf+5
   935  002352  EC4A  F004         	call	_sprintf	;wreg free
   936                           
   937                           ;main.c: 67: lcd_gotoxy(2,1);
   938  002356  6E58               	movwf	??_main& (0+255),c
   939  002358  0E02               	movlw	2
   940  00235A  6E04               	movwf	?_lcd_gotoxy,c
   941  00235C  5058               	movf	??_main& (0+255),w,c
   942  00235E  6E59               	movwf	(??_main+1)& (0+255),c
   943  002360  0E01               	movlw	1
   944  002362  6E05               	movwf	?_lcd_gotoxy+1,c
   945  002364  5059               	movf	(??_main+1)& (0+255),w,c
   946  002366  ECB5  F014         	call	_lcd_gotoxy	;wreg free
   947                           
   948                           ;main.c: 68: lcd_putc(LCD_Buffer);
   949  00236A  0100               	movlb	0	; () banked
   950  00236C  0E00               	movlw	high _LCD_Buffer
   951  00236E  6E06               	movwf	?_lcd_putc+1,c
   952  002370  0100               	movlb	0	; () banked
   953  002372  0E81               	movlw	low _LCD_Buffer
   954  002374  6E05               	movwf	?_lcd_putc,c
   955  002376  ECD4  F015         	call	_lcd_putc	;wreg free
   956  00237A  D7AB               	goto	l4506
   957  00237C                     __end_of_main:
   958                           	opt stack 0
   959                           tblptru	equ	0xFF8
   960                           postinc0	equ	0xFEE
   961                           wreg	equ	0xFE8
   962                           
   963 ;; *************** function _sprintf *****************
   964 ;; Defined at:
   965 ;;		line 493 in file "E:\Program Files\Microchip\xc8\v1.20\sources\common\doprnt.c"
   966 ;; Parameters:    Size  Location     Type
   967 ;;  sp              2   74[COMRAM] PTR unsigned char 
   968 ;;		 -> LCD_Buffer(32), 
   969 ;;  f               2   76[COMRAM] PTR const unsigned char 
   970 ;;		 -> STR_2(18), STR_1(10), 
   971 ;; Auto vars:     Size  Location     Type
   972 ;;  vd              2    7[BANK0 ] unsigned int 
   973 ;;  vd              2    9[BANK0 ] unsigned int 
   974 ;;  _val            5   16[BANK0 ] struct .
   975 ;;  fval            3   27[BANK0 ] struct .
   976 ;;  integ           3   13[BANK0 ] struct .
   977 ;;  ival            3    0        struct .
   978 ;;  prec            2   30[BANK0 ] int 
   979 ;;  width           2   25[BANK0 ] int 
   980 ;;  exp             2   23[BANK0 ] int 
   981 ;;  flag            2   21[BANK0 ] unsigned short 
   982 ;;  ap              2   11[BANK0 ] PTR void [1]
   983 ;;		 -> ?_sprintf(2), 
   984 ;;  c               1   32[BANK0 ] char 
   985 ;;  d               1    0        unsigned char 
   986 ;; Return value:  Size  Location     Type
   987 ;;                  2   74[COMRAM] int 
   988 ;; Registers used:
   989 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   990 ;; Tracked objects:
   991 ;;		On entry : 0/0
   992 ;;		On exit  : 0/0
   993 ;;		Unchanged: 0/0
   994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   995 ;;      Params:         7       0       0       0       0       0       0       0       0
   996 ;;      Locals:         0      33       0       0       0       0       0       0       0
   997 ;;      Temps:          6       0       0       0       0       0       0       0       0
   998 ;;      Totals:        13      33       0       0       0       0       0       0       0
   999 ;;Total ram usage:       46 bytes
  1000 ;; Hardware stack levels used:    1
  1001 ;; Hardware stack levels required when called:    4
  1002 ;; This function calls:
  1003 ;;		_fround
  1004 ;;		_scale
  1005 ;;		_isdigit
  1006 ;;		__tdiv_to_l_
  1007 ;;		__div_to_l_
  1008 ;;		___asftadd
  1009 ;;		___asftmul
  1010 ;;		___ftmul
  1011 ;;		___asftsub
  1012 ;;		___awdiv
  1013 ;;		___ftge
  1014 ;;		___ftneg
  1015 ;;		___fttol
  1016 ;;		___lldiv
  1017 ;;		___llmod
  1018 ;;		___lltoft
  1019 ;;		___lwmod
  1020 ;;		___wmul
  1021 ;; This function is called by:
  1022 ;;		_main
  1023 ;; This function uses a non-reentrant model
  1024 ;;
  1025                           
  1026                           	psect	text1
  1027  000894                     __ptext1:
  1028                           	opt stack 0
  1029  000894                     _sprintf:
  1030                           	opt stack 26
  1031                           
  1032                           ;doprnt.c: 494: va_list ap;
  1033                           ;doprnt.c: 499: signed char c;
  1034                           ;doprnt.c: 501: int width;
  1035                           ;doprnt.c: 504: int prec;
  1036                           ;doprnt.c: 508: unsigned short flag;
  1037                           ;doprnt.c: 515: char d;
  1038                           ;doprnt.c: 516: double fval, integ;
  1039                           ;doprnt.c: 517: int exp;
  1040                           ;doprnt.c: 518: double ival;
  1041                           ;doprnt.c: 519: union {
  1042                           ;doprnt.c: 520: unsigned long _val;
  1043                           ;doprnt.c: 521: struct {
  1044                           ;doprnt.c: 522: const char * _cp;
  1045                           ;doprnt.c: 523: unsigned _len;
  1046                           ;doprnt.c: 524: } _str;
  1047                           ;doprnt.c: 525: } _val;
  1048                           ;doprnt.c: 542: *ap = __va_start();
  1049                           
  1050                           ;incstack = 0
  1051                           ;incstack = 0
  1052  000894  0E00               	movlw	high (?_sprintf+4)
  1053  000896  0100               	movlb	0	; () banked
  1054  000898  0100               	movlb	0	; () banked
  1055  00089A  6F6C               	movwf	(sprintf@ap+1)& (0+255),b
  1056  00089C  0E4F               	movlw	low (?_sprintf+4)
  1057  00089E  0100               	movlb	0	; () banked
  1058  0008A0  6F6B               	movwf	sprintf@ap& (0+255),b
  1059                           
  1060                           ;doprnt.c: 545: while(c = *f++) {
  1061  0008A2  EF7C  F00A         	goto	l4492
  1062  0008A6                     l4168:
  1063                           
  1064                           ; BSR set to: 0
  1065                           ;doprnt.c: 547: if(c != '%')
  1066  0008A6  0100               	movlb	0	; () banked
  1067  0008A8  0100               	movlb	0	; () banked
  1068  0008AA  5180               	movf	sprintf@c& (0+255),w,b
  1069  0008AC  0A25               	xorlw	37
  1070  0008AE  B4D8               	btfsc	status,2,c
  1071  0008B0  D00B               	goto	l4174
  1072                           
  1073                           ; BSR set to: 0
  1074                           ;doprnt.c: 549: {
  1075                           ;doprnt.c: 550: ((*sp++ = (c)));
  1076  0008B2  C04B  FFD9         	movff	sprintf@sp,fsr2l
  1077  0008B6  C04C  FFDA         	movff	sprintf@sp+1,fsr2h
  1078  0008BA  0100               	movlb	0	; () banked
  1079  0008BC  C080  FFDF         	movff	sprintf@c,indf2
  1080                           
  1081                           ; BSR set to: 0
  1082  0008C0  4A4B               	infsnz	sprintf@sp,f,c
  1083  0008C2  2A4C               	incf	sprintf@sp+1,f,c
  1084                           
  1085                           ;doprnt.c: 551: continue;
  1086  0008C4  EF7C  F00A         	goto	l4492
  1087  0008C8                     l4174:
  1088                           
  1089                           ; BSR set to: 0
  1090                           ;doprnt.c: 552: }
  1091                           ;doprnt.c: 555: width = 0;
  1092  0008C8  0E00               	movlw	0
  1093  0008CA  0100               	movlb	0	; () banked
  1094  0008CC  0100               	movlb	0	; () banked
  1095  0008CE  6F7A               	movwf	(sprintf@width+1)& (0+255),b
  1096  0008D0  0E00               	movlw	0
  1097  0008D2  0100               	movlb	0	; () banked
  1098  0008D4  6F79               	movwf	sprintf@width& (0+255),b
  1099                           
  1100                           ;doprnt.c: 557: flag = 0;
  1101  0008D6  0E00               	movlw	0
  1102  0008D8  0100               	movlb	0	; () banked
  1103  0008DA  0100               	movlb	0	; () banked
  1104  0008DC  6F76               	movwf	(sprintf@flag+1)& (0+255),b
  1105  0008DE  0E00               	movlw	0
  1106  0008E0  0100               	movlb	0	; () banked
  1107  0008E2  6F75               	movwf	sprintf@flag& (0+255),b
  1108  0008E4  D005               	goto	l4180
  1109  0008E6                     l4176:
  1110                           
  1111                           ;doprnt.c: 589: flag |= 0x04;
  1112  0008E6  0100               	movlb	0	; () banked
  1113  0008E8  0100               	movlb	0	; () banked
  1114  0008EA  8575               	bsf	sprintf@flag& (0+255),2,b
  1115                           
  1116                           ;doprnt.c: 590: f++;
  1117  0008EC  4A4D               	infsnz	sprintf@f,f,c
  1118  0008EE  2A4E               	incf	sprintf@f+1,f,c
  1119  0008F0                     l4180:
  1120  0008F0  C04D  FFF6         	movff	sprintf@f,tblptrl
  1121  0008F4  C04E  FFF7         	movff	sprintf@f+1,tblptrh
  1122  0008F8  0008               	tblrd		*
  1123  0008FA  50F5               	movf	tablat,w,c
  1124                           
  1125                           ; Switch size 1, requested type "space"
  1126                           ; Number of cases is 1, Range of values is 48 to 48
  1127                           ; switch strategies available:
  1128                           ; Name         Instructions Cycles
  1129                           ; simple_byte            4     3 (average)
  1130                           ;	Chosen strategy is simple_byte
  1131  0008FC  0A30               	xorlw	48	; case 48
  1132  0008FE  B4D8               	btfsc	status,2,c
  1133  000900  D7F2               	goto	l4176
  1134                           
  1135                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
  1136                           
  1137                           ;doprnt.c: 595: }
  1138                           
  1139                           ;doprnt.c: 594: break;
  1140  000902  C04D  FFF6         	movff	sprintf@f,tblptrl
  1141  000906  C04E  FFF7         	movff	sprintf@f+1,tblptrh
  1142  00090A  0008               	tblrd		*
  1143  00090C  CFF5 F001          	movff	tablat,?_isdigit
  1144  000910  EC17  F016         	call	_isdigit	;wreg free
  1145  000914  A0D8               	btfss	status,0,c
  1146  000916  D037               	goto	l4194
  1147                           
  1148                           ;doprnt.c: 607: width = 0;
  1149  000918  0E00               	movlw	0
  1150  00091A  0100               	movlb	0	; () banked
  1151  00091C  0100               	movlb	0	; () banked
  1152  00091E  6F7A               	movwf	(sprintf@width+1)& (0+255),b
  1153  000920  0E00               	movlw	0
  1154  000922  0100               	movlb	0	; () banked
  1155  000924  6F79               	movwf	sprintf@width& (0+255),b
  1156  000926                     l4186:
  1157                           
  1158                           ;doprnt.c: 609: width *= 10;
  1159  000926  C079  F011         	movff	sprintf@width,?___wmul
  1160  00092A  C07A  F012         	movff	sprintf@width+1,?___wmul+1
  1161  00092E  0E00               	movlw	0
  1162  000930  6E14               	movwf	?___wmul+3,c
  1163  000932  0E0A               	movlw	10
  1164  000934  6E13               	movwf	?___wmul+2,c
  1165  000936  EC7F  F015         	call	___wmul	;wreg free
  1166  00093A  C011  F079         	movff	?___wmul,sprintf@width
  1167  00093E  C012  F07A         	movff	?___wmul+1,sprintf@width+1
  1168                           
  1169                           ;doprnt.c: 610: width += *f++ - '0';
  1170  000942  C04D  FFF6         	movff	sprintf@f,tblptrl
  1171  000946  C04E  FFF7         	movff	sprintf@f+1,tblptrh
  1172  00094A  0008               	tblrd		*
  1173  00094C  CFF5 F052          	movff	tablat,??_sprintf
  1174  000950  0ED0               	movlw	208
  1175  000952  2452               	addwf	??_sprintf,w,c
  1176  000954  6E53               	movwf	(??_sprintf+1)& (0+255),c
  1177  000956  6A54               	clrf	(??_sprintf+2)& (0+255),c
  1178  000958  0EFF               	movlw	255
  1179  00095A  2254               	addwfc	(??_sprintf+2)& (0+255),f,c
  1180  00095C  5053               	movf	??_sprintf+1,w,c
  1181  00095E  0100               	movlb	0	; () banked
  1182  000960  0100               	movlb	0	; () banked
  1183  000962  2779               	addwf	sprintf@width& (0+255),f,b
  1184  000964  5054               	movf	??_sprintf+2,w,c
  1185  000966  0100               	movlb	0	; () banked
  1186  000968  0100               	movlb	0	; () banked
  1187  00096A  237A               	addwfc	(sprintf@width+1)& (0+255),f,b
  1188                           
  1189                           ; BSR set to: 0
  1190  00096C  4A4D               	infsnz	sprintf@f,f,c
  1191  00096E  2A4E               	incf	sprintf@f+1,f,c
  1192                           
  1193                           ; BSR set to: 0
  1194                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  1195  000970  C04D  FFF6         	movff	sprintf@f,tblptrl
  1196  000974  C04E  FFF7         	movff	sprintf@f+1,tblptrh
  1197  000978  0008               	tblrd		*
  1198  00097A  CFF5 F001          	movff	tablat,?_isdigit
  1199  00097E  EC17  F016         	call	_isdigit	;wreg free
  1200  000982  B0D8               	btfsc	status,0,c
  1201  000984  D7D0               	goto	l4186
  1202  000986                     l4194:
  1203                           
  1204                           ;doprnt.c: 617: }
  1205                           ;doprnt.c: 620: if(*f == '.') {
  1206  000986  C04D  FFF6         	movff	sprintf@f,tblptrl
  1207  00098A  C04E  FFF7         	movff	sprintf@f+1,tblptrh
  1208  00098E  0008               	tblrd		*
  1209  000990  50F5               	movf	tablat,w,c
  1210  000992  0A2E               	xorlw	46
  1211  000994  A4D8               	btfss	status,2,c
  1212  000996  D037               	goto	l4206
  1213                           
  1214                           ;doprnt.c: 621: flag |= 0x4000;
  1215  000998  0100               	movlb	0	; () banked
  1216  00099A  0100               	movlb	0	; () banked
  1217  00099C  8D76               	bsf	(sprintf@flag+1)& (0+255),6,b
  1218                           
  1219                           ;doprnt.c: 622: f++;
  1220  00099E  4A4D               	infsnz	sprintf@f,f,c
  1221  0009A0  2A4E               	incf	sprintf@f+1,f,c
  1222                           
  1223                           ; BSR set to: 0
  1224                           ;doprnt.c: 629: {
  1225                           ;doprnt.c: 630: prec = 0;
  1226  0009A2  0E00               	movlw	0
  1227  0009A4  0100               	movlb	0	; () banked
  1228  0009A6  0100               	movlb	0	; () banked
  1229  0009A8  6F7F               	movwf	(sprintf@prec+1)& (0+255),b
  1230  0009AA  0E00               	movlw	0
  1231  0009AC  0100               	movlb	0	; () banked
  1232  0009AE  6F7E               	movwf	sprintf@prec& (0+255),b
  1233                           
  1234                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
  1235  0009B0  D01E               	goto	l4204
  1236  0009B2                     l4200:
  1237                           
  1238                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
  1239  0009B2  C07E  F011         	movff	sprintf@prec,?___wmul
  1240  0009B6  C07F  F012         	movff	sprintf@prec+1,?___wmul+1
  1241  0009BA  0E00               	movlw	0
  1242  0009BC  6E14               	movwf	?___wmul+3,c
  1243  0009BE  0E0A               	movlw	10
  1244  0009C0  6E13               	movwf	?___wmul+2,c
  1245  0009C2  EC7F  F015         	call	___wmul	;wreg free
  1246  0009C6  C04D  FFF6         	movff	sprintf@f,tblptrl
  1247  0009CA  C04E  FFF7         	movff	sprintf@f+1,tblptrh
  1248  0009CE  0008               	tblrd		*
  1249  0009D0  50F5               	movf	tablat,w,c
  1250  0009D2  2611               	addwf	?___wmul,f,c
  1251  0009D4  0E00               	movlw	0
  1252  0009D6  2212               	addwfc	?___wmul+1,f,c
  1253  0009D8  0ED0               	movlw	208
  1254  0009DA  2411               	addwf	?___wmul,w,c
  1255  0009DC  0100               	movlb	0	; () banked
  1256  0009DE  0100               	movlb	0	; () banked
  1257  0009E0  6F7E               	movwf	sprintf@prec& (0+255),b
  1258  0009E2  0EFF               	movlw	255
  1259  0009E4  2012               	addwfc	?___wmul+1,w,c
  1260  0009E6  0100               	movlb	0	; () banked
  1261  0009E8  6F7F               	movwf	(sprintf@prec+1)& (0+255),b
  1262                           
  1263                           ; BSR set to: 0
  1264  0009EA  4A4D               	infsnz	sprintf@f,f,c
  1265  0009EC  2A4E               	incf	sprintf@f+1,f,c
  1266  0009EE                     l4204:
  1267                           
  1268                           ; BSR set to: 0
  1269  0009EE  C04D  FFF6         	movff	sprintf@f,tblptrl
  1270  0009F2  C04E  FFF7         	movff	sprintf@f+1,tblptrh
  1271  0009F6  0008               	tblrd		*
  1272  0009F8  CFF5 F001          	movff	tablat,?_isdigit
  1273  0009FC  EC17  F016         	call	_isdigit	;wreg free
  1274  000A00  A0D8               	btfss	status,0,c
  1275  000A02  D010               	goto	l4214
  1276  000A04  D7D6               	goto	l4200
  1277  000A06                     l4206:
  1278                           
  1279                           ;doprnt.c: 635: prec = 0;
  1280  000A06  0E00               	movlw	0
  1281  000A08  0100               	movlb	0	; () banked
  1282  000A0A  0100               	movlb	0	; () banked
  1283  000A0C  6F7F               	movwf	(sprintf@prec+1)& (0+255),b
  1284  000A0E  0E00               	movlw	0
  1285  000A10  0100               	movlb	0	; () banked
  1286  000A12  6F7E               	movwf	sprintf@prec& (0+255),b
  1287                           
  1288                           ; BSR set to: 0
  1289                           ;doprnt.c: 637: flag |= 0x1000;
  1290  000A14  0100               	movlb	0	; () banked
  1291  000A16  0100               	movlb	0	; () banked
  1292  000A18  8976               	bsf	(sprintf@flag+1)& (0+255),4,b
  1293  000A1A  D004               	goto	l4214
  1294  000A1C                     l4210:
  1295                           
  1296                           ; BSR set to: 0
  1297                           ;doprnt.c: 672: flag |= 0x400;
  1298  000A1C  0100               	movlb	0	; () banked
  1299  000A1E  0100               	movlb	0	; () banked
  1300  000A20  8576               	bsf	(sprintf@flag+1)& (0+255),2,b
  1301                           
  1302                           ;doprnt.c: 673: break;
  1303  000A22  D01A               	goto	l4216
  1304  000A24                     l4214:
  1305  000A24  C04D  FFF6         	movff	sprintf@f,tblptrl
  1306  000A28  C04E  FFF7         	movff	sprintf@f+1,tblptrh
  1307  000A2C  4A4D               	infsnz	sprintf@f,f,c
  1308  000A2E  2A4E               	incf	sprintf@f+1,f,c
  1309  000A30  0008               	tblrd		*
  1310  000A32  0100               	movlb	0	; () banked
  1311  000A34  CFF5 F080          	movff	tablat,sprintf@c
  1312  000A38  0100               	movlb	0	; () banked
  1313  000A3A  5180               	movf	sprintf@c& (0+255),w,b
  1314                           
  1315                           ; Switch size 1, requested type "space"
  1316                           ; Number of cases is 4, Range of values is 0 to 105
  1317                           ; switch strategies available:
  1318                           ; Name         Instructions Cycles
  1319                           ; simple_byte           13     7 (average)
  1320                           ;	Chosen strategy is simple_byte
  1321  000A3C  0A00               	xorlw	0	; case 0
  1322  000A3E  B4D8               	btfsc	status,2,c
  1323  000A40  EF8A  F00A         	goto	l4494
  1324  000A44  0A64               	xorlw	100	; case 100
  1325  000A46  B4D8               	btfsc	status,2,c
  1326  000A48  D007               	goto	l4216
  1327  000A4A  0A02               	xorlw	2	; case 102
  1328  000A4C  B4D8               	btfsc	status,2,c
  1329  000A4E  D7E6               	goto	l4210
  1330  000A50  0A0F               	xorlw	15	; case 105
  1331  000A52  A4D8               	btfss	status,2,c
  1332  000A54  EF7C  F00A         	goto	l4492
  1333  000A58                     l4216:
  1334                           
  1335                           ; BSR set to: 0
  1336                           ;doprnt.c: 834: if(flag & (0x700)) {
  1337  000A58  0E07               	movlw	7
  1338  000A5A  0100               	movlb	0	; () banked
  1339  000A5C  0100               	movlb	0	; () banked
  1340  000A5E  1576               	andwf	(sprintf@flag+1)& (0+255),w,b
  1341  000A60  B4D8               	btfsc	status,2,c
  1342  000A62  D38C               	goto	l4396
  1343                           
  1344                           ; BSR set to: 0
  1345                           ;doprnt.c: 836: if(flag & 0x1000)
  1346  000A64  0100               	movlb	0	; () banked
  1347  000A66  0100               	movlb	0	; () banked
  1348  000A68  A976               	btfss	(sprintf@flag+1)& (0+255),4,b
  1349  000A6A  D007               	goto	l4222
  1350                           
  1351                           ; BSR set to: 0
  1352                           ;doprnt.c: 838: prec = 6;
  1353  000A6C  0E00               	movlw	0
  1354  000A6E  0100               	movlb	0	; () banked
  1355  000A70  0100               	movlb	0	; () banked
  1356  000A72  6F7F               	movwf	(sprintf@prec+1)& (0+255),b
  1357  000A74  0E06               	movlw	6
  1358  000A76  0100               	movlb	0	; () banked
  1359  000A78  6F7E               	movwf	sprintf@prec& (0+255),b
  1360  000A7A                     l4222:
  1361                           
  1362                           ; BSR set to: 0
  1363                           ;doprnt.c: 839: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1364  000A7A  C06B  FFD9         	movff	sprintf@ap,fsr2l
  1365  000A7E  C06C  FFDA         	movff	sprintf@ap+1,fsr2h
  1366  000A82  0100               	movlb	0	; () banked
  1367  000A84  CFDE F07B          	movff	postinc2,sprintf@fval
  1368  000A88  0100               	movlb	0	; () banked
  1369  000A8A  CFDE F07C          	movff	postinc2,sprintf@fval+1
  1370  000A8E  0100               	movlb	0	; () banked
  1371  000A90  CFDD F07D          	movff	postdec2,sprintf@fval+2
  1372                           
  1373                           ; BSR set to: 0
  1374  000A94  0E03               	movlw	3
  1375  000A96  0100               	movlb	0	; () banked
  1376  000A98  0100               	movlb	0	; () banked
  1377  000A9A  276B               	addwf	sprintf@ap& (0+255),f,b
  1378  000A9C  0E00               	movlw	0
  1379  000A9E  0100               	movlb	0	; () banked
  1380  000AA0  236C               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1381                           
  1382                           ; BSR set to: 0
  1383                           ;doprnt.c: 840: if(fval < 0.0) {
  1384  000AA2  0100               	movlb	0	; () banked
  1385  000AA4  0100               	movlb	0	; () banked
  1386  000AA6  517D               	movf	(sprintf@fval+2)& (0+255),w,b
  1387  000AA8  0A80               	xorlw	128
  1388  000AAA  0F80               	addlw	128
  1389  000AAC  E107               	bnz	u2965
  1390  000AAE  0E00               	movlw	0
  1391  000AB0  0100               	movlb	0	; () banked
  1392  000AB2  5D7C               	subwf	(sprintf@fval+1)& (0+255),w,b
  1393  000AB4  E103               	bnz	u2965
  1394  000AB6  0E00               	movlw	0
  1395  000AB8  0100               	movlb	0	; () banked
  1396  000ABA  5D7B               	subwf	sprintf@fval& (0+255),w,b
  1397  000ABC                     u2965:
  1398  000ABC  B0D8               	btfsc	status,0,c
  1399  000ABE  D012               	goto	l4232
  1400                           
  1401                           ; BSR set to: 0
  1402                           ;doprnt.c: 841: fval = -fval;
  1403  000AC0  C07B  F001         	movff	sprintf@fval,?___ftneg
  1404  000AC4  C07C  F002         	movff	sprintf@fval+1,?___ftneg+1
  1405  000AC8  C07D  F003         	movff	sprintf@fval+2,?___ftneg+2
  1406  000ACC  EC04  F016         	call	___ftneg	;wreg free
  1407  000AD0  C003  F07D         	movff	?___ftneg+2,sprintf@fval+2
  1408  000AD4  C002  F07C         	movff	?___ftneg+1,sprintf@fval+1
  1409  000AD8  C001  F07B         	movff	?___ftneg,sprintf@fval
  1410                           
  1411                           ;doprnt.c: 842: flag |= 0x03;
  1412  000ADC  0E03               	movlw	3
  1413  000ADE  0100               	movlb	0	; () banked
  1414  000AE0  0100               	movlb	0	; () banked
  1415  000AE2  1375               	iorwf	sprintf@flag& (0+255),f,b
  1416  000AE4                     l4232:
  1417                           
  1418                           ; BSR set to: 0
  1419                           ;doprnt.c: 843: }
  1420                           ;doprnt.c: 844: exp = 0;
  1421  000AE4  0E00               	movlw	0
  1422  000AE6  0100               	movlb	0	; () banked
  1423  000AE8  0100               	movlb	0	; () banked
  1424  000AEA  6F78               	movwf	(sprintf@exp+1)& (0+255),b
  1425  000AEC  0E00               	movlw	0
  1426  000AEE  0100               	movlb	0	; () banked
  1427  000AF0  6F77               	movwf	sprintf@exp& (0+255),b
  1428                           
  1429                           ; BSR set to: 0
  1430                           ;doprnt.c: 845: if( fval!=0) {
  1431  000AF2  0E7F               	movlw	127
  1432  000AF4  0100               	movlb	0	; () banked
  1433  000AF6  0100               	movlb	0	; () banked
  1434  000AF8  157D               	andwf	(sprintf@fval+2)& (0+255),w,b
  1435  000AFA  0100               	movlb	0	; () banked
  1436  000AFC  117C               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1437  000AFE  0100               	movlb	0	; () banked
  1438  000B00  117B               	iorwf	sprintf@fval& (0+255),w,b
  1439  000B02  B4D8               	btfsc	status,2,c
  1440  000B04  D091               	goto	l4260
  1441                           
  1442                           ; BSR set to: 0
  1443                           ;doprnt.c: 846: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1444  000B06  0E82               	movlw	130
  1445  000B08  6E52               	movwf	??_sprintf& (0+255),c
  1446  000B0A  0EFF               	movlw	255
  1447  000B0C  6E53               	movwf	(??_sprintf+1)& (0+255),c
  1448  000B0E  0100               	movlb	0	; () banked
  1449  000B10  C07B  F054         	movff	sprintf@fval,??_sprintf+2
  1450  000B14  0100               	movlb	0	; () banked
  1451  000B16  C07C  F055         	movff	sprintf@fval+1,??_sprintf+3
  1452  000B1A  0100               	movlb	0	; () banked
  1453  000B1C  C07D  F056         	movff	sprintf@fval+2,??_sprintf+4
  1454  000B20  0100               	movlb	0	; () banked
  1455  000B22  C07E  F057         	movff	sprintf@fval+3,??_sprintf+5
  1456  000B26  0E10               	movlw	16
  1457  000B28  D005               	goto	u2980
  1458  000B2A                     u2985:
  1459  000B2A  90D8               	bcf	status,0,c
  1460  000B2C  3257               	rrcf	??_sprintf+5,f,c
  1461  000B2E  3256               	rrcf	??_sprintf+4,f,c
  1462  000B30  3255               	rrcf	??_sprintf+3,f,c
  1463  000B32  3254               	rrcf	??_sprintf+2,f,c
  1464  000B34                     u2980:
  1465  000B34  2EE8               	decfsz	wreg,f,c
  1466  000B36  D7F9               	goto	u2985
  1467  000B38  5054               	movf	??_sprintf+2,w,c
  1468  000B3A  2452               	addwf	??_sprintf,w,c
  1469  000B3C  0100               	movlb	0	; () banked
  1470  000B3E  0100               	movlb	0	; () banked
  1471  000B40  6F77               	movwf	sprintf@exp& (0+255),b
  1472  000B42  0100               	movlb	0	; () banked
  1473  000B44  0E00               	movlw	0
  1474  000B46  2053               	addwfc	??_sprintf+1,w,c
  1475  000B48  6F78               	movwf	(sprintf@exp+1)& (0+255),b
  1476                           
  1477                           ; BSR set to: 0
  1478                           ;doprnt.c: 847: exp--;
  1479  000B4A  0100               	movlb	0	; () banked
  1480  000B4C  0100               	movlb	0	; () banked
  1481  000B4E  0777               	decf	sprintf@exp& (0+255),f,b
  1482  000B50  A0D8               	btfss	status,0,c
  1483  000B52  0778               	decf	(sprintf@exp+1)& (0+255),f,b
  1484                           
  1485                           ; BSR set to: 0
  1486                           ;doprnt.c: 848: exp *= 3;
  1487  000B54  C077  F011         	movff	sprintf@exp,?___wmul
  1488  000B58  C078  F012         	movff	sprintf@exp+1,?___wmul+1
  1489  000B5C  0E00               	movlw	0
  1490  000B5E  6E14               	movwf	?___wmul+3,c
  1491  000B60  0E03               	movlw	3
  1492  000B62  6E13               	movwf	?___wmul+2,c
  1493  000B64  EC7F  F015         	call	___wmul	;wreg free
  1494  000B68  C011  F077         	movff	?___wmul,sprintf@exp
  1495  000B6C  C012  F078         	movff	?___wmul+1,sprintf@exp+1
  1496                           
  1497                           ;doprnt.c: 849: exp /= 10;
  1498  000B70  C077  F008         	movff	sprintf@exp,?___awdiv
  1499  000B74  C078  F009         	movff	sprintf@exp+1,?___awdiv+1
  1500  000B78  0E00               	movlw	0
  1501  000B7A  6E0B               	movwf	?___awdiv+3,c
  1502  000B7C  0E0A               	movlw	10
  1503  000B7E  6E0A               	movwf	?___awdiv+2,c
  1504  000B80  EC1B  F013         	call	___awdiv	;wreg free
  1505  000B84  C008  F077         	movff	?___awdiv,sprintf@exp
  1506  000B88  C009  F078         	movff	?___awdiv+1,sprintf@exp+1
  1507                           
  1508                           ;doprnt.c: 850: if(exp < 0)
  1509  000B8C  0100               	movlb	0	; () banked
  1510  000B8E  0100               	movlb	0	; () banked
  1511  000B90  AF78               	btfss	(sprintf@exp+1)& (0+255),7,b
  1512  000B92  D005               	goto	l4248
  1513                           
  1514                           ; BSR set to: 0
  1515                           ;doprnt.c: 851: exp--;
  1516  000B94  0100               	movlb	0	; () banked
  1517  000B96  0100               	movlb	0	; () banked
  1518  000B98  0777               	decf	sprintf@exp& (0+255),f,b
  1519  000B9A  A0D8               	btfss	status,0,c
  1520  000B9C  0778               	decf	(sprintf@exp+1)& (0+255),f,b
  1521  000B9E                     l4248:
  1522                           
  1523                           ; BSR set to: 0
  1524                           ;doprnt.c: 855: integ = scale(-exp);
  1525  000B9E  0100               	movlb	0	; () banked
  1526  000BA0  0100               	movlb	0	; () banked
  1527  000BA2  5177               	movf	sprintf@exp& (0+255),w,b
  1528  000BA4  0800               	sublw	0
  1529  000BA6  6E37               	movwf	?_scale,c
  1530  000BA8  EC91  F00A         	call	_scale	;wreg free
  1531  000BAC  C039  F06F         	movff	?_scale+2,sprintf@integ+2
  1532  000BB0  C038  F06E         	movff	?_scale+1,sprintf@integ+1
  1533  000BB4  C037  F06D         	movff	?_scale,sprintf@integ
  1534                           
  1535                           ;doprnt.c: 856: integ *= fval;
  1536  000BB8  0100               	movlb	0	; () banked
  1537  000BBA  0E00               	movlw	high sprintf@integ
  1538  000BBC  6E38               	movwf	?___asftmul+1,c
  1539  000BBE  0100               	movlb	0	; () banked
  1540  000BC0  0E6D               	movlw	low sprintf@integ
  1541  000BC2  6E37               	movwf	?___asftmul,c
  1542  000BC4  C07B  F039         	movff	sprintf@fval,?___asftmul+2
  1543  000BC8  C07C  F03A         	movff	sprintf@fval+1,?___asftmul+3
  1544  000BCC  C07D  F03B         	movff	sprintf@fval+2,?___asftmul+4
  1545  000BD0  EC43  F015         	call	___asftmul	;wreg free
  1546                           
  1547                           ;doprnt.c: 857: if(integ < 1.0)
  1548  000BD4  C06D  F001         	movff	sprintf@integ,?___ftge
  1549  000BD8  C06E  F002         	movff	sprintf@integ+1,?___ftge+1
  1550  000BDC  C06F  F003         	movff	sprintf@integ+2,?___ftge+2
  1551  000BE0  0E00               	movlw	0
  1552  000BE2  6E04               	movwf	?___ftge+3,c
  1553  000BE4  0E80               	movlw	128
  1554  000BE6  6E05               	movwf	?___ftge+4,c
  1555  000BE8  0E3F               	movlw	63
  1556  000BEA  6E06               	movwf	?___ftge+5,c
  1557  000BEC  ECD3  F012         	call	___ftge	;wreg free
  1558  000BF0  B0D8               	btfsc	status,0,c
  1559  000BF2  D006               	goto	l4256
  1560                           
  1561                           ;doprnt.c: 858: exp--;
  1562  000BF4  0100               	movlb	0	; () banked
  1563  000BF6  0100               	movlb	0	; () banked
  1564  000BF8  0777               	decf	sprintf@exp& (0+255),f,b
  1565  000BFA  A0D8               	btfss	status,0,c
  1566  000BFC  0778               	decf	(sprintf@exp+1)& (0+255),f,b
  1567  000BFE  D014               	goto	l4260
  1568  000C00                     l4256:
  1569                           
  1570                           ;doprnt.c: 859: else if(integ >= 10.0)
  1571  000C00  C06D  F001         	movff	sprintf@integ,?___ftge
  1572  000C04  C06E  F002         	movff	sprintf@integ+1,?___ftge+1
  1573  000C08  C06F  F003         	movff	sprintf@integ+2,?___ftge+2
  1574  000C0C  0E00               	movlw	0
  1575  000C0E  6E04               	movwf	?___ftge+3,c
  1576  000C10  0E20               	movlw	32
  1577  000C12  6E05               	movwf	?___ftge+4,c
  1578  000C14  0E41               	movlw	65
  1579  000C16  6E06               	movwf	?___ftge+5,c
  1580  000C18  ECD3  F012         	call	___ftge	;wreg free
  1581  000C1C  A0D8               	btfss	status,0,c
  1582  000C1E  D004               	goto	l4260
  1583                           
  1584                           ;doprnt.c: 860: exp++;
  1585  000C20  0100               	movlb	0	; () banked
  1586  000C22  0100               	movlb	0	; () banked
  1587  000C24  4B77               	infsnz	sprintf@exp& (0+255),f,b
  1588  000C26  2B78               	incf	(sprintf@exp+1)& (0+255),f,b
  1589  000C28                     l4260:
  1590                           
  1591                           ;doprnt.c: 861: }
  1592                           ;doprnt.c: 1121: if(prec <= 12)
  1593  000C28  0100               	movlb	0	; () banked
  1594  000C2A  0100               	movlb	0	; () banked
  1595  000C2C  517F               	movf	(sprintf@prec+1)& (0+255),w,b
  1596  000C2E  0A80               	xorlw	128
  1597  000C30  0F80               	addlw	-128
  1598  000C32  0E0D               	movlw	13
  1599  000C34  B4D8               	btfsc	status,2,c
  1600  000C36  5D7E               	subwf	sprintf@prec& (0+255),w,b
  1601  000C38  B0D8               	btfsc	status,0,c
  1602  000C3A  D012               	goto	l4264
  1603                           
  1604                           ; BSR set to: 0
  1605                           ;doprnt.c: 1122: fval += fround(prec);
  1606  000C3C  0100               	movlb	0	; () banked
  1607  000C3E  0E00               	movlw	high sprintf@fval
  1608  000C40  6E47               	movwf	?___asftadd+1,c
  1609  000C42  0100               	movlb	0	; () banked
  1610  000C44  0E7B               	movlw	low sprintf@fval
  1611  000C46  6E46               	movwf	?___asftadd,c
  1612  000C48  C07E  F037         	movff	sprintf@prec,?_fround
  1613  000C4C  ECB9  F00C         	call	_fround	;wreg free
  1614  000C50  C039  F04A         	movff	?_fround+2,?___asftadd+4
  1615  000C54  C038  F049         	movff	?_fround+1,?___asftadd+3
  1616  000C58  C037  F048         	movff	?_fround,?___asftadd+2
  1617  000C5C  EC61  F015         	call	___asftadd	;wreg free
  1618  000C60                     l4264:
  1619                           
  1620                           ;doprnt.c: 1125: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1621  000C60  0100               	movlb	0	; () banked
  1622  000C62  0100               	movlb	0	; () banked
  1623  000C64  5178               	movf	(sprintf@exp+1)& (0+255),w,b
  1624  000C66  0A80               	xorlw	128
  1625  000C68  0F80               	addlw	-128
  1626  000C6A  0E0A               	movlw	10
  1627  000C6C  B4D8               	btfsc	status,2,c
  1628  000C6E  5D77               	subwf	sprintf@exp& (0+255),w,b
  1629  000C70  B0D8               	btfsc	status,0,c
  1630  000C72  D022               	goto	l4272
  1631                           
  1632                           ; BSR set to: 0
  1633  000C74  0E7F               	movlw	127
  1634  000C76  0100               	movlb	0	; () banked
  1635  000C78  0100               	movlb	0	; () banked
  1636  000C7A  157D               	andwf	(sprintf@fval+2)& (0+255),w,b
  1637  000C7C  0100               	movlb	0	; () banked
  1638  000C7E  117C               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1639  000C80  0100               	movlb	0	; () banked
  1640  000C82  117B               	iorwf	sprintf@fval& (0+255),w,b
  1641  000C84  B4D8               	btfsc	status,2,c
  1642  000C86  D067               	goto	l4288
  1643                           
  1644                           ; BSR set to: 0
  1645  000C88  C07B  F017         	movff	sprintf@fval,?___fttol
  1646  000C8C  C07C  F018         	movff	sprintf@fval+1,?___fttol+1
  1647  000C90  C07D  F019         	movff	sprintf@fval+2,?___fttol+2
  1648  000C94  ECF1  F010         	call	___fttol	;wreg free
  1649  000C98  501A               	movf	?___fttol+3,w,c
  1650  000C9A  1017               	iorwf	?___fttol,w,c
  1651  000C9C  1018               	iorwf	?___fttol+1,w,c
  1652  000C9E  1019               	iorwf	?___fttol+2,w,c
  1653  000CA0  A4D8               	btfss	status,2,c
  1654  000CA2  D059               	goto	l4288
  1655  000CA4  0100               	movlb	0	; () banked
  1656  000CA6  0100               	movlb	0	; () banked
  1657  000CA8  5178               	movf	(sprintf@exp+1)& (0+255),w,b
  1658  000CAA  0A80               	xorlw	128
  1659  000CAC  0F80               	addlw	-128
  1660  000CAE  0E02               	movlw	2
  1661  000CB0  B4D8               	btfsc	status,2,c
  1662  000CB2  5D77               	subwf	sprintf@exp& (0+255),w,b
  1663  000CB4  A0D8               	btfss	status,0,c
  1664  000CB6  D04F               	goto	l4288
  1665  000CB8                     l4272:
  1666                           
  1667                           ; BSR set to: 0
  1668                           ;doprnt.c: 1129: if(integ < 4.294967296){
  1669  000CB8  C06D  F001         	movff	sprintf@integ,?___ftge
  1670  000CBC  C06E  F002         	movff	sprintf@integ+1,?___ftge+1
  1671  000CC0  C06F  F003         	movff	sprintf@integ+2,?___ftge+2
  1672  000CC4  0E70               	movlw	112
  1673  000CC6  6E04               	movwf	?___ftge+3,c
  1674  000CC8  0E89               	movlw	137
  1675  000CCA  6E05               	movwf	?___ftge+4,c
  1676  000CCC  0E40               	movlw	64
  1677  000CCE  6E06               	movwf	?___ftge+5,c
  1678  000CD0  ECD3  F012         	call	___ftge	;wreg free
  1679  000CD4  B0D8               	btfsc	status,0,c
  1680  000CD6  D003               	goto	l4276
  1681                           
  1682                           ;doprnt.c: 1130: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1683  000CD8  0100               	movlb	0	; () banked
  1684  000CDA  0EF7               	movlw	247
  1685  000CDC  D002               	goto	L1
  1686  000CDE                     l4276:
  1687                           
  1688                           ;doprnt.c: 1132: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1689  000CDE  0100               	movlb	0	; () banked
  1690  000CE0  0EF8               	movlw	248
  1691  000CE2                     L1:
  1692  000CE2  0100               	movlb	0	; () banked
  1693  000CE4  2777               	addwf	sprintf@exp& (0+255),f,b
  1694  000CE6  0EFF               	movlw	255
  1695  000CE8  0100               	movlb	0	; () banked
  1696  000CEA  2378               	addwfc	(sprintf@exp+1)& (0+255),f,b
  1697                           
  1698                           ; BSR set to: 0
  1699                           ;doprnt.c: 1133: }
  1700                           ;doprnt.c: 1134: integ = scale(exp);
  1701                           
  1702                           ; BSR set to: 0
  1703  000CEC  C077  F037         	movff	sprintf@exp,?_scale
  1704  000CF0  EC91  F00A         	call	_scale	;wreg free
  1705  000CF4  C039  F06F         	movff	?_scale+2,sprintf@integ+2
  1706  000CF8  C038  F06E         	movff	?_scale+1,sprintf@integ+1
  1707  000CFC  C037  F06D         	movff	?_scale,sprintf@integ
  1708                           
  1709                           ;doprnt.c: 1135: _val._val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,integ) : _div_to_l
      +                          _(fval,integ));
  1710  000D00  C07B  F001         	movff	sprintf@fval,?__tdiv_to_l_
  1711  000D04  C07C  F002         	movff	sprintf@fval+1,?__tdiv_to_l_+1
  1712  000D08  C07D  F003         	movff	sprintf@fval+2,?__tdiv_to_l_+2
  1713  000D0C  C06D  F004         	movff	sprintf@integ,?__tdiv_to_l_+3
  1714  000D10  C06E  F005         	movff	sprintf@integ+1,?__tdiv_to_l_+4
  1715  000D14  C06F  F006         	movff	sprintf@integ+2,?__tdiv_to_l_+5
  1716  000D18  ECDF  F00E         	call	__tdiv_to_l_	;wreg free
  1717  000D1C  C004  F066         	movff	?__tdiv_to_l_+3,_sprintf$518+3
  1718  000D20  C003  F065         	movff	?__tdiv_to_l_+2,_sprintf$518+2
  1719  000D24  C002  F064         	movff	?__tdiv_to_l_+1,_sprintf$518+1
  1720  000D28  C001  F063         	movff	?__tdiv_to_l_,_sprintf$518
  1721  000D2C  C063  F070         	movff	_sprintf$518,sprintf@_val
  1722  000D30  C064  F071         	movff	_sprintf$518+1,sprintf@_val+1
  1723  000D34  C065  F072         	movff	_sprintf$518+2,sprintf@_val+2
  1724  000D38  C066  F073         	movff	_sprintf$518+3,sprintf@_val+3
  1725                           
  1726                           ;doprnt.c: 1138: fval = 0.0;
  1727  000D3C  0E00               	movlw	0
  1728  000D3E  0100               	movlb	0	; () banked
  1729  000D40  0100               	movlb	0	; () banked
  1730  000D42  6F7B               	movwf	sprintf@fval& (0+255),b
  1731  000D44  0E00               	movlw	0
  1732  000D46  0100               	movlb	0	; () banked
  1733  000D48  0100               	movlb	0	; () banked
  1734  000D4A  6F7C               	movwf	(sprintf@fval+1)& (0+255),b
  1735  000D4C  0E00               	movlw	0
  1736  000D4E  0100               	movlb	0	; () banked
  1737  000D50  0100               	movlb	0	; () banked
  1738  000D52  6F7D               	movwf	(sprintf@fval+2)& (0+255),b
  1739                           
  1740                           ;doprnt.c: 1139: } else {
  1741  000D54  D02F               	goto	l4294
  1742  000D56                     l4288:
  1743                           
  1744                           ;doprnt.c: 1140: _val._val = (unsigned long)fval;
  1745  000D56  C07B  F017         	movff	sprintf@fval,?___fttol
  1746  000D5A  C07C  F018         	movff	sprintf@fval+1,?___fttol+1
  1747  000D5E  C07D  F019         	movff	sprintf@fval+2,?___fttol+2
  1748  000D62  ECF1  F010         	call	___fttol	;wreg free
  1749  000D66  C01A  F073         	movff	?___fttol+3,sprintf@_val+3
  1750  000D6A  C019  F072         	movff	?___fttol+2,sprintf@_val+2
  1751  000D6E  C018  F071         	movff	?___fttol+1,sprintf@_val+1
  1752  000D72  C017  F070         	movff	?___fttol,sprintf@_val
  1753                           
  1754                           ;doprnt.c: 1141: fval -= (double)_val._val;
  1755  000D76  0100               	movlb	0	; () banked
  1756  000D78  0E00               	movlw	high sprintf@fval
  1757  000D7A  6E1E               	movwf	?___asftsub+1,c
  1758  000D7C  0100               	movlb	0	; () banked
  1759  000D7E  0E7B               	movlw	low sprintf@fval
  1760  000D80  6E1D               	movwf	?___asftsub,c
  1761  000D82  C070  F009         	movff	sprintf@_val,?___lltoft
  1762  000D86  C071  F00A         	movff	sprintf@_val+1,?___lltoft+1
  1763  000D8A  C072  F00B         	movff	sprintf@_val+2,?___lltoft+2
  1764  000D8E  C073  F00C         	movff	sprintf@_val+3,?___lltoft+3
  1765  000D92  EC58  F014         	call	___lltoft	;wreg free
  1766  000D96  C00B  F021         	movff	?___lltoft+2,?___asftsub+4
  1767  000D9A  C00A  F020         	movff	?___lltoft+1,?___asftsub+3
  1768  000D9E  C009  F01F         	movff	?___lltoft,?___asftsub+2
  1769  000DA2  EC25  F015         	call	___asftsub	;wreg free
  1770                           
  1771                           ;doprnt.c: 1142: exp = 0;
  1772  000DA6  0E00               	movlw	0
  1773  000DA8  0100               	movlb	0	; () banked
  1774  000DAA  0100               	movlb	0	; () banked
  1775  000DAC  6F78               	movwf	(sprintf@exp+1)& (0+255),b
  1776  000DAE  0E00               	movlw	0
  1777  000DB0  0100               	movlb	0	; () banked
  1778  000DB2  6F77               	movwf	sprintf@exp& (0+255),b
  1779  000DB4                     l4294:
  1780                           
  1781                           ; BSR set to: 0
  1782                           ;doprnt.c: 1143: }
  1783                           ;doprnt.c: 1145: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  1784  000DB4  6E52               	movwf	??_sprintf& (0+255),c
  1785  000DB6  0E01               	movlw	1
  1786  000DB8  0100               	movlb	0	; () banked
  1787  000DBA  0100               	movlb	0	; () banked
  1788  000DBC  6F80               	movwf	sprintf@c& (0+255),b
  1789  000DBE  5052               	movf	??_sprintf& (0+255),w,c
  1790  000DC0                     
  1791                           ; BSR set to: 0
  1792  000DC0  0100               	movlb	0	; () banked
  1793  000DC2  0100               	movlb	0	; () banked
  1794  000DC4  5180               	movf	sprintf@c& (0+255),w,b
  1795  000DC6  0A0A               	xorlw	10
  1796  000DC8  B4D8               	btfsc	status,2,c
  1797  000DCA  D021               	goto	l4308
  1798                           
  1799                           ; BSR set to: 0
  1800                           ;doprnt.c: 1146: if(_val._val < dpowers[c])
  1801                           
  1802                           ; BSR set to: 0
  1803                           
  1804                           ; BSR set to: 0
  1805  000DCC  0100               	movlb	0	; () banked
  1806  000DCE  0100               	movlb	0	; () banked
  1807  000DD0  5180               	movf	sprintf@c& (0+255),w,b
  1808  000DD2  0D04               	mullw	4
  1809  000DD4  0E00               	movlw	low _dpowers
  1810  000DD6  24F3               	addwf	prodl,w,c
  1811  000DD8  6EF6               	movwf	tblptrl,c
  1812  000DDA  0E08               	movlw	high _dpowers
  1813  000DDC  20F4               	addwfc	prodh,w,c
  1814  000DDE  6EF7               	movwf	tblptrh,c
  1815  000DE0  0009               	tblrd		*+
  1816  000DE2  50F5               	movf	tablat,w,c
  1817  000DE4  0100               	movlb	0	; () banked
  1818  000DE6  0100               	movlb	0	; () banked
  1819  000DE8  5D70               	subwf	sprintf@_val& (0+255),w,b
  1820  000DEA  0009               	tblrd		*+
  1821  000DEC  50F5               	movf	tablat,w,c
  1822  000DEE  0100               	movlb	0	; () banked
  1823  000DF0  5971               	subwfb	(sprintf@_val+1)& (0+255),w,b
  1824  000DF2  0009               	tblrd		*+
  1825  000DF4  50F5               	movf	tablat,w,c
  1826  000DF6  0100               	movlb	0	; () banked
  1827  000DF8  5972               	subwfb	(sprintf@_val+2)& (0+255),w,b
  1828  000DFA  0009               	tblrd		*+
  1829  000DFC  50F5               	movf	tablat,w,c
  1830  000DFE  0100               	movlb	0	; () banked
  1831  000E00  5973               	subwfb	(sprintf@_val+3)& (0+255),w,b
  1832  000E02  A0D8               	btfss	status,0,c
  1833  000E04  D004               	goto	l4308
  1834                           
  1835                           ; BSR set to: 0
  1836                           
  1837                           ; BSR set to: 0
  1838                           
  1839                           ; BSR set to: 0
  1840                           ;doprnt.c: 1147: break;
  1841  000E06  0100               	movlb	0	; () banked
  1842  000E08  0100               	movlb	0	; () banked
  1843  000E0A  2B80               	incf	sprintf@c& (0+255),f,b
  1844  000E0C  D7D9               	goto	L2
  1845  000E0E                     l4308:
  1846                           
  1847                           ; BSR set to: 0
  1848                           ;doprnt.c: 1151: width -= prec + c + exp;
  1849  000E0E  0100               	movlb	0	; () banked
  1850  000E10  C080  F052         	movff	sprintf@c,??_sprintf
  1851  000E14  6A53               	clrf	(??_sprintf+1)& (0+255),c
  1852  000E16  BE52               	btfsc	??_sprintf& (0+255),7,c
  1853  000E18  0653               	decf	(??_sprintf+1)& (0+255),f,c
  1854  000E1A  0100               	movlb	0	; () banked
  1855  000E1C  0100               	movlb	0	; () banked
  1856  000E1E  517E               	movf	sprintf@prec& (0+255),w,b
  1857  000E20  2652               	addwf	??_sprintf,f,c
  1858  000E22  0100               	movlb	0	; () banked
  1859  000E24  0100               	movlb	0	; () banked
  1860  000E26  517F               	movf	(sprintf@prec+1)& (0+255),w,b
  1861  000E28  2253               	addwfc	??_sprintf+1,f,c
  1862  000E2A  0100               	movlb	0	; () banked
  1863  000E2C  0100               	movlb	0	; () banked
  1864  000E2E  5177               	movf	sprintf@exp& (0+255),w,b
  1865  000E30  2652               	addwf	??_sprintf,f,c
  1866  000E32  0100               	movlb	0	; () banked
  1867  000E34  0100               	movlb	0	; () banked
  1868  000E36  5178               	movf	(sprintf@exp+1)& (0+255),w,b
  1869  000E38  2253               	addwfc	??_sprintf+1,f,c
  1870  000E3A  5052               	movf	??_sprintf,w,c
  1871  000E3C  0100               	movlb	0	; () banked
  1872  000E3E  0100               	movlb	0	; () banked
  1873  000E40  5F79               	subwf	sprintf@width& (0+255),f,b
  1874  000E42  5053               	movf	??_sprintf+1,w,c
  1875  000E44  0100               	movlb	0	; () banked
  1876  000E46  0100               	movlb	0	; () banked
  1877  000E48  5B7A               	subwfb	(sprintf@width+1)& (0+255),f,b
  1878                           
  1879                           ;doprnt.c: 1152: if(
  1880                           ;doprnt.c: 1156: prec)
  1881  000E4A  0100               	movlb	0	; () banked
  1882  000E4C  0100               	movlb	0	; () banked
  1883  000E4E  517F               	movf	(sprintf@prec+1)& (0+255),w,b
  1884  000E50  117E               	iorwf	sprintf@prec& (0+255),w,b
  1885  000E52  B4D8               	btfsc	status,2,c
  1886  000E54  D005               	goto	l4312
  1887                           
  1888                           ; BSR set to: 0
  1889                           ;doprnt.c: 1157: width--;
  1890  000E56  0100               	movlb	0	; () banked
  1891  000E58  0100               	movlb	0	; () banked
  1892  000E5A  0779               	decf	sprintf@width& (0+255),f,b
  1893  000E5C  A0D8               	btfss	status,0,c
  1894  000E5E  077A               	decf	(sprintf@width+1)& (0+255),f,b
  1895  000E60                     l4312:
  1896                           
  1897                           ; BSR set to: 0
  1898                           ;doprnt.c: 1158: if(flag & 0x03)
  1899  000E60  0E03               	movlw	3
  1900  000E62  0100               	movlb	0	; () banked
  1901  000E64  0100               	movlb	0	; () banked
  1902  000E66  1575               	andwf	sprintf@flag& (0+255),w,b
  1903  000E68  6E52               	movwf	??_sprintf& (0+255),c
  1904  000E6A  0E00               	movlw	0
  1905  000E6C  0100               	movlb	0	; () banked
  1906  000E6E  0100               	movlb	0	; () banked
  1907  000E70  1576               	andwf	(sprintf@flag+1)& (0+255),w,b
  1908  000E72  6E53               	movwf	(??_sprintf+1)& (0+255),c
  1909  000E74  5053               	movf	??_sprintf+1,w,c
  1910  000E76  1052               	iorwf	??_sprintf,w,c
  1911  000E78  B4D8               	btfsc	status,2,c
  1912  000E7A  D005               	goto	l4316
  1913                           
  1914                           ; BSR set to: 0
  1915                           ;doprnt.c: 1159: width--;
  1916  000E7C  0100               	movlb	0	; () banked
  1917  000E7E  0100               	movlb	0	; () banked
  1918  000E80  0779               	decf	sprintf@width& (0+255),f,b
  1919  000E82  A0D8               	btfss	status,0,c
  1920  000E84  077A               	decf	(sprintf@width+1)& (0+255),f,b
  1921  000E86                     l4316:
  1922                           
  1923                           ; BSR set to: 0
  1924                           ;doprnt.c: 1162: if(flag & 0x04) {
  1925  000E86  0100               	movlb	0	; () banked
  1926  000E88  0100               	movlb	0	; () banked
  1927  000E8A  B575               	btfsc	sprintf@flag& (0+255),2,b
  1928  000E8C  D00E               	goto	l4326
  1929  000E8E  D025               	goto	l4334
  1930  000E90                     l4320:
  1931                           
  1932                           ; BSR set to: 0
  1933                           ;doprnt.c: 1176: ((*sp++ = ('0')));
  1934  000E90  C04B  FFD9         	movff	sprintf@sp,fsr2l
  1935  000E94  C04C  FFDA         	movff	sprintf@sp+1,fsr2h
  1936  000E98  0E30               	movlw	48
  1937  000E9A  6EDF               	movwf	indf2,c
  1938                           
  1939                           ; BSR set to: 0
  1940  000E9C  4A4B               	infsnz	sprintf@sp,f,c
  1941  000E9E  2A4C               	incf	sprintf@sp+1,f,c
  1942                           
  1943                           ; BSR set to: 0
  1944                           ;doprnt.c: 1177: width--;
  1945  000EA0  0100               	movlb	0	; () banked
  1946  000EA2  0100               	movlb	0	; () banked
  1947  000EA4  0779               	decf	sprintf@width& (0+255),f,b
  1948  000EA6  A0D8               	btfss	status,0,c
  1949  000EA8  077A               	decf	(sprintf@width+1)& (0+255),f,b
  1950  000EAA                     l4326:
  1951                           
  1952                           ; BSR set to: 0
  1953  000EAA  0100               	movlb	0	; () banked
  1954  000EAC  0100               	movlb	0	; () banked
  1955  000EAE  517A               	movf	(sprintf@width+1)& (0+255),w,b
  1956  000EB0  0A80               	xorlw	128
  1957  000EB2  0F80               	addlw	-128
  1958  000EB4  0E01               	movlw	1
  1959  000EB6  B4D8               	btfsc	status,2,c
  1960  000EB8  5D79               	subwf	sprintf@width& (0+255),w,b
  1961  000EBA  A0D8               	btfss	status,0,c
  1962  000EBC  D069               	goto	l4350
  1963  000EBE  D7E8               	goto	l4320
  1964  000EC0                     l4328:
  1965                           
  1966                           ; BSR set to: 0
  1967                           ;doprnt.c: 1188: ((*sp++ = (' ')));
  1968  000EC0  C04B  FFD9         	movff	sprintf@sp,fsr2l
  1969  000EC4  C04C  FFDA         	movff	sprintf@sp+1,fsr2h
  1970  000EC8  0E20               	movlw	32
  1971  000ECA  6EDF               	movwf	indf2,c
  1972                           
  1973                           ; BSR set to: 0
  1974  000ECC  4A4B               	infsnz	sprintf@sp,f,c
  1975  000ECE  2A4C               	incf	sprintf@sp+1,f,c
  1976                           
  1977                           ; BSR set to: 0
  1978                           ;doprnt.c: 1189: width--;
  1979  000ED0  0100               	movlb	0	; () banked
  1980  000ED2  0100               	movlb	0	; () banked
  1981  000ED4  0779               	decf	sprintf@width& (0+255),f,b
  1982  000ED6  A0D8               	btfss	status,0,c
  1983  000ED8  077A               	decf	(sprintf@width+1)& (0+255),f,b
  1984  000EDA                     l4334:
  1985                           
  1986                           ; BSR set to: 0
  1987  000EDA  0100               	movlb	0	; () banked
  1988  000EDC  0100               	movlb	0	; () banked
  1989  000EDE  517A               	movf	(sprintf@width+1)& (0+255),w,b
  1990  000EE0  0A80               	xorlw	128
  1991  000EE2  0F80               	addlw	-128
  1992  000EE4  0E01               	movlw	1
  1993  000EE6  B4D8               	btfsc	status,2,c
  1994  000EE8  5D79               	subwf	sprintf@width& (0+255),w,b
  1995  000EEA  B0D8               	btfsc	status,0,c
  1996  000EEC  D7E9               	goto	l4328
  1997                           
  1998                           ; BSR set to: 0
  1999                           ;doprnt.c: 1190: }
  2000                           ;doprnt.c: 1195: if(flag & 0x03)
  2001                           
  2002                           ; BSR set to: 0
  2003  000EEE  0E03               	movlw	3
  2004  000EF0  0100               	movlb	0	; () banked
  2005  000EF2  0100               	movlb	0	; () banked
  2006  000EF4  1575               	andwf	sprintf@flag& (0+255),w,b
  2007  000EF6  6E52               	movwf	??_sprintf& (0+255),c
  2008  000EF8  0E00               	movlw	0
  2009  000EFA  0100               	movlb	0	; () banked
  2010  000EFC  0100               	movlb	0	; () banked
  2011  000EFE  1576               	andwf	(sprintf@flag+1)& (0+255),w,b
  2012  000F00  6E53               	movwf	(??_sprintf+1)& (0+255),c
  2013  000F02  5053               	movf	??_sprintf+1,w,c
  2014  000F04  1052               	iorwf	??_sprintf,w,c
  2015  000F06  B4D8               	btfsc	status,2,c
  2016  000F08  D043               	goto	l4350
  2017                           
  2018                           ; BSR set to: 0
  2019                           ;doprnt.c: 1197: ((*sp++ = ('-')));
  2020  000F0A  C04B  FFD9         	movff	sprintf@sp,fsr2l
  2021  000F0E  C04C  FFDA         	movff	sprintf@sp+1,fsr2h
  2022  000F12  0E2D               	movlw	45
  2023  000F14  D03A               	goto	L3
  2024  000F16                     l4342:
  2025                           
  2026                           ; BSR set to: 0
  2027                           ;doprnt.c: 1207: {
  2028                           ;doprnt.c: 1208: unsigned vd = _val._val/dpowers[c];
  2029  000F16  C070  F001         	movff	sprintf@_val,?___lldiv
  2030  000F1A  C071  F002         	movff	sprintf@_val+1,?___lldiv+1
  2031  000F1E  C072  F003         	movff	sprintf@_val+2,?___lldiv+2
  2032  000F22  C073  F004         	movff	sprintf@_val+3,?___lldiv+3
  2033  000F26  0100               	movlb	0	; () banked
  2034  000F28  0100               	movlb	0	; () banked
  2035  000F2A  5180               	movf	sprintf@c& (0+255),w,b
  2036  000F2C  0D04               	mullw	4
  2037  000F2E  0E00               	movlw	low _dpowers
  2038  000F30  24F3               	addwf	prodl,w,c
  2039  000F32  6EF6               	movwf	tblptrl,c
  2040  000F34  0E08               	movlw	high _dpowers
  2041  000F36  20F4               	addwfc	prodh,w,c
  2042  000F38  6EF7               	movwf	tblptrh,c
  2043  000F3A  0009               	tblrd		*+
  2044  000F3C  CFF5 F005          	movff	tablat,?___lldiv+4
  2045  000F40  0009               	tblrd		*+
  2046  000F42  CFF5 F006          	movff	tablat,?___lldiv+5
  2047  000F46  0009               	tblrd		*+
  2048  000F48  CFF5 F007          	movff	tablat,?___lldiv+6
  2049  000F4C  000A               	tblrd		*-
  2050  000F4E  CFF5 F008          	movff	tablat,?___lldiv+7
  2051  000F52  EC63  F013         	call	___lldiv	;wreg free
  2052  000F56  C001  F067         	movff	?___lldiv,sprintf@vd
  2053  000F5A  C002  F068         	movff	?___lldiv+1,sprintf@vd+1
  2054                           
  2055                           ;doprnt.c: 1209: vd %= 10;
  2056  000F5E  C067  F001         	movff	sprintf@vd,?___lwmod
  2057  000F62  C068  F002         	movff	sprintf@vd+1,?___lwmod+1
  2058  000F66  0E00               	movlw	0
  2059  000F68  6E04               	movwf	?___lwmod+3,c
  2060  000F6A  0E0A               	movlw	10
  2061  000F6C  6E03               	movwf	?___lwmod+2,c
  2062  000F6E  ECE0  F014         	call	___lwmod	;wreg free
  2063  000F72  C001  F067         	movff	?___lwmod,sprintf@vd
  2064  000F76  C002  F068         	movff	?___lwmod+1,sprintf@vd+1
  2065                           
  2066                           ;doprnt.c: 1210: ((*sp++ = ('0' + vd)));
  2067  000F7A  0100               	movlb	0	; () banked
  2068  000F7C  0100               	movlb	0	; () banked
  2069  000F7E  5167               	movf	sprintf@vd& (0+255),w,b
  2070  000F80  0F30               	addlw	48
  2071  000F82  C04B  FFD9         	movff	sprintf@sp,fsr2l
  2072  000F86  C04C  FFDA         	movff	sprintf@sp+1,fsr2h
  2073  000F8A                     L3:
  2074  000F8A  6EDF               	movwf	indf2,c
  2075                           
  2076                           ; BSR set to: 0
  2077  000F8C  4A4B               	infsnz	sprintf@sp,f,c
  2078  000F8E  2A4C               	incf	sprintf@sp+1,f,c
  2079  000F90                     l4350:
  2080                           
  2081                           ; BSR set to: 0
  2082  000F90  0100               	movlb	0	; () banked
  2083  000F92  0100               	movlb	0	; () banked
  2084  000F94  0780               	decf	sprintf@c& (0+255),f,b
  2085  000F96  0100               	movlb	0	; () banked
  2086  000F98  2980               	incf	sprintf@c& (0+255),w,b
  2087  000F9A  B4D8               	btfsc	status,2,c
  2088  000F9C  D00E               	goto	l4358
  2089  000F9E  D7BB               	goto	l4342
  2090  000FA0                     l4352:
  2091                           
  2092                           ; BSR set to: 0
  2093                           ;doprnt.c: 1215: ((*sp++ = ('0')));
  2094  000FA0  C04B  FFD9         	movff	sprintf@sp,fsr2l
  2095  000FA4  C04C  FFDA         	movff	sprintf@sp+1,fsr2h
  2096  000FA8  0E30               	movlw	48
  2097  000FAA  6EDF               	movwf	indf2,c
  2098                           
  2099                           ; BSR set to: 0
  2100  000FAC  4A4B               	infsnz	sprintf@sp,f,c
  2101  000FAE  2A4C               	incf	sprintf@sp+1,f,c
  2102                           
  2103                           ; BSR set to: 0
  2104                           ;doprnt.c: 1216: exp--;
  2105  000FB0  0100               	movlb	0	; () banked
  2106  000FB2  0100               	movlb	0	; () banked
  2107  000FB4  0777               	decf	sprintf@exp& (0+255),f,b
  2108  000FB6  A0D8               	btfss	status,0,c
  2109  000FB8  0778               	decf	(sprintf@exp+1)& (0+255),f,b
  2110  000FBA                     l4358:
  2111                           
  2112                           ; BSR set to: 0
  2113  000FBA  0100               	movlb	0	; () banked
  2114  000FBC  0100               	movlb	0	; () banked
  2115  000FBE  5178               	movf	(sprintf@exp+1)& (0+255),w,b
  2116  000FC0  0A80               	xorlw	128
  2117  000FC2  0F80               	addlw	-128
  2118  000FC4  0E01               	movlw	1
  2119  000FC6  B4D8               	btfsc	status,2,c
  2120  000FC8  5D77               	subwf	sprintf@exp& (0+255),w,b
  2121  000FCA  B0D8               	btfsc	status,0,c
  2122  000FCC  D7E9               	goto	l4352
  2123                           
  2124                           ; BSR set to: 0
  2125                           ;doprnt.c: 1217: }
  2126                           ;doprnt.c: 1218: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2127                           
  2128                           ; BSR set to: 0
  2129  000FCE  0100               	movlb	0	; () banked
  2130  000FD0  0100               	movlb	0	; () banked
  2131  000FD2  517F               	movf	(sprintf@prec+1)& (0+255),w,b
  2132  000FD4  0A80               	xorlw	128
  2133  000FD6  0F80               	addlw	-128
  2134  000FD8  0E09               	movlw	9
  2135  000FDA  B4D8               	btfsc	status,2,c
  2136  000FDC  5D7E               	subwf	sprintf@prec& (0+255),w,b
  2137  000FDE  A0D8               	btfss	status,0,c
  2138  000FE0  D007               	goto	l238
  2139                           
  2140                           ; BSR set to: 0
  2141                           ;doprnt.c: 1219: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2142  000FE2  6E52               	movwf	??_sprintf& (0+255),c
  2143  000FE4  0E08               	movlw	8
  2144  000FE6  0100               	movlb	0	; () banked
  2145  000FE8  0100               	movlb	0	; () banked
  2146  000FEA  6F80               	movwf	sprintf@c& (0+255),b
  2147  000FEC  5052               	movf	??_sprintf& (0+255),w,c
  2148  000FEE  D002               	goto	l4364
  2149  000FF0                     l238:
  2150                           
  2151                           ; BSR set to: 0
  2152                           ;doprnt.c: 1220: else
  2153                           ;doprnt.c: 1221: c = prec;
  2154  000FF0  C07E  F080         	movff	sprintf@prec,sprintf@c
  2155  000FF4                     l4364:
  2156                           
  2157                           ; BSR set to: 0
  2158                           ;doprnt.c: 1222: prec -= c;
  2159  000FF4  0100               	movlb	0	; () banked
  2160  000FF6  0100               	movlb	0	; () banked
  2161  000FF8  5180               	movf	sprintf@c& (0+255),w,b
  2162  000FFA  0100               	movlb	0	; () banked
  2163  000FFC  0100               	movlb	0	; () banked
  2164  000FFE  5F7E               	subwf	sprintf@prec& (0+255),f,b
  2165  001000  0E00               	movlw	0
  2166  001002  0100               	movlb	0	; () banked
  2167  001004  BF80               	btfsc	sprintf@c& (0+255),7,b
  2168  001006  0EFF               	movlw	255
  2169  001008  0100               	movlb	0	; () banked
  2170  00100A  0100               	movlb	0	; () banked
  2171  00100C  5B7F               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2172                           
  2173                           ; BSR set to: 0
  2174                           ;doprnt.c: 1226: if(c)
  2175  00100E  0100               	movlb	0	; () banked
  2176  001010  0100               	movlb	0	; () banked
  2177  001012  5180               	movf	sprintf@c& (0+255),w,b
  2178  001014  B4D8               	btfsc	status,2,c
  2179  001016  D008               	goto	l4372
  2180                           
  2181                           ; BSR set to: 0
  2182                           ;doprnt.c: 1228: ((*sp++ = ('.')));
  2183  001018  C04B  FFD9         	movff	sprintf@sp,fsr2l
  2184  00101C  C04C  FFDA         	movff	sprintf@sp+1,fsr2h
  2185  001020  0E2E               	movlw	46
  2186  001022  6EDF               	movwf	indf2,c
  2187                           
  2188                           ; BSR set to: 0
  2189  001024  4A4B               	infsnz	sprintf@sp,f,c
  2190  001026  2A4C               	incf	sprintf@sp+1,f,c
  2191  001028                     l4372:
  2192                           
  2193                           ; BSR set to: 0
  2194                           ;doprnt.c: 1234: _val._val = (long)(fval * scale(c));
  2195  001028  C080  F037         	movff	sprintf@c,?_scale
  2196  00102C  EC91  F00A         	call	_scale	;wreg free
  2197  001030  C039  F062         	movff	?_scale+2,_sprintf$1131+2
  2198  001034  C038  F061         	movff	?_scale+1,_sprintf$1131+1
  2199  001038  C037  F060         	movff	?_scale,_sprintf$1131
  2200                           
  2201                           ;doprnt.c: 1234: _val._val = (long)(fval * scale(c));
  2202  00103C  C07B  F029         	movff	sprintf@fval,?___ftmul+3
  2203  001040  C07C  F02A         	movff	sprintf@fval+1,?___ftmul+4
  2204  001044  C07D  F02B         	movff	sprintf@fval+2,?___ftmul+5
  2205  001048  C060  F026         	movff	_sprintf$1131,?___ftmul
  2206  00104C  C061  F027         	movff	_sprintf$1131+1,?___ftmul+1
  2207  001050  C062  F028         	movff	_sprintf$1131+2,?___ftmul+2
  2208  001054  EC70  F00F         	call	___ftmul	;wreg free
  2209  001058  C028  F019         	movff	?___ftmul+2,?___fttol+2
  2210  00105C  C027  F018         	movff	?___ftmul+1,?___fttol+1
  2211  001060  C026  F017         	movff	?___ftmul,?___fttol
  2212  001064  ECF1  F010         	call	___fttol	;wreg free
  2213  001068  C01A  F073         	movff	?___fttol+3,sprintf@_val+3
  2214  00106C  C019  F072         	movff	?___fttol+2,sprintf@_val+2
  2215  001070  C018  F071         	movff	?___fttol+1,sprintf@_val+1
  2216  001074  C017  F070         	movff	?___fttol,sprintf@_val
  2217                           
  2218                           ;doprnt.c: 1235: while(c--) {
  2219  001078  D065               	goto	l4386
  2220  00107A                     l4376:
  2221                           
  2222                           ;doprnt.c: 1236: unsigned vd = _val._val/dpowers[c];
  2223  00107A  C070  F001         	movff	sprintf@_val,?___lldiv
  2224  00107E  C071  F002         	movff	sprintf@_val+1,?___lldiv+1
  2225  001082  C072  F003         	movff	sprintf@_val+2,?___lldiv+2
  2226  001086  C073  F004         	movff	sprintf@_val+3,?___lldiv+3
  2227  00108A  0100               	movlb	0	; () banked
  2228  00108C  0100               	movlb	0	; () banked
  2229  00108E  5180               	movf	sprintf@c& (0+255),w,b
  2230  001090  0D04               	mullw	4
  2231  001092  0E00               	movlw	low _dpowers
  2232  001094  24F3               	addwf	prodl,w,c
  2233  001096  6EF6               	movwf	tblptrl,c
  2234  001098  0E08               	movlw	high _dpowers
  2235  00109A  20F4               	addwfc	prodh,w,c
  2236  00109C  6EF7               	movwf	tblptrh,c
  2237  00109E  0009               	tblrd		*+
  2238  0010A0  CFF5 F005          	movff	tablat,?___lldiv+4
  2239  0010A4  0009               	tblrd		*+
  2240  0010A6  CFF5 F006          	movff	tablat,?___lldiv+5
  2241  0010AA  0009               	tblrd		*+
  2242  0010AC  CFF5 F007          	movff	tablat,?___lldiv+6
  2243  0010B0  000A               	tblrd		*-
  2244  0010B2  CFF5 F008          	movff	tablat,?___lldiv+7
  2245  0010B6  EC63  F013         	call	___lldiv	;wreg free
  2246  0010BA  C001  F069         	movff	?___lldiv,sprintf@vd_520
  2247  0010BE  C002  F06A         	movff	?___lldiv+1,sprintf@vd_520+1
  2248                           
  2249                           ;doprnt.c: 1237: vd %= 10;
  2250  0010C2  C069  F001         	movff	sprintf@vd_520,?___lwmod
  2251  0010C6  C06A  F002         	movff	sprintf@vd_520+1,?___lwmod+1
  2252  0010CA  0E00               	movlw	0
  2253  0010CC  6E04               	movwf	?___lwmod+3,c
  2254  0010CE  0E0A               	movlw	10
  2255  0010D0  6E03               	movwf	?___lwmod+2,c
  2256  0010D2  ECE0  F014         	call	___lwmod	;wreg free
  2257  0010D6  C001  F069         	movff	?___lwmod,sprintf@vd_520
  2258  0010DA  C002  F06A         	movff	?___lwmod+1,sprintf@vd_520+1
  2259                           
  2260                           ;doprnt.c: 1238: ((*sp++ = ('0' + vd)));
  2261  0010DE  0100               	movlb	0	; () banked
  2262  0010E0  0100               	movlb	0	; () banked
  2263  0010E2  5169               	movf	sprintf@vd_520& (0+255),w,b
  2264  0010E4  0F30               	addlw	48
  2265  0010E6  C04B  FFD9         	movff	sprintf@sp,fsr2l
  2266  0010EA  C04C  FFDA         	movff	sprintf@sp+1,fsr2h
  2267  0010EE  6EDF               	movwf	indf2,c
  2268                           
  2269                           ; BSR set to: 0
  2270  0010F0  4A4B               	infsnz	sprintf@sp,f,c
  2271  0010F2  2A4C               	incf	sprintf@sp+1,f,c
  2272                           
  2273                           ; BSR set to: 0
  2274                           ;doprnt.c: 1239: _val._val %= dpowers[c];
  2275  0010F4  C070  F00F         	movff	sprintf@_val,?___llmod
  2276  0010F8  C071  F010         	movff	sprintf@_val+1,?___llmod+1
  2277  0010FC  C072  F011         	movff	sprintf@_val+2,?___llmod+2
  2278  001100  C073  F012         	movff	sprintf@_val+3,?___llmod+3
  2279  001104  0100               	movlb	0	; () banked
  2280  001106  0100               	movlb	0	; () banked
  2281  001108  5180               	movf	sprintf@c& (0+255),w,b
  2282  00110A  0D04               	mullw	4
  2283  00110C  0E00               	movlw	low _dpowers
  2284  00110E  24F3               	addwf	prodl,w,c
  2285  001110  6EF6               	movwf	tblptrl,c
  2286  001112  0E08               	movlw	high _dpowers
  2287  001114  20F4               	addwfc	prodh,w,c
  2288  001116  6EF7               	movwf	tblptrh,c
  2289  001118  0009               	tblrd		*+
  2290  00111A  CFF5 F013          	movff	tablat,?___llmod+4
  2291  00111E  0009               	tblrd		*+
  2292  001120  CFF5 F014          	movff	tablat,?___llmod+5
  2293  001124  0009               	tblrd		*+
  2294  001126  CFF5 F015          	movff	tablat,?___llmod+6
  2295  00112A  000A               	tblrd		*-
  2296  00112C  CFF5 F016          	movff	tablat,?___llmod+7
  2297  001130  EC23  F014         	call	___llmod	;wreg free
  2298  001134  C012  F073         	movff	?___llmod+3,sprintf@_val+3
  2299  001138  C011  F072         	movff	?___llmod+2,sprintf@_val+2
  2300  00113C  C010  F071         	movff	?___llmod+1,sprintf@_val+1
  2301  001140  C00F  F070         	movff	?___llmod,sprintf@_val
  2302  001144                     l4386:
  2303  001144  0100               	movlb	0	; () banked
  2304  001146  0100               	movlb	0	; () banked
  2305  001148  0780               	decf	sprintf@c& (0+255),f,b
  2306  00114A  0100               	movlb	0	; () banked
  2307  00114C  2980               	incf	sprintf@c& (0+255),w,b
  2308  00114E  B4D8               	btfsc	status,2,c
  2309  001150  D00E               	goto	l4394
  2310  001152  D793               	goto	l4376
  2311  001154                     l4388:
  2312                           
  2313                           ; BSR set to: 0
  2314                           ;doprnt.c: 1243: ((*sp++ = ('0')));
  2315  001154  C04B  FFD9         	movff	sprintf@sp,fsr2l
  2316  001158  C04C  FFDA         	movff	sprintf@sp+1,fsr2h
  2317  00115C  0E30               	movlw	48
  2318  00115E  6EDF               	movwf	indf2,c
  2319                           
  2320                           ; BSR set to: 0
  2321  001160  4A4B               	infsnz	sprintf@sp,f,c
  2322  001162  2A4C               	incf	sprintf@sp+1,f,c
  2323                           
  2324                           ; BSR set to: 0
  2325                           ;doprnt.c: 1244: prec--;
  2326  001164  0100               	movlb	0	; () banked
  2327  001166  0100               	movlb	0	; () banked
  2328  001168  077E               	decf	sprintf@prec& (0+255),f,b
  2329  00116A  A0D8               	btfss	status,0,c
  2330  00116C  077F               	decf	(sprintf@prec+1)& (0+255),f,b
  2331  00116E                     l4394:
  2332                           
  2333                           ; BSR set to: 0
  2334  00116E  0100               	movlb	0	; () banked
  2335  001170  0100               	movlb	0	; () banked
  2336  001172  517F               	movf	(sprintf@prec+1)& (0+255),w,b
  2337  001174  117E               	iorwf	sprintf@prec& (0+255),w,b
  2338  001176  B4D8               	btfsc	status,2,c
  2339  001178  D1BF               	goto	l4492
  2340  00117A  D7EC               	goto	l4388
  2341  00117C                     l4396:
  2342                           
  2343                           ; BSR set to: 0
  2344                           ;doprnt.c: 1253: }
  2345                           ;doprnt.c: 1260: {
  2346                           ;doprnt.c: 1266: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  2347  00117C  C06B  FFD9         	movff	sprintf@ap,fsr2l
  2348  001180  C06C  FFDA         	movff	sprintf@ap+1,fsr2h
  2349  001184  0100               	movlb	0	; () banked
  2350  001186  CFDE F070          	movff	postinc2,sprintf@_val
  2351  00118A  0100               	movlb	0	; () banked
  2352  00118C  CFDD F071          	movff	postdec2,sprintf@_val+1
  2353  001190  0100               	movlb	0	; () banked
  2354  001192  0E00               	movlw	0
  2355  001194  0100               	movlb	0	; () banked
  2356  001196  BF71               	btfsc	(sprintf@_val+1)& (0+255),7,b
  2357  001198  0EFF               	movlw	-1
  2358  00119A  0100               	movlb	0	; () banked
  2359  00119C  6F72               	movwf	(sprintf@_val+2)& (0+255),b
  2360  00119E  0100               	movlb	0	; () banked
  2361  0011A0  6F73               	movwf	(sprintf@_val+3)& (0+255),b
  2362                           
  2363                           ; BSR set to: 0
  2364  0011A2  0E02               	movlw	2
  2365  0011A4  0100               	movlb	0	; () banked
  2366  0011A6  0100               	movlb	0	; () banked
  2367  0011A8  276B               	addwf	sprintf@ap& (0+255),f,b
  2368  0011AA  0E00               	movlw	0
  2369  0011AC  0100               	movlb	0	; () banked
  2370  0011AE  236C               	addwfc	(sprintf@ap+1)& (0+255),f,b
  2371                           
  2372                           ; BSR set to: 0
  2373                           ;doprnt.c: 1268: if((long)_val._val < 0) {
  2374  0011B0  0100               	movlb	0	; () banked
  2375  0011B2  0100               	movlb	0	; () banked
  2376  0011B4  AF73               	btfss	(sprintf@_val+3)& (0+255),7,b
  2377  0011B6  D014               	goto	l4406
  2378                           
  2379                           ; BSR set to: 0
  2380                           ;doprnt.c: 1269: flag |= 0x03;
  2381  0011B8  0E03               	movlw	3
  2382  0011BA  0100               	movlb	0	; () banked
  2383  0011BC  0100               	movlb	0	; () banked
  2384  0011BE  1375               	iorwf	sprintf@flag& (0+255),f,b
  2385                           
  2386                           ; BSR set to: 0
  2387                           ;doprnt.c: 1270: _val._val = -_val._val;
  2388  0011C0  0100               	movlb	0	; () banked
  2389  0011C2  0100               	movlb	0	; () banked
  2390  0011C4  1F73               	comf	(sprintf@_val+3)& (0+255),f,b
  2391  0011C6  0100               	movlb	0	; () banked
  2392  0011C8  1F72               	comf	(sprintf@_val+2)& (0+255),f,b
  2393  0011CA  0100               	movlb	0	; () banked
  2394  0011CC  1F71               	comf	(sprintf@_val+1)& (0+255),f,b
  2395  0011CE  0100               	movlb	0	; () banked
  2396  0011D0  6D70               	negf	sprintf@_val& (0+255),b
  2397  0011D2  0E00               	movlw	0
  2398  0011D4  0100               	movlb	0	; () banked
  2399  0011D6  2371               	addwfc	(sprintf@_val+1)& (0+255),f,b
  2400  0011D8  0100               	movlb	0	; () banked
  2401  0011DA  2372               	addwfc	(sprintf@_val+2)& (0+255),f,b
  2402  0011DC  0100               	movlb	0	; () banked
  2403  0011DE  2373               	addwfc	(sprintf@_val+3)& (0+255),f,b
  2404  0011E0                     l4406:
  2405                           
  2406                           ; BSR set to: 0
  2407                           ;doprnt.c: 1271: }
  2408                           ;doprnt.c: 1273: }
  2409                           ;doprnt.c: 1297: if(prec == 0 && _val._val == 0)
  2410  0011E0  0100               	movlb	0	; () banked
  2411  0011E2  0100               	movlb	0	; () banked
  2412  0011E4  517F               	movf	(sprintf@prec+1)& (0+255),w,b
  2413  0011E6  117E               	iorwf	sprintf@prec& (0+255),w,b
  2414  0011E8  A4D8               	btfss	status,2,c
  2415  0011EA  D00C               	goto	l4412
  2416                           
  2417                           ; BSR set to: 0
  2418  0011EC  0100               	movlb	0	; () banked
  2419  0011EE  0100               	movlb	0	; () banked
  2420  0011F0  5173               	movf	(sprintf@_val+3)& (0+255),w,b
  2421  0011F2  1170               	iorwf	sprintf@_val& (0+255),w,b
  2422  0011F4  1171               	iorwf	(sprintf@_val+1)& (0+255),w,b
  2423  0011F6  1172               	iorwf	(sprintf@_val+2)& (0+255),w,b
  2424  0011F8  A4D8               	btfss	status,2,c
  2425  0011FA  D004               	goto	l4412
  2426                           
  2427                           ; BSR set to: 0
  2428                           ;doprnt.c: 1298: prec++;
  2429  0011FC  0100               	movlb	0	; () banked
  2430  0011FE  0100               	movlb	0	; () banked
  2431  001200  4B7E               	infsnz	sprintf@prec& (0+255),f,b
  2432  001202  2B7F               	incf	(sprintf@prec+1)& (0+255),f,b
  2433  001204                     l4412:
  2434                           
  2435                           ; BSR set to: 0
  2436                           ;doprnt.c: 1312: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2437  001204  6E52               	movwf	??_sprintf& (0+255),c
  2438  001206  0E01               	movlw	1
  2439  001208  0100               	movlb	0	; () banked
  2440  00120A  0100               	movlb	0	; () banked
  2441  00120C  6F80               	movwf	sprintf@c& (0+255),b
  2442  00120E  5052               	movf	??_sprintf& (0+255),w,c
  2443  001210                     
  2444                           ; BSR set to: 0
  2445  001210  0100               	movlb	0	; () banked
  2446  001212  0100               	movlb	0	; () banked
  2447  001214  5180               	movf	sprintf@c& (0+255),w,b
  2448  001216  0A0A               	xorlw	10
  2449  001218  B4D8               	btfsc	status,2,c
  2450  00121A  D021               	goto	l4426
  2451                           
  2452                           ; BSR set to: 0
  2453                           ;doprnt.c: 1313: if(_val._val < dpowers[c])
  2454                           
  2455                           ; BSR set to: 0
  2456                           
  2457                           ; BSR set to: 0
  2458  00121C  0100               	movlb	0	; () banked
  2459  00121E  0100               	movlb	0	; () banked
  2460  001220  5180               	movf	sprintf@c& (0+255),w,b
  2461  001222  0D04               	mullw	4
  2462  001224  0E00               	movlw	low _dpowers
  2463  001226  24F3               	addwf	prodl,w,c
  2464  001228  6EF6               	movwf	tblptrl,c
  2465  00122A  0E08               	movlw	high _dpowers
  2466  00122C  20F4               	addwfc	prodh,w,c
  2467  00122E  6EF7               	movwf	tblptrh,c
  2468  001230  0009               	tblrd		*+
  2469  001232  50F5               	movf	tablat,w,c
  2470  001234  0100               	movlb	0	; () banked
  2471  001236  0100               	movlb	0	; () banked
  2472  001238  5D70               	subwf	sprintf@_val& (0+255),w,b
  2473  00123A  0009               	tblrd		*+
  2474  00123C  50F5               	movf	tablat,w,c
  2475  00123E  0100               	movlb	0	; () banked
  2476  001240  5971               	subwfb	(sprintf@_val+1)& (0+255),w,b
  2477  001242  0009               	tblrd		*+
  2478  001244  50F5               	movf	tablat,w,c
  2479  001246  0100               	movlb	0	; () banked
  2480  001248  5972               	subwfb	(sprintf@_val+2)& (0+255),w,b
  2481  00124A  0009               	tblrd		*+
  2482  00124C  50F5               	movf	tablat,w,c
  2483  00124E  0100               	movlb	0	; () banked
  2484  001250  5973               	subwfb	(sprintf@_val+3)& (0+255),w,b
  2485  001252  A0D8               	btfss	status,0,c
  2486  001254  D004               	goto	l4426
  2487                           
  2488                           ; BSR set to: 0
  2489                           
  2490                           ; BSR set to: 0
  2491                           
  2492                           ; BSR set to: 0
  2493                           ;doprnt.c: 1314: break;
  2494  001256  0100               	movlb	0	; () banked
  2495  001258  0100               	movlb	0	; () banked
  2496  00125A  2B80               	incf	sprintf@c& (0+255),f,b
  2497  00125C  D7D9               	goto	L4
  2498  00125E                     l4426:
  2499                           
  2500                           ; BSR set to: 0
  2501                           ;doprnt.c: 1346: if(c < prec)
  2502  00125E  0E80               	movlw	128
  2503  001260  0100               	movlb	0	; () banked
  2504  001262  0100               	movlb	0	; () banked
  2505  001264  BF80               	btfsc	sprintf@c& (0+255),7,b
  2506  001266  0E7F               	movlw	127
  2507  001268  6E52               	movwf	??_sprintf& (0+255),c
  2508  00126A  0100               	movlb	0	; () banked
  2509  00126C  0100               	movlb	0	; () banked
  2510  00126E  517E               	movf	sprintf@prec& (0+255),w,b
  2511  001270  0100               	movlb	0	; () banked
  2512  001272  0100               	movlb	0	; () banked
  2513  001274  5D80               	subwf	sprintf@c& (0+255),w,b
  2514  001276  0100               	movlb	0	; () banked
  2515  001278  0100               	movlb	0	; () banked
  2516  00127A  517F               	movf	(sprintf@prec+1)& (0+255),w,b
  2517  00127C  0A80               	xorlw	128
  2518  00127E  5852               	subwfb	??_sprintf& (0+255),w,c
  2519  001280  B0D8               	btfsc	status,0,c
  2520  001282  D003               	goto	l4430
  2521                           
  2522                           ; BSR set to: 0
  2523                           ;doprnt.c: 1347: c = prec;
  2524  001284  C07E  F080         	movff	sprintf@prec,sprintf@c
  2525  001288  D01E               	goto	l4434
  2526  00128A                     l4430:
  2527                           
  2528                           ; BSR set to: 0
  2529                           ;doprnt.c: 1348: else if(prec < c)
  2530  00128A  0100               	movlb	0	; () banked
  2531  00128C  0100               	movlb	0	; () banked
  2532  00128E  517F               	movf	(sprintf@prec+1)& (0+255),w,b
  2533  001290  0A80               	xorlw	128
  2534  001292  6E52               	movwf	??_sprintf& (0+255),c
  2535  001294  0100               	movlb	0	; () banked
  2536  001296  0100               	movlb	0	; () banked
  2537  001298  5180               	movf	sprintf@c& (0+255),w,b
  2538  00129A  0100               	movlb	0	; () banked
  2539  00129C  0100               	movlb	0	; () banked
  2540  00129E  5D7E               	subwf	sprintf@prec& (0+255),w,b
  2541  0012A0  0E80               	movlw	128
  2542  0012A2  0100               	movlb	0	; () banked
  2543  0012A4  0100               	movlb	0	; () banked
  2544  0012A6  BF80               	btfsc	sprintf@c& (0+255),7,b
  2545  0012A8  0E7F               	movlw	127
  2546  0012AA  5852               	subwfb	??_sprintf& (0+255),w,c
  2547  0012AC  B0D8               	btfsc	status,0,c
  2548  0012AE  D00B               	goto	l4434
  2549                           
  2550                           ; BSR set to: 0
  2551                           ;doprnt.c: 1349: prec = c;
  2552  0012B0  0100               	movlb	0	; () banked
  2553  0012B2  0100               	movlb	0	; () banked
  2554  0012B4  5180               	movf	sprintf@c& (0+255),w,b
  2555  0012B6  0100               	movlb	0	; () banked
  2556  0012B8  0100               	movlb	0	; () banked
  2557  0012BA  6F7E               	movwf	sprintf@prec& (0+255),b
  2558  0012BC  0100               	movlb	0	; () banked
  2559  0012BE  6B7F               	clrf	(sprintf@prec+1)& (0+255),b
  2560  0012C0  0100               	movlb	0	; () banked
  2561  0012C2  BF7E               	btfsc	sprintf@prec& (0+255),7,b
  2562  0012C4  077F               	decf	(sprintf@prec+1)& (0+255),f,b
  2563  0012C6                     l4434:
  2564                           
  2565                           ; BSR set to: 0
  2566                           ;doprnt.c: 1352: if(width && flag & 0x03)
  2567  0012C6  0100               	movlb	0	; () banked
  2568  0012C8  0100               	movlb	0	; () banked
  2569  0012CA  517A               	movf	(sprintf@width+1)& (0+255),w,b
  2570  0012CC  1179               	iorwf	sprintf@width& (0+255),w,b
  2571  0012CE  B4D8               	btfsc	status,2,c
  2572  0012D0  D013               	goto	l4440
  2573                           
  2574                           ; BSR set to: 0
  2575  0012D2  0E03               	movlw	3
  2576  0012D4  0100               	movlb	0	; () banked
  2577  0012D6  0100               	movlb	0	; () banked
  2578  0012D8  1575               	andwf	sprintf@flag& (0+255),w,b
  2579  0012DA  6E52               	movwf	??_sprintf& (0+255),c
  2580  0012DC  0E00               	movlw	0
  2581  0012DE  0100               	movlb	0	; () banked
  2582  0012E0  0100               	movlb	0	; () banked
  2583  0012E2  1576               	andwf	(sprintf@flag+1)& (0+255),w,b
  2584  0012E4  6E53               	movwf	(??_sprintf+1)& (0+255),c
  2585  0012E6  5053               	movf	??_sprintf+1,w,c
  2586  0012E8  1052               	iorwf	??_sprintf,w,c
  2587  0012EA  B4D8               	btfsc	status,2,c
  2588  0012EC  D005               	goto	l4440
  2589                           
  2590                           ; BSR set to: 0
  2591                           ;doprnt.c: 1353: width--;
  2592  0012EE  0100               	movlb	0	; () banked
  2593  0012F0  0100               	movlb	0	; () banked
  2594  0012F2  0779               	decf	sprintf@width& (0+255),f,b
  2595  0012F4  A0D8               	btfss	status,0,c
  2596  0012F6  077A               	decf	(sprintf@width+1)& (0+255),f,b
  2597  0012F8                     l4440:
  2598                           
  2599                           ; BSR set to: 0
  2600                           ;doprnt.c: 1355: if(flag & 0x4000) {
  2601  0012F8  0100               	movlb	0	; () banked
  2602  0012FA  0100               	movlb	0	; () banked
  2603  0012FC  AD76               	btfss	(sprintf@flag+1)& (0+255),6,b
  2604  0012FE  D026               	goto	l4448
  2605                           
  2606                           ; BSR set to: 0
  2607                           ;doprnt.c: 1356: if(width > prec)
  2608  001300  0100               	movlb	0	; () banked
  2609  001302  0100               	movlb	0	; () banked
  2610  001304  517F               	movf	(sprintf@prec+1)& (0+255),w,b
  2611  001306  0A80               	xorlw	128
  2612  001308  6E52               	movwf	??_sprintf& (0+255),c
  2613  00130A  0100               	movlb	0	; () banked
  2614  00130C  0100               	movlb	0	; () banked
  2615  00130E  5179               	movf	sprintf@width& (0+255),w,b
  2616  001310  0100               	movlb	0	; () banked
  2617  001312  0100               	movlb	0	; () banked
  2618  001314  5D7E               	subwf	sprintf@prec& (0+255),w,b
  2619  001316  0100               	movlb	0	; () banked
  2620  001318  0100               	movlb	0	; () banked
  2621  00131A  517A               	movf	(sprintf@width+1)& (0+255),w,b
  2622  00131C  0A80               	xorlw	128
  2623  00131E  5852               	subwfb	??_sprintf& (0+255),w,c
  2624  001320  B0D8               	btfsc	status,0,c
  2625  001322  D00D               	goto	l4446
  2626                           
  2627                           ; BSR set to: 0
  2628                           ;doprnt.c: 1357: width -= prec;
  2629  001324  0100               	movlb	0	; () banked
  2630  001326  0100               	movlb	0	; () banked
  2631  001328  517E               	movf	sprintf@prec& (0+255),w,b
  2632  00132A  0100               	movlb	0	; () banked
  2633  00132C  0100               	movlb	0	; () banked
  2634  00132E  5F79               	subwf	sprintf@width& (0+255),f,b
  2635  001330  0100               	movlb	0	; () banked
  2636  001332  0100               	movlb	0	; () banked
  2637  001334  517F               	movf	(sprintf@prec+1)& (0+255),w,b
  2638  001336  0100               	movlb	0	; () banked
  2639  001338  0100               	movlb	0	; () banked
  2640  00133A  5B7A               	subwfb	(sprintf@width+1)& (0+255),f,b
  2641  00133C  D007               	goto	l4448
  2642  00133E                     l4446:
  2643                           
  2644                           ; BSR set to: 0
  2645                           ;doprnt.c: 1358: else
  2646                           ;doprnt.c: 1359: width = 0;
  2647  00133E  0E00               	movlw	0
  2648  001340  0100               	movlb	0	; () banked
  2649  001342  0100               	movlb	0	; () banked
  2650  001344  6F7A               	movwf	(sprintf@width+1)& (0+255),b
  2651  001346  0E00               	movlw	0
  2652  001348  0100               	movlb	0	; () banked
  2653  00134A  6F79               	movwf	sprintf@width& (0+255),b
  2654  00134C                     l4448:
  2655                           
  2656                           ; BSR set to: 0
  2657                           ;doprnt.c: 1360: }
  2658                           ;doprnt.c: 1388: if(width > c)
  2659  00134C  0E80               	movlw	128
  2660  00134E  0100               	movlb	0	; () banked
  2661  001350  0100               	movlb	0	; () banked
  2662  001352  BF80               	btfsc	sprintf@c& (0+255),7,b
  2663  001354  0E7F               	movlw	127
  2664  001356  6E52               	movwf	??_sprintf& (0+255),c
  2665  001358  0100               	movlb	0	; () banked
  2666  00135A  0100               	movlb	0	; () banked
  2667  00135C  5179               	movf	sprintf@width& (0+255),w,b
  2668  00135E  0100               	movlb	0	; () banked
  2669  001360  0100               	movlb	0	; () banked
  2670  001362  5D80               	subwf	sprintf@c& (0+255),w,b
  2671  001364  0100               	movlb	0	; () banked
  2672  001366  0100               	movlb	0	; () banked
  2673  001368  517A               	movf	(sprintf@width+1)& (0+255),w,b
  2674  00136A  0A80               	xorlw	128
  2675  00136C  5852               	subwfb	??_sprintf& (0+255),w,c
  2676  00136E  B0D8               	btfsc	status,0,c
  2677  001370  D00E               	goto	l4452
  2678                           
  2679                           ; BSR set to: 0
  2680                           ;doprnt.c: 1389: width -= c;
  2681  001372  0100               	movlb	0	; () banked
  2682  001374  0100               	movlb	0	; () banked
  2683  001376  5180               	movf	sprintf@c& (0+255),w,b
  2684  001378  0100               	movlb	0	; () banked
  2685  00137A  0100               	movlb	0	; () banked
  2686  00137C  5F79               	subwf	sprintf@width& (0+255),f,b
  2687  00137E  0E00               	movlw	0
  2688  001380  0100               	movlb	0	; () banked
  2689  001382  BF80               	btfsc	sprintf@c& (0+255),7,b
  2690  001384  0EFF               	movlw	255
  2691  001386  0100               	movlb	0	; () banked
  2692  001388  0100               	movlb	0	; () banked
  2693  00138A  5B7A               	subwfb	(sprintf@width+1)& (0+255),f,b
  2694  00138C  D007               	goto	l4454
  2695  00138E                     l4452:
  2696                           
  2697                           ; BSR set to: 0
  2698                           ;doprnt.c: 1390: else
  2699                           ;doprnt.c: 1391: width = 0;
  2700  00138E  0E00               	movlw	0
  2701  001390  0100               	movlb	0	; () banked
  2702  001392  0100               	movlb	0	; () banked
  2703  001394  6F7A               	movwf	(sprintf@width+1)& (0+255),b
  2704  001396  0E00               	movlw	0
  2705  001398  0100               	movlb	0	; () banked
  2706  00139A  6F79               	movwf	sprintf@width& (0+255),b
  2707  00139C                     l4454:
  2708                           
  2709                           ; BSR set to: 0
  2710                           ;doprnt.c: 1394: if(flag & 0x04) {
  2711  00139C  0100               	movlb	0	; () banked
  2712  00139E  0100               	movlb	0	; () banked
  2713  0013A0  A575               	btfss	sprintf@flag& (0+255),2,b
  2714  0013A2  D02A               	goto	l4470
  2715                           
  2716                           ; BSR set to: 0
  2717                           ;doprnt.c: 1399: if(flag & 0x03)
  2718  0013A4  0E03               	movlw	3
  2719  0013A6  0100               	movlb	0	; () banked
  2720  0013A8  0100               	movlb	0	; () banked
  2721  0013AA  1575               	andwf	sprintf@flag& (0+255),w,b
  2722  0013AC  6E52               	movwf	??_sprintf& (0+255),c
  2723  0013AE  0E00               	movlw	0
  2724  0013B0  0100               	movlb	0	; () banked
  2725  0013B2  0100               	movlb	0	; () banked
  2726  0013B4  1576               	andwf	(sprintf@flag+1)& (0+255),w,b
  2727  0013B6  6E53               	movwf	(??_sprintf+1)& (0+255),c
  2728  0013B8  5053               	movf	??_sprintf+1,w,c
  2729  0013BA  1052               	iorwf	??_sprintf,w,c
  2730  0013BC  B4D8               	btfsc	status,2,c
  2731  0013BE  D008               	goto	l4462
  2732                           
  2733                           ; BSR set to: 0
  2734                           ;doprnt.c: 1400: ((*sp++ = ('-')));
  2735  0013C0  C04B  FFD9         	movff	sprintf@sp,fsr2l
  2736  0013C4  C04C  FFDA         	movff	sprintf@sp+1,fsr2h
  2737  0013C8  0E2D               	movlw	45
  2738  0013CA  6EDF               	movwf	indf2,c
  2739                           
  2740                           ; BSR set to: 0
  2741  0013CC  4A4B               	infsnz	sprintf@sp,f,c
  2742  0013CE  2A4C               	incf	sprintf@sp+1,f,c
  2743  0013D0                     l4462:
  2744                           
  2745                           ; BSR set to: 0
  2746                           ;doprnt.c: 1422: if(width)
  2747  0013D0  0100               	movlb	0	; () banked
  2748  0013D2  0100               	movlb	0	; () banked
  2749  0013D4  517A               	movf	(sprintf@width+1)& (0+255),w,b
  2750  0013D6  1179               	iorwf	sprintf@width& (0+255),w,b
  2751  0013D8  B4D8               	btfsc	status,2,c
  2752  0013DA  D083               	goto	l4490
  2753                           
  2754                           ; BSR set to: 0
  2755                           ;doprnt.c: 1424: ((*sp++ = ('0')));
  2756                           
  2757                           ; BSR set to: 0
  2758                           
  2759                           ;doprnt.c: 1423: do
  2760  0013DC  C04B  FFD9         	movff	sprintf@sp,fsr2l
  2761  0013E0  C04C  FFDA         	movff	sprintf@sp+1,fsr2h
  2762  0013E4  0E30               	movlw	48
  2763  0013E6  6EDF               	movwf	indf2,c
  2764                           
  2765                           ; BSR set to: 0
  2766  0013E8  4A4B               	infsnz	sprintf@sp,f,c
  2767  0013EA  2A4C               	incf	sprintf@sp+1,f,c
  2768                           
  2769                           ; BSR set to: 0
  2770                           ;doprnt.c: 1425: while(--width);
  2771  0013EC  0100               	movlb	0	; () banked
  2772  0013EE  0100               	movlb	0	; () banked
  2773  0013F0  0779               	decf	sprintf@width& (0+255),f,b
  2774  0013F2  A0D8               	btfss	status,0,c
  2775  0013F4  077A               	decf	(sprintf@width+1)& (0+255),f,b
  2776  0013F6  D7ED               	goto	L6
  2777  0013F8                     l4470:
  2778                           
  2779                           ; BSR set to: 0
  2780                           ;doprnt.c: 1429: {
  2781                           ;doprnt.c: 1431: if(width
  2782                           ;doprnt.c: 1435: )
  2783  0013F8  0100               	movlb	0	; () banked
  2784  0013FA  0100               	movlb	0	; () banked
  2785  0013FC  517A               	movf	(sprintf@width+1)& (0+255),w,b
  2786  0013FE  1179               	iorwf	sprintf@width& (0+255),w,b
  2787  001400  B4D8               	btfsc	status,2,c
  2788  001402  D012               	goto	l4478
  2789  001404                     l4472:
  2790                           
  2791                           ; BSR set to: 0
  2792                           ;doprnt.c: 1437: ((*sp++ = (' ')));
  2793  001404  C04B  FFD9         	movff	sprintf@sp,fsr2l
  2794  001408  C04C  FFDA         	movff	sprintf@sp+1,fsr2h
  2795  00140C  0E20               	movlw	32
  2796  00140E  6EDF               	movwf	indf2,c
  2797                           
  2798                           ; BSR set to: 0
  2799  001410  4A4B               	infsnz	sprintf@sp,f,c
  2800  001412  2A4C               	incf	sprintf@sp+1,f,c
  2801                           
  2802                           ; BSR set to: 0
  2803                           ;doprnt.c: 1438: while(--width);
  2804  001414  0100               	movlb	0	; () banked
  2805  001416  0100               	movlb	0	; () banked
  2806  001418  0779               	decf	sprintf@width& (0+255),f,b
  2807  00141A  A0D8               	btfss	status,0,c
  2808  00141C  077A               	decf	(sprintf@width+1)& (0+255),f,b
  2809  00141E  0100               	movlb	0	; () banked
  2810  001420  517A               	movf	(sprintf@width+1)& (0+255),w,b
  2811  001422  1179               	iorwf	sprintf@width& (0+255),w,b
  2812  001424  A4D8               	btfss	status,2,c
  2813  001426  D7EE               	goto	l4472
  2814  001428                     l4478:
  2815                           
  2816                           ; BSR set to: 0
  2817                           ;doprnt.c: 1445: if(flag & 0x03)
  2818  001428  0E03               	movlw	3
  2819  00142A  0100               	movlb	0	; () banked
  2820  00142C  0100               	movlb	0	; () banked
  2821  00142E  1575               	andwf	sprintf@flag& (0+255),w,b
  2822  001430  6E52               	movwf	??_sprintf& (0+255),c
  2823  001432  0E00               	movlw	0
  2824  001434  0100               	movlb	0	; () banked
  2825  001436  0100               	movlb	0	; () banked
  2826  001438  1576               	andwf	(sprintf@flag+1)& (0+255),w,b
  2827  00143A  6E53               	movwf	(??_sprintf+1)& (0+255),c
  2828  00143C  5053               	movf	??_sprintf+1,w,c
  2829  00143E  1052               	iorwf	??_sprintf,w,c
  2830  001440  B4D8               	btfsc	status,2,c
  2831  001442  D04F               	goto	l4490
  2832                           
  2833                           ; BSR set to: 0
  2834                           ;doprnt.c: 1446: ((*sp++ = ('-')));
  2835  001444  C04B  FFD9         	movff	sprintf@sp,fsr2l
  2836  001448  C04C  FFDA         	movff	sprintf@sp+1,fsr2h
  2837  00144C  0E2D               	movlw	45
  2838  00144E  6EDF               	movwf	indf2,c
  2839  001450  D046               	goto	L5
  2840  001452                     l4484:
  2841                           
  2842                           ; BSR set to: 0
  2843                           ;doprnt.c: 1485: {
  2844                           ;doprnt.c: 1496: c = (_val._val / dpowers[prec]) % 10 + '0';
  2845  001452  0100               	movlb	0	; () banked
  2846  001454  C07E  F052         	movff	sprintf@prec,??_sprintf
  2847  001458  0100               	movlb	0	; () banked
  2848  00145A  C07F  F053         	movff	sprintf@prec+1,??_sprintf+1
  2849  00145E  90D8               	bcf	status,0,c
  2850  001460  3652               	rlcf	??_sprintf,f,c
  2851  001462  3653               	rlcf	??_sprintf+1,f,c
  2852  001464  90D8               	bcf	status,0,c
  2853  001466  3652               	rlcf	??_sprintf,f,c
  2854  001468  3653               	rlcf	??_sprintf+1,f,c
  2855  00146A  0E00               	movlw	low _dpowers
  2856  00146C  2452               	addwf	??_sprintf,w,c
  2857  00146E  6EF6               	movwf	tblptrl,c
  2858  001470  0E08               	movlw	high _dpowers
  2859  001472  2053               	addwfc	??_sprintf+1,w,c
  2860  001474  6EF7               	movwf	tblptrh,c
  2861  001476  0009               	tblrd		*+
  2862  001478  CFF5 F005          	movff	tablat,?___lldiv+4
  2863  00147C  0009               	tblrd		*+
  2864  00147E  CFF5 F006          	movff	tablat,?___lldiv+5
  2865  001482  0009               	tblrd		*+
  2866  001484  CFF5 F007          	movff	tablat,?___lldiv+6
  2867  001488  000A               	tblrd		*-
  2868  00148A  CFF5 F008          	movff	tablat,?___lldiv+7
  2869  00148E  C070  F001         	movff	sprintf@_val,?___lldiv
  2870  001492  C071  F002         	movff	sprintf@_val+1,?___lldiv+1
  2871  001496  C072  F003         	movff	sprintf@_val+2,?___lldiv+2
  2872  00149A  C073  F004         	movff	sprintf@_val+3,?___lldiv+3
  2873  00149E  EC63  F013         	call	___lldiv	;wreg free
  2874  0014A2  C004  F012         	movff	?___lldiv+3,?___llmod+3
  2875  0014A6  C003  F011         	movff	?___lldiv+2,?___llmod+2
  2876  0014AA  C002  F010         	movff	?___lldiv+1,?___llmod+1
  2877  0014AE  C001  F00F         	movff	?___lldiv,?___llmod
  2878  0014B2  0E0A               	movlw	10
  2879  0014B4  6E13               	movwf	?___llmod+4,c
  2880  0014B6  0E00               	movlw	0
  2881  0014B8  6E14               	movwf	?___llmod+5,c
  2882  0014BA  0E00               	movlw	0
  2883  0014BC  6E15               	movwf	?___llmod+6,c
  2884  0014BE  0E00               	movlw	0
  2885  0014C0  6E16               	movwf	?___llmod+7,c
  2886  0014C2  EC23  F014         	call	___llmod	;wreg free
  2887  0014C6  500F               	movf	?___llmod,w,c
  2888  0014C8  0F30               	addlw	48
  2889  0014CA  0100               	movlb	0	; () banked
  2890  0014CC  0100               	movlb	0	; () banked
  2891  0014CE  6F80               	movwf	sprintf@c& (0+255),b
  2892                           
  2893                           ; BSR set to: 0
  2894                           ;doprnt.c: 1530: }
  2895                           ;doprnt.c: 1531: ((*sp++ = (c)));
  2896  0014D0  C04B  FFD9         	movff	sprintf@sp,fsr2l
  2897  0014D4  C04C  FFDA         	movff	sprintf@sp+1,fsr2h
  2898  0014D8  0100               	movlb	0	; () banked
  2899  0014DA  C080  FFDF         	movff	sprintf@c,indf2
  2900  0014DE                     L5:
  2901                           
  2902                           ; BSR set to: 0
  2903  0014DE  4A4B               	infsnz	sprintf@sp,f,c
  2904  0014E0  2A4C               	incf	sprintf@sp+1,f,c
  2905  0014E2                     l4490:
  2906                           
  2907                           ; BSR set to: 0
  2908  0014E2  0100               	movlb	0	; () banked
  2909  0014E4  0100               	movlb	0	; () banked
  2910  0014E6  077E               	decf	sprintf@prec& (0+255),f,b
  2911  0014E8  A0D8               	btfss	status,0,c
  2912  0014EA  077F               	decf	(sprintf@prec+1)& (0+255),f,b
  2913  0014EC  0100               	movlb	0	; () banked
  2914  0014EE  297E               	incf	sprintf@prec& (0+255),w,b
  2915  0014F0  B4D8               	btfsc	status,2,c
  2916  0014F2  297F               	incf	(sprintf@prec+1)& (0+255),w,b
  2917  0014F4  A4D8               	btfss	status,2,c
  2918  0014F6  D7AD               	goto	l4484
  2919  0014F8                     l4492:
  2920                           
  2921                           ; BSR set to: 0
  2922  0014F8  C04D  FFF6         	movff	sprintf@f,tblptrl
  2923  0014FC  C04E  FFF7         	movff	sprintf@f+1,tblptrh
  2924  001500  4A4D               	infsnz	sprintf@f,f,c
  2925  001502  2A4E               	incf	sprintf@f+1,f,c
  2926  001504  0008               	tblrd		*
  2927  001506  0100               	movlb	0	; () banked
  2928  001508  CFF5 F080          	movff	tablat,sprintf@c
  2929  00150C  0100               	movlb	0	; () banked
  2930  00150E  6780               	tstfsz	sprintf@c& (0+255),b
  2931  001510  EF53  F004         	goto	l4168
  2932  001514                     l4494:
  2933                           
  2934                           ; BSR set to: 0
  2935                           ;doprnt.c: 1545: *sp = 0;
  2936  001514  C04B  FFD9         	movff	sprintf@sp,fsr2l
  2937  001518  C04C  FFDA         	movff	sprintf@sp+1,fsr2h
  2938  00151C  0E00               	movlw	0
  2939  00151E  6EDF               	movwf	indf2,c
  2940                           
  2941                           ; BSR set to: 0
  2942                           
  2943                           ; BSR set to: 0
  2944                           ;doprnt.c: 1547: return 0;
  2945                           ;	Return value of _sprintf is never used
  2946  001520  0012               	return	
  2947  001522                     __end_of_sprintf:
  2948                           	opt stack 0
  2949                           tblptru	equ	0xFF8
  2950                           tblptrh	equ	0xFF7
  2951                           tblptrl	equ	0xFF6
  2952                           tablat	equ	0xFF5
  2953                           prodh	equ	0xFF4
  2954                           prodl	equ	0xFF3
  2955                           postinc0	equ	0xFEE
  2956                           wreg	equ	0xFE8
  2957                           indf2	equ	0xFDF
  2958                           postinc2	equ	0xFDE
  2959                           postdec2	equ	0xFDD
  2960                           fsr2h	equ	0xFDA
  2961                           fsr2l	equ	0xFD9
  2962                           status	equ	0xFD8
  2963                           
  2964 ;; *************** function ___lwmod *****************
  2965 ;; Defined at:
  2966 ;;		line 10 in file "E:\Program Files\Microchip\xc8\v1.20\sources\common\lwmod.c"
  2967 ;; Parameters:    Size  Location     Type
  2968 ;;  dividend        2    0[COMRAM] unsigned int 
  2969 ;;  divisor         2    2[COMRAM] unsigned int 
  2970 ;; Auto vars:     Size  Location     Type
  2971 ;;  counter         1    5[COMRAM] unsigned char 
  2972 ;; Return value:  Size  Location     Type
  2973 ;;                  2    0[COMRAM] unsigned int 
  2974 ;; Registers used:
  2975 ;;		wreg, status,2, status,0
  2976 ;; Tracked objects:
  2977 ;;		On entry : 0/0
  2978 ;;		On exit  : 0/0
  2979 ;;		Unchanged: 0/0
  2980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2981 ;;      Params:         4       0       0       0       0       0       0       0       0
  2982 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2983 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2984 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2985 ;;Total ram usage:        6 bytes
  2986 ;; Hardware stack levels used:    1
  2987 ;; This function calls:
  2988 ;;		Nothing
  2989 ;; This function is called by:
  2990 ;;		_sprintf
  2991 ;; This function uses a non-reentrant model
  2992 ;;
  2993                           
  2994                           	psect	text2
  2995  0029C0                     __ptext2:
  2996                           	opt stack 0
  2997  0029C0                     ___lwmod:
  2998                           	opt stack 29
  2999                           
  3000                           ; BSR set to: 0
  3001                           ;incstack = 0
  3002                           ;incstack = 0
  3003  0029C0  5004               	movf	___lwmod@divisor+1,w,c
  3004  0029C2  1003               	iorwf	___lwmod@divisor,w,c
  3005  0029C4  B4D8               	btfsc	status,2,c
  3006  0029C6  D01A               	goto	l830
  3007  0029C8  6E05               	movwf	??___lwmod& (0+255),c
  3008  0029CA  0E01               	movlw	1
  3009  0029CC  6E06               	movwf	___lwmod@counter,c
  3010  0029CE  5005               	movf	??___lwmod& (0+255),w,c
  3011  0029D0  D004               	goto	l3668
  3012  0029D2                     l3666:
  3013  0029D2  90D8               	bcf	status,0,c
  3014  0029D4  3603               	rlcf	___lwmod@divisor,f,c
  3015  0029D6  3604               	rlcf	___lwmod@divisor+1,f,c
  3016  0029D8  2A06               	incf	___lwmod@counter,f,c
  3017  0029DA                     l3668:
  3018  0029DA  AE04               	btfss	___lwmod@divisor+1,7,c
  3019  0029DC  D7FA               	goto	l3666
  3020  0029DE                     l3670:
  3021  0029DE  5003               	movf	___lwmod@divisor,w,c
  3022  0029E0  5C01               	subwf	___lwmod@dividend,w,c
  3023  0029E2  5004               	movf	___lwmod@divisor+1,w,c
  3024  0029E4  5802               	subwfb	___lwmod@dividend+1,w,c
  3025  0029E6  A0D8               	btfss	status,0,c
  3026  0029E8  D004               	goto	l3674
  3027  0029EA  5003               	movf	___lwmod@divisor,w,c
  3028  0029EC  5E01               	subwf	___lwmod@dividend,f,c
  3029  0029EE  5004               	movf	___lwmod@divisor+1,w,c
  3030  0029F0  5A02               	subwfb	___lwmod@dividend+1,f,c
  3031  0029F2                     l3674:
  3032  0029F2  90D8               	bcf	status,0,c
  3033  0029F4  3204               	rrcf	___lwmod@divisor+1,f,c
  3034  0029F6  3203               	rrcf	___lwmod@divisor,f,c
  3035  0029F8  2E06               	decfsz	___lwmod@counter,f,c
  3036  0029FA  D7F1               	goto	l3670
  3037  0029FC                     l830:
  3038  0029FC  C001  F001         	movff	___lwmod@dividend,?___lwmod
  3039  002A00  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
  3040  002A04  0012               	return	
  3041  002A06                     __end_of___lwmod:
  3042                           	opt stack 0
  3043                           tblptru	equ	0xFF8
  3044                           tblptrh	equ	0xFF7
  3045                           tblptrl	equ	0xFF6
  3046                           tablat	equ	0xFF5
  3047                           prodh	equ	0xFF4
  3048                           prodl	equ	0xFF3
  3049                           postinc0	equ	0xFEE
  3050                           wreg	equ	0xFE8
  3051                           indf2	equ	0xFDF
  3052                           postinc2	equ	0xFDE
  3053                           postdec2	equ	0xFDD
  3054                           fsr2h	equ	0xFDA
  3055                           fsr2l	equ	0xFD9
  3056                           status	equ	0xFD8
  3057                           
  3058 ;; *************** function ___lltoft *****************
  3059 ;; Defined at:
  3060 ;;		line 36 in file "E:\Program Files\Microchip\xc8\v1.20\sources\common\lltoft.c"
  3061 ;; Parameters:    Size  Location     Type
  3062 ;;  c               4    8[COMRAM] unsigned long 
  3063 ;; Auto vars:     Size  Location     Type
  3064 ;;  exp             1   16[COMRAM] unsigned char 
  3065 ;; Return value:  Size  Location     Type
  3066 ;;                  3    8[COMRAM] float 
  3067 ;; Registers used:
  3068 ;;		wreg, status,2, status,0, cstack
  3069 ;; Tracked objects:
  3070 ;;		On entry : 0/0
  3071 ;;		On exit  : 0/0
  3072 ;;		Unchanged: 0/0
  3073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3074 ;;      Params:         4       0       0       0       0       0       0       0       0
  3075 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3076 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3077 ;;      Totals:         9       0       0       0       0       0       0       0       0
  3078 ;;Total ram usage:        9 bytes
  3079 ;; Hardware stack levels used:    1
  3080 ;; Hardware stack levels required when called:    1
  3081 ;; This function calls:
  3082 ;;		___ftpack
  3083 ;; This function is called by:
  3084 ;;		_sprintf
  3085 ;; This function uses a non-reentrant model
  3086 ;;
  3087                           
  3088                           	psect	text3
  3089  0028B0                     __ptext3:
  3090                           	opt stack 0
  3091  0028B0                     ___lltoft:
  3092                           	opt stack 28
  3093                           
  3094                           ;incstack = 0
  3095                           ;incstack = 0
  3096  0028B0  6E0D               	movwf	??___lltoft& (0+255),c
  3097  0028B2  0E8E               	movlw	142
  3098  0028B4  6E11               	movwf	___lltoft@exp,c
  3099  0028B6  500D               	movf	??___lltoft& (0+255),w,c
  3100  0028B8  D006               	goto	l3964
  3101  0028BA                     l3962:
  3102  0028BA  90D8               	bcf	status,0,c
  3103  0028BC  320C               	rrcf	___lltoft@c+3,f,c
  3104  0028BE  320B               	rrcf	___lltoft@c+2,f,c
  3105  0028C0  320A               	rrcf	___lltoft@c+1,f,c
  3106  0028C2  3209               	rrcf	___lltoft@c,f,c
  3107  0028C4  2A11               	incf	___lltoft@exp,f,c
  3108  0028C6                     l3964:
  3109  0028C6  0E00               	movlw	0
  3110  0028C8  1409               	andwf	___lltoft@c,w,c
  3111  0028CA  6E0D               	movwf	??___lltoft& (0+255),c
  3112  0028CC  0E00               	movlw	0
  3113  0028CE  140A               	andwf	___lltoft@c+1,w,c
  3114  0028D0  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  3115  0028D2  0E00               	movlw	0
  3116  0028D4  140B               	andwf	___lltoft@c+2,w,c
  3117  0028D6  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  3118  0028D8  0EFF               	movlw	255
  3119  0028DA  140C               	andwf	___lltoft@c+3,w,c
  3120  0028DC  6E10               	movwf	(??___lltoft+3)& (0+255),c
  3121  0028DE  5010               	movf	??___lltoft+3,w,c
  3122  0028E0  100D               	iorwf	??___lltoft,w,c
  3123  0028E2  100E               	iorwf	??___lltoft+1,w,c
  3124  0028E4  100F               	iorwf	??___lltoft+2,w,c
  3125  0028E6  A4D8               	btfss	status,2,c
  3126  0028E8  D7E8               	goto	l3962
  3127  0028EA  C009  F001         	movff	___lltoft@c,?___ftpack
  3128  0028EE  C00A  F002         	movff	___lltoft@c+1,?___ftpack+1
  3129  0028F2  C00B  F003         	movff	___lltoft@c+2,?___ftpack+2
  3130  0028F6  C011  F004         	movff	___lltoft@exp,?___ftpack+3
  3131  0028FA  6E0D               	movwf	??___lltoft& (0+255),c
  3132  0028FC  0E00               	movlw	0
  3133  0028FE  6E05               	movwf	?___ftpack+4,c
  3134  002900  500D               	movf	??___lltoft& (0+255),w,c
  3135  002902  EC1B  F012         	call	___ftpack	;wreg free
  3136  002906  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  3137  00290A  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  3138  00290E  C001  F009         	movff	?___ftpack,?___lltoft
  3139  002912  0012               	return	
  3140  002914                     __end_of___lltoft:
  3141                           	opt stack 0
  3142                           tblptru	equ	0xFF8
  3143                           tblptrh	equ	0xFF7
  3144                           tblptrl	equ	0xFF6
  3145                           tablat	equ	0xFF5
  3146                           prodh	equ	0xFF4
  3147                           prodl	equ	0xFF3
  3148                           postinc0	equ	0xFEE
  3149                           wreg	equ	0xFE8
  3150                           indf2	equ	0xFDF
  3151                           postinc2	equ	0xFDE
  3152                           postdec2	equ	0xFDD
  3153                           fsr2h	equ	0xFDA
  3154                           fsr2l	equ	0xFD9
  3155                           status	equ	0xFD8
  3156                           
  3157 ;; *************** function ___llmod *****************
  3158 ;; Defined at:
  3159 ;;		line 10 in file "E:\Program Files\Microchip\xc8\v1.20\sources\common\llmod.c"
  3160 ;; Parameters:    Size  Location     Type
  3161 ;;  dividend        4   14[COMRAM] unsigned long 
  3162 ;;  divisor         4   18[COMRAM] unsigned long 
  3163 ;; Auto vars:     Size  Location     Type
  3164 ;;  counter         1   23[COMRAM] unsigned char 
  3165 ;; Return value:  Size  Location     Type
  3166 ;;                  4   14[COMRAM] unsigned long 
  3167 ;; Registers used:
  3168 ;;		wreg, status,2, status,0
  3169 ;; Tracked objects:
  3170 ;;		On entry : 0/0
  3171 ;;		On exit  : 0/0
  3172 ;;		Unchanged: 0/0
  3173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3174 ;;      Params:         8       0       0       0       0       0       0       0       0
  3175 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3176 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3177 ;;      Totals:        10       0       0       0       0       0       0       0       0
  3178 ;;Total ram usage:       10 bytes
  3179 ;; Hardware stack levels used:    1
  3180 ;; This function calls:
  3181 ;;		Nothing
  3182 ;; This function is called by:
  3183 ;;		_sprintf
  3184 ;; This function uses a non-reentrant model
  3185 ;;
  3186                           
  3187                           	psect	text4
  3188  002846                     __ptext4:
  3189                           	opt stack 0
  3190  002846                     ___llmod:
  3191                           	opt stack 29
  3192                           
  3193                           ;incstack = 0
  3194                           ;incstack = 0
  3195  002846  5016               	movf	___llmod@divisor+3,w,c
  3196  002848  1013               	iorwf	___llmod@divisor,w,c
  3197  00284A  1014               	iorwf	___llmod@divisor+1,w,c
  3198  00284C  1015               	iorwf	___llmod@divisor+2,w,c
  3199  00284E  B4D8               	btfsc	status,2,c
  3200  002850  D026               	goto	l761
  3201  002852  6E17               	movwf	??___llmod& (0+255),c
  3202  002854  0E01               	movlw	1
  3203  002856  6E18               	movwf	___llmod@counter,c
  3204  002858  5017               	movf	??___llmod& (0+255),w,c
  3205  00285A  D006               	goto	l3950
  3206  00285C                     l3948:
  3207  00285C  90D8               	bcf	status,0,c
  3208  00285E  3613               	rlcf	___llmod@divisor,f,c
  3209  002860  3614               	rlcf	___llmod@divisor+1,f,c
  3210  002862  3615               	rlcf	___llmod@divisor+2,f,c
  3211  002864  3616               	rlcf	___llmod@divisor+3,f,c
  3212  002866  2A18               	incf	___llmod@counter,f,c
  3213  002868                     l3950:
  3214  002868  AE16               	btfss	___llmod@divisor+3,7,c
  3215  00286A  D7F8               	goto	l3948
  3216  00286C                     l3952:
  3217  00286C  5013               	movf	___llmod@divisor,w,c
  3218  00286E  5C0F               	subwf	___llmod@dividend,w,c
  3219  002870  5014               	movf	___llmod@divisor+1,w,c
  3220  002872  5810               	subwfb	___llmod@dividend+1,w,c
  3221  002874  5015               	movf	___llmod@divisor+2,w,c
  3222  002876  5811               	subwfb	___llmod@dividend+2,w,c
  3223  002878  5016               	movf	___llmod@divisor+3,w,c
  3224  00287A  5812               	subwfb	___llmod@dividend+3,w,c
  3225  00287C  A0D8               	btfss	status,0,c
  3226  00287E  D008               	goto	l3956
  3227  002880  5013               	movf	___llmod@divisor,w,c
  3228  002882  5E0F               	subwf	___llmod@dividend,f,c
  3229  002884  5014               	movf	___llmod@divisor+1,w,c
  3230  002886  5A10               	subwfb	___llmod@dividend+1,f,c
  3231  002888  5015               	movf	___llmod@divisor+2,w,c
  3232  00288A  5A11               	subwfb	___llmod@dividend+2,f,c
  3233  00288C  5016               	movf	___llmod@divisor+3,w,c
  3234  00288E  5A12               	subwfb	___llmod@dividend+3,f,c
  3235  002890                     l3956:
  3236  002890  90D8               	bcf	status,0,c
  3237  002892  3216               	rrcf	___llmod@divisor+3,f,c
  3238  002894  3215               	rrcf	___llmod@divisor+2,f,c
  3239  002896  3214               	rrcf	___llmod@divisor+1,f,c
  3240  002898  3213               	rrcf	___llmod@divisor,f,c
  3241  00289A  2E18               	decfsz	___llmod@counter,f,c
  3242  00289C  D7E7               	goto	l3952
  3243  00289E                     l761:
  3244  00289E  C00F  F00F         	movff	___llmod@dividend,?___llmod
  3245  0028A2  C010  F010         	movff	___llmod@dividend+1,?___llmod+1
  3246  0028A6  C011  F011         	movff	___llmod@dividend+2,?___llmod+2
  3247  0028AA  C012  F012         	movff	___llmod@dividend+3,?___llmod+3
  3248  0028AE  0012               	return	
  3249  0028B0                     __end_of___llmod:
  3250                           	opt stack 0
  3251                           tblptru	equ	0xFF8
  3252                           tblptrh	equ	0xFF7
  3253                           tblptrl	equ	0xFF6
  3254                           tablat	equ	0xFF5
  3255                           prodh	equ	0xFF4
  3256                           prodl	equ	0xFF3
  3257                           postinc0	equ	0xFEE
  3258                           wreg	equ	0xFE8
  3259                           indf2	equ	0xFDF
  3260                           postinc2	equ	0xFDE
  3261                           postdec2	equ	0xFDD
  3262                           fsr2h	equ	0xFDA
  3263                           fsr2l	equ	0xFD9
  3264                           status	equ	0xFD8
  3265                           
  3266 ;; *************** function ___lldiv *****************
  3267 ;; Defined at:
  3268 ;;		line 10 in file "E:\Program Files\Microchip\xc8\v1.20\sources\common\lldiv.c"
  3269 ;; Parameters:    Size  Location     Type
  3270 ;;  dividend        4    0[COMRAM] unsigned long 
  3271 ;;  divisor         4    4[COMRAM] unsigned long 
  3272 ;; Auto vars:     Size  Location     Type
  3273 ;;  quotient        4    9[COMRAM] unsigned long 
  3274 ;;  counter         1   13[COMRAM] unsigned char 
  3275 ;; Return value:  Size  Location     Type
  3276 ;;                  4    0[COMRAM] unsigned long 
  3277 ;; Registers used:
  3278 ;;		wreg, status,2, status,0
  3279 ;; Tracked objects:
  3280 ;;		On entry : 0/0
  3281 ;;		On exit  : 0/0
  3282 ;;		Unchanged: 0/0
  3283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3284 ;;      Params:         8       0       0       0       0       0       0       0       0
  3285 ;;      Locals:         5       0       0       0       0       0       0       0       0
  3286 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3287 ;;      Totals:        14       0       0       0       0       0       0       0       0
  3288 ;;Total ram usage:       14 bytes
  3289 ;; Hardware stack levels used:    1
  3290 ;; This function calls:
  3291 ;;		Nothing
  3292 ;; This function is called by:
  3293 ;;		_sprintf
  3294 ;; This function uses a non-reentrant model
  3295 ;;
  3296                           
  3297                           	psect	text5
  3298  0026C6                     __ptext5:
  3299                           	opt stack 0
  3300  0026C6                     ___lldiv:
  3301                           	opt stack 29
  3302                           
  3303                           ;incstack = 0
  3304                           ;incstack = 0
  3305  0026C6  0E00               	movlw	0
  3306  0026C8  6E0A               	movwf	___lldiv@quotient,c
  3307  0026CA  0E00               	movlw	0
  3308  0026CC  6E0B               	movwf	___lldiv@quotient+1,c
  3309  0026CE  0E00               	movlw	0
  3310  0026D0  6E0C               	movwf	___lldiv@quotient+2,c
  3311  0026D2  0E00               	movlw	0
  3312  0026D4  6E0D               	movwf	___lldiv@quotient+3,c
  3313  0026D6  5008               	movf	___lldiv@divisor+3,w,c
  3314  0026D8  1005               	iorwf	___lldiv@divisor,w,c
  3315  0026DA  1006               	iorwf	___lldiv@divisor+1,w,c
  3316  0026DC  1007               	iorwf	___lldiv@divisor+2,w,c
  3317  0026DE  B4D8               	btfsc	status,2,c
  3318  0026E0  D02C               	goto	l751
  3319  0026E2  6E09               	movwf	??___lldiv& (0+255),c
  3320  0026E4  0E01               	movlw	1
  3321  0026E6  6E0E               	movwf	___lldiv@counter,c
  3322  0026E8  5009               	movf	??___lldiv& (0+255),w,c
  3323  0026EA  D006               	goto	l3626
  3324  0026EC                     l3624:
  3325  0026EC  90D8               	bcf	status,0,c
  3326  0026EE  3605               	rlcf	___lldiv@divisor,f,c
  3327  0026F0  3606               	rlcf	___lldiv@divisor+1,f,c
  3328  0026F2  3607               	rlcf	___lldiv@divisor+2,f,c
  3329  0026F4  3608               	rlcf	___lldiv@divisor+3,f,c
  3330  0026F6  2A0E               	incf	___lldiv@counter,f,c
  3331  0026F8                     l3626:
  3332  0026F8  AE08               	btfss	___lldiv@divisor+3,7,c
  3333  0026FA  D7F8               	goto	l3624
  3334  0026FC                     l3628:
  3335  0026FC  90D8               	bcf	status,0,c
  3336  0026FE  360A               	rlcf	___lldiv@quotient,f,c
  3337  002700  360B               	rlcf	___lldiv@quotient+1,f,c
  3338  002702  360C               	rlcf	___lldiv@quotient+2,f,c
  3339  002704  360D               	rlcf	___lldiv@quotient+3,f,c
  3340  002706  5005               	movf	___lldiv@divisor,w,c
  3341  002708  5C01               	subwf	___lldiv@dividend,w,c
  3342  00270A  5006               	movf	___lldiv@divisor+1,w,c
  3343  00270C  5802               	subwfb	___lldiv@dividend+1,w,c
  3344  00270E  5007               	movf	___lldiv@divisor+2,w,c
  3345  002710  5803               	subwfb	___lldiv@dividend+2,w,c
  3346  002712  5008               	movf	___lldiv@divisor+3,w,c
  3347  002714  5804               	subwfb	___lldiv@dividend+3,w,c
  3348  002716  A0D8               	btfss	status,0,c
  3349  002718  D009               	goto	l3636
  3350  00271A  5005               	movf	___lldiv@divisor,w,c
  3351  00271C  5E01               	subwf	___lldiv@dividend,f,c
  3352  00271E  5006               	movf	___lldiv@divisor+1,w,c
  3353  002720  5A02               	subwfb	___lldiv@dividend+1,f,c
  3354  002722  5007               	movf	___lldiv@divisor+2,w,c
  3355  002724  5A03               	subwfb	___lldiv@dividend+2,f,c
  3356  002726  5008               	movf	___lldiv@divisor+3,w,c
  3357  002728  5A04               	subwfb	___lldiv@dividend+3,f,c
  3358  00272A  800A               	bsf	___lldiv@quotient,0,c
  3359  00272C                     l3636:
  3360  00272C  90D8               	bcf	status,0,c
  3361  00272E  3208               	rrcf	___lldiv@divisor+3,f,c
  3362  002730  3207               	rrcf	___lldiv@divisor+2,f,c
  3363  002732  3206               	rrcf	___lldiv@divisor+1,f,c
  3364  002734  3205               	rrcf	___lldiv@divisor,f,c
  3365  002736  2E0E               	decfsz	___lldiv@counter,f,c
  3366  002738  D7E1               	goto	l3628
  3367  00273A                     l751:
  3368  00273A  C00A  F001         	movff	___lldiv@quotient,?___lldiv
  3369  00273E  C00B  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  3370  002742  C00C  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  3371  002746  C00D  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  3372  00274A  0012               	return	
  3373  00274C                     __end_of___lldiv:
  3374                           	opt stack 0
  3375                           tblptru	equ	0xFF8
  3376                           tblptrh	equ	0xFF7
  3377                           tblptrl	equ	0xFF6
  3378                           tablat	equ	0xFF5
  3379                           prodh	equ	0xFF4
  3380                           prodl	equ	0xFF3
  3381                           postinc0	equ	0xFEE
  3382                           wreg	equ	0xFE8
  3383                           indf2	equ	0xFDF
  3384                           postinc2	equ	0xFDE
  3385                           postdec2	equ	0xFDD
  3386                           fsr2h	equ	0xFDA
  3387                           fsr2l	equ	0xFD9
  3388                           status	equ	0xFD8
  3389                           
  3390 ;; *************** function ___fttol *****************
  3391 ;; Defined at:
  3392 ;;		line 45 in file "E:\Program Files\Microchip\xc8\v1.20\sources\common\fttol.c"
  3393 ;; Parameters:    Size  Location     Type
  3394 ;;  f1              3   22[COMRAM] float 
  3395 ;; Auto vars:     Size  Location     Type
  3396 ;;  lval            4   32[COMRAM] unsigned long 
  3397 ;;  exp1            1   36[COMRAM] unsigned char 
  3398 ;;  sign1           1   31[COMRAM] unsigned char 
  3399 ;; Return value:  Size  Location     Type
  3400 ;;                  4   22[COMRAM] long 
  3401 ;; Registers used:
  3402 ;;		wreg, status,2, status,0
  3403 ;; Tracked objects:
  3404 ;;		On entry : 0/0
  3405 ;;		On exit  : 0/0
  3406 ;;		Unchanged: 0/0
  3407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3408 ;;      Params:         4       0       0       0       0       0       0       0       0
  3409 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3410 ;;      Temps:          5       0       0       0       0       0       0       0       0
  3411 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3412 ;;Total ram usage:       15 bytes
  3413 ;; Hardware stack levels used:    1
  3414 ;; This function calls:
  3415 ;;		Nothing
  3416 ;; This function is called by:
  3417 ;;		_sprintf
  3418 ;; This function uses a non-reentrant model
  3419 ;;
  3420                           
  3421                           	psect	text6
  3422  0021E2                     __ptext6:
  3423                           	opt stack 0
  3424  0021E2                     ___fttol:
  3425                           	opt stack 29
  3426                           
  3427                           ;incstack = 0
  3428                           ;incstack = 0
  3429  0021E2  0E0F               	movlw	15
  3430  0021E4  6E1B               	movwf	??___fttol& (0+255),c
  3431  0021E6  C017  F01C         	movff	___fttol@f1,??___fttol+1
  3432  0021EA  C018  F01D         	movff	___fttol@f1+1,??___fttol+2
  3433  0021EE  C019  F01E         	movff	___fttol@f1+2,??___fttol+3
  3434  0021F2  281B               	incf	??___fttol,w,c
  3435  0021F4  6E1F               	movwf	(??___fttol+4)& (0+255),c
  3436  0021F6  D004               	goto	u2810
  3437  0021F8                     u2815:
  3438  0021F8  90D8               	bcf	status,0,c
  3439  0021FA  321E               	rrcf	??___fttol+3,f,c
  3440  0021FC  321D               	rrcf	??___fttol+2,f,c
  3441  0021FE  321C               	rrcf	??___fttol+1,f,c
  3442  002200                     u2810:
  3443  002200  2E1F               	decfsz	(??___fttol+4)& (0+255),f,c
  3444  002202  D7FA               	goto	u2815
  3445  002204  501C               	movf	??___fttol+1,w,c
  3446  002206  6E25               	movwf	___fttol@exp1,c
  3447  002208  6625               	tstfsz	___fttol@exp1& (0+255),c
  3448  00220A  D001               	goto	l4126
  3449  00220C  D035               	goto	u2860
  3450  00220E                     l4126:
  3451  00220E  0E17               	movlw	23
  3452  002210  6E1B               	movwf	??___fttol& (0+255),c
  3453  002212  C017  F01C         	movff	___fttol@f1,??___fttol+1
  3454  002216  C018  F01D         	movff	___fttol@f1+1,??___fttol+2
  3455  00221A  C019  F01E         	movff	___fttol@f1+2,??___fttol+3
  3456  00221E  281B               	incf	??___fttol,w,c
  3457  002220  6E1F               	movwf	(??___fttol+4)& (0+255),c
  3458  002222  D004               	goto	u2830
  3459  002224                     u2835:
  3460  002224  90D8               	bcf	status,0,c
  3461  002226  321E               	rrcf	??___fttol+3,f,c
  3462  002228  321D               	rrcf	??___fttol+2,f,c
  3463  00222A  321C               	rrcf	??___fttol+1,f,c
  3464  00222C                     u2830:
  3465  00222C  2E1F               	decfsz	(??___fttol+4)& (0+255),f,c
  3466  00222E  D7FA               	goto	u2835
  3467  002230  501C               	movf	??___fttol+1,w,c
  3468  002232  6E20               	movwf	___fttol@sign1,c
  3469  002234  8E18               	bsf	___fttol@f1+1,7,c
  3470  002236  0EFF               	movlw	255
  3471  002238  1617               	andwf	___fttol@f1,f,c
  3472  00223A  0EFF               	movlw	255
  3473  00223C  1618               	andwf	___fttol@f1+1,f,c
  3474  00223E  0E00               	movlw	0
  3475  002240  1619               	andwf	___fttol@f1+2,f,c
  3476  002242  5017               	movf	___fttol@f1,w,c
  3477  002244  6E21               	movwf	___fttol@lval,c
  3478  002246  5018               	movf	___fttol@f1+1,w,c
  3479  002248  6E22               	movwf	___fttol@lval+1,c
  3480  00224A  5019               	movf	___fttol@f1+2,w,c
  3481  00224C  6E23               	movwf	___fttol@lval+2,c
  3482  00224E  6A24               	clrf	___fttol@lval+3,c
  3483  002250  0E8E               	movlw	142
  3484  002252  5E25               	subwf	___fttol@exp1,f,c
  3485  002254  AE25               	btfss	___fttol@exp1,7,c
  3486  002256  D00D               	goto	l4148
  3487  002258  5025               	movf	___fttol@exp1,w,c
  3488  00225A  0A80               	xorlw	128
  3489  00225C  0F8F               	addlw	143
  3490  00225E  A0D8               	btfss	status,0,c
  3491  002260  D00B               	goto	u2860
  3492  002262                     l4144:
  3493  002262  90D8               	bcf	status,0,c
  3494  002264  3224               	rrcf	___fttol@lval+3,f,c
  3495  002266  3223               	rrcf	___fttol@lval+2,f,c
  3496  002268  3222               	rrcf	___fttol@lval+1,f,c
  3497  00226A  3221               	rrcf	___fttol@lval,f,c
  3498  00226C  3E25               	incfsz	___fttol@exp1,f,c
  3499  00226E  D7F9               	goto	l4144
  3500  002270  D014               	goto	l4158
  3501  002272                     l4148:
  3502  002272  0E17               	movlw	23
  3503  002274  6425               	cpfsgt	___fttol@exp1,c
  3504  002276  D00F               	goto	l4156
  3505  002278                     u2860:
  3506  002278  0E00               	movlw	0
  3507  00227A  6E17               	movwf	?___fttol,c
  3508  00227C  0E00               	movlw	0
  3509  00227E  6E18               	movwf	?___fttol+1,c
  3510  002280  0E00               	movlw	0
  3511  002282  6E19               	movwf	?___fttol+2,c
  3512  002284  0E00               	movlw	0
  3513  002286  6E1A               	movwf	?___fttol+3,c
  3514  002288  D01B               	goto	l707
  3515  00228A                     l4154:
  3516  00228A  90D8               	bcf	status,0,c
  3517  00228C  3621               	rlcf	___fttol@lval,f,c
  3518  00228E  3622               	rlcf	___fttol@lval+1,f,c
  3519  002290  3623               	rlcf	___fttol@lval+2,f,c
  3520  002292  3624               	rlcf	___fttol@lval+3,f,c
  3521  002294  0625               	decf	___fttol@exp1,f,c
  3522  002296                     l4156:
  3523  002296  6625               	tstfsz	___fttol@exp1,c
  3524  002298  D7F8               	goto	l4154
  3525  00229A                     l4158:
  3526  00229A  5020               	movf	___fttol@sign1,w,c
  3527  00229C  B4D8               	btfsc	status,2,c
  3528  00229E  D008               	goto	l4162
  3529  0022A0  1E24               	comf	___fttol@lval+3,f,c
  3530  0022A2  1E23               	comf	___fttol@lval+2,f,c
  3531  0022A4  1E22               	comf	___fttol@lval+1,f,c
  3532  0022A6  6C21               	negf	___fttol@lval,c
  3533  0022A8  0E00               	movlw	0
  3534  0022AA  2222               	addwfc	___fttol@lval+1,f,c
  3535  0022AC  2223               	addwfc	___fttol@lval+2,f,c
  3536  0022AE  2224               	addwfc	___fttol@lval+3,f,c
  3537  0022B0                     l4162:
  3538  0022B0  C021  F017         	movff	___fttol@lval,?___fttol
  3539  0022B4  C022  F018         	movff	___fttol@lval+1,?___fttol+1
  3540  0022B8  C023  F019         	movff	___fttol@lval+2,?___fttol+2
  3541  0022BC  C024  F01A         	movff	___fttol@lval+3,?___fttol+3
  3542  0022C0                     l707:
  3543  0022C0  0012               	return	
  3544  0022C2                     __end_of___fttol:
  3545                           	opt stack 0
  3546                           tblptru	equ	0xFF8
  3547                           tblptrh	equ	0xFF7
  3548                           tblptrl	equ	0xFF6
  3549                           tablat	equ	0xFF5
  3550                           prodh	equ	0xFF4
  3551                           prodl	equ	0xFF3
  3552                           postinc0	equ	0xFEE
  3553                           wreg	equ	0xFE8
  3554                           indf2	equ	0xFDF
  3555                           postinc2	equ	0xFDE
  3556                           postdec2	equ	0xFDD
  3557                           fsr2h	equ	0xFDA
  3558                           fsr2l	equ	0xFD9
  3559                           status	equ	0xFD8
  3560                           
  3561 ;; *************** function ___ftneg *****************
  3562 ;; Defined at:
  3563 ;;		line 16 in file "E:\Program Files\Microchip\xc8\v1.20\sources\common\ftneg.c"
  3564 ;; Parameters:    Size  Location     Type
  3565 ;;  f1              3    0[COMRAM] float 
  3566 ;; Auto vars:     Size  Location     Type
  3567 ;;		None
  3568 ;; Return value:  Size  Location     Type
  3569 ;;                  3    0[COMRAM] float 
  3570 ;; Registers used:
  3571 ;;		wreg, status,2, status,0
  3572 ;; Tracked objects:
  3573 ;;		On entry : 0/0
  3574 ;;		On exit  : 0/0
  3575 ;;		Unchanged: 0/0
  3576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3577 ;;      Params:         3       0       0       0       0       0       0       0       0
  3578 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3579 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3580 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3581 ;;Total ram usage:        3 bytes
  3582 ;; Hardware stack levels used:    1
  3583 ;; This function calls:
  3584 ;;		Nothing
  3585 ;; This function is called by:
  3586 ;;		_sprintf
  3587 ;; This function uses a non-reentrant model
  3588 ;;
  3589                           
  3590                           	psect	text7
  3591  002C08                     __ptext7:
  3592                           	opt stack 0
  3593  002C08                     ___ftneg:
  3594                           	opt stack 29
  3595                           
  3596                           ;incstack = 0
  3597                           ;incstack = 0
  3598  002C08  0E7F               	movlw	127
  3599  002C0A  1403               	andwf	___ftneg@f1+2,w,c
  3600  002C0C  1002               	iorwf	___ftneg@f1+1,w,c
  3601  002C0E  1001               	iorwf	___ftneg@f1,w,c
  3602  002C10  B4D8               	btfsc	status,2,c
  3603  002C12  D006               	goto	l697
  3604  002C14  0E00               	movlw	0
  3605  002C16  1A01               	xorwf	___ftneg@f1,f,c
  3606  002C18  0E00               	movlw	0
  3607  002C1A  1A02               	xorwf	___ftneg@f1+1,f,c
  3608  002C1C  0E80               	movlw	128
  3609  002C1E  1A03               	xorwf	___ftneg@f1+2,f,c
  3610  002C20                     l697:
  3611  002C20  C001  F001         	movff	___ftneg@f1,?___ftneg
  3612  002C24  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  3613  002C28  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  3614  002C2C  0012               	return	
  3615  002C2E                     __end_of___ftneg:
  3616                           	opt stack 0
  3617                           tblptru	equ	0xFF8
  3618                           tblptrh	equ	0xFF7
  3619                           tblptrl	equ	0xFF6
  3620                           tablat	equ	0xFF5
  3621                           prodh	equ	0xFF4
  3622                           prodl	equ	0xFF3
  3623                           postinc0	equ	0xFEE
  3624                           wreg	equ	0xFE8
  3625                           indf2	equ	0xFDF
  3626                           postinc2	equ	0xFDE
  3627                           postdec2	equ	0xFDD
  3628                           fsr2h	equ	0xFDA
  3629                           fsr2l	equ	0xFD9
  3630                           status	equ	0xFD8
  3631                           
  3632 ;; *************** function ___ftge *****************
  3633 ;; Defined at:
  3634 ;;		line 5 in file "E:\Program Files\Microchip\xc8\v1.20\sources\common\ftge.c"
  3635 ;; Parameters:    Size  Location     Type
  3636 ;;  ff1             3    0[COMRAM] float 
  3637 ;;  ff2             3    3[COMRAM] float 
  3638 ;; Auto vars:     Size  Location     Type
  3639 ;;		None
  3640 ;; Return value:  Size  Location     Type
  3641 ;;		None               void
  3642 ;; Registers used:
  3643 ;;		wreg, status,2, status,0
  3644 ;; Tracked objects:
  3645 ;;		On entry : 0/0
  3646 ;;		On exit  : 0/0
  3647 ;;		Unchanged: 0/0
  3648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3649 ;;      Params:         6       0       0       0       0       0       0       0       0
  3650 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3651 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3652 ;;      Totals:         9       0       0       0       0       0       0       0       0
  3653 ;;Total ram usage:        9 bytes
  3654 ;; Hardware stack levels used:    1
  3655 ;; This function calls:
  3656 ;;		Nothing
  3657 ;; This function is called by:
  3658 ;;		_sprintf
  3659 ;; This function uses a non-reentrant model
  3660 ;;
  3661                           
  3662                           	psect	text8
  3663  0025A6                     __ptext8:
  3664                           	opt stack 0
  3665  0025A6                     ___ftge:
  3666                           	opt stack 29
  3667                           
  3668                           ;incstack = 0
  3669                           ;incstack = 0
  3670  0025A6  AE03               	btfss	___ftge@ff1+2,7,c
  3671  0025A8  D016               	goto	l3600
  3672  0025AA  C001  F007         	movff	___ftge@ff1,??___ftge
  3673  0025AE  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  3674  0025B2  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  3675  0025B6  1E07               	comf	??___ftge,f,c
  3676  0025B8  1E08               	comf	??___ftge+1,f,c
  3677  0025BA  1E09               	comf	??___ftge+2,f,c
  3678  0025BC  2A07               	incf	??___ftge,f,c
  3679  0025BE  0E00               	movlw	0
  3680  0025C0  2208               	addwfc	??___ftge+1,f,c
  3681  0025C2  2209               	addwfc	??___ftge+2,f,c
  3682  0025C4  0E00               	movlw	0
  3683  0025C6  2407               	addwf	??___ftge,w,c
  3684  0025C8  6E01               	movwf	___ftge@ff1,c
  3685  0025CA  0E00               	movlw	0
  3686  0025CC  2008               	addwfc	??___ftge+1,w,c
  3687  0025CE  6E02               	movwf	___ftge@ff1+1,c
  3688  0025D0  0E80               	movlw	128
  3689  0025D2  2009               	addwfc	??___ftge+2,w,c
  3690  0025D4  6E03               	movwf	___ftge@ff1+2,c
  3691  0025D6                     l3600:
  3692  0025D6  AE06               	btfss	___ftge@ff2+2,7,c
  3693  0025D8  D016               	goto	l3604
  3694  0025DA  C004  F007         	movff	___ftge@ff2,??___ftge
  3695  0025DE  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  3696  0025E2  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  3697  0025E6  1E07               	comf	??___ftge,f,c
  3698  0025E8  1E08               	comf	??___ftge+1,f,c
  3699  0025EA  1E09               	comf	??___ftge+2,f,c
  3700  0025EC  2A07               	incf	??___ftge,f,c
  3701  0025EE  0E00               	movlw	0
  3702  0025F0  2208               	addwfc	??___ftge+1,f,c
  3703  0025F2  2209               	addwfc	??___ftge+2,f,c
  3704  0025F4  0E00               	movlw	0
  3705  0025F6  2407               	addwf	??___ftge,w,c
  3706  0025F8  6E04               	movwf	___ftge@ff2,c
  3707  0025FA  0E00               	movlw	0
  3708  0025FC  2008               	addwfc	??___ftge+1,w,c
  3709  0025FE  6E05               	movwf	___ftge@ff2+1,c
  3710  002600  0E80               	movlw	128
  3711  002602  2009               	addwfc	??___ftge+2,w,c
  3712  002604  6E06               	movwf	___ftge@ff2+2,c
  3713  002606                     l3604:
  3714  002606  0E00               	movlw	0
  3715  002608  1A01               	xorwf	___ftge@ff1,f,c
  3716  00260A  0E00               	movlw	0
  3717  00260C  1A02               	xorwf	___ftge@ff1+1,f,c
  3718  00260E  0E80               	movlw	128
  3719  002610  1A03               	xorwf	___ftge@ff1+2,f,c
  3720  002612  0E00               	movlw	0
  3721  002614  1A04               	xorwf	___ftge@ff2,f,c
  3722  002616  0E00               	movlw	0
  3723  002618  1A05               	xorwf	___ftge@ff2+1,f,c
  3724  00261A  0E80               	movlw	128
  3725  00261C  1A06               	xorwf	___ftge@ff2+2,f,c
  3726  00261E  5004               	movf	___ftge@ff2,w,c
  3727  002620  5C01               	subwf	___ftge@ff1,w,c
  3728  002622  5005               	movf	___ftge@ff2+1,w,c
  3729  002624  5802               	subwfb	___ftge@ff1+1,w,c
  3730  002626  5006               	movf	___ftge@ff2+2,w,c
  3731  002628  5803               	subwfb	___ftge@ff1+2,w,c
  3732  00262A  B0D8               	btfsc	status,0,c
  3733  00262C  D002               	goto	l3610
  3734  00262E  90D8               	bcf	status,0,c
  3735  002630  D001               	goto	l681
  3736  002632                     l3610:
  3737  002632  80D8               	bsf	status,0,c
  3738  002634                     l681:
  3739  002634  0012               	return	
  3740  002636                     __end_of___ftge:
  3741                           	opt stack 0
  3742                           tblptru	equ	0xFF8
  3743                           tblptrh	equ	0xFF7
  3744                           tblptrl	equ	0xFF6
  3745                           tablat	equ	0xFF5
  3746                           prodh	equ	0xFF4
  3747                           prodl	equ	0xFF3
  3748                           postinc0	equ	0xFEE
  3749                           wreg	equ	0xFE8
  3750                           indf2	equ	0xFDF
  3751                           postinc2	equ	0xFDE
  3752                           postdec2	equ	0xFDD
  3753                           fsr2h	equ	0xFDA
  3754                           fsr2l	equ	0xFD9
  3755                           status	equ	0xFD8
  3756                           
  3757 ;; *************** function ___asftsub *****************
  3758 ;; Defined at:
  3759 ;;		line 5 in file "E:\Program Files\Microchip\xc8\v1.20\sources\pic18\asftsub.c"
  3760 ;; Parameters:    Size  Location     Type
  3761 ;;  f1p             2   28[COMRAM] PTR float 
  3762 ;;		 -> sprintf@fval(3), 
  3763 ;;  f2              3   30[COMRAM] float 
  3764 ;; Auto vars:     Size  Location     Type
  3765 ;;		None
  3766 ;; Return value:  Size  Location     Type
  3767 ;;                  3   28[COMRAM] float 
  3768 ;; Registers used:
  3769 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3770 ;; Tracked objects:
  3771 ;;		On entry : 0/0
  3772 ;;		On exit  : 0/0
  3773 ;;		Unchanged: 0/0
  3774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3775 ;;      Params:         5       0       0       0       0       0       0       0       0
  3776 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3777 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3778 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3779 ;;Total ram usage:        5 bytes
  3780 ;; Hardware stack levels used:    1
  3781 ;; Hardware stack levels required when called:    3
  3782 ;; This function calls:
  3783 ;;		___ftsub
  3784 ;; This function is called by:
  3785 ;;		_sprintf
  3786 ;; This function uses a non-reentrant model
  3787 ;;
  3788                           
  3789                           	psect	text9
  3790  002A4A                     __ptext9:
  3791                           	opt stack 0
  3792  002A4A                     ___asftsub:
  3793                           	opt stack 26
  3794                           
  3795                           ;	Return value of ___asftsub is never used
  3796                           
  3797                           ;incstack = 0
  3798                           ;incstack = 0
  3799  002A4A  C01D  FFD9         	movff	___asftsub@f1p,fsr2l
  3800  002A4E  C01E  FFDA         	movff	___asftsub@f1p+1,fsr2h
  3801  002A52  CFDE F017          	movff	postinc2,?___ftsub
  3802  002A56  CFDE F018          	movff	postinc2,?___ftsub+1
  3803  002A5A  CFDD F019          	movff	postdec2,?___ftsub+2
  3804  002A5E  C01F  F01A         	movff	___asftsub@f2,?___ftsub+3
  3805  002A62  C020  F01B         	movff	___asftsub@f2+1,?___ftsub+4
  3806  002A66  C021  F01C         	movff	___asftsub@f2+2,?___ftsub+5
  3807  002A6A  ECB9  F015         	call	___ftsub	;wreg free
  3808  002A6E  C01D  FFD9         	movff	___asftsub@f1p,fsr2l
  3809  002A72  C01E  FFDA         	movff	___asftsub@f1p+1,fsr2h
  3810  002A76  C017  FFDE         	movff	?___ftsub,postinc2
  3811  002A7A  C018  FFDE         	movff	?___ftsub+1,postinc2
  3812  002A7E  C019  FFDD         	movff	?___ftsub+2,postdec2
  3813  002A82  52DD               	movf	postdec2,f,c
  3814  002A84  0012               	return	
  3815  002A86                     __end_of___asftsub:
  3816                           	opt stack 0
  3817                           tblptru	equ	0xFF8
  3818                           tblptrh	equ	0xFF7
  3819                           tblptrl	equ	0xFF6
  3820                           tablat	equ	0xFF5
  3821                           prodh	equ	0xFF4
  3822                           prodl	equ	0xFF3
  3823                           postinc0	equ	0xFEE
  3824                           wreg	equ	0xFE8
  3825                           indf2	equ	0xFDF
  3826                           postinc2	equ	0xFDE
  3827                           postdec2	equ	0xFDD
  3828                           fsr2h	equ	0xFDA
  3829                           fsr2l	equ	0xFD9
  3830                           status	equ	0xFD8
  3831                           
  3832 ;; *************** function ___ftsub *****************
  3833 ;; Defined at:
  3834 ;;		line 22 in file "E:\Program Files\Microchip\xc8\v1.20\sources\common\ftsub.c"
  3835 ;; Parameters:    Size  Location     Type
  3836 ;;  f1              3   22[COMRAM] float 
  3837 ;;  f2              3   25[COMRAM] float 
  3838 ;; Auto vars:     Size  Location     Type
  3839 ;;		None
  3840 ;; Return value:  Size  Location     Type
  3841 ;;                  3   22[COMRAM] float 
  3842 ;; Registers used:
  3843 ;;		wreg, status,2, status,0, cstack
  3844 ;; Tracked objects:
  3845 ;;		On entry : 0/0
  3846 ;;		On exit  : 0/0
  3847 ;;		Unchanged: 0/0
  3848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3849 ;;      Params:         6       0       0       0       0       0       0       0       0
  3850 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3851 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3852 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3853 ;;Total ram usage:        6 bytes
  3854 ;; Hardware stack levels used:    1
  3855 ;; Hardware stack levels required when called:    2
  3856 ;; This function calls:
  3857 ;;		___ftadd
  3858 ;; This function is called by:
  3859 ;;		___asftsub
  3860 ;; This function uses a non-reentrant model
  3861 ;;
  3862                           
  3863                           	psect	text10
  3864  002B72                     __ptext10:
  3865                           	opt stack 0
  3866  002B72                     ___ftsub:
  3867                           	opt stack 26
  3868                           
  3869                           ;incstack = 0
  3870                           ;incstack = 0
  3871  002B72  0E00               	movlw	0
  3872  002B74  1A1A               	xorwf	___ftsub@f2,f,c
  3873  002B76  0E00               	movlw	0
  3874  002B78  1A1B               	xorwf	___ftsub@f2+1,f,c
  3875  002B7A  0E80               	movlw	128
  3876  002B7C  1A1C               	xorwf	___ftsub@f2+2,f,c
  3877  002B7E  C017  F009         	movff	___ftsub@f1,?___ftadd
  3878  002B82  C018  F00A         	movff	___ftsub@f1+1,?___ftadd+1
  3879  002B86  C019  F00B         	movff	___ftsub@f1+2,?___ftadd+2
  3880  002B8A  C01A  F00C         	movff	___ftsub@f2,?___ftadd+3
  3881  002B8E  C01B  F00D         	movff	___ftsub@f2+1,?___ftadd+4
  3882  002B92  C01C  F00E         	movff	___ftsub@f2+2,?___ftadd+5
  3883  002B96  ECF9  F00D         	call	___ftadd	;wreg free
  3884  002B9A  C00B  F019         	movff	?___ftadd+2,?___ftsub+2
  3885  002B9E  C00A  F018         	movff	?___ftadd+1,?___ftsub+1
  3886  002BA2  C009  F017         	movff	?___ftadd,?___ftsub
  3887  002BA6  0012               	return	
  3888  002BA8                     __end_of___ftsub:
  3889                           	opt stack 0
  3890                           tblptru	equ	0xFF8
  3891                           tblptrh	equ	0xFF7
  3892                           tblptrl	equ	0xFF6
  3893                           tablat	equ	0xFF5
  3894                           prodh	equ	0xFF4
  3895                           prodl	equ	0xFF3
  3896                           postinc0	equ	0xFEE
  3897                           wreg	equ	0xFE8
  3898                           indf2	equ	0xFDF
  3899                           postinc2	equ	0xFDE
  3900                           postdec2	equ	0xFDD
  3901                           fsr2h	equ	0xFDA
  3902                           fsr2l	equ	0xFD9
  3903                           status	equ	0xFD8
  3904                           
  3905 ;; *************** function ___asftmul *****************
  3906 ;; Defined at:
  3907 ;;		line 5 in file "E:\Program Files\Microchip\xc8\v1.20\sources\pic18\asftmul.c"
  3908 ;; Parameters:    Size  Location     Type
  3909 ;;  f1p             2   54[COMRAM] PTR float 
  3910 ;;		 -> sprintf@integ(3), 
  3911 ;;  f2              3   56[COMRAM] float 
  3912 ;; Auto vars:     Size  Location     Type
  3913 ;;		None
  3914 ;; Return value:  Size  Location     Type
  3915 ;;                  3   54[COMRAM] float 
  3916 ;; Registers used:
  3917 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3918 ;; Tracked objects:
  3919 ;;		On entry : 0/0
  3920 ;;		On exit  : 0/0
  3921 ;;		Unchanged: 0/0
  3922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3923 ;;      Params:         5       0       0       0       0       0       0       0       0
  3924 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3925 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3926 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3927 ;;Total ram usage:        5 bytes
  3928 ;; Hardware stack levels used:    1
  3929 ;; Hardware stack levels required when called:    2
  3930 ;; This function calls:
  3931 ;;		___ftmul
  3932 ;; This function is called by:
  3933 ;;		_sprintf
  3934 ;; This function uses a non-reentrant model
  3935 ;;
  3936                           
  3937                           	psect	text11
  3938  002A86                     __ptext11:
  3939                           	opt stack 0
  3940  002A86                     ___asftmul:
  3941                           	opt stack 27
  3942                           
  3943                           ;	Return value of ___asftmul is never used
  3944                           
  3945                           ;incstack = 0
  3946                           ;incstack = 0
  3947  002A86  C037  FFD9         	movff	___asftmul@f1p,fsr2l
  3948  002A8A  C038  FFDA         	movff	___asftmul@f1p+1,fsr2h
  3949  002A8E  CFDE F026          	movff	postinc2,?___ftmul
  3950  002A92  CFDE F027          	movff	postinc2,?___ftmul+1
  3951  002A96  CFDD F028          	movff	postdec2,?___ftmul+2
  3952  002A9A  C039  F029         	movff	___asftmul@f2,?___ftmul+3
  3953  002A9E  C03A  F02A         	movff	___asftmul@f2+1,?___ftmul+4
  3954  002AA2  C03B  F02B         	movff	___asftmul@f2+2,?___ftmul+5
  3955  002AA6  EC70  F00F         	call	___ftmul	;wreg free
  3956  002AAA  C037  FFD9         	movff	___asftmul@f1p,fsr2l
  3957  002AAE  C038  FFDA         	movff	___asftmul@f1p+1,fsr2h
  3958  002AB2  C026  FFDE         	movff	?___ftmul,postinc2
  3959  002AB6  C027  FFDE         	movff	?___ftmul+1,postinc2
  3960  002ABA  C028  FFDD         	movff	?___ftmul+2,postdec2
  3961  002ABE  52DD               	movf	postdec2,f,c
  3962  002AC0  0012               	return	
  3963  002AC2                     __end_of___asftmul:
  3964                           	opt stack 0
  3965                           tblptru	equ	0xFF8
  3966                           tblptrh	equ	0xFF7
  3967                           tblptrl	equ	0xFF6
  3968                           tablat	equ	0xFF5
  3969                           prodh	equ	0xFF4
  3970                           prodl	equ	0xFF3
  3971                           postinc0	equ	0xFEE
  3972                           wreg	equ	0xFE8
  3973                           indf2	equ	0xFDF
  3974                           postinc2	equ	0xFDE
  3975                           postdec2	equ	0xFDD
  3976                           fsr2h	equ	0xFDA
  3977                           fsr2l	equ	0xFD9
  3978                           status	equ	0xFD8
  3979                           
  3980 ;; *************** function ___asftadd *****************
  3981 ;; Defined at:
  3982 ;;		line 5 in file "E:\Program Files\Microchip\xc8\v1.20\sources\pic18\asftadd.c"
  3983 ;; Parameters:    Size  Location     Type
  3984 ;;  f1p             2   69[COMRAM] PTR float 
  3985 ;;		 -> sprintf@fval(3), 
  3986 ;;  f2              3   71[COMRAM] float 
  3987 ;; Auto vars:     Size  Location     Type
  3988 ;;		None
  3989 ;; Return value:  Size  Location     Type
  3990 ;;                  3   69[COMRAM] float 
  3991 ;; Registers used:
  3992 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3993 ;; Tracked objects:
  3994 ;;		On entry : 0/0
  3995 ;;		On exit  : 0/0
  3996 ;;		Unchanged: 0/0
  3997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3998 ;;      Params:         5       0       0       0       0       0       0       0       0
  3999 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4000 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4001 ;;      Totals:         5       0       0       0       0       0       0       0       0
  4002 ;;Total ram usage:        5 bytes
  4003 ;; Hardware stack levels used:    1
  4004 ;; Hardware stack levels required when called:    2
  4005 ;; This function calls:
  4006 ;;		___ftadd
  4007 ;; This function is called by:
  4008 ;;		_sprintf
  4009 ;; This function uses a non-reentrant model
  4010 ;;
  4011                           
  4012                           	psect	text12
  4013  002AC2                     __ptext12:
  4014                           	opt stack 0
  4015  002AC2                     ___asftadd:
  4016                           	opt stack 27
  4017                           
  4018                           ;	Return value of ___asftadd is never used
  4019                           
  4020                           ;incstack = 0
  4021                           ;incstack = 0
  4022  002AC2  C046  FFD9         	movff	___asftadd@f1p,fsr2l
  4023  002AC6  C047  FFDA         	movff	___asftadd@f1p+1,fsr2h
  4024  002ACA  CFDE F009          	movff	postinc2,?___ftadd
  4025  002ACE  CFDE F00A          	movff	postinc2,?___ftadd+1
  4026  002AD2  CFDD F00B          	movff	postdec2,?___ftadd+2
  4027  002AD6  C048  F00C         	movff	___asftadd@f2,?___ftadd+3
  4028  002ADA  C049  F00D         	movff	___asftadd@f2+1,?___ftadd+4
  4029  002ADE  C04A  F00E         	movff	___asftadd@f2+2,?___ftadd+5
  4030  002AE2  ECF9  F00D         	call	___ftadd	;wreg free
  4031  002AE6  C046  FFD9         	movff	___asftadd@f1p,fsr2l
  4032  002AEA  C047  FFDA         	movff	___asftadd@f1p+1,fsr2h
  4033  002AEE  C009  FFDE         	movff	?___ftadd,postinc2
  4034  002AF2  C00A  FFDE         	movff	?___ftadd+1,postinc2
  4035  002AF6  C00B  FFDD         	movff	?___ftadd+2,postdec2
  4036  002AFA  52DD               	movf	postdec2,f,c
  4037  002AFC  0012               	return	
  4038  002AFE                     __end_of___asftadd:
  4039                           	opt stack 0
  4040                           tblptru	equ	0xFF8
  4041                           tblptrh	equ	0xFF7
  4042                           tblptrl	equ	0xFF6
  4043                           tablat	equ	0xFF5
  4044                           prodh	equ	0xFF4
  4045                           prodl	equ	0xFF3
  4046                           postinc0	equ	0xFEE
  4047                           wreg	equ	0xFE8
  4048                           indf2	equ	0xFDF
  4049                           postinc2	equ	0xFDE
  4050                           postdec2	equ	0xFDD
  4051                           fsr2h	equ	0xFDA
  4052                           fsr2l	equ	0xFD9
  4053                           status	equ	0xFD8
  4054                           
  4055 ;; *************** function ___ftadd *****************
  4056 ;; Defined at:
  4057 ;;		line 87 in file "E:\Program Files\Microchip\xc8\v1.20\sources\common\ftadd.c"
  4058 ;; Parameters:    Size  Location     Type
  4059 ;;  f1              3    8[COMRAM] float 
  4060 ;;  f2              3   11[COMRAM] float 
  4061 ;; Auto vars:     Size  Location     Type
  4062 ;;  exp1            1   21[COMRAM] unsigned char 
  4063 ;;  exp2            1   20[COMRAM] unsigned char 
  4064 ;;  sign            1   19[COMRAM] unsigned char 
  4065 ;; Return value:  Size  Location     Type
  4066 ;;                  3    8[COMRAM] float 
  4067 ;; Registers used:
  4068 ;;		wreg, status,2, status,0, cstack
  4069 ;; Tracked objects:
  4070 ;;		On entry : 0/0
  4071 ;;		On exit  : 0/0
  4072 ;;		Unchanged: 0/0
  4073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4074 ;;      Params:         6       0       0       0       0       0       0       0       0
  4075 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4076 ;;      Temps:          5       0       0       0       0       0       0       0       0
  4077 ;;      Totals:        14       0       0       0       0       0       0       0       0
  4078 ;;Total ram usage:       14 bytes
  4079 ;; Hardware stack levels used:    1
  4080 ;; Hardware stack levels required when called:    1
  4081 ;; This function calls:
  4082 ;;		___ftpack
  4083 ;; This function is called by:
  4084 ;;		___asftadd
  4085 ;;		___ftsub
  4086 ;; This function uses a non-reentrant model
  4087 ;;
  4088                           
  4089                           	psect	text13
  4090  001BF2                     __ptext13:
  4091                           	opt stack 0
  4092  001BF2                     ___ftadd:
  4093                           	opt stack 26
  4094                           
  4095                           ;incstack = 0
  4096                           ;incstack = 0
  4097  001BF2  0E0F               	movlw	15
  4098  001BF4  6E0F               	movwf	??___ftadd& (0+255),c
  4099  001BF6  C009  F010         	movff	___ftadd@f1,??___ftadd+1
  4100  001BFA  C00A  F011         	movff	___ftadd@f1+1,??___ftadd+2
  4101  001BFE  C00B  F012         	movff	___ftadd@f1+2,??___ftadd+3
  4102  001C02  280F               	incf	??___ftadd,w,c
  4103  001C04  6E13               	movwf	(??___ftadd+4)& (0+255),c
  4104  001C06  D004               	goto	u2250
  4105  001C08                     u2255:
  4106  001C08  90D8               	bcf	status,0,c
  4107  001C0A  3212               	rrcf	??___ftadd+3,f,c
  4108  001C0C  3211               	rrcf	??___ftadd+2,f,c
  4109  001C0E  3210               	rrcf	??___ftadd+1,f,c
  4110  001C10                     u2250:
  4111  001C10  2E13               	decfsz	(??___ftadd+4)& (0+255),f,c
  4112  001C12  D7FA               	goto	u2255
  4113  001C14  5010               	movf	??___ftadd+1,w,c
  4114  001C16  6E16               	movwf	___ftadd@exp1,c
  4115  001C18  0E0F               	movlw	15
  4116  001C1A  6E0F               	movwf	??___ftadd& (0+255),c
  4117  001C1C  C00C  F010         	movff	___ftadd@f2,??___ftadd+1
  4118  001C20  C00D  F011         	movff	___ftadd@f2+1,??___ftadd+2
  4119  001C24  C00E  F012         	movff	___ftadd@f2+2,??___ftadd+3
  4120  001C28  280F               	incf	??___ftadd,w,c
  4121  001C2A  6E13               	movwf	(??___ftadd+4)& (0+255),c
  4122  001C2C  D004               	goto	u2260
  4123  001C2E                     u2265:
  4124  001C2E  90D8               	bcf	status,0,c
  4125  001C30  3212               	rrcf	??___ftadd+3,f,c
  4126  001C32  3211               	rrcf	??___ftadd+2,f,c
  4127  001C34  3210               	rrcf	??___ftadd+1,f,c
  4128  001C36                     u2260:
  4129  001C36  2E13               	decfsz	(??___ftadd+4)& (0+255),f,c
  4130  001C38  D7FA               	goto	u2265
  4131  001C3A  5010               	movf	??___ftadd+1,w,c
  4132  001C3C  6E15               	movwf	___ftadd@exp2,c
  4133  001C3E  5016               	movf	___ftadd@exp1,w,c
  4134  001C40  B4D8               	btfsc	status,2,c
  4135  001C42  D00B               	goto	l623
  4136  001C44  5015               	movf	___ftadd@exp2,w,c
  4137  001C46  6016               	cpfslt	___ftadd@exp1,c
  4138  001C48  D00F               	goto	l3734
  4139  001C4A  5016               	movf	___ftadd@exp1,w,c
  4140  001C4C  0800               	sublw	0
  4141  001C4E  2415               	addwf	___ftadd@exp2,w,c
  4142  001C50  6E0F               	movwf	??___ftadd& (0+255),c
  4143  001C52  0E19               	movlw	25
  4144  001C54  5C0F               	subwf	??___ftadd,w,c
  4145  001C56  A0D8               	btfss	status,0,c
  4146  001C58  D007               	goto	l3734
  4147  001C5A                     l623:
  4148  001C5A  C00C  F009         	movff	___ftadd@f2,?___ftadd
  4149  001C5E  C00D  F00A         	movff	___ftadd@f2+1,?___ftadd+1
  4150  001C62  C00E  F00B         	movff	___ftadd@f2+2,?___ftadd+2
  4151  001C66  D0AA               	goto	l624
  4152  001C68                     l3734:
  4153  001C68  5015               	movf	___ftadd@exp2,w,c
  4154  001C6A  B4D8               	btfsc	status,2,c
  4155  001C6C  D00B               	goto	l627
  4156  001C6E  5016               	movf	___ftadd@exp1,w,c
  4157  001C70  6015               	cpfslt	___ftadd@exp2,c
  4158  001C72  D00F               	goto	l3740
  4159  001C74  5015               	movf	___ftadd@exp2,w,c
  4160  001C76  0800               	sublw	0
  4161  001C78  2416               	addwf	___ftadd@exp1,w,c
  4162  001C7A  6E0F               	movwf	??___ftadd& (0+255),c
  4163  001C7C  0E19               	movlw	25
  4164  001C7E  5C0F               	subwf	??___ftadd,w,c
  4165  001C80  A0D8               	btfss	status,0,c
  4166  001C82  D007               	goto	l3740
  4167  001C84                     l627:
  4168  001C84  C009  F009         	movff	___ftadd@f1,?___ftadd
  4169  001C88  C00A  F00A         	movff	___ftadd@f1+1,?___ftadd+1
  4170  001C8C  C00B  F00B         	movff	___ftadd@f1+2,?___ftadd+2
  4171  001C90  D095               	goto	l624
  4172  001C92                     l3740:
  4173  001C92  6E0F               	movwf	??___ftadd& (0+255),c
  4174  001C94  0E06               	movlw	6
  4175  001C96  6E14               	movwf	___ftadd@sign,c
  4176  001C98  500F               	movf	??___ftadd& (0+255),w,c
  4177  001C9A  BE0B               	btfsc	___ftadd@f1+2,7,c
  4178  001C9C  8E14               	bsf	___ftadd@sign,7,c
  4179  001C9E  BE0E               	btfsc	___ftadd@f2+2,7,c
  4180  001CA0  8C14               	bsf	___ftadd@sign,6,c
  4181  001CA2  8E0A               	bsf	___ftadd@f1+1,7,c
  4182  001CA4  0EFF               	movlw	255
  4183  001CA6  1609               	andwf	___ftadd@f1,f,c
  4184  001CA8  0EFF               	movlw	255
  4185  001CAA  160A               	andwf	___ftadd@f1+1,f,c
  4186  001CAC  0E00               	movlw	0
  4187  001CAE  160B               	andwf	___ftadd@f1+2,f,c
  4188  001CB0  8E0D               	bsf	___ftadd@f2+1,7,c
  4189  001CB2  0EFF               	movlw	255
  4190  001CB4  160C               	andwf	___ftadd@f2,f,c
  4191  001CB6  0EFF               	movlw	255
  4192  001CB8  160D               	andwf	___ftadd@f2+1,f,c
  4193  001CBA  0E00               	movlw	0
  4194  001CBC  160E               	andwf	___ftadd@f2+2,f,c
  4195  001CBE  5015               	movf	___ftadd@exp2,w,c
  4196  001CC0  6016               	cpfslt	___ftadd@exp1,c
  4197  001CC2  D018               	goto	l3766
  4198  001CC4                     l3756:
  4199  001CC4  90D8               	bcf	status,0,c
  4200  001CC6  360C               	rlcf	___ftadd@f2,f,c
  4201  001CC8  360D               	rlcf	___ftadd@f2+1,f,c
  4202  001CCA  360E               	rlcf	___ftadd@f2+2,f,c
  4203  001CCC  0615               	decf	___ftadd@exp2,f,c
  4204  001CCE  5015               	movf	___ftadd@exp2,w,c
  4205  001CD0  1816               	xorwf	___ftadd@exp1,w,c
  4206  001CD2  B4D8               	btfsc	status,2,c
  4207  001CD4  D00B               	goto	l3764
  4208  001CD6  0614               	decf	___ftadd@sign,f,c
  4209  001CD8  5014               	movf	___ftadd@sign& (0+255),w,c
  4210  001CDA  0B07               	andlw	7
  4211  001CDC  B4D8               	btfsc	status,2,c
  4212  001CDE  D006               	goto	l3764
  4213  001CE0  D7F1               	goto	l3756
  4214  001CE2                     l3762:
  4215  001CE2  90D8               	bcf	status,0,c
  4216  001CE4  320B               	rrcf	___ftadd@f1+2,f,c
  4217  001CE6  320A               	rrcf	___ftadd@f1+1,f,c
  4218  001CE8  3209               	rrcf	___ftadd@f1,f,c
  4219  001CEA  2A16               	incf	___ftadd@exp1,f,c
  4220  001CEC                     l3764:
  4221  001CEC  5015               	movf	___ftadd@exp2,w,c
  4222  001CEE  6216               	cpfseq	___ftadd@exp1,c
  4223  001CF0  D7F8               	goto	l3762
  4224  001CF2  D01A               	goto	l638
  4225  001CF4                     l3766:
  4226  001CF4  5016               	movf	___ftadd@exp1,w,c
  4227  001CF6  6015               	cpfslt	___ftadd@exp2,c
  4228  001CF8  D017               	goto	l638
  4229  001CFA                     l3768:
  4230  001CFA  90D8               	bcf	status,0,c
  4231  001CFC  3609               	rlcf	___ftadd@f1,f,c
  4232  001CFE  360A               	rlcf	___ftadd@f1+1,f,c
  4233  001D00  360B               	rlcf	___ftadd@f1+2,f,c
  4234  001D02  0616               	decf	___ftadd@exp1,f,c
  4235  001D04  5015               	movf	___ftadd@exp2,w,c
  4236  001D06  1816               	xorwf	___ftadd@exp1,w,c
  4237  001D08  B4D8               	btfsc	status,2,c
  4238  001D0A  D00B               	goto	l3776
  4239  001D0C  0614               	decf	___ftadd@sign,f,c
  4240  001D0E  5014               	movf	___ftadd@sign& (0+255),w,c
  4241  001D10  0B07               	andlw	7
  4242  001D12  B4D8               	btfsc	status,2,c
  4243  001D14  D006               	goto	l3776
  4244  001D16  D7F1               	goto	l3768
  4245  001D18                     l3774:
  4246  001D18  90D8               	bcf	status,0,c
  4247  001D1A  320E               	rrcf	___ftadd@f2+2,f,c
  4248  001D1C  320D               	rrcf	___ftadd@f2+1,f,c
  4249  001D1E  320C               	rrcf	___ftadd@f2,f,c
  4250  001D20  2A15               	incf	___ftadd@exp2,f,c
  4251  001D22                     l3776:
  4252  001D22  5015               	movf	___ftadd@exp2,w,c
  4253  001D24  6216               	cpfseq	___ftadd@exp1,c
  4254  001D26  D7F8               	goto	l3774
  4255  001D28                     l638:
  4256  001D28  AE14               	btfss	___ftadd@sign,7,c
  4257  001D2A  D00C               	goto	l647
  4258  001D2C  0EFF               	movlw	255
  4259  001D2E  1A09               	xorwf	___ftadd@f1,f,c
  4260  001D30  0EFF               	movlw	255
  4261  001D32  1A0A               	xorwf	___ftadd@f1+1,f,c
  4262  001D34  0EFF               	movlw	255
  4263  001D36  1A0B               	xorwf	___ftadd@f1+2,f,c
  4264  001D38  0E01               	movlw	1
  4265  001D3A  2609               	addwf	___ftadd@f1,f,c
  4266  001D3C  0E00               	movlw	0
  4267  001D3E  220A               	addwfc	___ftadd@f1+1,f,c
  4268  001D40  0E00               	movlw	0
  4269  001D42  220B               	addwfc	___ftadd@f1+2,f,c
  4270  001D44                     l647:
  4271  001D44  AC14               	btfss	___ftadd@sign,6,c
  4272  001D46  D00C               	goto	l3782
  4273  001D48  0EFF               	movlw	255
  4274  001D4A  1A0C               	xorwf	___ftadd@f2,f,c
  4275  001D4C  0EFF               	movlw	255
  4276  001D4E  1A0D               	xorwf	___ftadd@f2+1,f,c
  4277  001D50  0EFF               	movlw	255
  4278  001D52  1A0E               	xorwf	___ftadd@f2+2,f,c
  4279  001D54  0E01               	movlw	1
  4280  001D56  260C               	addwf	___ftadd@f2,f,c
  4281  001D58  0E00               	movlw	0
  4282  001D5A  220D               	addwfc	___ftadd@f2+1,f,c
  4283  001D5C  0E00               	movlw	0
  4284  001D5E  220E               	addwfc	___ftadd@f2+2,f,c
  4285  001D60                     l3782:
  4286  001D60  6E0F               	movwf	??___ftadd& (0+255),c
  4287  001D62  0E00               	movlw	0
  4288  001D64  6E14               	movwf	___ftadd@sign,c
  4289  001D66  500F               	movf	??___ftadd& (0+255),w,c
  4290  001D68  5009               	movf	___ftadd@f1,w,c
  4291  001D6A  260C               	addwf	___ftadd@f2,f,c
  4292  001D6C  500A               	movf	___ftadd@f1+1,w,c
  4293  001D6E  220D               	addwfc	___ftadd@f2+1,f,c
  4294  001D70  500B               	movf	___ftadd@f1+2,w,c
  4295  001D72  220E               	addwfc	___ftadd@f2+2,f,c
  4296  001D74  AE0E               	btfss	___ftadd@f2+2,7,c
  4297  001D76  D010               	goto	l3792
  4298  001D78  0EFF               	movlw	255
  4299  001D7A  1A0C               	xorwf	___ftadd@f2,f,c
  4300  001D7C  0EFF               	movlw	255
  4301  001D7E  1A0D               	xorwf	___ftadd@f2+1,f,c
  4302  001D80  0EFF               	movlw	255
  4303  001D82  1A0E               	xorwf	___ftadd@f2+2,f,c
  4304  001D84  0E01               	movlw	1
  4305  001D86  260C               	addwf	___ftadd@f2,f,c
  4306  001D88  0E00               	movlw	0
  4307  001D8A  220D               	addwfc	___ftadd@f2+1,f,c
  4308  001D8C  0E00               	movlw	0
  4309  001D8E  220E               	addwfc	___ftadd@f2+2,f,c
  4310  001D90  6E0F               	movwf	??___ftadd& (0+255),c
  4311  001D92  0E01               	movlw	1
  4312  001D94  6E14               	movwf	___ftadd@sign,c
  4313  001D96  500F               	movf	??___ftadd& (0+255),w,c
  4314  001D98                     l3792:
  4315  001D98  C00C  F001         	movff	___ftadd@f2,?___ftpack
  4316  001D9C  C00D  F002         	movff	___ftadd@f2+1,?___ftpack+1
  4317  001DA0  C00E  F003         	movff	___ftadd@f2+2,?___ftpack+2
  4318  001DA4  C016  F004         	movff	___ftadd@exp1,?___ftpack+3
  4319  001DA8  C014  F005         	movff	___ftadd@sign,?___ftpack+4
  4320  001DAC  EC1B  F012         	call	___ftpack	;wreg free
  4321  001DB0  C003  F00B         	movff	?___ftpack+2,?___ftadd+2
  4322  001DB4  C002  F00A         	movff	?___ftpack+1,?___ftadd+1
  4323  001DB8  C001  F009         	movff	?___ftpack,?___ftadd
  4324  001DBC                     l624:
  4325  001DBC  0012               	return	
  4326  001DBE                     __end_of___ftadd:
  4327                           	opt stack 0
  4328                           tblptru	equ	0xFF8
  4329                           tblptrh	equ	0xFF7
  4330                           tblptrl	equ	0xFF6
  4331                           tablat	equ	0xFF5
  4332                           prodh	equ	0xFF4
  4333                           prodl	equ	0xFF3
  4334                           postinc0	equ	0xFEE
  4335                           wreg	equ	0xFE8
  4336                           indf2	equ	0xFDF
  4337                           postinc2	equ	0xFDE
  4338                           postdec2	equ	0xFDD
  4339                           fsr2h	equ	0xFDA
  4340                           fsr2l	equ	0xFD9
  4341                           status	equ	0xFD8
  4342                           
  4343 ;; *************** function __div_to_l_ *****************
  4344 ;; Defined at:
  4345 ;;		line 61 in file "E:\Program Files\Microchip\xc8\v1.20\sources\common\fldivl.c"
  4346 ;; Parameters:    Size  Location     Type
  4347 ;;  f1              3    0[COMRAM] float 
  4348 ;;  f2              3    3[COMRAM] float 
  4349 ;; Auto vars:     Size  Location     Type
  4350 ;;  quot            4    7[COMRAM] unsigned long 
  4351 ;;  exp1            1   12[COMRAM] unsigned char 
  4352 ;;  cntr            1   11[COMRAM] unsigned char 
  4353 ;; Return value:  Size  Location     Type
  4354 ;;                  4    0[COMRAM] unsigned long 
  4355 ;; Registers used:
  4356 ;;		wreg, status,2, status,0
  4357 ;; Tracked objects:
  4358 ;;		On entry : 0/0
  4359 ;;		On exit  : 0/0
  4360 ;;		Unchanged: 0/0
  4361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4362 ;;      Params:         6       0       0       0       0       0       0       0       0
  4363 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4364 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4365 ;;      Totals:        13       0       0       0       0       0       0       0       0
  4366 ;;Total ram usage:       13 bytes
  4367 ;; Hardware stack levels used:    1
  4368 ;; This function calls:
  4369 ;;		Nothing
  4370 ;; This function is called by:
  4371 ;;		_sprintf
  4372 ;; This function uses a non-reentrant model
  4373 ;;
  4374                           
  4375                           	psect	text14
  4376  0020EE                     __ptext14:
  4377                           	opt stack 0
  4378  0020EE                     __div_to_l_:
  4379                           	opt stack 29
  4380                           
  4381                           ;incstack = 0
  4382                           ;incstack = 0
  4383  0020EE  3403               	rlcf	(__div_to_l_@f1+2)& (0+255),w,c
  4384  0020F0  3404               	rlcf	(__div_to_l_@f1+3)& (0+255),w,c
  4385  0020F2  6E0D               	movwf	__div_to_l_@exp1,c
  4386  0020F4  660D               	tstfsz	__div_to_l_@exp1& (0+255),c
  4387  0020F6  D001               	goto	l3476
  4388  0020F8  D05A               	goto	u1930
  4389  0020FA                     l3476:
  4390  0020FA  3406               	rlcf	(__div_to_l_@f2+2)& (0+255),w,c
  4391  0020FC  3407               	rlcf	(__div_to_l_@f2+3)& (0+255),w,c
  4392  0020FE  6E0C               	movwf	__div_to_l_@cntr,c
  4393  002100  660C               	tstfsz	__div_to_l_@cntr& (0+255),c
  4394  002102  D001               	goto	l3482
  4395  002104  D054               	goto	u1930
  4396  002106                     l3482:
  4397  002106  8E03               	bsf	__div_to_l_@f1+2,7,c
  4398  002108  0EFF               	movlw	255
  4399  00210A  1601               	andwf	__div_to_l_@f1,f,c
  4400  00210C  0EFF               	movlw	255
  4401  00210E  1602               	andwf	__div_to_l_@f1+1,f,c
  4402  002110  0EFF               	movlw	255
  4403  002112  1603               	andwf	__div_to_l_@f1+2,f,c
  4404  002114  0E00               	movlw	0
  4405  002116  1604               	andwf	__div_to_l_@f1+3,f,c
  4406  002118  8E06               	bsf	__div_to_l_@f2+2,7,c
  4407  00211A  0EFF               	movlw	255
  4408  00211C  1604               	andwf	__div_to_l_@f2,f,c
  4409  00211E  0EFF               	movlw	255
  4410  002120  1605               	andwf	__div_to_l_@f2+1,f,c
  4411  002122  0EFF               	movlw	255
  4412  002124  1606               	andwf	__div_to_l_@f2+2,f,c
  4413  002126  0E00               	movlw	0
  4414  002128  1607               	andwf	__div_to_l_@f2+3,f,c
  4415  00212A  0E00               	movlw	0
  4416  00212C  6E08               	movwf	__div_to_l_@quot,c
  4417  00212E  0E00               	movlw	0
  4418  002130  6E09               	movwf	__div_to_l_@quot+1,c
  4419  002132  0E00               	movlw	0
  4420  002134  6E0A               	movwf	__div_to_l_@quot+2,c
  4421  002136  0E00               	movlw	0
  4422  002138  6E0B               	movwf	__div_to_l_@quot+3,c
  4423  00213A  0E7F               	movlw	127
  4424  00213C  5E0D               	subwf	__div_to_l_@exp1,f,c
  4425  00213E  500C               	movf	__div_to_l_@cntr,w,c
  4426  002140  0FA0               	addlw	160
  4427  002142  5E0D               	subwf	__div_to_l_@exp1,f,c
  4428  002144  6E07               	movwf	??__div_to_l_& (0+255),c
  4429  002146  0E20               	movlw	32
  4430  002148  6E0C               	movwf	__div_to_l_@cntr,c
  4431  00214A  5007               	movf	??__div_to_l_& (0+255),w,c
  4432  00214C                     l547:
  4433  00214C  90D8               	bcf	status,0,c
  4434  00214E  3608               	rlcf	__div_to_l_@quot,f,c
  4435  002150  3609               	rlcf	__div_to_l_@quot+1,f,c
  4436  002152  360A               	rlcf	__div_to_l_@quot+2,f,c
  4437  002154  360B               	rlcf	__div_to_l_@quot+3,f,c
  4438  002156  5004               	movf	__div_to_l_@f2,w,c
  4439  002158  5C01               	subwf	__div_to_l_@f1,w,c
  4440  00215A  5005               	movf	__div_to_l_@f2+1,w,c
  4441  00215C  5802               	subwfb	__div_to_l_@f1+1,w,c
  4442  00215E  5006               	movf	__div_to_l_@f2+2,w,c
  4443  002160  5803               	subwfb	__div_to_l_@f1+2,w,c
  4444  002162  5007               	movf	__div_to_l_@f2+3,w,c
  4445  002164  5804               	subwfb	__div_to_l_@f1+3,w,c
  4446  002166  A0D8               	btfss	status,0,c
  4447  002168  D009               	goto	l3502
  4448  00216A  5004               	movf	__div_to_l_@f2,w,c
  4449  00216C  5E01               	subwf	__div_to_l_@f1,f,c
  4450  00216E  5005               	movf	__div_to_l_@f2+1,w,c
  4451  002170  5A02               	subwfb	__div_to_l_@f1+1,f,c
  4452  002172  5006               	movf	__div_to_l_@f2+2,w,c
  4453  002174  5A03               	subwfb	__div_to_l_@f1+2,f,c
  4454  002176  5007               	movf	__div_to_l_@f2+3,w,c
  4455  002178  5A04               	subwfb	__div_to_l_@f1+3,f,c
  4456  00217A  8008               	bsf	__div_to_l_@quot,0,c
  4457  00217C                     l3502:
  4458  00217C  90D8               	bcf	status,0,c
  4459  00217E  3601               	rlcf	__div_to_l_@f1,f,c
  4460  002180  3602               	rlcf	__div_to_l_@f1+1,f,c
  4461  002182  3603               	rlcf	__div_to_l_@f1+2,f,c
  4462  002184  3604               	rlcf	__div_to_l_@f1+3,f,c
  4463  002186  2E0C               	decfsz	__div_to_l_@cntr,f,c
  4464  002188  D7E1               	goto	l547
  4465  00218A  AE0D               	btfss	__div_to_l_@exp1,7,c
  4466  00218C  D00D               	goto	l3516
  4467  00218E  500D               	movf	__div_to_l_@exp1,w,c
  4468  002190  0A80               	xorlw	128
  4469  002192  0F9F               	addlw	159
  4470  002194  A0D8               	btfss	status,0,c
  4471  002196  D00B               	goto	u1930
  4472  002198                     l3512:
  4473  002198  90D8               	bcf	status,0,c
  4474  00219A  320B               	rrcf	__div_to_l_@quot+3,f,c
  4475  00219C  320A               	rrcf	__div_to_l_@quot+2,f,c
  4476  00219E  3209               	rrcf	__div_to_l_@quot+1,f,c
  4477  0021A0  3208               	rrcf	__div_to_l_@quot,f,c
  4478  0021A2  3E0D               	incfsz	__div_to_l_@exp1,f,c
  4479  0021A4  D7F9               	goto	l3512
  4480  0021A6  D014               	goto	l554
  4481  0021A8                     l3516:
  4482  0021A8  0E1F               	movlw	31
  4483  0021AA  640D               	cpfsgt	__div_to_l_@exp1,c
  4484  0021AC  D00F               	goto	l3524
  4485  0021AE                     u1930:
  4486  0021AE  0E00               	movlw	0
  4487  0021B0  6E01               	movwf	?__div_to_l_,c
  4488  0021B2  0E00               	movlw	0
  4489  0021B4  6E02               	movwf	?__div_to_l_+1,c
  4490  0021B6  0E00               	movlw	0
  4491  0021B8  6E03               	movwf	?__div_to_l_+2,c
  4492  0021BA  0E00               	movlw	0
  4493  0021BC  6E04               	movwf	?__div_to_l_+3,c
  4494  0021BE  D010               	goto	l545
  4495  0021C0                     l3522:
  4496  0021C0  90D8               	bcf	status,0,c
  4497  0021C2  3608               	rlcf	__div_to_l_@quot,f,c
  4498  0021C4  3609               	rlcf	__div_to_l_@quot+1,f,c
  4499  0021C6  360A               	rlcf	__div_to_l_@quot+2,f,c
  4500  0021C8  360B               	rlcf	__div_to_l_@quot+3,f,c
  4501  0021CA  060D               	decf	__div_to_l_@exp1,f,c
  4502  0021CC                     l3524:
  4503  0021CC  660D               	tstfsz	__div_to_l_@exp1,c
  4504  0021CE  D7F8               	goto	l3522
  4505  0021D0                     l554:
  4506  0021D0  C008  F001         	movff	__div_to_l_@quot,?__div_to_l_
  4507  0021D4  C009  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4508  0021D8  C00A  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4509  0021DC  C00B  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4510  0021E0                     l545:
  4511  0021E0  0012               	return	
  4512  0021E2                     __end_of__div_to_l_:
  4513                           	opt stack 0
  4514                           tblptru	equ	0xFF8
  4515                           tblptrh	equ	0xFF7
  4516                           tblptrl	equ	0xFF6
  4517                           tablat	equ	0xFF5
  4518                           prodh	equ	0xFF4
  4519                           prodl	equ	0xFF3
  4520                           postinc0	equ	0xFEE
  4521                           wreg	equ	0xFE8
  4522                           indf2	equ	0xFDF
  4523                           postinc2	equ	0xFDE
  4524                           postdec2	equ	0xFDD
  4525                           fsr2h	equ	0xFDA
  4526                           fsr2l	equ	0xFD9
  4527                           status	equ	0xFD8
  4528                           
  4529 ;; *************** function __tdiv_to_l_ *****************
  4530 ;; Defined at:
  4531 ;;		line 61 in file "E:\Program Files\Microchip\xc8\v1.20\sources\common\ftdivl.c"
  4532 ;; Parameters:    Size  Location     Type
  4533 ;;  f1              3    0[COMRAM] float 
  4534 ;;  f2              3    3[COMRAM] float 
  4535 ;; Auto vars:     Size  Location     Type
  4536 ;;  quot            4   11[COMRAM] unsigned long 
  4537 ;;  exp1            1   16[COMRAM] unsigned char 
  4538 ;;  cntr            1   15[COMRAM] unsigned char 
  4539 ;; Return value:  Size  Location     Type
  4540 ;;                  4    0[COMRAM] unsigned long 
  4541 ;; Registers used:
  4542 ;;		wreg, status,2, status,0
  4543 ;; Tracked objects:
  4544 ;;		On entry : 0/0
  4545 ;;		On exit  : 0/0
  4546 ;;		Unchanged: 0/0
  4547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4548 ;;      Params:         6       0       0       0       0       0       0       0       0
  4549 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4550 ;;      Temps:          5       0       0       0       0       0       0       0       0
  4551 ;;      Totals:        17       0       0       0       0       0       0       0       0
  4552 ;;Total ram usage:       17 bytes
  4553 ;; Hardware stack levels used:    1
  4554 ;; This function calls:
  4555 ;;		Nothing
  4556 ;; This function is called by:
  4557 ;;		_sprintf
  4558 ;; This function uses a non-reentrant model
  4559 ;;
  4560                           
  4561                           	psect	text15
  4562  001DBE                     __ptext15:
  4563                           	opt stack 0
  4564  001DBE                     __tdiv_to_l_:
  4565                           	opt stack 29
  4566                           
  4567                           ;incstack = 0
  4568                           ;incstack = 0
  4569  001DBE  0E0F               	movlw	15
  4570  001DC0  6E07               	movwf	??__tdiv_to_l_& (0+255),c
  4571  001DC2  C001  F008         	movff	__tdiv_to_l_@f1,??__tdiv_to_l_+1
  4572  001DC6  C002  F009         	movff	__tdiv_to_l_@f1+1,??__tdiv_to_l_+2
  4573  001DCA  C003  F00A         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_+3
  4574  001DCE  2807               	incf	??__tdiv_to_l_,w,c
  4575  001DD0  6E0B               	movwf	(??__tdiv_to_l_+4)& (0+255),c
  4576  001DD2  D004               	goto	u1790
  4577  001DD4                     u1795:
  4578  001DD4  90D8               	bcf	status,0,c
  4579  001DD6  320A               	rrcf	??__tdiv_to_l_+3,f,c
  4580  001DD8  3209               	rrcf	??__tdiv_to_l_+2,f,c
  4581  001DDA  3208               	rrcf	??__tdiv_to_l_+1,f,c
  4582  001DDC                     u1790:
  4583  001DDC  2E0B               	decfsz	(??__tdiv_to_l_+4)& (0+255),f,c
  4584  001DDE  D7FA               	goto	u1795
  4585  001DE0  5008               	movf	??__tdiv_to_l_+1,w,c
  4586  001DE2  6E11               	movwf	__tdiv_to_l_@exp1,c
  4587  001DE4  6611               	tstfsz	__tdiv_to_l_@exp1& (0+255),c
  4588  001DE6  D001               	goto	l3420
  4589  001DE8  D061               	goto	u1860
  4590  001DEA                     l3420:
  4591  001DEA  0E0F               	movlw	15
  4592  001DEC  6E07               	movwf	??__tdiv_to_l_& (0+255),c
  4593  001DEE  C004  F008         	movff	__tdiv_to_l_@f2,??__tdiv_to_l_+1
  4594  001DF2  C005  F009         	movff	__tdiv_to_l_@f2+1,??__tdiv_to_l_+2
  4595  001DF6  C006  F00A         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_+3
  4596  001DFA  2807               	incf	??__tdiv_to_l_,w,c
  4597  001DFC  6E0B               	movwf	(??__tdiv_to_l_+4)& (0+255),c
  4598  001DFE  D004               	goto	u1810
  4599  001E00                     u1815:
  4600  001E00  90D8               	bcf	status,0,c
  4601  001E02  320A               	rrcf	??__tdiv_to_l_+3,f,c
  4602  001E04  3209               	rrcf	??__tdiv_to_l_+2,f,c
  4603  001E06  3208               	rrcf	??__tdiv_to_l_+1,f,c
  4604  001E08                     u1810:
  4605  001E08  2E0B               	decfsz	(??__tdiv_to_l_+4)& (0+255),f,c
  4606  001E0A  D7FA               	goto	u1815
  4607  001E0C  5008               	movf	??__tdiv_to_l_+1,w,c
  4608  001E0E  6E10               	movwf	__tdiv_to_l_@cntr,c
  4609  001E10  6610               	tstfsz	__tdiv_to_l_@cntr& (0+255),c
  4610  001E12  D001               	goto	l3426
  4611  001E14  D04B               	goto	u1860
  4612  001E16                     l3426:
  4613  001E16  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  4614  001E18  0EFF               	movlw	255
  4615  001E1A  1601               	andwf	__tdiv_to_l_@f1,f,c
  4616  001E1C  0EFF               	movlw	255
  4617  001E1E  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  4618  001E20  0E00               	movlw	0
  4619  001E22  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  4620  001E24  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  4621  001E26  0EFF               	movlw	255
  4622  001E28  1604               	andwf	__tdiv_to_l_@f2,f,c
  4623  001E2A  0EFF               	movlw	255
  4624  001E2C  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  4625  001E2E  0E00               	movlw	0
  4626  001E30  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  4627  001E32  0E00               	movlw	0
  4628  001E34  6E0C               	movwf	__tdiv_to_l_@quot,c
  4629  001E36  0E00               	movlw	0
  4630  001E38  6E0D               	movwf	__tdiv_to_l_@quot+1,c
  4631  001E3A  0E00               	movlw	0
  4632  001E3C  6E0E               	movwf	__tdiv_to_l_@quot+2,c
  4633  001E3E  0E00               	movlw	0
  4634  001E40  6E0F               	movwf	__tdiv_to_l_@quot+3,c
  4635  001E42  0E7F               	movlw	127
  4636  001E44  5E11               	subwf	__tdiv_to_l_@exp1,f,c
  4637  001E46  5010               	movf	__tdiv_to_l_@cntr,w,c
  4638  001E48  0F98               	addlw	152
  4639  001E4A  5E11               	subwf	__tdiv_to_l_@exp1,f,c
  4640  001E4C  6E07               	movwf	??__tdiv_to_l_& (0+255),c
  4641  001E4E  0E18               	movlw	24
  4642  001E50  6E10               	movwf	__tdiv_to_l_@cntr,c
  4643  001E52  5007               	movf	??__tdiv_to_l_& (0+255),w,c
  4644  001E54                     l3440:
  4645  001E54  90D8               	bcf	status,0,c
  4646  001E56  360C               	rlcf	__tdiv_to_l_@quot,f,c
  4647  001E58  360D               	rlcf	__tdiv_to_l_@quot+1,f,c
  4648  001E5A  360E               	rlcf	__tdiv_to_l_@quot+2,f,c
  4649  001E5C  360F               	rlcf	__tdiv_to_l_@quot+3,f,c
  4650  001E5E  5004               	movf	__tdiv_to_l_@f2,w,c
  4651  001E60  5C01               	subwf	__tdiv_to_l_@f1,w,c
  4652  001E62  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4653  001E64  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  4654  001E66  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4655  001E68  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  4656  001E6A  A0D8               	btfss	status,0,c
  4657  001E6C  D007               	goto	l666
  4658  001E6E  5004               	movf	__tdiv_to_l_@f2,w,c
  4659  001E70  5E01               	subwf	__tdiv_to_l_@f1,f,c
  4660  001E72  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4661  001E74  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  4662  001E76  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4663  001E78  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  4664  001E7A  800C               	bsf	__tdiv_to_l_@quot,0,c
  4665  001E7C                     l666:
  4666  001E7C  90D8               	bcf	status,0,c
  4667  001E7E  3601               	rlcf	__tdiv_to_l_@f1,f,c
  4668  001E80  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  4669  001E82  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  4670  001E84  2E10               	decfsz	__tdiv_to_l_@cntr,f,c
  4671  001E86  D7E6               	goto	l3440
  4672  001E88  AE11               	btfss	__tdiv_to_l_@exp1,7,c
  4673  001E8A  D00D               	goto	l3460
  4674  001E8C  5011               	movf	__tdiv_to_l_@exp1,w,c
  4675  001E8E  0A80               	xorlw	128
  4676  001E90  0F97               	addlw	151
  4677  001E92  A0D8               	btfss	status,0,c
  4678  001E94  D00B               	goto	u1860
  4679  001E96                     l3456:
  4680  001E96  90D8               	bcf	status,0,c
  4681  001E98  320F               	rrcf	__tdiv_to_l_@quot+3,f,c
  4682  001E9A  320E               	rrcf	__tdiv_to_l_@quot+2,f,c
  4683  001E9C  320D               	rrcf	__tdiv_to_l_@quot+1,f,c
  4684  001E9E  320C               	rrcf	__tdiv_to_l_@quot,f,c
  4685  001EA0  3E11               	incfsz	__tdiv_to_l_@exp1,f,c
  4686  001EA2  D7F9               	goto	l3456
  4687  001EA4  D014               	goto	l672
  4688  001EA6                     l3460:
  4689  001EA6  0E17               	movlw	23
  4690  001EA8  6411               	cpfsgt	__tdiv_to_l_@exp1,c
  4691  001EAA  D00F               	goto	l3468
  4692  001EAC                     u1860:
  4693  001EAC  0E00               	movlw	0
  4694  001EAE  6E01               	movwf	?__tdiv_to_l_,c
  4695  001EB0  0E00               	movlw	0
  4696  001EB2  6E02               	movwf	?__tdiv_to_l_+1,c
  4697  001EB4  0E00               	movlw	0
  4698  001EB6  6E03               	movwf	?__tdiv_to_l_+2,c
  4699  001EB8  0E00               	movlw	0
  4700  001EBA  6E04               	movwf	?__tdiv_to_l_+3,c
  4701  001EBC  D010               	goto	l663
  4702  001EBE                     l3466:
  4703  001EBE  90D8               	bcf	status,0,c
  4704  001EC0  360C               	rlcf	__tdiv_to_l_@quot,f,c
  4705  001EC2  360D               	rlcf	__tdiv_to_l_@quot+1,f,c
  4706  001EC4  360E               	rlcf	__tdiv_to_l_@quot+2,f,c
  4707  001EC6  360F               	rlcf	__tdiv_to_l_@quot+3,f,c
  4708  001EC8  0611               	decf	__tdiv_to_l_@exp1,f,c
  4709  001ECA                     l3468:
  4710  001ECA  6611               	tstfsz	__tdiv_to_l_@exp1,c
  4711  001ECC  D7F8               	goto	l3466
  4712  001ECE                     l672:
  4713  001ECE  C00C  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4714  001ED2  C00D  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4715  001ED6  C00E  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4716  001EDA  C00F  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4717  001EDE                     l663:
  4718  001EDE  0012               	return	
  4719  001EE0                     __end_of__tdiv_to_l_:
  4720                           	opt stack 0
  4721                           tblptru	equ	0xFF8
  4722                           tblptrh	equ	0xFF7
  4723                           tblptrl	equ	0xFF6
  4724                           tablat	equ	0xFF5
  4725                           prodh	equ	0xFF4
  4726                           prodl	equ	0xFF3
  4727                           postinc0	equ	0xFEE
  4728                           wreg	equ	0xFE8
  4729                           indf2	equ	0xFDF
  4730                           postinc2	equ	0xFDE
  4731                           postdec2	equ	0xFDD
  4732                           fsr2h	equ	0xFDA
  4733                           fsr2l	equ	0xFD9
  4734                           status	equ	0xFD8
  4735                           
  4736 ;; *************** function _isdigit *****************
  4737 ;; Defined at:
  4738 ;;		line 13 in file "E:\Program Files\Microchip\xc8\v1.20\sources\common\isdigit.c"
  4739 ;; Parameters:    Size  Location     Type
  4740 ;;  c               1    0[COMRAM] unsigned char 
  4741 ;; Auto vars:     Size  Location     Type
  4742 ;;		None
  4743 ;; Return value:  Size  Location     Type
  4744 ;;		None               void
  4745 ;; Registers used:
  4746 ;;		wreg, status,2, status,0
  4747 ;; Tracked objects:
  4748 ;;		On entry : 0/0
  4749 ;;		On exit  : 0/0
  4750 ;;		Unchanged: 0/0
  4751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4752 ;;      Params:         1       0       0       0       0       0       0       0       0
  4753 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4754 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4755 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4756 ;;Total ram usage:        3 bytes
  4757 ;; Hardware stack levels used:    1
  4758 ;; This function calls:
  4759 ;;		Nothing
  4760 ;; This function is called by:
  4761 ;;		_sprintf
  4762 ;; This function uses a non-reentrant model
  4763 ;;
  4764                           
  4765                           	psect	text16
  4766  002C2E                     __ptext16:
  4767                           	opt stack 0
  4768  002C2E                     _isdigit:
  4769                           	opt stack 29
  4770                           
  4771                           ;incstack = 0
  4772                           ;incstack = 0
  4773  002C2E  6E02               	movwf	??_isdigit& (0+255),c
  4774  002C30  0E00               	movlw	0
  4775  002C32  6E03               	movwf	_isdigit$793,c
  4776  002C34  5002               	movf	??_isdigit& (0+255),w,c
  4777  002C36  0E3A               	movlw	58
  4778  002C38  6001               	cpfslt	isdigit@c,c
  4779  002C3A  D007               	goto	l3410
  4780  002C3C  0E2F               	movlw	47
  4781  002C3E  6401               	cpfsgt	isdigit@c,c
  4782  002C40  D004               	goto	l3410
  4783  002C42  6E02               	movwf	??_isdigit& (0+255),c
  4784  002C44  0E01               	movlw	1
  4785  002C46  6E03               	movwf	_isdigit$793,c
  4786  002C48  5002               	movf	??_isdigit& (0+255),w,c
  4787  002C4A                     l3410:
  4788  002C4A  C003  F002         	movff	_isdigit$793,??_isdigit
  4789  002C4E  3002               	rrcf	??_isdigit,w,c
  4790  002C50  0012               	return	
  4791  002C52                     __end_of_isdigit:
  4792                           	opt stack 0
  4793                           tblptru	equ	0xFF8
  4794                           tblptrh	equ	0xFF7
  4795                           tblptrl	equ	0xFF6
  4796                           tablat	equ	0xFF5
  4797                           prodh	equ	0xFF4
  4798                           prodl	equ	0xFF3
  4799                           postinc0	equ	0xFEE
  4800                           wreg	equ	0xFE8
  4801                           indf2	equ	0xFDF
  4802                           postinc2	equ	0xFDE
  4803                           postdec2	equ	0xFDD
  4804                           fsr2h	equ	0xFDA
  4805                           fsr2l	equ	0xFD9
  4806                           status	equ	0xFD8
  4807                           
  4808 ;; *************** function _scale *****************
  4809 ;; Defined at:
  4810 ;;		line 426 in file "E:\Program Files\Microchip\xc8\v1.20\sources\common\doprnt.c"
  4811 ;; Parameters:    Size  Location     Type
  4812 ;;  scl             1   54[COMRAM] char 
  4813 ;; Auto vars:     Size  Location     Type
  4814 ;;		None
  4815 ;; Return value:  Size  Location     Type
  4816 ;;                  3   54[COMRAM] char 
  4817 ;; Registers used:
  4818 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4819 ;; Tracked objects:
  4820 ;;		On entry : 0/0
  4821 ;;		On exit  : 0/0
  4822 ;;		Unchanged: 0/0
  4823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4824 ;;      Params:         3       0       0       0       0       0       0       0       0
  4825 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4826 ;;      Temps:          6       0       0       0       0       0       0       0       0
  4827 ;;      Totals:        12       0       0       0       0       0       0       0       0
  4828 ;;Total ram usage:       12 bytes
  4829 ;; Hardware stack levels used:    1
  4830 ;; Hardware stack levels required when called:    2
  4831 ;; This function calls:
  4832 ;;		___ftmul
  4833 ;;		___awdiv
  4834 ;;		___awmod
  4835 ;;		___wmul
  4836 ;; This function is called by:
  4837 ;;		_sprintf
  4838 ;; This function uses a non-reentrant model
  4839 ;;
  4840                           
  4841                           	psect	text17
  4842  001522                     __ptext17:
  4843                           	opt stack 0
  4844  001522                     _scale:
  4845                           	opt stack 27
  4846                           
  4847                           ;doprnt.c: 428: if(scl < 0) {
  4848                           
  4849                           ;incstack = 0
  4850                           ;incstack = 0
  4851  001522  AE37               	btfss	scale@scl,7,c
  4852  001524  D108               	goto	l4094
  4853                           
  4854                           ;doprnt.c: 429: scl = -scl;
  4855  001526  6C37               	negf	scale@scl,c
  4856                           
  4857                           ;doprnt.c: 430: if(scl>=110)
  4858  001528  5037               	movf	scale@scl,w,c
  4859  00152A  0A80               	xorlw	128
  4860  00152C  0F12               	addlw	-238
  4861  00152E  A0D8               	btfss	status,0,c
  4862  001530  D09D               	goto	l4084
  4863                           
  4864                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4865  001532  0E00               	movlw	0
  4866  001534  6E14               	movwf	?___wmul+3,c
  4867  001536  0E03               	movlw	3
  4868  001538  6E13               	movwf	?___wmul+2,c
  4869  00153A  0E00               	movlw	0
  4870  00153C  6E0B               	movwf	?___awdiv+3,c
  4871  00153E  0E0A               	movlw	10
  4872  001540  6E0A               	movwf	?___awdiv+2,c
  4873  001542  0E00               	movlw	0
  4874  001544  6E04               	movwf	?___awmod+3,c
  4875  001546  0E64               	movlw	100
  4876  001548  6E03               	movwf	?___awmod+2,c
  4877  00154A  5037               	movf	scale@scl,w,c
  4878  00154C  6E01               	movwf	?___awmod,c
  4879  00154E  6A02               	clrf	?___awmod+1,c
  4880  001550  BE01               	btfsc	?___awmod,7,c
  4881  001552  0602               	decf	?___awmod+1,f,c
  4882  001554  ECE5  F013         	call	___awmod	;wreg free
  4883  001558  C001  F008         	movff	?___awmod,?___awdiv
  4884  00155C  C002  F009         	movff	?___awmod+1,?___awdiv+1
  4885  001560  EC1B  F013         	call	___awdiv	;wreg free
  4886  001564  0E09               	movlw	9
  4887  001566  2408               	addwf	?___awdiv,w,c
  4888  001568  6E11               	movwf	?___wmul,c
  4889  00156A  0E00               	movlw	0
  4890  00156C  2009               	addwfc	?___awdiv+1,w,c
  4891  00156E  6E12               	movwf	?___wmul+1,c
  4892  001570  EC7F  F015         	call	___wmul	;wreg free
  4893  001574  0E28               	movlw	low __npowers_
  4894  001576  2411               	addwf	?___wmul,w,c
  4895  001578  6EF6               	movwf	tblptrl,c
  4896  00157A  0E08               	movlw	high __npowers_
  4897  00157C  2012               	addwfc	?___wmul+1,w,c
  4898  00157E  6EF7               	movwf	tblptrh,c
  4899  001580  0009               	tblrd		*+
  4900  001582  CFF5 F03A          	movff	tablat,??_scale
  4901  001586  0009               	tblrd		*+
  4902  001588  CFF5 F03B          	movff	tablat,??_scale+1
  4903  00158C  0009               	tblrd		*+
  4904  00158E  CFF5 F03C          	movff	tablat,??_scale+2
  4905  001592  C03C  F02B         	movff	??_scale+2,?___ftmul+5
  4906  001596  C03B  F02A         	movff	??_scale+1,?___ftmul+4
  4907  00159A  C03A  F029         	movff	??_scale,?___ftmul+3
  4908  00159E  0E00               	movlw	0
  4909  0015A0  6E14               	movwf	?___wmul+3,c
  4910  0015A2  0E03               	movlw	3
  4911  0015A4  6E13               	movwf	?___wmul+2,c
  4912  0015A6  0E00               	movlw	0
  4913  0015A8  6E0B               	movwf	?___awdiv+3,c
  4914  0015AA  0E64               	movlw	100
  4915  0015AC  6E0A               	movwf	?___awdiv+2,c
  4916  0015AE  5037               	movf	scale@scl,w,c
  4917  0015B0  6E08               	movwf	?___awdiv,c
  4918  0015B2  6A09               	clrf	?___awdiv+1,c
  4919  0015B4  BE08               	btfsc	?___awdiv,7,c
  4920  0015B6  0609               	decf	?___awdiv+1,f,c
  4921  0015B8  EC1B  F013         	call	___awdiv	;wreg free
  4922  0015BC  0E12               	movlw	18
  4923  0015BE  2408               	addwf	?___awdiv,w,c
  4924  0015C0  6E11               	movwf	?___wmul,c
  4925  0015C2  0E00               	movlw	0
  4926  0015C4  2009               	addwfc	?___awdiv+1,w,c
  4927  0015C6  6E12               	movwf	?___wmul+1,c
  4928  0015C8  EC7F  F015         	call	___wmul	;wreg free
  4929  0015CC  0E28               	movlw	low __npowers_
  4930  0015CE  2411               	addwf	?___wmul,w,c
  4931  0015D0  6EF6               	movwf	tblptrl,c
  4932  0015D2  0E08               	movlw	high __npowers_
  4933  0015D4  2012               	addwfc	?___wmul+1,w,c
  4934  0015D6  6EF7               	movwf	tblptrh,c
  4935  0015D8  0009               	tblrd		*+
  4936  0015DA  CFF5 F03D          	movff	tablat,??_scale+3
  4937  0015DE  0009               	tblrd		*+
  4938  0015E0  CFF5 F03E          	movff	tablat,??_scale+4
  4939  0015E4  0009               	tblrd		*+
  4940  0015E6  CFF5 F03F          	movff	tablat,??_scale+5
  4941  0015EA  C03F  F028         	movff	??_scale+5,?___ftmul+2
  4942  0015EE  C03E  F027         	movff	??_scale+4,?___ftmul+1
  4943  0015F2  C03D  F026         	movff	??_scale+3,?___ftmul
  4944  0015F6  EC70  F00F         	call	___ftmul	;wreg free
  4945  0015FA  C028  F042         	movff	?___ftmul+2,_scale$1130+2
  4946  0015FE  C027  F041         	movff	?___ftmul+1,_scale$1130+1
  4947  001602  C026  F040         	movff	?___ftmul,_scale$1130
  4948                           
  4949                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4950  001606  C040  F026         	movff	_scale$1130,?___ftmul
  4951  00160A  C041  F027         	movff	_scale$1130+1,?___ftmul+1
  4952  00160E  C042  F028         	movff	_scale$1130+2,?___ftmul+2
  4953  001612  0E00               	movlw	0
  4954  001614  6E14               	movwf	?___wmul+3,c
  4955  001616  0E03               	movlw	3
  4956  001618  6E13               	movwf	?___wmul+2,c
  4957  00161A  0E00               	movlw	0
  4958  00161C  6E04               	movwf	?___awmod+3,c
  4959  00161E  0E0A               	movlw	10
  4960  001620  6E03               	movwf	?___awmod+2,c
  4961  001622  5037               	movf	scale@scl,w,c
  4962  001624  6E01               	movwf	?___awmod,c
  4963  001626  6A02               	clrf	?___awmod+1,c
  4964  001628  BE01               	btfsc	?___awmod,7,c
  4965  00162A  0602               	decf	?___awmod+1,f,c
  4966  00162C  ECE5  F013         	call	___awmod	;wreg free
  4967  001630  C001  F011         	movff	?___awmod,?___wmul
  4968  001634  C002  F012         	movff	?___awmod+1,?___wmul+1
  4969  001638  EC7F  F015         	call	___wmul	;wreg free
  4970  00163C  0E28               	movlw	low __npowers_
  4971  00163E  2411               	addwf	?___wmul,w,c
  4972  001640  6EF6               	movwf	tblptrl,c
  4973  001642  0E08               	movlw	high __npowers_
  4974  001644  2012               	addwfc	?___wmul+1,w,c
  4975  001646  6EF7               	movwf	tblptrh,c
  4976  001648  0009               	tblrd		*+
  4977  00164A  CFF5 F03A          	movff	tablat,??_scale
  4978  00164E  0009               	tblrd		*+
  4979  001650  CFF5 F03B          	movff	tablat,??_scale+1
  4980  001654  0009               	tblrd		*+
  4981  001656  CFF5 F03C          	movff	tablat,??_scale+2
  4982  00165A  C03C  F02B         	movff	??_scale+2,?___ftmul+5
  4983  00165E  C03B  F02A         	movff	??_scale+1,?___ftmul+4
  4984  001662  C03A  F029         	movff	??_scale,?___ftmul+3
  4985  001666  EC70  F00F         	call	___ftmul	;wreg free
  4986  00166A  D164               	goto	L11
  4987  00166C                     l4084:
  4988                           
  4989                           ;doprnt.c: 432: else if(scl > 10)
  4990  00166C  5037               	movf	scale@scl,w,c
  4991  00166E  0A80               	xorlw	128
  4992  001670  0F75               	addlw	-139
  4993  001672  A0D8               	btfss	status,0,c
  4994  001674  D059               	goto	l4090
  4995                           
  4996                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  4997  001676  0E00               	movlw	0
  4998  001678  6E14               	movwf	?___wmul+3,c
  4999  00167A  0E03               	movlw	3
  5000  00167C  6E13               	movwf	?___wmul+2,c
  5001  00167E  0E00               	movlw	0
  5002  001680  6E0B               	movwf	?___awdiv+3,c
  5003  001682  0E0A               	movlw	10
  5004  001684  6E0A               	movwf	?___awdiv+2,c
  5005  001686  5037               	movf	scale@scl,w,c
  5006  001688  6E08               	movwf	?___awdiv,c
  5007  00168A  6A09               	clrf	?___awdiv+1,c
  5008  00168C  BE08               	btfsc	?___awdiv,7,c
  5009  00168E  0609               	decf	?___awdiv+1,f,c
  5010  001690  EC1B  F013         	call	___awdiv	;wreg free
  5011  001694  0E09               	movlw	9
  5012  001696  2408               	addwf	?___awdiv,w,c
  5013  001698  6E11               	movwf	?___wmul,c
  5014  00169A  0E00               	movlw	0
  5015  00169C  2009               	addwfc	?___awdiv+1,w,c
  5016  00169E  6E12               	movwf	?___wmul+1,c
  5017  0016A0  EC7F  F015         	call	___wmul	;wreg free
  5018  0016A4  0E28               	movlw	low __npowers_
  5019  0016A6  2411               	addwf	?___wmul,w,c
  5020  0016A8  6EF6               	movwf	tblptrl,c
  5021  0016AA  0E08               	movlw	high __npowers_
  5022  0016AC  2012               	addwfc	?___wmul+1,w,c
  5023  0016AE  6EF7               	movwf	tblptrh,c
  5024  0016B0  0009               	tblrd		*+
  5025  0016B2  CFF5 F03A          	movff	tablat,??_scale
  5026  0016B6  0009               	tblrd		*+
  5027  0016B8  CFF5 F03B          	movff	tablat,??_scale+1
  5028  0016BC  0009               	tblrd		*+
  5029  0016BE  CFF5 F03C          	movff	tablat,??_scale+2
  5030  0016C2  C03C  F028         	movff	??_scale+2,?___ftmul+2
  5031  0016C6  C03B  F027         	movff	??_scale+1,?___ftmul+1
  5032  0016CA  C03A  F026         	movff	??_scale,?___ftmul
  5033  0016CE  0E00               	movlw	0
  5034  0016D0  6E14               	movwf	?___wmul+3,c
  5035  0016D2  0E03               	movlw	3
  5036  0016D4  6E13               	movwf	?___wmul+2,c
  5037  0016D6  0E00               	movlw	0
  5038  0016D8  6E04               	movwf	?___awmod+3,c
  5039  0016DA  0E0A               	movlw	10
  5040  0016DC  6E03               	movwf	?___awmod+2,c
  5041  0016DE  5037               	movf	scale@scl,w,c
  5042  0016E0  6E01               	movwf	?___awmod,c
  5043  0016E2  6A02               	clrf	?___awmod+1,c
  5044  0016E4  BE01               	btfsc	?___awmod,7,c
  5045  0016E6  0602               	decf	?___awmod+1,f,c
  5046  0016E8  ECE5  F013         	call	___awmod	;wreg free
  5047  0016EC  C001  F011         	movff	?___awmod,?___wmul
  5048  0016F0  C002  F012         	movff	?___awmod+1,?___wmul+1
  5049  0016F4  EC7F  F015         	call	___wmul	;wreg free
  5050  0016F8  0E28               	movlw	low __npowers_
  5051  0016FA  2411               	addwf	?___wmul,w,c
  5052  0016FC  6EF6               	movwf	tblptrl,c
  5053  0016FE  0E08               	movlw	high __npowers_
  5054  001700  2012               	addwfc	?___wmul+1,w,c
  5055  001702  6EF7               	movwf	tblptrh,c
  5056  001704  0009               	tblrd		*+
  5057  001706  CFF5 F03D          	movff	tablat,??_scale+3
  5058  00170A  0009               	tblrd		*+
  5059  00170C  CFF5 F03E          	movff	tablat,??_scale+4
  5060  001710  0009               	tblrd		*+
  5061  001712  CFF5 F03F          	movff	tablat,??_scale+5
  5062  001716  C03F  F02B         	movff	??_scale+5,?___ftmul+5
  5063  00171A  C03E  F02A         	movff	??_scale+4,?___ftmul+4
  5064  00171E  C03D  F029         	movff	??_scale+3,?___ftmul+3
  5065  001722  EC70  F00F         	call	___ftmul	;wreg free
  5066  001726  D106               	goto	L11
  5067  001728                     l4090:
  5068                           
  5069                           ;doprnt.c: 434: return _npowers_[scl];
  5070  001728  5037               	movf	scale@scl,w,c
  5071  00172A  0D03               	mullw	3
  5072  00172C  0E28               	movlw	low __npowers_
  5073  00172E  24F3               	addwf	prodl,w,c
  5074  001730  6EF6               	movwf	tblptrl,c
  5075  001732  0E08               	movlw	high __npowers_
  5076  001734  D10C               	goto	L10
  5077  001736                     l4094:
  5078                           
  5079                           ;doprnt.c: 435: }
  5080                           ;doprnt.c: 436: if(scl>=110)
  5081  001736  5037               	movf	scale@scl,w,c
  5082  001738  0A80               	xorlw	128
  5083  00173A  0F12               	addlw	-238
  5084  00173C  A0D8               	btfss	status,0,c
  5085  00173E  D09D               	goto	l4102
  5086                           
  5087                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5088  001740  0E00               	movlw	0
  5089  001742  6E14               	movwf	?___wmul+3,c
  5090  001744  0E03               	movlw	3
  5091  001746  6E13               	movwf	?___wmul+2,c
  5092  001748  0E00               	movlw	0
  5093  00174A  6E0B               	movwf	?___awdiv+3,c
  5094  00174C  0E0A               	movlw	10
  5095  00174E  6E0A               	movwf	?___awdiv+2,c
  5096  001750  0E00               	movlw	0
  5097  001752  6E04               	movwf	?___awmod+3,c
  5098  001754  0E64               	movlw	100
  5099  001756  6E03               	movwf	?___awmod+2,c
  5100  001758  5037               	movf	scale@scl,w,c
  5101  00175A  6E01               	movwf	?___awmod,c
  5102  00175C  6A02               	clrf	?___awmod+1,c
  5103  00175E  BE01               	btfsc	?___awmod,7,c
  5104  001760  0602               	decf	?___awmod+1,f,c
  5105  001762  ECE5  F013         	call	___awmod	;wreg free
  5106  001766  C001  F008         	movff	?___awmod,?___awdiv
  5107  00176A  C002  F009         	movff	?___awmod+1,?___awdiv+1
  5108  00176E  EC1B  F013         	call	___awdiv	;wreg free
  5109  001772  0E09               	movlw	9
  5110  001774  2408               	addwf	?___awdiv,w,c
  5111  001776  6E11               	movwf	?___wmul,c
  5112  001778  0E00               	movlw	0
  5113  00177A  2009               	addwfc	?___awdiv+1,w,c
  5114  00177C  6E12               	movwf	?___wmul+1,c
  5115  00177E  EC7F  F015         	call	___wmul	;wreg free
  5116  001782  0E4F               	movlw	low __powers_
  5117  001784  2411               	addwf	?___wmul,w,c
  5118  001786  6EF6               	movwf	tblptrl,c
  5119  001788  0E08               	movlw	high __powers_
  5120  00178A  2012               	addwfc	?___wmul+1,w,c
  5121  00178C  6EF7               	movwf	tblptrh,c
  5122  00178E  0009               	tblrd		*+
  5123  001790  CFF5 F03A          	movff	tablat,??_scale
  5124  001794  0009               	tblrd		*+
  5125  001796  CFF5 F03B          	movff	tablat,??_scale+1
  5126  00179A  0009               	tblrd		*+
  5127  00179C  CFF5 F03C          	movff	tablat,??_scale+2
  5128  0017A0  C03C  F02B         	movff	??_scale+2,?___ftmul+5
  5129  0017A4  C03B  F02A         	movff	??_scale+1,?___ftmul+4
  5130  0017A8  C03A  F029         	movff	??_scale,?___ftmul+3
  5131  0017AC  0E00               	movlw	0
  5132  0017AE  6E14               	movwf	?___wmul+3,c
  5133  0017B0  0E03               	movlw	3
  5134  0017B2  6E13               	movwf	?___wmul+2,c
  5135  0017B4  0E00               	movlw	0
  5136  0017B6  6E0B               	movwf	?___awdiv+3,c
  5137  0017B8  0E64               	movlw	100
  5138  0017BA  6E0A               	movwf	?___awdiv+2,c
  5139  0017BC  5037               	movf	scale@scl,w,c
  5140  0017BE  6E08               	movwf	?___awdiv,c
  5141  0017C0  6A09               	clrf	?___awdiv+1,c
  5142  0017C2  BE08               	btfsc	?___awdiv,7,c
  5143  0017C4  0609               	decf	?___awdiv+1,f,c
  5144  0017C6  EC1B  F013         	call	___awdiv	;wreg free
  5145  0017CA  0E12               	movlw	18
  5146  0017CC  2408               	addwf	?___awdiv,w,c
  5147  0017CE  6E11               	movwf	?___wmul,c
  5148  0017D0  0E00               	movlw	0
  5149  0017D2  2009               	addwfc	?___awdiv+1,w,c
  5150  0017D4  6E12               	movwf	?___wmul+1,c
  5151  0017D6  EC7F  F015         	call	___wmul	;wreg free
  5152  0017DA  0E4F               	movlw	low __powers_
  5153  0017DC  2411               	addwf	?___wmul,w,c
  5154  0017DE  6EF6               	movwf	tblptrl,c
  5155  0017E0  0E08               	movlw	high __powers_
  5156  0017E2  2012               	addwfc	?___wmul+1,w,c
  5157  0017E4  6EF7               	movwf	tblptrh,c
  5158  0017E6  0009               	tblrd		*+
  5159  0017E8  CFF5 F03D          	movff	tablat,??_scale+3
  5160  0017EC  0009               	tblrd		*+
  5161  0017EE  CFF5 F03E          	movff	tablat,??_scale+4
  5162  0017F2  0009               	tblrd		*+
  5163  0017F4  CFF5 F03F          	movff	tablat,??_scale+5
  5164  0017F8  C03F  F028         	movff	??_scale+5,?___ftmul+2
  5165  0017FC  C03E  F027         	movff	??_scale+4,?___ftmul+1
  5166  001800  C03D  F026         	movff	??_scale+3,?___ftmul
  5167  001804  EC70  F00F         	call	___ftmul	;wreg free
  5168  001808  C028  F042         	movff	?___ftmul+2,_scale$1130+2
  5169  00180C  C027  F041         	movff	?___ftmul+1,_scale$1130+1
  5170  001810  C026  F040         	movff	?___ftmul,_scale$1130
  5171                           
  5172                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5173  001814  C040  F026         	movff	_scale$1130,?___ftmul
  5174  001818  C041  F027         	movff	_scale$1130+1,?___ftmul+1
  5175  00181C  C042  F028         	movff	_scale$1130+2,?___ftmul+2
  5176  001820  0E00               	movlw	0
  5177  001822  6E14               	movwf	?___wmul+3,c
  5178  001824  0E03               	movlw	3
  5179  001826  6E13               	movwf	?___wmul+2,c
  5180  001828  0E00               	movlw	0
  5181  00182A  6E04               	movwf	?___awmod+3,c
  5182  00182C  0E0A               	movlw	10
  5183  00182E  6E03               	movwf	?___awmod+2,c
  5184  001830  5037               	movf	scale@scl,w,c
  5185  001832  6E01               	movwf	?___awmod,c
  5186  001834  6A02               	clrf	?___awmod+1,c
  5187  001836  BE01               	btfsc	?___awmod,7,c
  5188  001838  0602               	decf	?___awmod+1,f,c
  5189  00183A  ECE5  F013         	call	___awmod	;wreg free
  5190  00183E  C001  F011         	movff	?___awmod,?___wmul
  5191  001842  C002  F012         	movff	?___awmod+1,?___wmul+1
  5192  001846  EC7F  F015         	call	___wmul	;wreg free
  5193  00184A  0E4F               	movlw	low __powers_
  5194  00184C  2411               	addwf	?___wmul,w,c
  5195  00184E  6EF6               	movwf	tblptrl,c
  5196  001850  0E08               	movlw	high __powers_
  5197  001852  2012               	addwfc	?___wmul+1,w,c
  5198  001854  6EF7               	movwf	tblptrh,c
  5199  001856  0009               	tblrd		*+
  5200  001858  CFF5 F03A          	movff	tablat,??_scale
  5201  00185C  0009               	tblrd		*+
  5202  00185E  CFF5 F03B          	movff	tablat,??_scale+1
  5203  001862  0009               	tblrd		*+
  5204  001864  CFF5 F03C          	movff	tablat,??_scale+2
  5205  001868  C03C  F02B         	movff	??_scale+2,?___ftmul+5
  5206  00186C  C03B  F02A         	movff	??_scale+1,?___ftmul+4
  5207  001870  C03A  F029         	movff	??_scale,?___ftmul+3
  5208  001874  EC70  F00F         	call	___ftmul	;wreg free
  5209  001878  D05D               	goto	L11
  5210  00187A                     l4102:
  5211                           
  5212                           ;doprnt.c: 438: else if(scl > 10)
  5213  00187A  5037               	movf	scale@scl,w,c
  5214  00187C  0A80               	xorlw	128
  5215  00187E  0F75               	addlw	-139
  5216  001880  A0D8               	btfss	status,0,c
  5217  001882  D05F               	goto	l4108
  5218                           
  5219                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  5220  001884  0E00               	movlw	0
  5221  001886  6E14               	movwf	?___wmul+3,c
  5222  001888  0E03               	movlw	3
  5223  00188A  6E13               	movwf	?___wmul+2,c
  5224  00188C  0E00               	movlw	0
  5225  00188E  6E0B               	movwf	?___awdiv+3,c
  5226  001890  0E0A               	movlw	10
  5227  001892  6E0A               	movwf	?___awdiv+2,c
  5228  001894  5037               	movf	scale@scl,w,c
  5229  001896  6E08               	movwf	?___awdiv,c
  5230  001898  6A09               	clrf	?___awdiv+1,c
  5231  00189A  BE08               	btfsc	?___awdiv,7,c
  5232  00189C  0609               	decf	?___awdiv+1,f,c
  5233  00189E  EC1B  F013         	call	___awdiv	;wreg free
  5234  0018A2  0E09               	movlw	9
  5235  0018A4  2408               	addwf	?___awdiv,w,c
  5236  0018A6  6E11               	movwf	?___wmul,c
  5237  0018A8  0E00               	movlw	0
  5238  0018AA  2009               	addwfc	?___awdiv+1,w,c
  5239  0018AC  6E12               	movwf	?___wmul+1,c
  5240  0018AE  EC7F  F015         	call	___wmul	;wreg free
  5241  0018B2  0E4F               	movlw	low __powers_
  5242  0018B4  2411               	addwf	?___wmul,w,c
  5243  0018B6  6EF6               	movwf	tblptrl,c
  5244  0018B8  0E08               	movlw	high __powers_
  5245  0018BA  2012               	addwfc	?___wmul+1,w,c
  5246  0018BC  6EF7               	movwf	tblptrh,c
  5247  0018BE  0009               	tblrd		*+
  5248  0018C0  CFF5 F03A          	movff	tablat,??_scale
  5249  0018C4  0009               	tblrd		*+
  5250  0018C6  CFF5 F03B          	movff	tablat,??_scale+1
  5251  0018CA  0009               	tblrd		*+
  5252  0018CC  CFF5 F03C          	movff	tablat,??_scale+2
  5253  0018D0  C03C  F028         	movff	??_scale+2,?___ftmul+2
  5254  0018D4  C03B  F027         	movff	??_scale+1,?___ftmul+1
  5255  0018D8  C03A  F026         	movff	??_scale,?___ftmul
  5256  0018DC  0E00               	movlw	0
  5257  0018DE  6E14               	movwf	?___wmul+3,c
  5258  0018E0  0E03               	movlw	3
  5259  0018E2  6E13               	movwf	?___wmul+2,c
  5260  0018E4  0E00               	movlw	0
  5261  0018E6  6E04               	movwf	?___awmod+3,c
  5262  0018E8  0E0A               	movlw	10
  5263  0018EA  6E03               	movwf	?___awmod+2,c
  5264  0018EC  5037               	movf	scale@scl,w,c
  5265  0018EE  6E01               	movwf	?___awmod,c
  5266  0018F0  6A02               	clrf	?___awmod+1,c
  5267  0018F2  BE01               	btfsc	?___awmod,7,c
  5268  0018F4  0602               	decf	?___awmod+1,f,c
  5269  0018F6  ECE5  F013         	call	___awmod	;wreg free
  5270  0018FA  C001  F011         	movff	?___awmod,?___wmul
  5271  0018FE  C002  F012         	movff	?___awmod+1,?___wmul+1
  5272  001902  EC7F  F015         	call	___wmul	;wreg free
  5273  001906  0E4F               	movlw	low __powers_
  5274  001908  2411               	addwf	?___wmul,w,c
  5275  00190A  6EF6               	movwf	tblptrl,c
  5276  00190C  0E08               	movlw	high __powers_
  5277  00190E  2012               	addwfc	?___wmul+1,w,c
  5278  001910  6EF7               	movwf	tblptrh,c
  5279  001912  0009               	tblrd		*+
  5280  001914  CFF5 F03D          	movff	tablat,??_scale+3
  5281  001918  0009               	tblrd		*+
  5282  00191A  CFF5 F03E          	movff	tablat,??_scale+4
  5283  00191E  0009               	tblrd		*+
  5284  001920  CFF5 F03F          	movff	tablat,??_scale+5
  5285  001924  C03F  F02B         	movff	??_scale+5,?___ftmul+5
  5286  001928  C03E  F02A         	movff	??_scale+4,?___ftmul+4
  5287  00192C  C03D  F029         	movff	??_scale+3,?___ftmul+3
  5288  001930  EC70  F00F         	call	___ftmul	;wreg free
  5289  001934                     L11:
  5290  001934  C028  F039         	movff	?___ftmul+2,?_scale+2
  5291  001938  C027  F038         	movff	?___ftmul+1,?_scale+1
  5292  00193C  C026  F037         	movff	?___ftmul,?_scale
  5293  001940  D017               	goto	l166
  5294  001942                     l4108:
  5295                           
  5296                           ;doprnt.c: 440: return _powers_[scl];
  5297  001942  5037               	movf	scale@scl,w,c
  5298  001944  0D03               	mullw	3
  5299  001946  0E4F               	movlw	low __powers_
  5300  001948  24F3               	addwf	prodl,w,c
  5301  00194A  6EF6               	movwf	tblptrl,c
  5302  00194C  0E08               	movlw	high __powers_
  5303  00194E                     L10:
  5304  00194E  20F4               	addwfc	prodh,w,c
  5305  001950  6EF7               	movwf	tblptrh,c
  5306  001952  0009               	tblrd		*+
  5307  001954  CFF5 F03A          	movff	tablat,??_scale
  5308  001958  0009               	tblrd		*+
  5309  00195A  CFF5 F03B          	movff	tablat,??_scale+1
  5310  00195E  0009               	tblrd		*+
  5311  001960  CFF5 F03C          	movff	tablat,??_scale+2
  5312  001964  C03C  F039         	movff	??_scale+2,?_scale+2
  5313  001968  C03B  F038         	movff	??_scale+1,?_scale+1
  5314  00196C  C03A  F037         	movff	??_scale,?_scale
  5315  001970                     l166:
  5316  001970  0012               	return	
  5317  001972                     __end_of_scale:
  5318                           	opt stack 0
  5319                           tblptru	equ	0xFF8
  5320                           tblptrh	equ	0xFF7
  5321                           tblptrl	equ	0xFF6
  5322                           tablat	equ	0xFF5
  5323                           prodh	equ	0xFF4
  5324                           prodl	equ	0xFF3
  5325                           postinc0	equ	0xFEE
  5326                           wreg	equ	0xFE8
  5327                           indf2	equ	0xFDF
  5328                           postinc2	equ	0xFDE
  5329                           postdec2	equ	0xFDD
  5330                           fsr2h	equ	0xFDA
  5331                           fsr2l	equ	0xFD9
  5332                           status	equ	0xFD8
  5333                           
  5334 ;; *************** function ___wmul *****************
  5335 ;; Defined at:
  5336 ;;		line 5 in file "E:\Program Files\Microchip\xc8\v1.20\sources\common\wmul.c"
  5337 ;; Parameters:    Size  Location     Type
  5338 ;;  multiplier      2   16[COMRAM] unsigned int 
  5339 ;;  multiplicand    2   18[COMRAM] unsigned int 
  5340 ;; Auto vars:     Size  Location     Type
  5341 ;;  product         2   20[COMRAM] unsigned int 
  5342 ;; Return value:  Size  Location     Type
  5343 ;;                  2   16[COMRAM] unsigned int 
  5344 ;; Registers used:
  5345 ;;		wreg, status,2, status,0, prodl, prodh
  5346 ;; Tracked objects:
  5347 ;;		On entry : 0/0
  5348 ;;		On exit  : 0/0
  5349 ;;		Unchanged: 0/0
  5350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5351 ;;      Params:         4       0       0       0       0       0       0       0       0
  5352 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5353 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5354 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5355 ;;Total ram usage:        6 bytes
  5356 ;; Hardware stack levels used:    1
  5357 ;; This function calls:
  5358 ;;		Nothing
  5359 ;; This function is called by:
  5360 ;;		_fround
  5361 ;;		_scale
  5362 ;;		_sprintf
  5363 ;; This function uses a non-reentrant model
  5364 ;;
  5365                           
  5366                           	psect	text18
  5367  002AFE                     __ptext18:
  5368                           	opt stack 0
  5369  002AFE                     ___wmul:
  5370                           	opt stack 29
  5371                           
  5372                           ;incstack = 0
  5373                           ;incstack = 0
  5374  002AFE  5011               	movf	___wmul@multiplier,w,c
  5375  002B00  0213               	mulwf	___wmul@multiplicand,c
  5376  002B02  CFF3 F015          	movff	prodl,___wmul@product
  5377  002B06  CFF4 F016          	movff	prodh,___wmul@product+1
  5378  002B0A  5011               	movf	___wmul@multiplier,w,c
  5379  002B0C  0214               	mulwf	___wmul@multiplicand+1,c
  5380  002B0E  CFF3 FFF4          	movff	prodl,prodh
  5381  002B12  6AF3               	clrf	prodl,c
  5382  002B14  50F3               	movf	prodl,w,c
  5383  002B16  2615               	addwf	___wmul@product,f,c
  5384  002B18  50F4               	movf	prodh,w,c
  5385  002B1A  2216               	addwfc	___wmul@product+1,f,c
  5386  002B1C  5012               	movf	___wmul@multiplier+1,w,c
  5387  002B1E  0213               	mulwf	___wmul@multiplicand,c
  5388  002B20  CFF3 FFF4          	movff	prodl,prodh
  5389  002B24  6AF3               	clrf	prodl,c
  5390  002B26  50F3               	movf	prodl,w,c
  5391  002B28  2615               	addwf	___wmul@product,f,c
  5392  002B2A  50F4               	movf	prodh,w,c
  5393  002B2C  2216               	addwfc	___wmul@product+1,f,c
  5394  002B2E  C015  F011         	movff	___wmul@product,?___wmul
  5395  002B32  C016  F012         	movff	___wmul@product+1,?___wmul+1
  5396  002B36  0012               	return	
  5397  002B38                     __end_of___wmul:
  5398                           	opt stack 0
  5399                           tblptru	equ	0xFF8
  5400                           tblptrh	equ	0xFF7
  5401                           tblptrl	equ	0xFF6
  5402                           tablat	equ	0xFF5
  5403                           prodh	equ	0xFF4
  5404                           prodl	equ	0xFF3
  5405                           postinc0	equ	0xFEE
  5406                           wreg	equ	0xFE8
  5407                           indf2	equ	0xFDF
  5408                           postinc2	equ	0xFDE
  5409                           postdec2	equ	0xFDD
  5410                           fsr2h	equ	0xFDA
  5411                           fsr2l	equ	0xFD9
  5412                           status	equ	0xFD8
  5413                           
  5414 ;; *************** function ___awmod *****************
  5415 ;; Defined at:
  5416 ;;		line 10 in file "E:\Program Files\Microchip\xc8\v1.20\sources\common\awmod.c"
  5417 ;; Parameters:    Size  Location     Type
  5418 ;;  dividend        2    0[COMRAM] int 
  5419 ;;  divisor         2    2[COMRAM] int 
  5420 ;; Auto vars:     Size  Location     Type
  5421 ;;  sign            1    6[COMRAM] unsigned char 
  5422 ;;  counter         1    5[COMRAM] unsigned char 
  5423 ;; Return value:  Size  Location     Type
  5424 ;;                  2    0[COMRAM] int 
  5425 ;; Registers used:
  5426 ;;		wreg, status,2, status,0
  5427 ;; Tracked objects:
  5428 ;;		On entry : 0/0
  5429 ;;		On exit  : 0/0
  5430 ;;		Unchanged: 0/0
  5431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5432 ;;      Params:         4       0       0       0       0       0       0       0       0
  5433 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5434 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5435 ;;      Totals:         7       0       0       0       0       0       0       0       0
  5436 ;;Total ram usage:        7 bytes
  5437 ;; Hardware stack levels used:    1
  5438 ;; This function calls:
  5439 ;;		Nothing
  5440 ;; This function is called by:
  5441 ;;		_fround
  5442 ;;		_scale
  5443 ;; This function uses a non-reentrant model
  5444 ;;
  5445                           
  5446                           	psect	text19
  5447  0027CA                     __ptext19:
  5448                           	opt stack 0
  5449  0027CA                     ___awmod:
  5450                           	opt stack 28
  5451                           
  5452                           ;incstack = 0
  5453                           ;incstack = 0
  5454  0027CA  6E05               	movwf	??___awmod& (0+255),c
  5455  0027CC  0E00               	movlw	0
  5456  0027CE  6E07               	movwf	___awmod@sign,c
  5457  0027D0  5005               	movf	??___awmod& (0+255),w,c
  5458  0027D2  AE02               	btfss	___awmod@dividend+1,7,c
  5459  0027D4  D008               	goto	l3568
  5460  0027D6  6C01               	negf	___awmod@dividend,c
  5461  0027D8  1E02               	comf	___awmod@dividend+1,f,c
  5462  0027DA  B0D8               	btfsc	status,0,c
  5463  0027DC  2A02               	incf	___awmod@dividend+1,f,c
  5464  0027DE  6E05               	movwf	??___awmod& (0+255),c
  5465  0027E0  0E01               	movlw	1
  5466  0027E2  6E07               	movwf	___awmod@sign,c
  5467  0027E4  5005               	movf	??___awmod& (0+255),w,c
  5468  0027E6                     l3568:
  5469  0027E6  AE04               	btfss	___awmod@divisor+1,7,c
  5470  0027E8  D004               	goto	l3572
  5471  0027EA  6C03               	negf	___awmod@divisor,c
  5472  0027EC  1E04               	comf	___awmod@divisor+1,f,c
  5473  0027EE  B0D8               	btfsc	status,0,c
  5474  0027F0  2A04               	incf	___awmod@divisor+1,f,c
  5475  0027F2                     l3572:
  5476  0027F2  5004               	movf	___awmod@divisor+1,w,c
  5477  0027F4  1003               	iorwf	___awmod@divisor,w,c
  5478  0027F6  B4D8               	btfsc	status,2,c
  5479  0027F8  D01A               	goto	l3588
  5480  0027FA  6E05               	movwf	??___awmod& (0+255),c
  5481  0027FC  0E01               	movlw	1
  5482  0027FE  6E06               	movwf	___awmod@counter,c
  5483  002800  5005               	movf	??___awmod& (0+255),w,c
  5484  002802  D004               	goto	l3578
  5485  002804                     l3576:
  5486  002804  90D8               	bcf	status,0,c
  5487  002806  3603               	rlcf	___awmod@divisor,f,c
  5488  002808  3604               	rlcf	___awmod@divisor+1,f,c
  5489  00280A  2A06               	incf	___awmod@counter,f,c
  5490  00280C                     l3578:
  5491  00280C  AE04               	btfss	___awmod@divisor+1,7,c
  5492  00280E  D7FA               	goto	l3576
  5493  002810                     l3580:
  5494  002810  5003               	movf	___awmod@divisor,w,c
  5495  002812  5C01               	subwf	___awmod@dividend,w,c
  5496  002814  5004               	movf	___awmod@divisor+1,w,c
  5497  002816  5802               	subwfb	___awmod@dividend+1,w,c
  5498  002818  A0D8               	btfss	status,0,c
  5499  00281A  D004               	goto	l3584
  5500  00281C  5003               	movf	___awmod@divisor,w,c
  5501  00281E  5E01               	subwf	___awmod@dividend,f,c
  5502  002820  5004               	movf	___awmod@divisor+1,w,c
  5503  002822  5A02               	subwfb	___awmod@dividend+1,f,c
  5504  002824                     l3584:
  5505  002824  90D8               	bcf	status,0,c
  5506  002826  3204               	rrcf	___awmod@divisor+1,f,c
  5507  002828  3203               	rrcf	___awmod@divisor,f,c
  5508  00282A  2E06               	decfsz	___awmod@counter,f,c
  5509  00282C  D7F1               	goto	l3580
  5510  00282E                     l3588:
  5511  00282E  5007               	movf	___awmod@sign,w,c
  5512  002830  B4D8               	btfsc	status,2,c
  5513  002832  D004               	goto	l3592
  5514  002834  6C01               	negf	___awmod@dividend,c
  5515  002836  1E02               	comf	___awmod@dividend+1,f,c
  5516  002838  B0D8               	btfsc	status,0,c
  5517  00283A  2A02               	incf	___awmod@dividend+1,f,c
  5518  00283C                     l3592:
  5519  00283C  C001  F001         	movff	___awmod@dividend,?___awmod
  5520  002840  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  5521  002844  0012               	return	
  5522  002846                     __end_of___awmod:
  5523                           	opt stack 0
  5524                           tblptru	equ	0xFF8
  5525                           tblptrh	equ	0xFF7
  5526                           tblptrl	equ	0xFF6
  5527                           tablat	equ	0xFF5
  5528                           prodh	equ	0xFF4
  5529                           prodl	equ	0xFF3
  5530                           postinc0	equ	0xFEE
  5531                           wreg	equ	0xFE8
  5532                           indf2	equ	0xFDF
  5533                           postinc2	equ	0xFDE
  5534                           postdec2	equ	0xFDD
  5535                           fsr2h	equ	0xFDA
  5536                           fsr2l	equ	0xFD9
  5537                           status	equ	0xFD8
  5538                           
  5539 ;; *************** function ___awdiv *****************
  5540 ;; Defined at:
  5541 ;;		line 10 in file "E:\Program Files\Microchip\xc8\v1.20\sources\common\awdiv.c"
  5542 ;; Parameters:    Size  Location     Type
  5543 ;;  dividend        2    7[COMRAM] int 
  5544 ;;  divisor         2    9[COMRAM] int 
  5545 ;; Auto vars:     Size  Location     Type
  5546 ;;  quotient        2   14[COMRAM] int 
  5547 ;;  sign            1   13[COMRAM] unsigned char 
  5548 ;;  counter         1   12[COMRAM] unsigned char 
  5549 ;; Return value:  Size  Location     Type
  5550 ;;                  2    7[COMRAM] int 
  5551 ;; Registers used:
  5552 ;;		wreg, status,2, status,0
  5553 ;; Tracked objects:
  5554 ;;		On entry : 0/0
  5555 ;;		On exit  : 0/0
  5556 ;;		Unchanged: 0/0
  5557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5558 ;;      Params:         4       0       0       0       0       0       0       0       0
  5559 ;;      Locals:         4       0       0       0       0       0       0       0       0
  5560 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5561 ;;      Totals:         9       0       0       0       0       0       0       0       0
  5562 ;;Total ram usage:        9 bytes
  5563 ;; Hardware stack levels used:    1
  5564 ;; This function calls:
  5565 ;;		Nothing
  5566 ;; This function is called by:
  5567 ;;		_fround
  5568 ;;		_scale
  5569 ;;		_sprintf
  5570 ;; This function uses a non-reentrant model
  5571 ;;
  5572                           
  5573                           	psect	text20
  5574  002636                     __ptext20:
  5575                           	opt stack 0
  5576  002636                     ___awdiv:
  5577                           	opt stack 29
  5578                           
  5579                           ;incstack = 0
  5580                           ;incstack = 0
  5581  002636  6E0C               	movwf	??___awdiv& (0+255),c
  5582  002638  0E00               	movlw	0
  5583  00263A  6E0E               	movwf	___awdiv@sign,c
  5584  00263C  500C               	movf	??___awdiv& (0+255),w,c
  5585  00263E  AE0B               	btfss	___awdiv@divisor+1,7,c
  5586  002640  D008               	goto	l3896
  5587  002642  6C0A               	negf	___awdiv@divisor,c
  5588  002644  1E0B               	comf	___awdiv@divisor+1,f,c
  5589  002646  B0D8               	btfsc	status,0,c
  5590  002648  2A0B               	incf	___awdiv@divisor+1,f,c
  5591  00264A  6E0C               	movwf	??___awdiv& (0+255),c
  5592  00264C  0E01               	movlw	1
  5593  00264E  6E0E               	movwf	___awdiv@sign,c
  5594  002650  500C               	movf	??___awdiv& (0+255),w,c
  5595  002652                     l3896:
  5596  002652  AE09               	btfss	___awdiv@dividend+1,7,c
  5597  002654  D006               	goto	l3902
  5598  002656  6C08               	negf	___awdiv@dividend,c
  5599  002658  1E09               	comf	___awdiv@dividend+1,f,c
  5600  00265A  B0D8               	btfsc	status,0,c
  5601  00265C  2A09               	incf	___awdiv@dividend+1,f,c
  5602  00265E  0E01               	movlw	1
  5603  002660  1A0E               	xorwf	___awdiv@sign,f,c
  5604  002662                     l3902:
  5605  002662  0E00               	movlw	0
  5606  002664  6E10               	movwf	___awdiv@quotient+1,c
  5607  002666  0E00               	movlw	0
  5608  002668  6E0F               	movwf	___awdiv@quotient,c
  5609  00266A  500B               	movf	___awdiv@divisor+1,w,c
  5610  00266C  100A               	iorwf	___awdiv@divisor,w,c
  5611  00266E  B4D8               	btfsc	status,2,c
  5612  002670  D01E               	goto	l3924
  5613  002672  6E0C               	movwf	??___awdiv& (0+255),c
  5614  002674  0E01               	movlw	1
  5615  002676  6E0D               	movwf	___awdiv@counter,c
  5616  002678  500C               	movf	??___awdiv& (0+255),w,c
  5617  00267A  D004               	goto	l3910
  5618  00267C                     l3908:
  5619  00267C  90D8               	bcf	status,0,c
  5620  00267E  360A               	rlcf	___awdiv@divisor,f,c
  5621  002680  360B               	rlcf	___awdiv@divisor+1,f,c
  5622  002682  2A0D               	incf	___awdiv@counter,f,c
  5623  002684                     l3910:
  5624  002684  AE0B               	btfss	___awdiv@divisor+1,7,c
  5625  002686  D7FA               	goto	l3908
  5626  002688                     l3912:
  5627  002688  90D8               	bcf	status,0,c
  5628  00268A  360F               	rlcf	___awdiv@quotient,f,c
  5629  00268C  3610               	rlcf	___awdiv@quotient+1,f,c
  5630  00268E  500A               	movf	___awdiv@divisor,w,c
  5631  002690  5C08               	subwf	___awdiv@dividend,w,c
  5632  002692  500B               	movf	___awdiv@divisor+1,w,c
  5633  002694  5809               	subwfb	___awdiv@dividend+1,w,c
  5634  002696  A0D8               	btfss	status,0,c
  5635  002698  D005               	goto	l3920
  5636  00269A  500A               	movf	___awdiv@divisor,w,c
  5637  00269C  5E08               	subwf	___awdiv@dividend,f,c
  5638  00269E  500B               	movf	___awdiv@divisor+1,w,c
  5639  0026A0  5A09               	subwfb	___awdiv@dividend+1,f,c
  5640  0026A2  800F               	bsf	___awdiv@quotient,0,c
  5641  0026A4                     l3920:
  5642  0026A4  90D8               	bcf	status,0,c
  5643  0026A6  320B               	rrcf	___awdiv@divisor+1,f,c
  5644  0026A8  320A               	rrcf	___awdiv@divisor,f,c
  5645  0026AA  2E0D               	decfsz	___awdiv@counter,f,c
  5646  0026AC  D7ED               	goto	l3912
  5647  0026AE                     l3924:
  5648  0026AE  500E               	movf	___awdiv@sign,w,c
  5649  0026B0  B4D8               	btfsc	status,2,c
  5650  0026B2  D004               	goto	l3928
  5651  0026B4  6C0F               	negf	___awdiv@quotient,c
  5652  0026B6  1E10               	comf	___awdiv@quotient+1,f,c
  5653  0026B8  B0D8               	btfsc	status,0,c
  5654  0026BA  2A10               	incf	___awdiv@quotient+1,f,c
  5655  0026BC                     l3928:
  5656  0026BC  C00F  F008         	movff	___awdiv@quotient,?___awdiv
  5657  0026C0  C010  F009         	movff	___awdiv@quotient+1,?___awdiv+1
  5658  0026C4  0012               	return	
  5659  0026C6                     __end_of___awdiv:
  5660                           	opt stack 0
  5661                           tblptru	equ	0xFF8
  5662                           tblptrh	equ	0xFF7
  5663                           tblptrl	equ	0xFF6
  5664                           tablat	equ	0xFF5
  5665                           prodh	equ	0xFF4
  5666                           prodl	equ	0xFF3
  5667                           postinc0	equ	0xFEE
  5668                           wreg	equ	0xFE8
  5669                           indf2	equ	0xFDF
  5670                           postinc2	equ	0xFDE
  5671                           postdec2	equ	0xFDD
  5672                           fsr2h	equ	0xFDA
  5673                           fsr2l	equ	0xFD9
  5674                           status	equ	0xFD8
  5675                           
  5676 ;; *************** function _fround *****************
  5677 ;; Defined at:
  5678 ;;		line 410 in file "E:\Program Files\Microchip\xc8\v1.20\sources\common\doprnt.c"
  5679 ;; Parameters:    Size  Location     Type
  5680 ;;  prec            1   54[COMRAM] unsigned char 
  5681 ;; Auto vars:     Size  Location     Type
  5682 ;;		None
  5683 ;; Return value:  Size  Location     Type
  5684 ;;                  3   54[COMRAM] unsigned char 
  5685 ;; Registers used:
  5686 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5687 ;; Tracked objects:
  5688 ;;		On entry : 0/0
  5689 ;;		On exit  : 0/0
  5690 ;;		Unchanged: 0/0
  5691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5692 ;;      Params:         3       0       0       0       0       0       0       0       0
  5693 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5694 ;;      Temps:          6       0       0       0       0       0       0       0       0
  5695 ;;      Totals:        15       0       0       0       0       0       0       0       0
  5696 ;;Total ram usage:       15 bytes
  5697 ;; Hardware stack levels used:    1
  5698 ;; Hardware stack levels required when called:    2
  5699 ;; This function calls:
  5700 ;;		___ftmul
  5701 ;;		___awdiv
  5702 ;;		___awmod
  5703 ;;		___wmul
  5704 ;; This function is called by:
  5705 ;;		_sprintf
  5706 ;; This function uses a non-reentrant model
  5707 ;;
  5708                           
  5709                           	psect	text21
  5710  001972                     __ptext21:
  5711                           	opt stack 0
  5712  001972                     _fround:
  5713                           	opt stack 27
  5714                           
  5715                           ;doprnt.c: 413: if(prec>=110)
  5716                           
  5717                           ;incstack = 0
  5718                           ;incstack = 0
  5719  001972  0E6D               	movlw	109
  5720  001974  6437               	cpfsgt	fround@prec,c
  5721  001976  D0AB               	goto	l4044
  5722                           
  5723                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5724  001978  0E00               	movlw	0
  5725  00197A  6E14               	movwf	?___wmul+3,c
  5726  00197C  0E03               	movlw	3
  5727  00197E  6E13               	movwf	?___wmul+2,c
  5728  001980  0E00               	movlw	0
  5729  001982  6E0B               	movwf	?___awdiv+3,c
  5730  001984  0E0A               	movlw	10
  5731  001986  6E0A               	movwf	?___awdiv+2,c
  5732  001988  0E00               	movlw	0
  5733  00198A  6E04               	movwf	?___awmod+3,c
  5734  00198C  0E64               	movlw	100
  5735  00198E  6E03               	movwf	?___awmod+2,c
  5736  001990  C037  F001         	movff	fround@prec,?___awmod
  5737  001994  6A02               	clrf	?___awmod+1,c
  5738  001996  ECE5  F013         	call	___awmod	;wreg free
  5739  00199A  C001  F008         	movff	?___awmod,?___awdiv
  5740  00199E  C002  F009         	movff	?___awmod+1,?___awdiv+1
  5741  0019A2  EC1B  F013         	call	___awdiv	;wreg free
  5742  0019A6  0E09               	movlw	9
  5743  0019A8  2408               	addwf	?___awdiv,w,c
  5744  0019AA  6E11               	movwf	?___wmul,c
  5745  0019AC  0E00               	movlw	0
  5746  0019AE  2009               	addwfc	?___awdiv+1,w,c
  5747  0019B0  6E12               	movwf	?___wmul+1,c
  5748  0019B2  EC7F  F015         	call	___wmul	;wreg free
  5749  0019B6  0E28               	movlw	low __npowers_
  5750  0019B8  2411               	addwf	?___wmul,w,c
  5751  0019BA  6EF6               	movwf	tblptrl,c
  5752  0019BC  0E08               	movlw	high __npowers_
  5753  0019BE  2012               	addwfc	?___wmul+1,w,c
  5754  0019C0  6EF7               	movwf	tblptrh,c
  5755  0019C2  0009               	tblrd		*+
  5756  0019C4  CFF5 F03A          	movff	tablat,??_fround
  5757  0019C8  0009               	tblrd		*+
  5758  0019CA  CFF5 F03B          	movff	tablat,??_fround+1
  5759  0019CE  0009               	tblrd		*+
  5760  0019D0  CFF5 F03C          	movff	tablat,??_fround+2
  5761  0019D4  C03C  F02B         	movff	??_fround+2,?___ftmul+5
  5762  0019D8  C03B  F02A         	movff	??_fround+1,?___ftmul+4
  5763  0019DC  C03A  F029         	movff	??_fround,?___ftmul+3
  5764  0019E0  0E00               	movlw	0
  5765  0019E2  6E14               	movwf	?___wmul+3,c
  5766  0019E4  0E03               	movlw	3
  5767  0019E6  6E13               	movwf	?___wmul+2,c
  5768  0019E8  0E00               	movlw	0
  5769  0019EA  6E0B               	movwf	?___awdiv+3,c
  5770  0019EC  0E64               	movlw	100
  5771  0019EE  6E0A               	movwf	?___awdiv+2,c
  5772  0019F0  C037  F008         	movff	fround@prec,?___awdiv
  5773  0019F4  6A09               	clrf	?___awdiv+1,c
  5774  0019F6  EC1B  F013         	call	___awdiv	;wreg free
  5775  0019FA  0E12               	movlw	18
  5776  0019FC  2408               	addwf	?___awdiv,w,c
  5777  0019FE  6E11               	movwf	?___wmul,c
  5778  001A00  0E00               	movlw	0
  5779  001A02  2009               	addwfc	?___awdiv+1,w,c
  5780  001A04  6E12               	movwf	?___wmul+1,c
  5781  001A06  EC7F  F015         	call	___wmul	;wreg free
  5782  001A0A  0E28               	movlw	low __npowers_
  5783  001A0C  2411               	addwf	?___wmul,w,c
  5784  001A0E  6EF6               	movwf	tblptrl,c
  5785  001A10  0E08               	movlw	high __npowers_
  5786  001A12  2012               	addwfc	?___wmul+1,w,c
  5787  001A14  6EF7               	movwf	tblptrh,c
  5788  001A16  0009               	tblrd		*+
  5789  001A18  CFF5 F03D          	movff	tablat,??_fround+3
  5790  001A1C  0009               	tblrd		*+
  5791  001A1E  CFF5 F03E          	movff	tablat,??_fround+4
  5792  001A22  0009               	tblrd		*+
  5793  001A24  CFF5 F03F          	movff	tablat,??_fround+5
  5794  001A28  C03F  F028         	movff	??_fround+5,?___ftmul+2
  5795  001A2C  C03E  F027         	movff	??_fround+4,?___ftmul+1
  5796  001A30  C03D  F026         	movff	??_fround+3,?___ftmul
  5797  001A34  EC70  F00F         	call	___ftmul	;wreg free
  5798  001A38  C028  F045         	movff	?___ftmul+2,_fround$1128+2
  5799  001A3C  C027  F044         	movff	?___ftmul+1,_fround$1128+1
  5800  001A40  C026  F043         	movff	?___ftmul,_fround$1128
  5801                           
  5802                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5803  001A44  0E00               	movlw	0
  5804  001A46  6E14               	movwf	?___wmul+3,c
  5805  001A48  0E03               	movlw	3
  5806  001A4A  6E13               	movwf	?___wmul+2,c
  5807  001A4C  0E00               	movlw	0
  5808  001A4E  6E04               	movwf	?___awmod+3,c
  5809  001A50  0E0A               	movlw	10
  5810  001A52  6E03               	movwf	?___awmod+2,c
  5811  001A54  C037  F001         	movff	fround@prec,?___awmod
  5812  001A58  6A02               	clrf	?___awmod+1,c
  5813  001A5A  ECE5  F013         	call	___awmod	;wreg free
  5814  001A5E  C001  F011         	movff	?___awmod,?___wmul
  5815  001A62  C002  F012         	movff	?___awmod+1,?___wmul+1
  5816  001A66  EC7F  F015         	call	___wmul	;wreg free
  5817  001A6A  0E28               	movlw	low __npowers_
  5818  001A6C  2411               	addwf	?___wmul,w,c
  5819  001A6E  6EF6               	movwf	tblptrl,c
  5820  001A70  0E08               	movlw	high __npowers_
  5821  001A72  2012               	addwfc	?___wmul+1,w,c
  5822  001A74  6EF7               	movwf	tblptrh,c
  5823  001A76  0009               	tblrd		*+
  5824  001A78  CFF5 F03A          	movff	tablat,??_fround
  5825  001A7C  0009               	tblrd		*+
  5826  001A7E  CFF5 F03B          	movff	tablat,??_fround+1
  5827  001A82  0009               	tblrd		*+
  5828  001A84  CFF5 F03C          	movff	tablat,??_fround+2
  5829  001A88  C03C  F02B         	movff	??_fround+2,?___ftmul+5
  5830  001A8C  C03B  F02A         	movff	??_fround+1,?___ftmul+4
  5831  001A90  C03A  F029         	movff	??_fround,?___ftmul+3
  5832  001A94  C043  F026         	movff	_fround$1128,?___ftmul
  5833  001A98  C044  F027         	movff	_fround$1128+1,?___ftmul+1
  5834  001A9C  C045  F028         	movff	_fround$1128+2,?___ftmul+2
  5835  001AA0  EC70  F00F         	call	___ftmul	;wreg free
  5836  001AA4  C028  F042         	movff	?___ftmul+2,_fround$1129+2
  5837  001AA8  C027  F041         	movff	?___ftmul+1,_fround$1129+1
  5838  001AAC  C026  F040         	movff	?___ftmul,_fround$1129
  5839                           
  5840                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5841  001AB0  C040  F026         	movff	_fround$1129,?___ftmul
  5842  001AB4  C041  F027         	movff	_fround$1129+1,?___ftmul+1
  5843  001AB8  C042  F028         	movff	_fround$1129+2,?___ftmul+2
  5844  001ABC  0E00               	movlw	0
  5845  001ABE  6E29               	movwf	?___ftmul+3,c
  5846  001AC0  0E00               	movlw	0
  5847  001AC2  6E2A               	movwf	?___ftmul+4,c
  5848  001AC4  0E3F               	movlw	63
  5849  001AC6  6E2B               	movwf	?___ftmul+5,c
  5850  001AC8  EC70  F00F         	call	___ftmul	;wreg free
  5851  001ACC  D08B               	goto	L13
  5852  001ACE                     l4044:
  5853                           
  5854                           ;doprnt.c: 415: else if(prec > 10)
  5855  001ACE  0E0A               	movlw	10
  5856  001AD0  6437               	cpfsgt	fround@prec,c
  5857  001AD2  D069               	goto	l4052
  5858                           
  5859                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5860  001AD4  0E00               	movlw	0
  5861  001AD6  6E14               	movwf	?___wmul+3,c
  5862  001AD8  0E03               	movlw	3
  5863  001ADA  6E13               	movwf	?___wmul+2,c
  5864  001ADC  0E00               	movlw	0
  5865  001ADE  6E04               	movwf	?___awmod+3,c
  5866  001AE0  0E0A               	movlw	10
  5867  001AE2  6E03               	movwf	?___awmod+2,c
  5868  001AE4  C037  F001         	movff	fround@prec,?___awmod
  5869  001AE8  6A02               	clrf	?___awmod+1,c
  5870  001AEA  ECE5  F013         	call	___awmod	;wreg free
  5871  001AEE  C001  F011         	movff	?___awmod,?___wmul
  5872  001AF2  C002  F012         	movff	?___awmod+1,?___wmul+1
  5873  001AF6  EC7F  F015         	call	___wmul	;wreg free
  5874  001AFA  0E28               	movlw	low __npowers_
  5875  001AFC  2411               	addwf	?___wmul,w,c
  5876  001AFE  6EF6               	movwf	tblptrl,c
  5877  001B00  0E08               	movlw	high __npowers_
  5878  001B02  2012               	addwfc	?___wmul+1,w,c
  5879  001B04  6EF7               	movwf	tblptrh,c
  5880  001B06  0009               	tblrd		*+
  5881  001B08  CFF5 F03A          	movff	tablat,??_fround
  5882  001B0C  0009               	tblrd		*+
  5883  001B0E  CFF5 F03B          	movff	tablat,??_fround+1
  5884  001B12  0009               	tblrd		*+
  5885  001B14  CFF5 F03C          	movff	tablat,??_fround+2
  5886  001B18  C03C  F02B         	movff	??_fround+2,?___ftmul+5
  5887  001B1C  C03B  F02A         	movff	??_fround+1,?___ftmul+4
  5888  001B20  C03A  F029         	movff	??_fround,?___ftmul+3
  5889  001B24  0E00               	movlw	0
  5890  001B26  6E14               	movwf	?___wmul+3,c
  5891  001B28  0E03               	movlw	3
  5892  001B2A  6E13               	movwf	?___wmul+2,c
  5893  001B2C  0E00               	movlw	0
  5894  001B2E  6E0B               	movwf	?___awdiv+3,c
  5895  001B30  0E0A               	movlw	10
  5896  001B32  6E0A               	movwf	?___awdiv+2,c
  5897  001B34  C037  F008         	movff	fround@prec,?___awdiv
  5898  001B38  6A09               	clrf	?___awdiv+1,c
  5899  001B3A  EC1B  F013         	call	___awdiv	;wreg free
  5900  001B3E  0E09               	movlw	9
  5901  001B40  2408               	addwf	?___awdiv,w,c
  5902  001B42  6E11               	movwf	?___wmul,c
  5903  001B44  0E00               	movlw	0
  5904  001B46  2009               	addwfc	?___awdiv+1,w,c
  5905  001B48  6E12               	movwf	?___wmul+1,c
  5906  001B4A  EC7F  F015         	call	___wmul	;wreg free
  5907  001B4E  0E28               	movlw	low __npowers_
  5908  001B50  2411               	addwf	?___wmul,w,c
  5909  001B52  6EF6               	movwf	tblptrl,c
  5910  001B54  0E08               	movlw	high __npowers_
  5911  001B56  2012               	addwfc	?___wmul+1,w,c
  5912  001B58  6EF7               	movwf	tblptrh,c
  5913  001B5A  0009               	tblrd		*+
  5914  001B5C  CFF5 F03D          	movff	tablat,??_fround+3
  5915  001B60  0009               	tblrd		*+
  5916  001B62  CFF5 F03E          	movff	tablat,??_fround+4
  5917  001B66  0009               	tblrd		*+
  5918  001B68  CFF5 F03F          	movff	tablat,??_fround+5
  5919  001B6C  C03F  F028         	movff	??_fround+5,?___ftmul+2
  5920  001B70  C03E  F027         	movff	??_fround+4,?___ftmul+1
  5921  001B74  C03D  F026         	movff	??_fround+3,?___ftmul
  5922  001B78  EC70  F00F         	call	___ftmul	;wreg free
  5923  001B7C  C028  F045         	movff	?___ftmul+2,_fround$1128+2
  5924  001B80  C027  F044         	movff	?___ftmul+1,_fround$1128+1
  5925  001B84  C026  F043         	movff	?___ftmul,_fround$1128
  5926                           
  5927                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5928  001B88  C043  F026         	movff	_fround$1128,?___ftmul
  5929  001B8C  C044  F027         	movff	_fround$1128+1,?___ftmul+1
  5930  001B90  C045  F028         	movff	_fround$1128+2,?___ftmul+2
  5931  001B94  0E00               	movlw	0
  5932  001B96  6E29               	movwf	?___ftmul+3,c
  5933  001B98  0E00               	movlw	0
  5934  001B9A  6E2A               	movwf	?___ftmul+4,c
  5935  001B9C  0E3F               	movlw	63
  5936  001B9E  6E2B               	movwf	?___ftmul+5,c
  5937  001BA0  EC70  F00F         	call	___ftmul	;wreg free
  5938  001BA4  D01F               	goto	L13
  5939  001BA6                     l4052:
  5940                           
  5941                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  5942  001BA6  5037               	movf	fround@prec,w,c
  5943  001BA8  0D03               	mullw	3
  5944  001BAA  0E28               	movlw	low __npowers_
  5945  001BAC  24F3               	addwf	prodl,w,c
  5946  001BAE  6EF6               	movwf	tblptrl,c
  5947  001BB0  0E08               	movlw	high __npowers_
  5948  001BB2  20F4               	addwfc	prodh,w,c
  5949  001BB4  6EF7               	movwf	tblptrh,c
  5950  001BB6  0009               	tblrd		*+
  5951  001BB8  CFF5 F03A          	movff	tablat,??_fround
  5952  001BBC  0009               	tblrd		*+
  5953  001BBE  CFF5 F03B          	movff	tablat,??_fround+1
  5954  001BC2  0009               	tblrd		*+
  5955  001BC4  CFF5 F03C          	movff	tablat,??_fround+2
  5956  001BC8  C03C  F028         	movff	??_fround+2,?___ftmul+2
  5957  001BCC  C03B  F027         	movff	??_fround+1,?___ftmul+1
  5958  001BD0  C03A  F026         	movff	??_fround,?___ftmul
  5959  001BD4  0E00               	movlw	0
  5960  001BD6  6E29               	movwf	?___ftmul+3,c
  5961  001BD8  0E00               	movlw	0
  5962  001BDA  6E2A               	movwf	?___ftmul+4,c
  5963  001BDC  0E3F               	movlw	63
  5964  001BDE  6E2B               	movwf	?___ftmul+5,c
  5965  001BE0  EC70  F00F         	call	___ftmul	;wreg free
  5966  001BE4                     L13:
  5967  001BE4  C028  F039         	movff	?___ftmul+2,?_fround+2
  5968  001BE8  C027  F038         	movff	?___ftmul+1,?_fround+1
  5969  001BEC  C026  F037         	movff	?___ftmul,?_fround
  5970  001BF0  0012               	return	
  5971  001BF2                     __end_of_fround:
  5972                           	opt stack 0
  5973                           tblptru	equ	0xFF8
  5974                           tblptrh	equ	0xFF7
  5975                           tblptrl	equ	0xFF6
  5976                           tablat	equ	0xFF5
  5977                           prodh	equ	0xFF4
  5978                           prodl	equ	0xFF3
  5979                           postinc0	equ	0xFEE
  5980                           wreg	equ	0xFE8
  5981                           indf2	equ	0xFDF
  5982                           postinc2	equ	0xFDE
  5983                           postdec2	equ	0xFDD
  5984                           fsr2h	equ	0xFDA
  5985                           fsr2l	equ	0xFD9
  5986                           status	equ	0xFD8
  5987                           
  5988 ;; *************** function _Read_LDR *****************
  5989 ;; Defined at:
  5990 ;;		line 141 in file "main.c"
  5991 ;; Parameters:    Size  Location     Type
  5992 ;;		None
  5993 ;; Auto vars:     Size  Location     Type
  5994 ;;  analog_readi    3   78[COMRAM] float 
  5995 ;; Return value:  Size  Location     Type
  5996 ;;                  3   71[COMRAM] float 
  5997 ;; Registers used:
  5998 ;;		wreg, status,2, status,0, cstack
  5999 ;; Tracked objects:
  6000 ;;		On entry : 0/0
  6001 ;;		On exit  : 0/0
  6002 ;;		Unchanged: 0/0
  6003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6004 ;;      Params:         3       0       0       0       0       0       0       0       0
  6005 ;;      Locals:         3       0       0       0       0       0       0       0       0
  6006 ;;      Temps:          4       0       0       0       0       0       0       0       0
  6007 ;;      Totals:        10       0       0       0       0       0       0       0       0
  6008 ;;Total ram usage:       10 bytes
  6009 ;; Hardware stack levels used:    1
  6010 ;; Hardware stack levels required when called:    2
  6011 ;; This function calls:
  6012 ;;		___ftdiv
  6013 ;;		___ftmul
  6014 ;;		___awtoft
  6015 ;; This function is called by:
  6016 ;;		_main
  6017 ;; This function uses a non-reentrant model
  6018 ;;
  6019                           
  6020                           	psect	text22
  6021  00237C                     __ptext22:
  6022                           	opt stack 0
  6023  00237C                     _Read_LDR:
  6024                           	opt stack 28
  6025                           
  6026                           ;main.c: 142: float analog_reading = 0;
  6027                           
  6028                           ;incstack = 0
  6029                           ;incstack = 0
  6030  00237C  0E00               	movlw	0
  6031  00237E  6E4F               	movwf	Read_LDR@analog_reading,c
  6032  002380  0E00               	movlw	0
  6033  002382  6E50               	movwf	Read_LDR@analog_reading+1,c
  6034  002384  0E00               	movlw	0
  6035  002386  6E51               	movwf	Read_LDR@analog_reading+2,c
  6036                           
  6037                           ;main.c: 143: ADCON0 |= ((1 << ADON) | (1 << GO));
  6038  002388  0E00               	movlw	0
  6039  00238A  B2C2               	btfsc	4034,1,c	;volatile
  6040  00238C  0E01               	movlw	1
  6041  00238E  6E4B               	movwf	??_Read_LDR& (0+255),c
  6042  002390  0E01               	movlw	1
  6043  002392  6E4C               	movwf	(??_Read_LDR+1)& (0+255),c
  6044  002394  2A4B               	incf	??_Read_LDR,f,c
  6045  002396  D002               	goto	u2714
  6046  002398                     u2715:
  6047  002398  90D8               	bcf	status,0,c
  6048  00239A  364C               	rlcf	??_Read_LDR+1,f,c
  6049  00239C                     u2714:
  6050  00239C  2E4B               	decfsz	??_Read_LDR,f,c
  6051  00239E  D7FC               	goto	u2715
  6052  0023A0  0E00               	movlw	0
  6053  0023A2  B0C2               	btfsc	4034,0,c	;volatile
  6054  0023A4  0E01               	movlw	1
  6055  0023A6  6E4D               	movwf	(??_Read_LDR+2)& (0+255),c
  6056  0023A8  0E01               	movlw	1
  6057  0023AA  6E4E               	movwf	(??_Read_LDR+3)& (0+255),c
  6058  0023AC  2A4D               	incf	??_Read_LDR+2,f,c
  6059  0023AE  D002               	goto	u2724
  6060  0023B0                     u2725:
  6061  0023B0  90D8               	bcf	status,0,c
  6062  0023B2  364E               	rlcf	??_Read_LDR+3,f,c
  6063  0023B4                     u2724:
  6064  0023B4  2E4D               	decfsz	??_Read_LDR+2,f,c
  6065  0023B6  D7FC               	goto	u2725
  6066  0023B8  504E               	movf	??_Read_LDR+3,w,c
  6067  0023BA  104C               	iorwf	??_Read_LDR+1,w,c
  6068  0023BC  12C2               	iorwf	4034,f,c	;volatile
  6069  0023BE                     l136:
  6070  0023BE  B2C2               	btfsc	4034,1,c	;volatile
  6071  0023C0  D7FE               	goto	l136
  6072                           
  6073                           ;main.c: 145: analog_reading = (ADRESH * 256) + (ADRESL);
  6074  0023C2  50C4               	movf	4036,w,c	;volatile
  6075  0023C4  6E4C               	movwf	(??_Read_LDR+1)& (0+255),c
  6076  0023C6  6A4B               	clrf	??_Read_LDR& (0+255),c
  6077  0023C8  50C3               	movf	4035,w,c	;volatile
  6078  0023CA  244B               	addwf	??_Read_LDR,w,c
  6079  0023CC  6E09               	movwf	?___awtoft,c
  6080  0023CE  0E00               	movlw	0
  6081  0023D0  204C               	addwfc	??_Read_LDR+1,w,c
  6082  0023D2  6E0A               	movwf	?___awtoft+1,c
  6083  0023D4  EC03  F015         	call	___awtoft	;wreg free
  6084  0023D8  C00B  F051         	movff	?___awtoft+2,Read_LDR@analog_reading+2
  6085  0023DC  C00A  F050         	movff	?___awtoft+1,Read_LDR@analog_reading+1
  6086  0023E0  C009  F04F         	movff	?___awtoft,Read_LDR@analog_reading
  6087                           
  6088                           ;main.c: 146: analog_reading = analog_reading*5/1023;
  6089  0023E4  0E00               	movlw	0
  6090  0023E6  6E29               	movwf	?___ftmul+3,c
  6091  0023E8  0EA0               	movlw	160
  6092  0023EA  6E2A               	movwf	?___ftmul+4,c
  6093  0023EC  0E40               	movlw	64
  6094  0023EE  6E2B               	movwf	?___ftmul+5,c
  6095  0023F0  C04F  F026         	movff	Read_LDR@analog_reading,?___ftmul
  6096  0023F4  C050  F027         	movff	Read_LDR@analog_reading+1,?___ftmul+1
  6097  0023F8  C051  F028         	movff	Read_LDR@analog_reading+2,?___ftmul+2
  6098  0023FC  EC70  F00F         	call	___ftmul	;wreg free
  6099  002400  C028  F039         	movff	?___ftmul+2,?___ftdiv+2
  6100  002404  C027  F038         	movff	?___ftmul+1,?___ftdiv+1
  6101  002408  C026  F037         	movff	?___ftmul,?___ftdiv
  6102  00240C  0EC0               	movlw	192
  6103  00240E  6E3A               	movwf	?___ftdiv+3,c
  6104  002410  0E7F               	movlw	127
  6105  002412  6E3B               	movwf	?___ftdiv+4,c
  6106  002414  0E44               	movlw	68
  6107  002416  6E3C               	movwf	?___ftdiv+5,c
  6108  002418  ECF8  F00F         	call	___ftdiv	;wreg free
  6109  00241C  C039  F051         	movff	?___ftdiv+2,Read_LDR@analog_reading+2
  6110  002420  C038  F050         	movff	?___ftdiv+1,Read_LDR@analog_reading+1
  6111  002424  C037  F04F         	movff	?___ftdiv,Read_LDR@analog_reading
  6112                           
  6113                           ;main.c: 147: return analog_reading;
  6114  002428  C04F  F048         	movff	Read_LDR@analog_reading,?_Read_LDR
  6115  00242C  C050  F049         	movff	Read_LDR@analog_reading+1,?_Read_LDR+1
  6116  002430  C051  F04A         	movff	Read_LDR@analog_reading+2,?_Read_LDR+2
  6117  002434  0012               	return	
  6118  002436                     __end_of_Read_LDR:
  6119                           	opt stack 0
  6120                           tblptru	equ	0xFF8
  6121                           tblptrh	equ	0xFF7
  6122                           tblptrl	equ	0xFF6
  6123                           tablat	equ	0xFF5
  6124                           prodh	equ	0xFF4
  6125                           prodl	equ	0xFF3
  6126                           postinc0	equ	0xFEE
  6127                           wreg	equ	0xFE8
  6128                           indf2	equ	0xFDF
  6129                           postinc2	equ	0xFDE
  6130                           postdec2	equ	0xFDD
  6131                           fsr2h	equ	0xFDA
  6132                           fsr2l	equ	0xFD9
  6133                           status	equ	0xFD8
  6134                           
  6135 ;; *************** function ___awtoft *****************
  6136 ;; Defined at:
  6137 ;;		line 33 in file "E:\Program Files\Microchip\xc8\v1.20\sources\common\awtoft.c"
  6138 ;; Parameters:    Size  Location     Type
  6139 ;;  c               2    8[COMRAM] int 
  6140 ;; Auto vars:     Size  Location     Type
  6141 ;;  sign            1   12[COMRAM] unsigned char 
  6142 ;; Return value:  Size  Location     Type
  6143 ;;                  3    8[COMRAM] float 
  6144 ;; Registers used:
  6145 ;;		wreg, status,2, status,0, cstack
  6146 ;; Tracked objects:
  6147 ;;		On entry : 0/0
  6148 ;;		On exit  : 0/0
  6149 ;;		Unchanged: 0/0
  6150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6151 ;;      Params:         3       0       0       0       0       0       0       0       0
  6152 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6153 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6154 ;;      Totals:         5       0       0       0       0       0       0       0       0
  6155 ;;Total ram usage:        5 bytes
  6156 ;; Hardware stack levels used:    1
  6157 ;; Hardware stack levels required when called:    1
  6158 ;; This function calls:
  6159 ;;		___ftpack
  6160 ;; This function is called by:
  6161 ;;		_Read_LDR
  6162 ;; This function uses a non-reentrant model
  6163 ;;
  6164                           
  6165                           	psect	text23
  6166  002A06                     __ptext23:
  6167                           	opt stack 0
  6168  002A06                     ___awtoft:
  6169                           	opt stack 28
  6170                           
  6171                           ;incstack = 0
  6172                           ;incstack = 0
  6173  002A06  6E0C               	movwf	??___awtoft& (0+255),c
  6174  002A08  0E00               	movlw	0
  6175  002A0A  6E0D               	movwf	___awtoft@sign,c
  6176  002A0C  500C               	movf	??___awtoft& (0+255),w,c
  6177  002A0E  AE0A               	btfss	___awtoft@c+1,7,c
  6178  002A10  D008               	goto	l3940
  6179  002A12  6C09               	negf	___awtoft@c,c
  6180  002A14  1E0A               	comf	___awtoft@c+1,f,c
  6181  002A16  B0D8               	btfsc	status,0,c
  6182  002A18  2A0A               	incf	___awtoft@c+1,f,c
  6183  002A1A  6E0C               	movwf	??___awtoft& (0+255),c
  6184  002A1C  0E01               	movlw	1
  6185  002A1E  6E0D               	movwf	___awtoft@sign,c
  6186  002A20  500C               	movf	??___awtoft& (0+255),w,c
  6187  002A22                     l3940:
  6188  002A22  C009  F001         	movff	___awtoft@c,?___ftpack
  6189  002A26  C00A  F002         	movff	___awtoft@c+1,?___ftpack+1
  6190  002A2A  6A03               	clrf	?___ftpack+2,c
  6191  002A2C  6E0C               	movwf	??___awtoft& (0+255),c
  6192  002A2E  0E8E               	movlw	142
  6193  002A30  6E04               	movwf	?___ftpack+3,c
  6194  002A32  500C               	movf	??___awtoft& (0+255),w,c
  6195  002A34  C00D  F005         	movff	___awtoft@sign,?___ftpack+4
  6196  002A38  EC1B  F012         	call	___ftpack	;wreg free
  6197  002A3C  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  6198  002A40  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  6199  002A44  C001  F009         	movff	?___ftpack,?___awtoft
  6200  002A48  0012               	return	
  6201  002A4A                     __end_of___awtoft:
  6202                           	opt stack 0
  6203                           tblptru	equ	0xFF8
  6204                           tblptrh	equ	0xFF7
  6205                           tblptrl	equ	0xFF6
  6206                           tablat	equ	0xFF5
  6207                           prodh	equ	0xFF4
  6208                           prodl	equ	0xFF3
  6209                           postinc0	equ	0xFEE
  6210                           wreg	equ	0xFE8
  6211                           indf2	equ	0xFDF
  6212                           postinc2	equ	0xFDE
  6213                           postdec2	equ	0xFDD
  6214                           fsr2h	equ	0xFDA
  6215                           fsr2l	equ	0xFD9
  6216                           status	equ	0xFD8
  6217                           
  6218 ;; *************** function ___ftmul *****************
  6219 ;; Defined at:
  6220 ;;		line 52 in file "E:\Program Files\Microchip\xc8\v1.20\sources\common\ftmul.c"
  6221 ;; Parameters:    Size  Location     Type
  6222 ;;  f1              3   37[COMRAM] float 
  6223 ;;  f2              3   40[COMRAM] float 
  6224 ;; Auto vars:     Size  Location     Type
  6225 ;;  f3_as_produc    3   49[COMRAM] unsigned um
  6226 ;;  sign            1   53[COMRAM] unsigned char 
  6227 ;;  cntr            1   52[COMRAM] unsigned char 
  6228 ;;  exp             1   48[COMRAM] unsigned char 
  6229 ;; Return value:  Size  Location     Type
  6230 ;;                  3   37[COMRAM] float 
  6231 ;; Registers used:
  6232 ;;		wreg, status,2, status,0, cstack
  6233 ;; Tracked objects:
  6234 ;;		On entry : 0/0
  6235 ;;		On exit  : 0/0
  6236 ;;		Unchanged: 0/0
  6237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6238 ;;      Params:         6       0       0       0       0       0       0       0       0
  6239 ;;      Locals:         6       0       0       0       0       0       0       0       0
  6240 ;;      Temps:          5       0       0       0       0       0       0       0       0
  6241 ;;      Totals:        17       0       0       0       0       0       0       0       0
  6242 ;;Total ram usage:       17 bytes
  6243 ;; Hardware stack levels used:    1
  6244 ;; Hardware stack levels required when called:    1
  6245 ;; This function calls:
  6246 ;;		___ftpack
  6247 ;; This function is called by:
  6248 ;;		_Read_LDR
  6249 ;;		_fround
  6250 ;;		_scale
  6251 ;;		_sprintf
  6252 ;;		___asftmul
  6253 ;; This function uses a non-reentrant model
  6254 ;;
  6255                           
  6256                           	psect	text24
  6257  001EE0                     __ptext24:
  6258                           	opt stack 0
  6259  001EE0                     ___ftmul:
  6260                           	opt stack 28
  6261                           
  6262                           ;incstack = 0
  6263                           ;incstack = 0
  6264  001EE0  0E0F               	movlw	15
  6265  001EE2  6E2C               	movwf	??___ftmul& (0+255),c
  6266  001EE4  C026  F02D         	movff	___ftmul@f1,??___ftmul+1
  6267  001EE8  C027  F02E         	movff	___ftmul@f1+1,??___ftmul+2
  6268  001EEC  C028  F02F         	movff	___ftmul@f1+2,??___ftmul+3
  6269  001EF0  282C               	incf	??___ftmul,w,c
  6270  001EF2  6E30               	movwf	(??___ftmul+4)& (0+255),c
  6271  001EF4  D004               	goto	u2510
  6272  001EF6                     u2515:
  6273  001EF6  90D8               	bcf	status,0,c
  6274  001EF8  322F               	rrcf	??___ftmul+3,f,c
  6275  001EFA  322E               	rrcf	??___ftmul+2,f,c
  6276  001EFC  322D               	rrcf	??___ftmul+1,f,c
  6277  001EFE                     u2510:
  6278  001EFE  2E30               	decfsz	(??___ftmul+4)& (0+255),f,c
  6279  001F00  D7FA               	goto	u2515
  6280  001F02  502D               	movf	??___ftmul+1,w,c
  6281  001F04  6E31               	movwf	___ftmul@exp,c
  6282  001F06  6631               	tstfsz	___ftmul@exp& (0+255),c
  6283  001F08  D001               	goto	l3846
  6284  001F0A  D015               	goto	u2540
  6285  001F0C                     l3846:
  6286  001F0C  0E0F               	movlw	15
  6287  001F0E  6E2C               	movwf	??___ftmul& (0+255),c
  6288  001F10  C029  F02D         	movff	___ftmul@f2,??___ftmul+1
  6289  001F14  C02A  F02E         	movff	___ftmul@f2+1,??___ftmul+2
  6290  001F18  C02B  F02F         	movff	___ftmul@f2+2,??___ftmul+3
  6291  001F1C  282C               	incf	??___ftmul,w,c
  6292  001F1E  6E30               	movwf	(??___ftmul+4)& (0+255),c
  6293  001F20  D004               	goto	u2530
  6294  001F22                     u2535:
  6295  001F22  90D8               	bcf	status,0,c
  6296  001F24  322F               	rrcf	??___ftmul+3,f,c
  6297  001F26  322E               	rrcf	??___ftmul+2,f,c
  6298  001F28  322D               	rrcf	??___ftmul+1,f,c
  6299  001F2A                     u2530:
  6300  001F2A  2E30               	decfsz	(??___ftmul+4)& (0+255),f,c
  6301  001F2C  D7FA               	goto	u2535
  6302  001F2E  502D               	movf	??___ftmul+1,w,c
  6303  001F30  6E36               	movwf	___ftmul@sign,c
  6304  001F32  6636               	tstfsz	___ftmul@sign& (0+255),c
  6305  001F34  D007               	goto	l3852
  6306  001F36                     u2540:
  6307  001F36  0E00               	movlw	0
  6308  001F38  6E26               	movwf	?___ftmul,c
  6309  001F3A  0E00               	movlw	0
  6310  001F3C  6E27               	movwf	?___ftmul+1,c
  6311  001F3E  0E00               	movlw	0
  6312  001F40  6E28               	movwf	?___ftmul+2,c
  6313  001F42  D055               	goto	l687
  6314  001F44                     l3852:
  6315  001F44  5036               	movf	___ftmul@sign,w,c
  6316  001F46  0F7B               	addlw	123
  6317  001F48  2631               	addwf	___ftmul@exp,f,c
  6318  001F4A  C028  F036         	movff	___ftmul@f1+2,___ftmul@sign
  6319  001F4E  502B               	movf	(___ftmul@f2+2)& (0+255),w,c
  6320  001F50  1A36               	xorwf	___ftmul@sign,f,c
  6321  001F52  0E80               	movlw	128
  6322  001F54  1636               	andwf	___ftmul@sign,f,c
  6323  001F56  8E27               	bsf	___ftmul@f1+1,7,c
  6324  001F58  8E2A               	bsf	___ftmul@f2+1,7,c
  6325  001F5A  0EFF               	movlw	255
  6326  001F5C  1629               	andwf	___ftmul@f2,f,c
  6327  001F5E  0EFF               	movlw	255
  6328  001F60  162A               	andwf	___ftmul@f2+1,f,c
  6329  001F62  0E00               	movlw	0
  6330  001F64  162B               	andwf	___ftmul@f2+2,f,c
  6331  001F66  0E00               	movlw	0
  6332  001F68  6E32               	movwf	___ftmul@f3_as_product,c
  6333  001F6A  0E00               	movlw	0
  6334  001F6C  6E33               	movwf	___ftmul@f3_as_product+1,c
  6335  001F6E  0E00               	movlw	0
  6336  001F70  6E34               	movwf	___ftmul@f3_as_product+2,c
  6337  001F72  6E2C               	movwf	??___ftmul& (0+255),c
  6338  001F74  0E07               	movlw	7
  6339  001F76  6E35               	movwf	___ftmul@cntr,c
  6340  001F78  502C               	movf	??___ftmul& (0+255),w,c
  6341  001F7A                     l3866:
  6342  001F7A  A026               	btfss	___ftmul@f1,0,c
  6343  001F7C  D006               	goto	l3870
  6344  001F7E  5029               	movf	___ftmul@f2,w,c
  6345  001F80  2632               	addwf	___ftmul@f3_as_product,f,c
  6346  001F82  502A               	movf	___ftmul@f2+1,w,c
  6347  001F84  2233               	addwfc	___ftmul@f3_as_product+1,f,c
  6348  001F86  502B               	movf	___ftmul@f2+2,w,c
  6349  001F88  2234               	addwfc	___ftmul@f3_as_product+2,f,c
  6350  001F8A                     l3870:
  6351  001F8A  90D8               	bcf	status,0,c
  6352  001F8C  3228               	rrcf	___ftmul@f1+2,f,c
  6353  001F8E  3227               	rrcf	___ftmul@f1+1,f,c
  6354  001F90  3226               	rrcf	___ftmul@f1,f,c
  6355  001F92  90D8               	bcf	status,0,c
  6356  001F94  3629               	rlcf	___ftmul@f2,f,c
  6357  001F96  362A               	rlcf	___ftmul@f2+1,f,c
  6358  001F98  362B               	rlcf	___ftmul@f2+2,f,c
  6359  001F9A  2E35               	decfsz	___ftmul@cntr,f,c
  6360  001F9C  D7EE               	goto	l3866
  6361  001F9E  6E2C               	movwf	??___ftmul& (0+255),c
  6362  001FA0  0E09               	movlw	9
  6363  001FA2  6E35               	movwf	___ftmul@cntr,c
  6364  001FA4  502C               	movf	??___ftmul& (0+255),w,c
  6365  001FA6                     l3876:
  6366  001FA6  A026               	btfss	___ftmul@f1,0,c
  6367  001FA8  D006               	goto	l3880
  6368  001FAA  5029               	movf	___ftmul@f2,w,c
  6369  001FAC  2632               	addwf	___ftmul@f3_as_product,f,c
  6370  001FAE  502A               	movf	___ftmul@f2+1,w,c
  6371  001FB0  2233               	addwfc	___ftmul@f3_as_product+1,f,c
  6372  001FB2  502B               	movf	___ftmul@f2+2,w,c
  6373  001FB4  2234               	addwfc	___ftmul@f3_as_product+2,f,c
  6374  001FB6                     l3880:
  6375  001FB6  90D8               	bcf	status,0,c
  6376  001FB8  3228               	rrcf	___ftmul@f1+2,f,c
  6377  001FBA  3227               	rrcf	___ftmul@f1+1,f,c
  6378  001FBC  3226               	rrcf	___ftmul@f1,f,c
  6379  001FBE  90D8               	bcf	status,0,c
  6380  001FC0  3234               	rrcf	___ftmul@f3_as_product+2,f,c
  6381  001FC2  3233               	rrcf	___ftmul@f3_as_product+1,f,c
  6382  001FC4  3232               	rrcf	___ftmul@f3_as_product,f,c
  6383  001FC6  2E35               	decfsz	___ftmul@cntr,f,c
  6384  001FC8  D7EE               	goto	l3876
  6385  001FCA  C032  F001         	movff	___ftmul@f3_as_product,?___ftpack
  6386  001FCE  C033  F002         	movff	___ftmul@f3_as_product+1,?___ftpack+1
  6387  001FD2  C034  F003         	movff	___ftmul@f3_as_product+2,?___ftpack+2
  6388  001FD6  C031  F004         	movff	___ftmul@exp,?___ftpack+3
  6389  001FDA  C036  F005         	movff	___ftmul@sign,?___ftpack+4
  6390  001FDE  EC1B  F012         	call	___ftpack	;wreg free
  6391  001FE2  C003  F028         	movff	?___ftpack+2,?___ftmul+2
  6392  001FE6  C002  F027         	movff	?___ftpack+1,?___ftmul+1
  6393  001FEA  C001  F026         	movff	?___ftpack,?___ftmul
  6394  001FEE                     l687:
  6395  001FEE  0012               	return	
  6396  001FF0                     __end_of___ftmul:
  6397                           	opt stack 0
  6398                           tblptru	equ	0xFF8
  6399                           tblptrh	equ	0xFF7
  6400                           tblptrl	equ	0xFF6
  6401                           tablat	equ	0xFF5
  6402                           prodh	equ	0xFF4
  6403                           prodl	equ	0xFF3
  6404                           postinc0	equ	0xFEE
  6405                           wreg	equ	0xFE8
  6406                           indf2	equ	0xFDF
  6407                           postinc2	equ	0xFDE
  6408                           postdec2	equ	0xFDD
  6409                           fsr2h	equ	0xFDA
  6410                           fsr2l	equ	0xFD9
  6411                           status	equ	0xFD8
  6412                           
  6413 ;; *************** function ___ftpack *****************
  6414 ;; Defined at:
  6415 ;;		line 63 in file "E:\Program Files\Microchip\xc8\v1.20\sources\common\float.c"
  6416 ;; Parameters:    Size  Location     Type
  6417 ;;  arg             3    0[COMRAM] unsigned um
  6418 ;;  exp             1    3[COMRAM] unsigned char 
  6419 ;;  sign            1    4[COMRAM] unsigned char 
  6420 ;; Auto vars:     Size  Location     Type
  6421 ;;		None
  6422 ;; Return value:  Size  Location     Type
  6423 ;;                  3    0[COMRAM] float 
  6424 ;; Registers used:
  6425 ;;		wreg, status,2, status,0
  6426 ;; Tracked objects:
  6427 ;;		On entry : 0/0
  6428 ;;		On exit  : 0/0
  6429 ;;		Unchanged: 0/0
  6430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6431 ;;      Params:         5       0       0       0       0       0       0       0       0
  6432 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6433 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6434 ;;      Totals:         8       0       0       0       0       0       0       0       0
  6435 ;;Total ram usage:        8 bytes
  6436 ;; Hardware stack levels used:    1
  6437 ;; This function calls:
  6438 ;;		Nothing
  6439 ;; This function is called by:
  6440 ;;		___awtoft
  6441 ;;		___ftadd
  6442 ;;		___ftdiv
  6443 ;;		___ftmul
  6444 ;;		___lltoft
  6445 ;; This function uses a non-reentrant model
  6446 ;;
  6447                           
  6448                           	psect	text25
  6449  002436                     __ptext25:
  6450                           	opt stack 0
  6451  002436                     ___ftpack:
  6452                           	opt stack 28
  6453                           
  6454                           ;incstack = 0
  6455                           ;incstack = 0
  6456  002436  5004               	movf	___ftpack@exp,w,c
  6457  002438  B4D8               	btfsc	status,2,c
  6458  00243A  D005               	goto	l3530
  6459  00243C  5001               	movf	___ftpack@arg,w,c
  6460  00243E  1002               	iorwf	___ftpack@arg+1,w,c
  6461  002440  1003               	iorwf	___ftpack@arg+2,w,c
  6462  002442  A4D8               	btfss	status,2,c
  6463  002444  D00C               	goto	l3536
  6464  002446                     l3530:
  6465  002446  0E00               	movlw	0
  6466  002448  6E01               	movwf	?___ftpack,c
  6467  00244A  0E00               	movlw	0
  6468  00244C  6E02               	movwf	?___ftpack+1,c
  6469  00244E  0E00               	movlw	0
  6470  002450  6E03               	movwf	?___ftpack+2,c
  6471  002452  D04C               	goto	l586
  6472  002454                     l3534:
  6473  002454  2A04               	incf	___ftpack@exp,f,c
  6474  002456  90D8               	bcf	status,0,c
  6475  002458  3203               	rrcf	___ftpack@arg+2,f,c
  6476  00245A  3202               	rrcf	___ftpack@arg+1,f,c
  6477  00245C  3201               	rrcf	___ftpack@arg,f,c
  6478  00245E                     l3536:
  6479  00245E  0E00               	movlw	0
  6480  002460  1401               	andwf	___ftpack@arg,w,c
  6481  002462  6E06               	movwf	??___ftpack& (0+255),c
  6482  002464  0E00               	movlw	0
  6483  002466  1402               	andwf	___ftpack@arg+1,w,c
  6484  002468  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6485  00246A  0EFE               	movlw	254
  6486  00246C  1403               	andwf	___ftpack@arg+2,w,c
  6487  00246E  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6488  002470  5006               	movf	??___ftpack,w,c
  6489  002472  1007               	iorwf	??___ftpack+1,w,c
  6490  002474  1008               	iorwf	??___ftpack+2,w,c
  6491  002476  B4D8               	btfsc	status,2,c
  6492  002478  D00C               	goto	l3542
  6493  00247A  D7EC               	goto	l3534
  6494  00247C                     l3538:
  6495  00247C  2A04               	incf	___ftpack@exp,f,c
  6496  00247E  0E01               	movlw	1
  6497  002480  2601               	addwf	___ftpack@arg,f,c
  6498  002482  0E00               	movlw	0
  6499  002484  2202               	addwfc	___ftpack@arg+1,f,c
  6500  002486  0E00               	movlw	0
  6501  002488  2203               	addwfc	___ftpack@arg+2,f,c
  6502  00248A  90D8               	bcf	status,0,c
  6503  00248C  3203               	rrcf	___ftpack@arg+2,f,c
  6504  00248E  3202               	rrcf	___ftpack@arg+1,f,c
  6505  002490  3201               	rrcf	___ftpack@arg,f,c
  6506  002492                     l3542:
  6507  002492  0E00               	movlw	0
  6508  002494  1401               	andwf	___ftpack@arg,w,c
  6509  002496  6E06               	movwf	??___ftpack& (0+255),c
  6510  002498  0E00               	movlw	0
  6511  00249A  1402               	andwf	___ftpack@arg+1,w,c
  6512  00249C  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6513  00249E  0EFF               	movlw	255
  6514  0024A0  1403               	andwf	___ftpack@arg+2,w,c
  6515  0024A2  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6516  0024A4  5006               	movf	??___ftpack,w,c
  6517  0024A6  1007               	iorwf	??___ftpack+1,w,c
  6518  0024A8  1008               	iorwf	??___ftpack+2,w,c
  6519  0024AA  B4D8               	btfsc	status,2,c
  6520  0024AC  D006               	goto	l3546
  6521  0024AE  D7E6               	goto	l3538
  6522  0024B0                     l3544:
  6523  0024B0  0604               	decf	___ftpack@exp,f,c
  6524  0024B2  90D8               	bcf	status,0,c
  6525  0024B4  3601               	rlcf	___ftpack@arg,f,c
  6526  0024B6  3602               	rlcf	___ftpack@arg+1,f,c
  6527  0024B8  3603               	rlcf	___ftpack@arg+2,f,c
  6528  0024BA                     l3546:
  6529  0024BA  AE02               	btfss	___ftpack@arg+1,7,c
  6530  0024BC  D7F9               	goto	l3544
  6531  0024BE  A004               	btfss	___ftpack@exp,0,c
  6532  0024C0  9E02               	bcf	___ftpack@arg+1,7,c
  6533  0024C2  90D8               	bcf	status,0,c
  6534  0024C4  3204               	rrcf	___ftpack@exp,f,c
  6535  0024C6  5004               	movf	___ftpack@exp,w,c
  6536  0024C8  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6537  0024CA  6A07               	clrf	(??___ftpack+1)& (0+255),c
  6538  0024CC  6A06               	clrf	??___ftpack& (0+255),c
  6539  0024CE  5006               	movf	??___ftpack,w,c
  6540  0024D0  1201               	iorwf	___ftpack@arg,f,c
  6541  0024D2  5007               	movf	??___ftpack+1,w,c
  6542  0024D4  1202               	iorwf	___ftpack@arg+1,f,c
  6543  0024D6  5008               	movf	??___ftpack+2,w,c
  6544  0024D8  1203               	iorwf	___ftpack@arg+2,f,c
  6545  0024DA  5005               	movf	___ftpack@sign,w,c
  6546  0024DC  A4D8               	btfss	status,2,c
  6547  0024DE  8E03               	bsf	___ftpack@arg+2,7,c
  6548  0024E0  C001  F001         	movff	___ftpack@arg,?___ftpack
  6549  0024E4  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  6550  0024E8  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  6551  0024EC                     l586:
  6552  0024EC  0012               	return	
  6553  0024EE                     __end_of___ftpack:
  6554                           	opt stack 0
  6555                           tblptru	equ	0xFF8
  6556                           tblptrh	equ	0xFF7
  6557                           tblptrl	equ	0xFF6
  6558                           tablat	equ	0xFF5
  6559                           prodh	equ	0xFF4
  6560                           prodl	equ	0xFF3
  6561                           postinc0	equ	0xFEE
  6562                           wreg	equ	0xFE8
  6563                           indf2	equ	0xFDF
  6564                           postinc2	equ	0xFDE
  6565                           postdec2	equ	0xFDD
  6566                           fsr2h	equ	0xFDA
  6567                           fsr2l	equ	0xFD9
  6568                           status	equ	0xFD8
  6569                           
  6570 ;; *************** function ___ftdiv *****************
  6571 ;; Defined at:
  6572 ;;		line 50 in file "E:\Program Files\Microchip\xc8\v1.20\sources\common\ftdiv.c"
  6573 ;; Parameters:    Size  Location     Type
  6574 ;;  f1              3   54[COMRAM] float 
  6575 ;;  f2              3   57[COMRAM] float 
  6576 ;; Auto vars:     Size  Location     Type
  6577 ;;  f3              3   66[COMRAM] float 
  6578 ;;  sign            1   70[COMRAM] unsigned char 
  6579 ;;  exp             1   69[COMRAM] unsigned char 
  6580 ;;  cntr            1   65[COMRAM] unsigned char 
  6581 ;; Return value:  Size  Location     Type
  6582 ;;                  3   54[COMRAM] float 
  6583 ;; Registers used:
  6584 ;;		wreg, status,2, status,0, cstack
  6585 ;; Tracked objects:
  6586 ;;		On entry : 0/0
  6587 ;;		On exit  : 0/0
  6588 ;;		Unchanged: 0/0
  6589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6590 ;;      Params:         6       0       0       0       0       0       0       0       0
  6591 ;;      Locals:         6       0       0       0       0       0       0       0       0
  6592 ;;      Temps:          5       0       0       0       0       0       0       0       0
  6593 ;;      Totals:        17       0       0       0       0       0       0       0       0
  6594 ;;Total ram usage:       17 bytes
  6595 ;; Hardware stack levels used:    1
  6596 ;; Hardware stack levels required when called:    1
  6597 ;; This function calls:
  6598 ;;		___ftpack
  6599 ;; This function is called by:
  6600 ;;		_Read_LDR
  6601 ;; This function uses a non-reentrant model
  6602 ;;
  6603                           
  6604                           	psect	text26
  6605  001FF0                     __ptext26:
  6606                           	opt stack 0
  6607  001FF0                     ___ftdiv:
  6608                           	opt stack 28
  6609                           
  6610                           ;incstack = 0
  6611                           ;incstack = 0
  6612  001FF0  0E0F               	movlw	15
  6613  001FF2  6E3D               	movwf	??___ftdiv& (0+255),c
  6614  001FF4  C037  F03E         	movff	___ftdiv@f1,??___ftdiv+1
  6615  001FF8  C038  F03F         	movff	___ftdiv@f1+1,??___ftdiv+2
  6616  001FFC  C039  F040         	movff	___ftdiv@f1+2,??___ftdiv+3
  6617  002000  283D               	incf	??___ftdiv,w,c
  6618  002002  6E41               	movwf	(??___ftdiv+4)& (0+255),c
  6619  002004  D004               	goto	u2460
  6620  002006                     u2465:
  6621  002006  90D8               	bcf	status,0,c
  6622  002008  3240               	rrcf	??___ftdiv+3,f,c
  6623  00200A  323F               	rrcf	??___ftdiv+2,f,c
  6624  00200C  323E               	rrcf	??___ftdiv+1,f,c
  6625  00200E                     u2460:
  6626  00200E  2E41               	decfsz	(??___ftdiv+4)& (0+255),f,c
  6627  002010  D7FA               	goto	u2465
  6628  002012  503E               	movf	??___ftdiv+1,w,c
  6629  002014  6E46               	movwf	___ftdiv@exp,c
  6630  002016  6646               	tstfsz	___ftdiv@exp& (0+255),c
  6631  002018  D001               	goto	l3802
  6632  00201A  D015               	goto	u2490
  6633  00201C                     l3802:
  6634  00201C  0E0F               	movlw	15
  6635  00201E  6E3D               	movwf	??___ftdiv& (0+255),c
  6636  002020  C03A  F03E         	movff	___ftdiv@f2,??___ftdiv+1
  6637  002024  C03B  F03F         	movff	___ftdiv@f2+1,??___ftdiv+2
  6638  002028  C03C  F040         	movff	___ftdiv@f2+2,??___ftdiv+3
  6639  00202C  283D               	incf	??___ftdiv,w,c
  6640  00202E  6E41               	movwf	(??___ftdiv+4)& (0+255),c
  6641  002030  D004               	goto	u2480
  6642  002032                     u2485:
  6643  002032  90D8               	bcf	status,0,c
  6644  002034  3240               	rrcf	??___ftdiv+3,f,c
  6645  002036  323F               	rrcf	??___ftdiv+2,f,c
  6646  002038  323E               	rrcf	??___ftdiv+1,f,c
  6647  00203A                     u2480:
  6648  00203A  2E41               	decfsz	(??___ftdiv+4)& (0+255),f,c
  6649  00203C  D7FA               	goto	u2485
  6650  00203E  503E               	movf	??___ftdiv+1,w,c
  6651  002040  6E47               	movwf	___ftdiv@sign,c
  6652  002042  6647               	tstfsz	___ftdiv@sign& (0+255),c
  6653  002044  D007               	goto	l3808
  6654  002046                     u2490:
  6655  002046  0E00               	movlw	0
  6656  002048  6E37               	movwf	?___ftdiv,c
  6657  00204A  0E00               	movlw	0
  6658  00204C  6E38               	movwf	?___ftdiv+1,c
  6659  00204E  0E00               	movlw	0
  6660  002050  6E39               	movwf	?___ftdiv+2,c
  6661  002052  D04C               	goto	l655
  6662  002054                     l3808:
  6663  002054  0E00               	movlw	0
  6664  002056  6E43               	movwf	___ftdiv@f3,c
  6665  002058  0E00               	movlw	0
  6666  00205A  6E44               	movwf	___ftdiv@f3+1,c
  6667  00205C  0E00               	movlw	0
  6668  00205E  6E45               	movwf	___ftdiv@f3+2,c
  6669  002060  5047               	movf	___ftdiv@sign,w,c
  6670  002062  0F89               	addlw	137
  6671  002064  5E46               	subwf	___ftdiv@exp,f,c
  6672  002066  C039  F047         	movff	___ftdiv@f1+2,___ftdiv@sign
  6673  00206A  503C               	movf	(___ftdiv@f2+2)& (0+255),w,c
  6674  00206C  1A47               	xorwf	___ftdiv@sign,f,c
  6675  00206E  0E80               	movlw	128
  6676  002070  1647               	andwf	___ftdiv@sign,f,c
  6677  002072  8E38               	bsf	___ftdiv@f1+1,7,c
  6678  002074  0EFF               	movlw	255
  6679  002076  1637               	andwf	___ftdiv@f1,f,c
  6680  002078  0EFF               	movlw	255
  6681  00207A  1638               	andwf	___ftdiv@f1+1,f,c
  6682  00207C  0E00               	movlw	0
  6683  00207E  1639               	andwf	___ftdiv@f1+2,f,c
  6684  002080  8E3B               	bsf	___ftdiv@f2+1,7,c
  6685  002082  0EFF               	movlw	255
  6686  002084  163A               	andwf	___ftdiv@f2,f,c
  6687  002086  0EFF               	movlw	255
  6688  002088  163B               	andwf	___ftdiv@f2+1,f,c
  6689  00208A  0E00               	movlw	0
  6690  00208C  163C               	andwf	___ftdiv@f2+2,f,c
  6691  00208E  6E3D               	movwf	??___ftdiv& (0+255),c
  6692  002090  0E18               	movlw	24
  6693  002092  6E42               	movwf	___ftdiv@cntr,c
  6694  002094  503D               	movf	??___ftdiv& (0+255),w,c
  6695  002096                     l657:
  6696  002096  90D8               	bcf	status,0,c
  6697  002098  3643               	rlcf	___ftdiv@f3,f,c
  6698  00209A  3644               	rlcf	___ftdiv@f3+1,f,c
  6699  00209C  3645               	rlcf	___ftdiv@f3+2,f,c
  6700  00209E  503A               	movf	___ftdiv@f2,w,c
  6701  0020A0  5C37               	subwf	___ftdiv@f1,w,c
  6702  0020A2  503B               	movf	___ftdiv@f2+1,w,c
  6703  0020A4  5838               	subwfb	___ftdiv@f1+1,w,c
  6704  0020A6  503C               	movf	___ftdiv@f2+2,w,c
  6705  0020A8  5839               	subwfb	___ftdiv@f1+2,w,c
  6706  0020AA  A0D8               	btfss	status,0,c
  6707  0020AC  D007               	goto	l658
  6708  0020AE  503A               	movf	___ftdiv@f2,w,c
  6709  0020B0  5E37               	subwf	___ftdiv@f1,f,c
  6710  0020B2  503B               	movf	___ftdiv@f2+1,w,c
  6711  0020B4  5A38               	subwfb	___ftdiv@f1+1,f,c
  6712  0020B6  503C               	movf	___ftdiv@f2+2,w,c
  6713  0020B8  5A39               	subwfb	___ftdiv@f1+2,f,c
  6714  0020BA  8043               	bsf	___ftdiv@f3,0,c
  6715  0020BC                     l658:
  6716  0020BC  90D8               	bcf	status,0,c
  6717  0020BE  3637               	rlcf	___ftdiv@f1,f,c
  6718  0020C0  3638               	rlcf	___ftdiv@f1+1,f,c
  6719  0020C2  3639               	rlcf	___ftdiv@f1+2,f,c
  6720  0020C4  2E42               	decfsz	___ftdiv@cntr,f,c
  6721  0020C6  D7E7               	goto	l657
  6722  0020C8  C043  F001         	movff	___ftdiv@f3,?___ftpack
  6723  0020CC  C044  F002         	movff	___ftdiv@f3+1,?___ftpack+1
  6724  0020D0  C045  F003         	movff	___ftdiv@f3+2,?___ftpack+2
  6725  0020D4  C046  F004         	movff	___ftdiv@exp,?___ftpack+3
  6726  0020D8  C047  F005         	movff	___ftdiv@sign,?___ftpack+4
  6727  0020DC  EC1B  F012         	call	___ftpack	;wreg free
  6728  0020E0  C003  F039         	movff	?___ftpack+2,?___ftdiv+2
  6729  0020E4  C002  F038         	movff	?___ftpack+1,?___ftdiv+1
  6730  0020E8  C001  F037         	movff	?___ftpack,?___ftdiv
  6731  0020EC                     l655:
  6732  0020EC  0012               	return	
  6733  0020EE                     __end_of___ftdiv:
  6734                           	opt stack 0
  6735                           tblptru	equ	0xFF8
  6736                           tblptrh	equ	0xFF7
  6737                           tblptrl	equ	0xFF6
  6738                           tablat	equ	0xFF5
  6739                           prodh	equ	0xFF4
  6740                           prodl	equ	0xFF3
  6741                           postinc0	equ	0xFEE
  6742                           wreg	equ	0xFE8
  6743                           indf2	equ	0xFDF
  6744                           postinc2	equ	0xFDE
  6745                           postdec2	equ	0xFDD
  6746                           fsr2h	equ	0xFDA
  6747                           fsr2l	equ	0xFD9
  6748                           status	equ	0xFD8
  6749                           
  6750 ;; *************** function _Obtener_Distancia *****************
  6751 ;; Defined at:
  6752 ;;		line 101 in file "main.c"
  6753 ;; Parameters:    Size  Location     Type
  6754 ;;		None
  6755 ;; Auto vars:     Size  Location     Type
  6756 ;;  Duracion        2   14[COMRAM] unsigned int 
  6757 ;;  Distancia       2   12[COMRAM] unsigned int 
  6758 ;;  Timer_1         2   10[COMRAM] unsigned int 
  6759 ;; Return value:  Size  Location     Type
  6760 ;;                  2    8[COMRAM] unsigned int 
  6761 ;; Registers used:
  6762 ;;		wreg, status,2, status,0, cstack
  6763 ;; Tracked objects:
  6764 ;;		On entry : 0/0
  6765 ;;		On exit  : 0/0
  6766 ;;		Unchanged: 0/0
  6767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6768 ;;      Params:         2       0       0       0       0       0       0       0       0
  6769 ;;      Locals:         6       0       0       0       0       0       0       0       0
  6770 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6771 ;;      Totals:         8       0       0       0       0       0       0       0       0
  6772 ;;Total ram usage:        8 bytes
  6773 ;; Hardware stack levels used:    1
  6774 ;; Hardware stack levels required when called:    1
  6775 ;; This function calls:
  6776 ;;		___lwdiv
  6777 ;; This function is called by:
  6778 ;;		_main
  6779 ;; This function uses a non-reentrant model
  6780 ;;
  6781                           
  6782                           	psect	text27
  6783  00274C                     __ptext27:
  6784                           	opt stack 0
  6785  00274C                     _Obtener_Distancia:
  6786                           	opt stack 29
  6787                           
  6788                           ;main.c: 102: uint16_t Duracion;
  6789                           ;main.c: 103: uint16_t Distancia;
  6790                           ;main.c: 104: uint16_t Timer_1;
  6791                           ;main.c: 106: LATAbits.LATA1=1;
  6792                           
  6793                           ;incstack = 0
  6794                           ;incstack = 0
  6795  00274C  8289               	bsf	3977,1,c	;volatile
  6796                           
  6797                           ;main.c: 107: _delay((unsigned long)((10)*(8000000/4000000.0)));
  6798  00274E  0E06               	movlw	6
  6799  002750                     u3457:
  6800  002750  2EE8               	decfsz	wreg,f,c
  6801  002752  D7FE               	goto	u3457
  6802  002754  D000               	nop2		;nop
  6803                           
  6804                           ;main.c: 108: LATAbits.LATA1=0;
  6805  002756  9289               	bcf	3977,1,c	;volatile
  6806  002758                     l120:
  6807  002758  A480               	btfss	3968,2,c	;volatile
  6808  00275A  D7FE               	goto	l120
  6809                           
  6810                           ;main.c: 110: T1CONbits.TMR1ON=1;
  6811  00275C  80CD               	bsf	4045,0,c	;volatile
  6812  00275E                     l123:
  6813  00275E  B480               	btfsc	3968,2,c	;volatile
  6814  002760  D7FE               	goto	l123
  6815                           
  6816                           ;main.c: 112: T1CONbits.TMR1ON=0;
  6817  002762  90CD               	bcf	4045,0,c	;volatile
  6818                           
  6819                           ;main.c: 113: Timer_1=TMR1;
  6820  002764  CFCE F00B          	movff	4046,Obtener_Distancia@Timer_1	;volatile
  6821  002768  CFCF F00C          	movff	4047,Obtener_Distancia@Timer_1+1	;volatile
  6822                           
  6823                           ;main.c: 114: Duracion=Timer_1/2;
  6824  00276C  90D8               	bcf	status,0,c
  6825  00276E  300C               	rrcf	Obtener_Distancia@Timer_1+1,w,c
  6826  002770  6E10               	movwf	Obtener_Distancia@Duracion+1,c
  6827  002772  300B               	rrcf	Obtener_Distancia@Timer_1,w,c
  6828  002774  6E0F               	movwf	Obtener_Distancia@Duracion,c
  6829                           
  6830                           ;main.c: 115: if(Duracion<=23200)
  6831  002776  0EA1               	movlw	161
  6832  002778  5C0F               	subwf	Obtener_Distancia@Duracion,w,c
  6833  00277A  0E5A               	movlw	90
  6834  00277C  5810               	subwfb	Obtener_Distancia@Duracion+1,w,c
  6835  00277E  B0D8               	btfsc	status,0,c
  6836  002780  D00F               	goto	l3716
  6837                           
  6838                           ;main.c: 116: {
  6839                           ;main.c: 117: Distancia=Duracion/58;
  6840  002782  C00F  F001         	movff	Obtener_Distancia@Duracion,?___lwdiv
  6841  002786  C010  F002         	movff	Obtener_Distancia@Duracion+1,?___lwdiv+1
  6842  00278A  0E00               	movlw	0
  6843  00278C  6E04               	movwf	?___lwdiv+3,c
  6844  00278E  0E3A               	movlw	58
  6845  002790  6E03               	movwf	?___lwdiv+2,c
  6846  002792  EC8A  F014         	call	___lwdiv	;wreg free
  6847  002796  C001  F00D         	movff	?___lwdiv,Obtener_Distancia@Distancia
  6848  00279A  C002  F00E         	movff	?___lwdiv+1,Obtener_Distancia@Distancia+1
  6849                           
  6850                           ;main.c: 118: }
  6851  00279E  D008               	goto	l127
  6852  0027A0                     l3716:
  6853                           
  6854                           ;main.c: 119: else if(Duracion<116)
  6855  0027A0  0E74               	movlw	116
  6856  0027A2  5C0F               	subwf	Obtener_Distancia@Duracion,w,c
  6857  0027A4  0E00               	movlw	0
  6858  0027A6  5810               	subwfb	Obtener_Distancia@Duracion+1,w,c
  6859                           
  6860                           ;main.c: 123: else
  6861                           ;main.c: 124: {
  6862                           ;main.c: 125: Distancia=0;
  6863                           
  6864                           ;main.c: 122: }
  6865                           
  6866                           ;main.c: 120: {
  6867                           ;main.c: 121: Distancia=0;
  6868  0027A8  0E00               	movlw	0
  6869  0027AA  6E0E               	movwf	Obtener_Distancia@Distancia+1,c
  6870  0027AC  0E00               	movlw	0
  6871  0027AE  6E0D               	movwf	Obtener_Distancia@Distancia,c
  6872  0027B0                     l127:
  6873                           
  6874                           ;main.c: 126: }
  6875                           ;main.c: 127: Duracion=0;
  6876  0027B0  0E00               	movlw	0
  6877  0027B2  6E10               	movwf	Obtener_Distancia@Duracion+1,c
  6878  0027B4  0E00               	movlw	0
  6879  0027B6  6E0F               	movwf	Obtener_Distancia@Duracion,c
  6880                           
  6881                           ;main.c: 128: TMR1=0;
  6882  0027B8  0E00               	movlw	0
  6883  0027BA  6ECF               	movwf	4047,c	;volatile
  6884  0027BC  0E00               	movlw	0
  6885  0027BE  6ECE               	movwf	4046,c	;volatile
  6886                           
  6887                           ;main.c: 130: return Distancia;
  6888  0027C0  C00D  F009         	movff	Obtener_Distancia@Distancia,?_Obtener_Distancia
  6889  0027C4  C00E  F00A         	movff	Obtener_Distancia@Distancia+1,?_Obtener_Distancia+1
  6890  0027C8  0012               	return	
  6891  0027CA                     __end_of_Obtener_Distancia:
  6892                           	opt stack 0
  6893                           tblptru	equ	0xFF8
  6894                           tblptrh	equ	0xFF7
  6895                           tblptrl	equ	0xFF6
  6896                           tablat	equ	0xFF5
  6897                           prodh	equ	0xFF4
  6898                           prodl	equ	0xFF3
  6899                           postinc0	equ	0xFEE
  6900                           wreg	equ	0xFE8
  6901                           indf2	equ	0xFDF
  6902                           postinc2	equ	0xFDE
  6903                           postdec2	equ	0xFDD
  6904                           fsr2h	equ	0xFDA
  6905                           fsr2l	equ	0xFD9
  6906                           status	equ	0xFD8
  6907                           
  6908 ;; *************** function ___lwdiv *****************
  6909 ;; Defined at:
  6910 ;;		line 10 in file "E:\Program Files\Microchip\xc8\v1.20\sources\common\lwdiv.c"
  6911 ;; Parameters:    Size  Location     Type
  6912 ;;  dividend        2    0[COMRAM] unsigned int 
  6913 ;;  divisor         2    2[COMRAM] unsigned int 
  6914 ;; Auto vars:     Size  Location     Type
  6915 ;;  quotient        2    5[COMRAM] unsigned int 
  6916 ;;  counter         1    7[COMRAM] unsigned char 
  6917 ;; Return value:  Size  Location     Type
  6918 ;;                  2    0[COMRAM] unsigned int 
  6919 ;; Registers used:
  6920 ;;		wreg, status,2, status,0
  6921 ;; Tracked objects:
  6922 ;;		On entry : 0/0
  6923 ;;		On exit  : 0/0
  6924 ;;		Unchanged: 0/0
  6925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6926 ;;      Params:         4       0       0       0       0       0       0       0       0
  6927 ;;      Locals:         3       0       0       0       0       0       0       0       0
  6928 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6929 ;;      Totals:         8       0       0       0       0       0       0       0       0
  6930 ;;Total ram usage:        8 bytes
  6931 ;; Hardware stack levels used:    1
  6932 ;; This function calls:
  6933 ;;		Nothing
  6934 ;; This function is called by:
  6935 ;;		_Obtener_Distancia
  6936 ;; This function uses a non-reentrant model
  6937 ;;
  6938                           
  6939                           	psect	text28
  6940  002914                     __ptext28:
  6941                           	opt stack 0
  6942  002914                     ___lwdiv:
  6943                           	opt stack 29
  6944                           
  6945                           ;incstack = 0
  6946                           ;incstack = 0
  6947  002914  0E00               	movlw	0
  6948  002916  6E07               	movwf	___lwdiv@quotient+1,c
  6949  002918  0E00               	movlw	0
  6950  00291A  6E06               	movwf	___lwdiv@quotient,c
  6951  00291C  5004               	movf	___lwdiv@divisor+1,w,c
  6952  00291E  1003               	iorwf	___lwdiv@divisor,w,c
  6953  002920  B4D8               	btfsc	status,2,c
  6954  002922  D01E               	goto	l820
  6955  002924  6E05               	movwf	??___lwdiv& (0+255),c
  6956  002926  0E01               	movlw	1
  6957  002928  6E08               	movwf	___lwdiv@counter,c
  6958  00292A  5005               	movf	??___lwdiv& (0+255),w,c
  6959  00292C  D004               	goto	l3648
  6960  00292E                     l3646:
  6961  00292E  90D8               	bcf	status,0,c
  6962  002930  3603               	rlcf	___lwdiv@divisor,f,c
  6963  002932  3604               	rlcf	___lwdiv@divisor+1,f,c
  6964  002934  2A08               	incf	___lwdiv@counter,f,c
  6965  002936                     l3648:
  6966  002936  AE04               	btfss	___lwdiv@divisor+1,7,c
  6967  002938  D7FA               	goto	l3646
  6968  00293A                     l3650:
  6969  00293A  90D8               	bcf	status,0,c
  6970  00293C  3606               	rlcf	___lwdiv@quotient,f,c
  6971  00293E  3607               	rlcf	___lwdiv@quotient+1,f,c
  6972  002940  5003               	movf	___lwdiv@divisor,w,c
  6973  002942  5C01               	subwf	___lwdiv@dividend,w,c
  6974  002944  5004               	movf	___lwdiv@divisor+1,w,c
  6975  002946  5802               	subwfb	___lwdiv@dividend+1,w,c
  6976  002948  A0D8               	btfss	status,0,c
  6977  00294A  D005               	goto	l3658
  6978  00294C  5003               	movf	___lwdiv@divisor,w,c
  6979  00294E  5E01               	subwf	___lwdiv@dividend,f,c
  6980  002950  5004               	movf	___lwdiv@divisor+1,w,c
  6981  002952  5A02               	subwfb	___lwdiv@dividend+1,f,c
  6982  002954  8006               	bsf	___lwdiv@quotient,0,c
  6983  002956                     l3658:
  6984  002956  90D8               	bcf	status,0,c
  6985  002958  3204               	rrcf	___lwdiv@divisor+1,f,c
  6986  00295A  3203               	rrcf	___lwdiv@divisor,f,c
  6987  00295C  2E08               	decfsz	___lwdiv@counter,f,c
  6988  00295E  D7ED               	goto	l3650
  6989  002960                     l820:
  6990  002960  C006  F001         	movff	___lwdiv@quotient,?___lwdiv
  6991  002964  C007  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6992  002968  0012               	return	
  6993  00296A                     __end_of___lwdiv:
  6994                           	opt stack 0
  6995                           tblptru	equ	0xFF8
  6996                           tblptrh	equ	0xFF7
  6997                           tblptrl	equ	0xFF6
  6998                           tablat	equ	0xFF5
  6999                           prodh	equ	0xFF4
  7000                           prodl	equ	0xFF3
  7001                           postinc0	equ	0xFEE
  7002                           wreg	equ	0xFE8
  7003                           indf2	equ	0xFDF
  7004                           postinc2	equ	0xFDE
  7005                           postdec2	equ	0xFDD
  7006                           fsr2h	equ	0xFDA
  7007                           fsr2l	equ	0xFD9
  7008                           status	equ	0xFD8
  7009                           
  7010 ;; *************** function _Init_AD *****************
  7011 ;; Defined at:
  7012 ;;		line 133 in file "main.c"
  7013 ;; Parameters:    Size  Location     Type
  7014 ;;		None
  7015 ;; Auto vars:     Size  Location     Type
  7016 ;;		None
  7017 ;; Return value:  Size  Location     Type
  7018 ;;		None               void
  7019 ;; Registers used:
  7020 ;;		wreg, status,2
  7021 ;; Tracked objects:
  7022 ;;		On entry : 0/0
  7023 ;;		On exit  : 0/0
  7024 ;;		Unchanged: 0/0
  7025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7026 ;;      Params:         0       0       0       0       0       0       0       0       0
  7027 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7028 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7029 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7030 ;;Total ram usage:        0 bytes
  7031 ;; Hardware stack levels used:    1
  7032 ;; This function calls:
  7033 ;;		Nothing
  7034 ;; This function is called by:
  7035 ;;		_main
  7036 ;; This function uses a non-reentrant model
  7037 ;;
  7038                           
  7039                           	psect	text29
  7040  002C88                     __ptext29:
  7041                           	opt stack 0
  7042  002C88                     _Init_AD:
  7043                           	opt stack 30
  7044                           
  7045                           ;main.c: 134: TRISA0 = 1;
  7046                           
  7047                           ;incstack = 0
  7048                           ;incstack = 0
  7049  002C88  8092               	bsf	3986,0,c	;volatile
  7050                           
  7051                           ;main.c: 135: ADCON1 = 0x0e;
  7052  002C8A  0E0E               	movlw	14
  7053  002C8C  6EC1               	movwf	4033,c	;volatile
  7054                           
  7055                           ;main.c: 136: ADCON2 = 0x92;
  7056  002C8E  0E92               	movlw	146
  7057  002C90  6EC0               	movwf	4032,c	;volatile
  7058                           
  7059                           ;main.c: 137: ADRESH=0;
  7060  002C92  0E00               	movlw	0
  7061  002C94  6EC4               	movwf	4036,c	;volatile
  7062                           
  7063                           ;main.c: 138: ADRESL=0;
  7064  002C96  0E00               	movlw	0
  7065  002C98  6EC3               	movwf	4035,c	;volatile
  7066  002C9A  0012               	return	
  7067  002C9C                     __end_of_Init_AD:
  7068                           	opt stack 0
  7069                           tblptru	equ	0xFF8
  7070                           tblptrh	equ	0xFF7
  7071                           tblptrl	equ	0xFF6
  7072                           tablat	equ	0xFF5
  7073                           prodh	equ	0xFF4
  7074                           prodl	equ	0xFF3
  7075                           postinc0	equ	0xFEE
  7076                           wreg	equ	0xFE8
  7077                           indf2	equ	0xFDF
  7078                           postinc2	equ	0xFDE
  7079                           postdec2	equ	0xFDD
  7080                           fsr2h	equ	0xFDA
  7081                           fsr2l	equ	0xFD9
  7082                           status	equ	0xFD8
  7083                           
  7084 ;; *************** function _Timer1_Init *****************
  7085 ;; Defined at:
  7086 ;;		line 90 in file "main.c"
  7087 ;; Parameters:    Size  Location     Type
  7088 ;;		None
  7089 ;; Auto vars:     Size  Location     Type
  7090 ;;		None
  7091 ;; Return value:  Size  Location     Type
  7092 ;;		None               void
  7093 ;; Registers used:
  7094 ;;		wreg, status,2
  7095 ;; Tracked objects:
  7096 ;;		On entry : 0/0
  7097 ;;		On exit  : 0/0
  7098 ;;		Unchanged: 0/0
  7099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7100 ;;      Params:         0       0       0       0       0       0       0       0       0
  7101 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7102 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7103 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7104 ;;Total ram usage:        0 bytes
  7105 ;; Hardware stack levels used:    1
  7106 ;; This function calls:
  7107 ;;		Nothing
  7108 ;; This function is called by:
  7109 ;;		_main
  7110 ;; This function uses a non-reentrant model
  7111 ;;
  7112                           
  7113                           	psect	text30
  7114  002C9C                     __ptext30:
  7115                           	opt stack 0
  7116  002C9C                     _Timer1_Init:
  7117                           	opt stack 30
  7118                           
  7119                           ;main.c: 91: T1CONbits.RD16=1;
  7120                           
  7121                           ;incstack = 0
  7122                           ;incstack = 0
  7123  002C9C  8ECD               	bsf	4045,7,c	;volatile
  7124                           
  7125                           ;main.c: 92: T1CONbits.T1CKPS=0b00;
  7126  002C9E  0ECF               	movlw	-49
  7127  002CA0  16CD               	andwf	4045,f,c	;volatile
  7128                           
  7129                           ;main.c: 93: T1CONbits.TMR1CS=0;
  7130  002CA2  92CD               	bcf	4045,1,c	;volatile
  7131                           
  7132                           ;main.c: 94: TMR1=0;
  7133  002CA4  0E00               	movlw	0
  7134  002CA6  6ECF               	movwf	4047,c	;volatile
  7135  002CA8  0E00               	movlw	0
  7136  002CAA  6ECE               	movwf	4046,c	;volatile
  7137                           
  7138                           ;main.c: 95: TMR1ON=0;
  7139  002CAC  90CD               	bcf	4045,0,c	;volatile
  7140  002CAE  0012               	return	
  7141  002CB0                     __end_of_Timer1_Init:
  7142                           	opt stack 0
  7143                           tblptru	equ	0xFF8
  7144                           tblptrh	equ	0xFF7
  7145                           tblptrl	equ	0xFF6
  7146                           tablat	equ	0xFF5
  7147                           prodh	equ	0xFF4
  7148                           prodl	equ	0xFF3
  7149                           postinc0	equ	0xFEE
  7150                           wreg	equ	0xFE8
  7151                           indf2	equ	0xFDF
  7152                           postinc2	equ	0xFDE
  7153                           postdec2	equ	0xFDD
  7154                           fsr2h	equ	0xFDA
  7155                           fsr2l	equ	0xFD9
  7156                           status	equ	0xFD8
  7157                           
  7158 ;; *************** function _Configuracion_Registros *****************
  7159 ;; Defined at:
  7160 ;;		line 79 in file "main.c"
  7161 ;; Parameters:    Size  Location     Type
  7162 ;;		None
  7163 ;; Auto vars:     Size  Location     Type
  7164 ;;		None
  7165 ;; Return value:  Size  Location     Type
  7166 ;;		None               void
  7167 ;; Registers used:
  7168 ;;		wreg, status,2, status,0
  7169 ;; Tracked objects:
  7170 ;;		On entry : 0/0
  7171 ;;		On exit  : 0/0
  7172 ;;		Unchanged: 0/0
  7173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7174 ;;      Params:         0       0       0       0       0       0       0       0       0
  7175 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7176 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7177 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7178 ;;Total ram usage:        0 bytes
  7179 ;; Hardware stack levels used:    1
  7180 ;; This function calls:
  7181 ;;		Nothing
  7182 ;; This function is called by:
  7183 ;;		_main
  7184 ;; This function uses a non-reentrant model
  7185 ;;
  7186                           
  7187                           	psect	text31
  7188  002CB0                     __ptext31:
  7189                           	opt stack 0
  7190  002CB0                     _Configuracion_Registros:
  7191                           	opt stack 30
  7192                           
  7193                           ;main.c: 80: ADCON1bits.PCFG=0b1111;
  7194                           
  7195                           ;incstack = 0
  7196                           ;incstack = 0
  7197  002CB0  80C1               	bsf	4033,0,c	;volatile
  7198  002CB2  82C1               	bsf	4033,1,c	;volatile
  7199  002CB4  84C1               	bsf	4033,2,c	;volatile
  7200  002CB6  86C1               	bsf	4033,3,c	;volatile
  7201                           
  7202                           ;main.c: 81: TRISA&=~(1<<1);
  7203  002CB8  9292               	bcf	3986,1,c	;volatile
  7204                           
  7205                           ;main.c: 82: TRISA|=(1<<2);
  7206  002CBA  8492               	bsf	3986,2,c	;volatile
  7207                           
  7208                           ;main.c: 84: TRISB = 0;
  7209  002CBC  0E00               	movlw	0
  7210  002CBE  6E93               	movwf	3987,c	;volatile
  7211  002CC0  0012               	return	
  7212  002CC2                     __end_of_Configuracion_Registros:
  7213                           	opt stack 0
  7214                           tblptru	equ	0xFF8
  7215                           tblptrh	equ	0xFF7
  7216                           tblptrl	equ	0xFF6
  7217                           tablat	equ	0xFF5
  7218                           prodh	equ	0xFF4
  7219                           prodl	equ	0xFF3
  7220                           postinc0	equ	0xFEE
  7221                           wreg	equ	0xFE8
  7222                           indf2	equ	0xFDF
  7223                           postinc2	equ	0xFDE
  7224                           postdec2	equ	0xFDD
  7225                           fsr2h	equ	0xFDA
  7226                           fsr2l	equ	0xFD9
  7227                           status	equ	0xFD8
  7228                           
  7229 ;; *************** function _lcd_putc *****************
  7230 ;; Defined at:
  7231 ;;		line 135 in file "lcd.h"
  7232 ;; Parameters:    Size  Location     Type
  7233 ;;  a               2    4[COMRAM] PTR unsigned char 
  7234 ;;		 -> LCD_Buffer(32), 
  7235 ;; Auto vars:     Size  Location     Type
  7236 ;;  i               2    6[COMRAM] int 
  7237 ;; Return value:  Size  Location     Type
  7238 ;;		None               void
  7239 ;; Registers used:
  7240 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7241 ;; Tracked objects:
  7242 ;;		On entry : 0/0
  7243 ;;		On exit  : 0/0
  7244 ;;		Unchanged: 0/0
  7245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7246 ;;      Params:         2       0       0       0       0       0       0       0       0
  7247 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7248 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7249 ;;      Totals:         4       0       0       0       0       0       0       0       0
  7250 ;;Total ram usage:        4 bytes
  7251 ;; Hardware stack levels used:    1
  7252 ;; Hardware stack levels required when called:    2
  7253 ;; This function calls:
  7254 ;;		_lcd_write_char
  7255 ;; This function is called by:
  7256 ;;		_main
  7257 ;; This function uses a non-reentrant model
  7258 ;;
  7259                           
  7260                           	psect	text32
  7261  002BA8                     __ptext32:
  7262                           	opt stack 0
  7263  002BA8                     _lcd_putc:
  7264                           	opt stack 28
  7265                           
  7266                           ;lcd.h: 136: int i;
  7267                           ;lcd.h: 137: for(i=0;a[i]!='\0';i++)
  7268                           
  7269                           ;incstack = 0
  7270                           ;incstack = 0
  7271  002BA8  0E00               	movlw	0
  7272  002BAA  6E08               	movwf	lcd_putc@i+1,c
  7273  002BAC  0E00               	movlw	0
  7274  002BAE  6E07               	movwf	lcd_putc@i,c
  7275  002BB0  D00C               	goto	l4022
  7276  002BB2                     l4018:
  7277                           
  7278                           ;lcd.h: 138: lcd_write_char(a[i]);
  7279  002BB2  5007               	movf	lcd_putc@i,w,c
  7280  002BB4  2405               	addwf	lcd_putc@a,w,c
  7281  002BB6  6ED9               	movwf	fsr2l,c
  7282  002BB8  5008               	movf	lcd_putc@i+1,w,c
  7283  002BBA  2006               	addwfc	lcd_putc@a+1,w,c
  7284  002BBC  6EDA               	movwf	fsr2h,c
  7285  002BBE  50DF               	movf	indf2,w,c
  7286  002BC0  6E02               	movwf	?_lcd_write_char,c
  7287  002BC2  EC9C  F015         	call	_lcd_write_char	;wreg free
  7288  002BC6  4A07               	infsnz	lcd_putc@i,f,c
  7289  002BC8  2A08               	incf	lcd_putc@i+1,f,c
  7290  002BCA                     l4022:
  7291  002BCA  5007               	movf	lcd_putc@i,w,c
  7292  002BCC  2405               	addwf	lcd_putc@a,w,c
  7293  002BCE  6ED9               	movwf	fsr2l,c
  7294  002BD0  5008               	movf	lcd_putc@i+1,w,c
  7295  002BD2  2006               	addwfc	lcd_putc@a+1,w,c
  7296  002BD4  6EDA               	movwf	fsr2h,c
  7297  002BD6  50DF               	movf	indf2,w,c
  7298  002BD8  B4D8               	btfsc	status,2,c
  7299  002BDA  0012               	return	
  7300  002BDC  D7EA               	goto	l4018
  7301  002BDE                     __end_of_lcd_putc:
  7302                           	opt stack 0
  7303                           tblptru	equ	0xFF8
  7304                           tblptrh	equ	0xFF7
  7305                           tblptrl	equ	0xFF6
  7306                           tablat	equ	0xFF5
  7307                           prodh	equ	0xFF4
  7308                           prodl	equ	0xFF3
  7309                           postinc0	equ	0xFEE
  7310                           wreg	equ	0xFE8
  7311                           indf2	equ	0xFDF
  7312                           postinc2	equ	0xFDE
  7313                           postdec2	equ	0xFDD
  7314                           fsr2h	equ	0xFDA
  7315                           fsr2l	equ	0xFD9
  7316                           status	equ	0xFD8
  7317                           
  7318 ;; *************** function _lcd_write_char *****************
  7319 ;; Defined at:
  7320 ;;		line 117 in file "lcd.h"
  7321 ;; Parameters:    Size  Location     Type
  7322 ;;  a               1    1[COMRAM] unsigned char 
  7323 ;; Auto vars:     Size  Location     Type
  7324 ;;  y               1    3[COMRAM] unsigned char 
  7325 ;;  temp            1    2[COMRAM] unsigned char 
  7326 ;; Return value:  Size  Location     Type
  7327 ;;		None               void
  7328 ;; Registers used:
  7329 ;;		wreg, status,2, status,0, cstack
  7330 ;; Tracked objects:
  7331 ;;		On entry : 0/0
  7332 ;;		On exit  : 0/0
  7333 ;;		Unchanged: 0/0
  7334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7335 ;;      Params:         1       0       0       0       0       0       0       0       0
  7336 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7337 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7338 ;;      Totals:         3       0       0       0       0       0       0       0       0
  7339 ;;Total ram usage:        3 bytes
  7340 ;; Hardware stack levels used:    1
  7341 ;; Hardware stack levels required when called:    1
  7342 ;; This function calls:
  7343 ;;		_Lcd_Port
  7344 ;; This function is called by:
  7345 ;;		_lcd_putc
  7346 ;; This function uses a non-reentrant model
  7347 ;;
  7348                           
  7349                           	psect	text33
  7350  002B38                     __ptext33:
  7351                           	opt stack 0
  7352  002B38                     _lcd_write_char:
  7353                           	opt stack 28
  7354                           
  7355                           ;lcd.h: 118: char temp,y;
  7356                           ;lcd.h: 119: temp = a&0x0F;
  7357                           
  7358                           ;incstack = 0
  7359                           ;incstack = 0
  7360  002B38  5002               	movf	lcd_write_char@a,w,c
  7361  002B3A  0B0F               	andlw	15
  7362  002B3C  6E03               	movwf	lcd_write_char@temp,c
  7363                           
  7364                           ;lcd.h: 120: y = a&0xF0;
  7365  002B3E  5002               	movf	lcd_write_char@a,w,c
  7366  002B40  0BF0               	andlw	240
  7367  002B42  6E04               	movwf	lcd_write_char@y,c
  7368                           
  7369                           ;lcd.h: 121: RD2 = 1;
  7370  002B44  8483               	bsf	3971,2,c	;volatile
  7371                           
  7372                           ;lcd.h: 122: Lcd_Port(y>>4);
  7373  002B46  3804               	swapf	lcd_write_char@y,w,c
  7374  002B48  0B0F               	andlw	15
  7375  002B4A  6E01               	movwf	?_Lcd_Port,c
  7376  002B4C  ECEF  F015         	call	_Lcd_Port	;wreg free
  7377                           
  7378                           ;lcd.h: 123: RD3 = 1;
  7379  002B50  8683               	bsf	3971,3,c	;volatile
  7380                           
  7381                           ;lcd.h: 124: _delay((unsigned long)((40)*(8000000/4000000.0)));
  7382  002B52  0E1A               	movlw	26
  7383  002B54                     u3467:
  7384  002B54  2EE8               	decfsz	wreg,f,c
  7385  002B56  D7FE               	goto	u3467
  7386  002B58  D000               	nop2		;nop
  7387                           
  7388                           ;lcd.h: 125: RD3 = 0;
  7389  002B5A  9683               	bcf	3971,3,c	;volatile
  7390                           
  7391                           ;lcd.h: 126: Lcd_Port(temp);
  7392  002B5C  C003  F001         	movff	lcd_write_char@temp,?_Lcd_Port
  7393  002B60  ECEF  F015         	call	_Lcd_Port	;wreg free
  7394                           
  7395                           ;lcd.h: 127: RD3 = 1;
  7396  002B64  8683               	bsf	3971,3,c	;volatile
  7397                           
  7398                           ;lcd.h: 128: _delay((unsigned long)((40)*(8000000/4000000.0)));
  7399  002B66  0E1A               	movlw	26
  7400  002B68                     u3477:
  7401  002B68  2EE8               	decfsz	wreg,f,c
  7402  002B6A  D7FE               	goto	u3477
  7403  002B6C  D000               	nop2		;nop
  7404                           
  7405                           ;lcd.h: 129: RD3 = 0;
  7406  002B6E  9683               	bcf	3971,3,c	;volatile
  7407  002B70  0012               	return	
  7408  002B72                     __end_of_lcd_write_char:
  7409                           	opt stack 0
  7410                           tblptru	equ	0xFF8
  7411                           tblptrh	equ	0xFF7
  7412                           tblptrl	equ	0xFF6
  7413                           tablat	equ	0xFF5
  7414                           prodh	equ	0xFF4
  7415                           prodl	equ	0xFF3
  7416                           postinc0	equ	0xFEE
  7417                           wreg	equ	0xFE8
  7418                           indf2	equ	0xFDF
  7419                           postinc2	equ	0xFDE
  7420                           postdec2	equ	0xFDD
  7421                           fsr2h	equ	0xFDA
  7422                           fsr2l	equ	0xFD9
  7423                           status	equ	0xFD8
  7424                           
  7425 ;; *************** function _lcd_init *****************
  7426 ;; Defined at:
  7427 ;;		line 95 in file "lcd.h"
  7428 ;; Parameters:    Size  Location     Type
  7429 ;;		None
  7430 ;; Auto vars:     Size  Location     Type
  7431 ;;		None
  7432 ;; Return value:  Size  Location     Type
  7433 ;;		None               void
  7434 ;; Registers used:
  7435 ;;		wreg, status,2, cstack
  7436 ;; Tracked objects:
  7437 ;;		On entry : 0/0
  7438 ;;		On exit  : 0/0
  7439 ;;		Unchanged: 0/0
  7440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7441 ;;      Params:         0       0       0       0       0       0       0       0       0
  7442 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7443 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7444 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7445 ;;Total ram usage:        1 bytes
  7446 ;; Hardware stack levels used:    1
  7447 ;; Hardware stack levels required when called:    2
  7448 ;; This function calls:
  7449 ;;		_Lcd_Port
  7450 ;;		_Lcd_Cmd
  7451 ;; This function is called by:
  7452 ;;		_main
  7453 ;; This function uses a non-reentrant model
  7454 ;;
  7455                           
  7456                           	psect	text34
  7457  0024EE                     __ptext34:
  7458                           	opt stack 0
  7459  0024EE                     _lcd_init:
  7460                           	opt stack 28
  7461                           
  7462                           ;lcd.h: 96: TRISD=0x00;
  7463                           
  7464                           ;incstack = 0
  7465                           ;incstack = 0
  7466  0024EE  0E00               	movlw	0
  7467  0024F0  6E95               	movwf	3989,c	;volatile
  7468                           
  7469                           ;lcd.h: 97: Lcd_Port(0x00);
  7470  0024F2  6E04               	movwf	??_lcd_init& (0+255),c
  7471  0024F4  0E00               	movlw	0
  7472  0024F6  6E01               	movwf	?_Lcd_Port,c
  7473  0024F8  5004               	movf	??_lcd_init& (0+255),w,c
  7474  0024FA  ECEF  F015         	call	_Lcd_Port	;wreg free
  7475                           
  7476                           ;lcd.h: 98: _delay((unsigned long)((20)*(8000000/4000.0)));
  7477  0024FE  0E34               	movlw	52
  7478  002500  6E04               	movwf	??_lcd_init& (0+255),c
  7479  002502  0EF1               	movlw	241
  7480  002504                     u3487:
  7481  002504  2EE8               	decfsz	wreg,f,c
  7482  002506  D7FE               	goto	u3487
  7483  002508  2E04               	decfsz	??_lcd_init& (0+255),f,c
  7484  00250A  D7FC               	goto	u3487
  7485  00250C  D000               	nop2	
  7486                           
  7487                           ;lcd.h: 99: Lcd_Cmd(0x03);
  7488  00250E  6E04               	movwf	??_lcd_init& (0+255),c
  7489  002510  0E03               	movlw	3
  7490  002512  6E02               	movwf	?_Lcd_Cmd,c
  7491  002514  5004               	movf	??_lcd_init& (0+255),w,c
  7492  002516  EC29  F016         	call	_Lcd_Cmd	;wreg free
  7493                           
  7494                           ;lcd.h: 100: _delay((unsigned long)((5)*(8000000/4000.0)));
  7495  00251A  0E0D               	movlw	13
  7496  00251C  6E04               	movwf	??_lcd_init& (0+255),c
  7497  00251E  0EFB               	movlw	251
  7498  002520                     u3497:
  7499  002520  2EE8               	decfsz	wreg,f,c
  7500  002522  D7FE               	goto	u3497
  7501  002524  2E04               	decfsz	??_lcd_init& (0+255),f,c
  7502  002526  D7FC               	goto	u3497
  7503  002528  D000               	nop2	
  7504                           
  7505                           ;lcd.h: 101: Lcd_Cmd(0x03);
  7506  00252A  6E04               	movwf	??_lcd_init& (0+255),c
  7507  00252C  0E03               	movlw	3
  7508  00252E  6E02               	movwf	?_Lcd_Cmd,c
  7509  002530  5004               	movf	??_lcd_init& (0+255),w,c
  7510  002532  EC29  F016         	call	_Lcd_Cmd	;wreg free
  7511                           
  7512                           ;lcd.h: 102: _delay((unsigned long)((11)*(8000000/4000.0)));
  7513  002536  0E1D               	movlw	29
  7514  002538  6E04               	movwf	??_lcd_init& (0+255),c
  7515  00253A  0E91               	movlw	145
  7516  00253C                     u3507:
  7517  00253C  2EE8               	decfsz	wreg,f,c
  7518  00253E  D7FE               	goto	u3507
  7519  002540  2E04               	decfsz	??_lcd_init& (0+255),f,c
  7520  002542  D7FC               	goto	u3507
  7521                           
  7522                           ;lcd.h: 103: Lcd_Cmd(0x03);
  7523  002544  6E04               	movwf	??_lcd_init& (0+255),c
  7524  002546  0E03               	movlw	3
  7525  002548  6E02               	movwf	?_Lcd_Cmd,c
  7526  00254A  5004               	movf	??_lcd_init& (0+255),w,c
  7527  00254C  EC29  F016         	call	_Lcd_Cmd	;wreg free
  7528                           
  7529                           ;lcd.h: 105: Lcd_Cmd(0x02);
  7530  002550  6E04               	movwf	??_lcd_init& (0+255),c
  7531  002552  0E02               	movlw	2
  7532  002554  6E02               	movwf	?_Lcd_Cmd,c
  7533  002556  5004               	movf	??_lcd_init& (0+255),w,c
  7534  002558  EC29  F016         	call	_Lcd_Cmd	;wreg free
  7535                           
  7536                           ;lcd.h: 106: Lcd_Cmd(0x02);
  7537  00255C  6E04               	movwf	??_lcd_init& (0+255),c
  7538  00255E  0E02               	movlw	2
  7539  002560  6E02               	movwf	?_Lcd_Cmd,c
  7540  002562  5004               	movf	??_lcd_init& (0+255),w,c
  7541  002564  EC29  F016         	call	_Lcd_Cmd	;wreg free
  7542                           
  7543                           ;lcd.h: 107: Lcd_Cmd(0x08);
  7544  002568  6E04               	movwf	??_lcd_init& (0+255),c
  7545  00256A  0E08               	movlw	8
  7546  00256C  6E02               	movwf	?_Lcd_Cmd,c
  7547  00256E  5004               	movf	??_lcd_init& (0+255),w,c
  7548  002570  EC29  F016         	call	_Lcd_Cmd	;wreg free
  7549                           
  7550                           ;lcd.h: 108: Lcd_Cmd(0x00);
  7551  002574  6E04               	movwf	??_lcd_init& (0+255),c
  7552  002576  0E00               	movlw	0
  7553  002578  6E02               	movwf	?_Lcd_Cmd,c
  7554  00257A  5004               	movf	??_lcd_init& (0+255),w,c
  7555  00257C  EC29  F016         	call	_Lcd_Cmd	;wreg free
  7556                           
  7557                           ;lcd.h: 109: Lcd_Cmd(0x0C);
  7558  002580  6E04               	movwf	??_lcd_init& (0+255),c
  7559  002582  0E0C               	movlw	12
  7560  002584  6E02               	movwf	?_Lcd_Cmd,c
  7561  002586  5004               	movf	??_lcd_init& (0+255),w,c
  7562  002588  EC29  F016         	call	_Lcd_Cmd	;wreg free
  7563                           
  7564                           ;lcd.h: 110: Lcd_Cmd(0x00);
  7565  00258C  6E04               	movwf	??_lcd_init& (0+255),c
  7566  00258E  0E00               	movlw	0
  7567  002590  6E02               	movwf	?_Lcd_Cmd,c
  7568  002592  5004               	movf	??_lcd_init& (0+255),w,c
  7569  002594  EC29  F016         	call	_Lcd_Cmd	;wreg free
  7570                           
  7571                           ;lcd.h: 111: Lcd_Cmd(0x06);
  7572  002598  6E04               	movwf	??_lcd_init& (0+255),c
  7573  00259A  0E06               	movlw	6
  7574  00259C  6E02               	movwf	?_Lcd_Cmd,c
  7575  00259E  5004               	movf	??_lcd_init& (0+255),w,c
  7576  0025A0  EC29  F016         	call	_Lcd_Cmd	;wreg free
  7577  0025A4  0012               	return	
  7578  0025A6                     __end_of_lcd_init:
  7579                           	opt stack 0
  7580                           tblptru	equ	0xFF8
  7581                           tblptrh	equ	0xFF7
  7582                           tblptrl	equ	0xFF6
  7583                           tablat	equ	0xFF5
  7584                           prodh	equ	0xFF4
  7585                           prodl	equ	0xFF3
  7586                           postinc0	equ	0xFEE
  7587                           wreg	equ	0xFE8
  7588                           indf2	equ	0xFDF
  7589                           postinc2	equ	0xFDE
  7590                           postdec2	equ	0xFDD
  7591                           fsr2h	equ	0xFDA
  7592                           fsr2l	equ	0xFD9
  7593                           status	equ	0xFD8
  7594                           
  7595 ;; *************** function _lcd_gotoxy *****************
  7596 ;; Defined at:
  7597 ;;		line 72 in file "lcd.h"
  7598 ;; Parameters:    Size  Location     Type
  7599 ;;  a               1    3[COMRAM] unsigned char 
  7600 ;;  b               1    4[COMRAM] unsigned char 
  7601 ;; Auto vars:     Size  Location     Type
  7602 ;;  temp            1    7[COMRAM] unsigned char 
  7603 ;;  y               1    6[COMRAM] unsigned char 
  7604 ;;  z               1    5[COMRAM] unsigned char 
  7605 ;; Return value:  Size  Location     Type
  7606 ;;		None               void
  7607 ;; Registers used:
  7608 ;;		wreg, status,2, status,0, cstack
  7609 ;; Tracked objects:
  7610 ;;		On entry : 0/0
  7611 ;;		On exit  : 0/0
  7612 ;;		Unchanged: 0/0
  7613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7614 ;;      Params:         2       0       0       0       0       0       0       0       0
  7615 ;;      Locals:         3       0       0       0       0       0       0       0       0
  7616 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7617 ;;      Totals:         5       0       0       0       0       0       0       0       0
  7618 ;;Total ram usage:        5 bytes
  7619 ;; Hardware stack levels used:    1
  7620 ;; Hardware stack levels required when called:    2
  7621 ;; This function calls:
  7622 ;;		_Lcd_Cmd
  7623 ;; This function is called by:
  7624 ;;		_main
  7625 ;; This function uses a non-reentrant model
  7626 ;;
  7627                           
  7628                           	psect	text35
  7629  00296A                     __ptext35:
  7630                           	opt stack 0
  7631  00296A                     _lcd_gotoxy:
  7632                           	opt stack 28
  7633                           
  7634                           ;lcd.h: 73: char temp,z,y;
  7635                           ;lcd.h: 74: if(a == 1)
  7636                           
  7637                           ;incstack = 0
  7638                           ;incstack = 0
  7639  00296A  0404               	decf	lcd_gotoxy@a,w,c
  7640  00296C  A4D8               	btfss	status,2,c
  7641  00296E  D012               	goto	l3978
  7642                           
  7643                           ;lcd.h: 75: {
  7644                           ;lcd.h: 76: temp = 0x80 + b - 1;
  7645  002970  5005               	movf	lcd_gotoxy@b,w,c
  7646  002972  0F7F               	addlw	127
  7647  002974  6E08               	movwf	lcd_gotoxy@temp,c
  7648                           
  7649                           ;lcd.h: 77: z = temp>>4;
  7650  002976  3808               	swapf	lcd_gotoxy@temp,w,c
  7651  002978  0B0F               	andlw	15
  7652  00297A  6E06               	movwf	lcd_gotoxy@z,c
  7653                           
  7654                           ;lcd.h: 78: y = temp & 0x0F;
  7655  00297C  5008               	movf	lcd_gotoxy@temp,w,c
  7656  00297E  0B0F               	andlw	15
  7657  002980  6E07               	movwf	lcd_gotoxy@y,c
  7658                           
  7659                           ;lcd.h: 79: Lcd_Cmd(z);
  7660  002982  C006  F002         	movff	lcd_gotoxy@z,?_Lcd_Cmd
  7661  002986  EC29  F016         	call	_Lcd_Cmd	;wreg free
  7662                           
  7663                           ;lcd.h: 80: Lcd_Cmd(y);
  7664  00298A  C007  F002         	movff	lcd_gotoxy@y,?_Lcd_Cmd
  7665  00298E  EC29  F016         	call	_Lcd_Cmd	;wreg free
  7666                           
  7667                           ;lcd.h: 81: }
  7668  002992  D015               	goto	l85
  7669  002994                     l3978:
  7670                           
  7671                           ;lcd.h: 82: else if(a == 2)
  7672  002994  5004               	movf	lcd_gotoxy@a,w,c
  7673  002996  0A02               	xorlw	2
  7674  002998  A4D8               	btfss	status,2,c
  7675  00299A  D011               	goto	l85
  7676                           
  7677                           ;lcd.h: 83: {
  7678                           ;lcd.h: 84: temp = 0xC0 + b - 1;
  7679  00299C  5005               	movf	lcd_gotoxy@b,w,c
  7680  00299E  0FBF               	addlw	191
  7681  0029A0  6E08               	movwf	lcd_gotoxy@temp,c
  7682                           
  7683                           ;lcd.h: 85: z = temp>>4;
  7684  0029A2  3808               	swapf	lcd_gotoxy@temp,w,c
  7685  0029A4  0B0F               	andlw	15
  7686  0029A6  6E06               	movwf	lcd_gotoxy@z,c
  7687                           
  7688                           ;lcd.h: 86: y = temp & 0x0F;
  7689  0029A8  5008               	movf	lcd_gotoxy@temp,w,c
  7690  0029AA  0B0F               	andlw	15
  7691  0029AC  6E07               	movwf	lcd_gotoxy@y,c
  7692                           
  7693                           ;lcd.h: 87: Lcd_Cmd(z);
  7694  0029AE  C006  F002         	movff	lcd_gotoxy@z,?_Lcd_Cmd
  7695  0029B2  EC29  F016         	call	_Lcd_Cmd	;wreg free
  7696                           
  7697                           ;lcd.h: 88: Lcd_Cmd(y);
  7698  0029B6  C007  F002         	movff	lcd_gotoxy@y,?_Lcd_Cmd
  7699  0029BA  EC29  F016         	call	_Lcd_Cmd	;wreg free
  7700  0029BE                     l85:
  7701  0029BE  0012               	return	
  7702  0029C0                     __end_of_lcd_gotoxy:
  7703                           	opt stack 0
  7704                           tblptru	equ	0xFF8
  7705                           tblptrh	equ	0xFF7
  7706                           tblptrl	equ	0xFF6
  7707                           tablat	equ	0xFF5
  7708                           prodh	equ	0xFF4
  7709                           prodl	equ	0xFF3
  7710                           postinc0	equ	0xFEE
  7711                           wreg	equ	0xFE8
  7712                           indf2	equ	0xFDF
  7713                           postinc2	equ	0xFDE
  7714                           postdec2	equ	0xFDD
  7715                           fsr2h	equ	0xFDA
  7716                           fsr2l	equ	0xFD9
  7717                           status	equ	0xFD8
  7718                           
  7719 ;; *************** function _Lcd_Cmd *****************
  7720 ;; Defined at:
  7721 ;;		line 53 in file "lcd.h"
  7722 ;; Parameters:    Size  Location     Type
  7723 ;;  a               1    1[COMRAM] unsigned char 
  7724 ;; Auto vars:     Size  Location     Type
  7725 ;;		None
  7726 ;; Return value:  Size  Location     Type
  7727 ;;		None               void
  7728 ;; Registers used:
  7729 ;;		wreg, cstack
  7730 ;; Tracked objects:
  7731 ;;		On entry : 0/0
  7732 ;;		On exit  : 0/0
  7733 ;;		Unchanged: 0/0
  7734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7735 ;;      Params:         1       0       0       0       0       0       0       0       0
  7736 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7737 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7738 ;;      Totals:         2       0       0       0       0       0       0       0       0
  7739 ;;Total ram usage:        2 bytes
  7740 ;; Hardware stack levels used:    1
  7741 ;; Hardware stack levels required when called:    1
  7742 ;; This function calls:
  7743 ;;		_Lcd_Port
  7744 ;; This function is called by:
  7745 ;;		_lcd_gotoxy
  7746 ;;		_lcd_init
  7747 ;;		_lcd_clear
  7748 ;;		_lcd_shift_right
  7749 ;;		_lcd_shift_left
  7750 ;; This function uses a non-reentrant model
  7751 ;;
  7752                           
  7753                           	psect	text36
  7754  002C52                     __ptext36:
  7755                           	opt stack 0
  7756  002C52                     _Lcd_Cmd:
  7757                           	opt stack 28
  7758                           
  7759                           ;lcd.h: 54: RD2 = 0;
  7760                           
  7761                           ;incstack = 0
  7762                           ;incstack = 0
  7763  002C52  9483               	bcf	3971,2,c	;volatile
  7764                           
  7765                           ;lcd.h: 55: Lcd_Port(a);
  7766  002C54  C002  F001         	movff	Lcd_Cmd@a,?_Lcd_Port
  7767  002C58  ECEF  F015         	call	_Lcd_Port	;wreg free
  7768                           
  7769                           ;lcd.h: 56: RD3 = 1;
  7770  002C5C  8683               	bsf	3971,3,c	;volatile
  7771                           
  7772                           ;lcd.h: 57: _delay((unsigned long)((4)*(8000000/4000.0)));
  7773  002C5E  0E0B               	movlw	11
  7774  002C60  6E03               	movwf	??_Lcd_Cmd& (0+255),c
  7775  002C62  0E62               	movlw	98
  7776  002C64                     u3517:
  7777  002C64  2EE8               	decfsz	wreg,f,c
  7778  002C66  D7FE               	goto	u3517
  7779  002C68  2E03               	decfsz	??_Lcd_Cmd& (0+255),f,c
  7780  002C6A  D7FC               	goto	u3517
  7781  002C6C  F000               	nop	
  7782                           
  7783                           ;lcd.h: 58: RD3 = 0;
  7784  002C6E  9683               	bcf	3971,3,c	;volatile
  7785  002C70  0012               	return	
  7786  002C72                     __end_of_Lcd_Cmd:
  7787                           	opt stack 0
  7788                           tblptru	equ	0xFF8
  7789                           tblptrh	equ	0xFF7
  7790                           tblptrl	equ	0xFF6
  7791                           tablat	equ	0xFF5
  7792                           prodh	equ	0xFF4
  7793                           prodl	equ	0xFF3
  7794                           postinc0	equ	0xFEE
  7795                           wreg	equ	0xFE8
  7796                           indf2	equ	0xFDF
  7797                           postinc2	equ	0xFDE
  7798                           postdec2	equ	0xFDD
  7799                           fsr2h	equ	0xFDA
  7800                           fsr2l	equ	0xFD9
  7801                           status	equ	0xFD8
  7802                           
  7803 ;; *************** function _Lcd_Port *****************
  7804 ;; Defined at:
  7805 ;;		line 28 in file "lcd.h"
  7806 ;; Parameters:    Size  Location     Type
  7807 ;;  a               1    0[COMRAM] unsigned char 
  7808 ;; Auto vars:     Size  Location     Type
  7809 ;;		None
  7810 ;; Return value:  Size  Location     Type
  7811 ;;		None               void
  7812 ;; Registers used:
  7813 ;;		None
  7814 ;; Tracked objects:
  7815 ;;		On entry : 0/0
  7816 ;;		On exit  : 0/0
  7817 ;;		Unchanged: 0/0
  7818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7819 ;;      Params:         1       0       0       0       0       0       0       0       0
  7820 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7821 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7822 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7823 ;;Total ram usage:        1 bytes
  7824 ;; Hardware stack levels used:    1
  7825 ;; This function calls:
  7826 ;;		Nothing
  7827 ;; This function is called by:
  7828 ;;		_Lcd_Cmd
  7829 ;;		_lcd_init
  7830 ;;		_lcd_write_char
  7831 ;; This function uses a non-reentrant model
  7832 ;;
  7833                           
  7834                           	psect	text37
  7835  002BDE                     __ptext37:
  7836                           	opt stack 0
  7837  002BDE                     _Lcd_Port:
  7838                           	opt stack 28
  7839                           
  7840                           ;lcd.h: 29: if(a & 1)
  7841                           
  7842                           ;incstack = 0
  7843                           ;incstack = 0
  7844  002BDE  A001               	btfss	Lcd_Port@a,0,c
  7845  002BE0  D002               	goto	l65
  7846                           
  7847                           ;lcd.h: 30: RD4 = 1;
  7848  002BE2  8883               	bsf	3971,4,c	;volatile
  7849  002BE4  D001               	goto	l66
  7850  002BE6                     l65:
  7851                           
  7852                           ;lcd.h: 31: else
  7853                           ;lcd.h: 32: RD4 = 0;
  7854  002BE6  9883               	bcf	3971,4,c	;volatile
  7855  002BE8                     l66:
  7856                           
  7857                           ;lcd.h: 34: if(a & 2)
  7858  002BE8  A201               	btfss	Lcd_Port@a,1,c
  7859  002BEA  D002               	goto	l67
  7860                           
  7861                           ;lcd.h: 35: RD5 = 1;
  7862  002BEC  8A83               	bsf	3971,5,c	;volatile
  7863  002BEE  D001               	goto	l68
  7864  002BF0                     l67:
  7865                           
  7866                           ;lcd.h: 36: else
  7867                           ;lcd.h: 37: RD5 = 0;
  7868  002BF0  9A83               	bcf	3971,5,c	;volatile
  7869  002BF2                     l68:
  7870                           
  7871                           ;lcd.h: 39: if(a & 4)
  7872  002BF2  A401               	btfss	Lcd_Port@a,2,c
  7873  002BF4  D002               	goto	l69
  7874                           
  7875                           ;lcd.h: 40: RD6 = 1;
  7876  002BF6  8C83               	bsf	3971,6,c	;volatile
  7877  002BF8  D001               	goto	l70
  7878  002BFA                     l69:
  7879                           
  7880                           ;lcd.h: 41: else
  7881                           ;lcd.h: 42: RD6 = 0;
  7882  002BFA  9C83               	bcf	3971,6,c	;volatile
  7883  002BFC                     l70:
  7884                           
  7885                           ;lcd.h: 44: if(a & 8)
  7886  002BFC  A601               	btfss	Lcd_Port@a,3,c
  7887  002BFE  D002               	goto	l71
  7888                           
  7889                           ;lcd.h: 45: RD7 = 1;
  7890  002C00  8E83               	bsf	3971,7,c	;volatile
  7891  002C02  D001               	goto	l73
  7892  002C04                     l71:
  7893                           
  7894                           ;lcd.h: 46: else
  7895                           ;lcd.h: 47: RD7 = 0;
  7896  002C04  9E83               	bcf	3971,7,c	;volatile
  7897  002C06                     l73:
  7898  002C06  0012               	return	
  7899  002C08                     __end_of_Lcd_Port:
  7900                           	opt stack 0
  7901                           tblptru	equ	0xFF8
  7902                           tblptrh	equ	0xFF7
  7903                           tblptrl	equ	0xFF6
  7904                           tablat	equ	0xFF5
  7905                           prodh	equ	0xFF4
  7906                           prodl	equ	0xFF3
  7907                           postinc0	equ	0xFEE
  7908                           wreg	equ	0xFE8
  7909                           indf2	equ	0xFDF
  7910                           postinc2	equ	0xFDE
  7911                           postdec2	equ	0xFDD
  7912                           fsr2h	equ	0xFDA
  7913                           fsr2l	equ	0xFD9
  7914                           status	equ	0xFD8
  7915                           tblptru	equ	0xFF8
  7916                           tblptrh	equ	0xFF7
  7917                           tblptrl	equ	0xFF6
  7918                           tablat	equ	0xFF5
  7919                           prodh	equ	0xFF4
  7920                           prodl	equ	0xFF3
  7921                           postinc0	equ	0xFEE
  7922                           wreg	equ	0xFE8
  7923                           indf2	equ	0xFDF
  7924                           postinc2	equ	0xFDE
  7925                           postdec2	equ	0xFDD
  7926                           fsr2h	equ	0xFDA
  7927                           fsr2l	equ	0xFD9
  7928                           status	equ	0xFD8
  7929                           
  7930                           	psect	rparam
  7931  0000                     tblptru	equ	0xFF8
  7932                           tblptrh	equ	0xFF7
  7933                           tblptrl	equ	0xFF6
  7934                           tablat	equ	0xFF5
  7935                           prodh	equ	0xFF4
  7936                           prodl	equ	0xFF3
  7937                           postinc0	equ	0xFEE
  7938                           wreg	equ	0xFE8
  7939                           indf2	equ	0xFDF
  7940                           postinc2	equ	0xFDE
  7941                           postdec2	equ	0xFDD
  7942                           fsr2h	equ	0xFDA
  7943                           fsr2l	equ	0xFD9
  7944                           status	equ	0xFD8


Data Sizes:
    Strings     28
    Constant    118
    Data        0
    BSS         32
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     94      94
    BANK0           160     33      65
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ?___ftsub	float  size(2) Largest target is 0

    ?___ftadd	float  size(2) Largest target is 0

    ?___ftpack	float  size(2) Largest target is 0

    ?___llmod	unsigned long  size(2) Largest target is 0

    ?___lwmod	unsigned int  size(2) Largest target is 0

    ?___lldiv	unsigned long  size(2) Largest target is 0

    ?___asftsub	float  size(2) Largest target is 0

    ?___lltoft	float  size(2) Largest target is 0

    ?__tdiv_to_l_	unsigned long  size(2) Largest target is 0

    ?__div_to_l_	unsigned long  size(2) Largest target is 0

    ?___fttol	long  size(2) Largest target is 0

    ?___asftadd	float  size(2) Largest target is 0

    ?___asftmul	float  size(2) Largest target is 0

    ?___ftneg	float  size(2) Largest target is 0

    ?_scale	float  size(2) Largest target is 0

    ?_fround	float  size(2) Largest target is 0

    ?___awdiv	int  size(2) Largest target is 0

    ?___wmul	unsigned int  size(2) Largest target is 0

    ?___awmod	int  size(2) Largest target is 0

    ?_Read_LDR	float  size(2) Largest target is 0

    ?___ftdiv	float  size(2) Largest target is 0

    ?___ftmul	float  size(2) Largest target is 0

    ?___awtoft	float  size(2) Largest target is 0

    ?_Obtener_Distancia	unsigned int  size(2) Largest target is 0

    ?___lwdiv	unsigned int  size(2) Largest target is 0

    __asftsub@f1p	PTR float  size(2) Largest target is 3
		 -> sprintf@fval(BANK0[3]), 

    __asftmul@f1p	PTR float  size(2) Largest target is 3
		 -> sprintf@integ(BANK0[3]), 

    __asftadd@f1p	PTR float  size(2) Largest target is 3
		 -> sprintf@fval(BANK0[3]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_2(CODE[18]), STR_1(CODE[10]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 32
		 -> LCD_Buffer(BANK0[32]), 

    ?_sprintf	int  size(2) Largest target is 0

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    S507$_cp	PTR const unsigned char  size(2) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 0

    lcd_putc@a	PTR unsigned char  size(2) Largest target is 32
		 -> LCD_Buffer(BANK0[32]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->___asftadd
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->___wmul
    ___asftsub->___ftsub
    ___ftsub->___ftadd
    ___asftmul->___ftmul
    ___asftadd->_fround
    ___ftadd->___ftpack
    _scale->___ftmul
    ___wmul->___awdiv
    ___awdiv->___awmod
    _fround->___ftmul
    _Read_LDR->___ftdiv
    ___awtoft->___ftpack
    ___ftmul->___fttol
    ___ftdiv->___ftmul
    _Obtener_Distancia->___lwdiv
    _lcd_putc->_lcd_write_char
    _lcd_write_char->_Lcd_Port
    _lcd_init->_Lcd_Cmd
    _lcd_gotoxy->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0   14717
                                             87 COMRAM     7     7      0
                         _lcd_gotoxy
                           _lcd_init
                           _lcd_putc
            _Configuracion_Registros
                        _Timer1_Init
                            _Init_AD
                  _Obtener_Distancia
                           _Read_LDR
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             50    43      7   12176
                                             74 COMRAM    13     6      7
                                              0 BANK0     33    33      0
                             _fround
                              _scale
                            _isdigit
                        __tdiv_to_l_
                         __div_to_l_
                          ___asftadd
                          ___asftmul
                            ___ftmul
                          ___asftsub
                            ___awdiv
                             ___ftge
                            ___ftneg
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     159
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4     278
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                             10     2      8     159
                                             14 COMRAM    10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     162
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     252
                                             22 COMRAM    15    11      4
                           ___ftpack (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3      45
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     136
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (2) ___asftsub                                            5     0      5    1160
                                             28 COMRAM     5     0      5
                            ___ftsub
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    1094
                                             22 COMRAM     6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (2) ___asftmul                                            5     0      5     601
                                             54 COMRAM     5     0      5
                            ___ftmul
 ---------------------------------------------------------------------------------
 (2) ___asftadd                                            5     0      5    1115
                                             69 COMRAM     5     0      5
                             _fround (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             14     8      6    1049
                                              8 COMRAM    14     8      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          13     7      6     446
                                              0 COMRAM    13     7      6
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         17    11      6     303
                                              0 COMRAM    17    11      6
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     2      1      68
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (2) _scale                                               15    12      3    1779
                                             54 COMRAM    12     9      3
                            ___ftmul
                            ___awdiv
                            ___awmod
                            ___fttol (ARG)
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     159
                                             16 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     296
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     300
                                              7 COMRAM     9     5      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _fround                                              18    15      3    1581
                                             54 COMRAM    15    12      3
                            ___ftmul
                            ___awdiv
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Read_LDR                                            10     7      3    1371
                                             71 COMRAM    10     7      3
                            ___ftdiv
                            ___ftmul
                           ___awtoft
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             5     2      3     300
                                              8 COMRAM     5     2      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             17    11      6     535
                                             37 COMRAM    17    11      6
                           ___ftpack
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___fttol (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5     209
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             17    11      6     489
                                             54 COMRAM    17    11      6
                           ___ftpack
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Obtener_Distancia                                    8     6      2     278
                                              8 COMRAM     8     6      2
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     162
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _Init_AD                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer1_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Configuracion_Registros                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcd_putc                                             4     2      2     268
                                              4 COMRAM     4     2      2
                     _lcd_write_char
 ---------------------------------------------------------------------------------
 (2) _lcd_write_char                                       3     2      1     178
                                              1 COMRAM     3     2      1
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0     198
                                              3 COMRAM     1     1      0
                           _Lcd_Port
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _lcd_gotoxy                                           5     3      2     380
                                              3 COMRAM     5     3      2
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     1      1     110
                                              1 COMRAM     2     1      1
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     0      1      88
                                              0 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcd_gotoxy
     _Lcd_Cmd
       _Lcd_Port
   _lcd_init
     _Lcd_Port
     _Lcd_Cmd
       _Lcd_Port
   _lcd_putc
     _lcd_write_char
       _Lcd_Port
   _Configuracion_Registros
   _Timer1_Init
   _Init_AD
   _Obtener_Distancia
     ___lwdiv
   _Read_LDR
     ___ftdiv
       ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___fttol (ARG)
           ___ftpack (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftmul
       ___ftpack
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___fttol (ARG)
         ___ftpack (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___awtoft
       ___ftpack
   _sprintf
     _fround
       ___ftmul
         ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___fttol (ARG)
           ___ftpack (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _scale
       ___ftmul
         ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___fttol (ARG)
           ___ftpack (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___fttol (ARG)
         ___ftpack (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     __tdiv_to_l_
     __div_to_l_
     ___asftadd
       _fround (ARG)
         ___ftmul
           ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fttol (ARG)
             ___ftpack (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftadd (ARG)
         ___ftpack
     ___asftmul
       ___ftmul
         ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___fttol (ARG)
           ___ftpack (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftmul
       ___ftpack
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___fttol (ARG)
         ___ftpack (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___asftsub
       ___ftsub
         ___ftadd
           ___ftpack
       ___lltoft (ARG)
         ___ftpack
     ___awdiv
       ___awmod (ARG)
     ___ftge
     ___ftneg
     ___fttol
       ___ftpack (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___lwmod
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     21      41       5       40.6%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5E      5E       1       98.9%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       5       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      9F      20        0.0%
DATA                 0      0      A4       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.20 build 52243 
Symbol Table                                                                                   Sun Jun 05 23:06:10 2022

                    ___asftadd@f2 0048                     ___asftadd@f1p 0046  
                              l70 2BFC         __end_of_Obtener_Distancia 27CA  
                              l71 2C04                                l73 2C06  
                              l65 2BE6                                l66 2BE8  
                              l67 2BF0                                l68 2BF2  
                              l69 2BFA                                l85 29BE  
                              _GO 007E11                      ___awdiv@sign 000E  
             ___wmul@multiplicand 0013                       __CFG_BORV$3 000000  
                    ___asftmul@f2 0039                      __CFG_CP0$OFF 000000  
                    ___asftsub@f2 001F                      __CFG_CP1$OFF 000000  
                    __CFG_CP2$OFF 000000                      __CFG_CP3$OFF 000000  
                    ___ftadd@exp1 0016                      ___ftadd@exp2 0015  
                    ___ftadd@sign 0014                               l120 2758  
                             l123 275E                               l127 27B0  
                             l136 23BE                               l166 1970  
                             l238 0FF0                               l623 1C5A  
                             l624 1DBC                               l545 21E0  
                             l554 21D0                               l547 214C  
                             l627 1C84                               l707 22C0  
                             l820 2960                               l638 1D28  
                             l830 29FC                               l655 20EC  
                             l663 1EDE                               l647 1D44  
                             l751 273A                               l672 1ECE  
                             l657 2096                               l681 2634  
                             l761 289E                               l658 20BC  
                             l586 24EC                               l666 1E7C  
                             l687 1FEE                               l697 2C20  
                    __CFG_CPB$OFF 000000                               _RD2 007C1A  
                             _RD3 007C1B                               _RD4 007C1C  
                             _RD5 007C1D                               _RD6 007C1E  
                             _RD7 007C1F                      __CFG_CPD$OFF 000000  
                    __CFG_BOR$OFF 000000                      ___awmod@sign 0007  
                             wreg 000FE8                      __CFG_FOSC$HS 000000  
                   ___asftmul@f1p 0037                       _sprintf$518 0063  
                   main@Distancia 005D                     ___asftsub@f1p 001D  
                     lcd_gotoxy@a 0004                       lcd_gotoxy@b 0005  
                     lcd_gotoxy@y 0007                       lcd_gotoxy@z 0006  
                    __CFG_LVP$OFF 000000                      ___ftdiv@cntr 0042  
                    ___ftdiv@sign 0047                      __CFG_WDT$OFF 000000  
                            l4022 2BCA                              l4102 187A  
                            l4200 09B2                              l4018 2BB2  
                            l3410 2C4A                              l4210 0A1C  
                            l4052 1BA6                              l4044 1ACE  
                            l4108 1942                              l3420 1DEA  
                            l4204 09EE                              l3502 217C  
                            l4126 220E                              l4222 0A7A  
                            l4214 0A24                              l4206 0A06  
                            l3440 1E54                              l3512 2198  
                            l3600 25D6                              l4144 2262  
                            l4320 0E90                              l4312 0E60  
                            l4232 0AE4                              l4216 0A58  
                            l3530 2446                              l4090 1728  
                            l3426 1E16                              l3522 21C0  
                            l3610 2632                              l4162 22B0  
                            l4154 228A                              l4084 166C  
                            l3460 1EA6                              l3524 21CC  
                            l3516 21A8                              l3604 2606  
                            l4156 2296                              l4148 2272  
                            l4412 1204                              l4316 0E86  
                            l4308 0E0E                              l4260 0C28  
                            l4180 08F0                              l3542 2492  
                            l3534 2454                              l4094 1736  
                            l4158 229A                              l4430 128A  
                            l4406 11E0                              l4342 0F16  
                            l4350 0F90                              l4326 0EAA  
                            l4334 0EDA                              l4174 08C8  
                            l3544 24B0                              l3536 245E  
                            l3456 1E96                              l3624 26EC  
                            l4440 12F8                              l4352 0FA0  
                            l4328 0EC0                              l4272 0CB8  
                            l4264 0C60                              l4256 0C00  
                            l4248 0B9E                              l4176 08E6  
                            l4168 08A6                              l3650 293A  
                            l3802 201C                              l3546 24BA  
                            l3538 247C                              l3466 1EBE  
                            l3482 2106                              l3626 26F8  
                            l4434 12C6                              l4426 125E  
                            l4186 0926                              l4194 0986  
                            l4506 22D2                              l3716 27A0  
                            l3580 2810                              l3572 27F2  
                            l3468 1ECA                              l3476 20FA  
                            l3740 1C92                              l3636 272C  
                            l3628 26FC                              l4452 138E  
                            l4372 1028                              l4364 0FF4  
                            l4276 0CDE                              l3646 292E  
                            l3910 2684                              l3902 2662  
                            l3734 1C68                              l3670 29DE  
                            l4462 13D0                              l4470 13F8  
                            l4454 139C                              l4446 133E  
                            l4358 0FBA                              l4294 0DB4  
                            l3648 2936                              l3808 2054  
                            l3920 26A4                              l3912 2688  
                            l3592 283C                              l3584 2824  
                            l3576 2804                              l3568 27E6  
                            l4472 1404                              l4448 134C  
                            l4376 107A                              l4288 0D56  
                            l3658 2956                              l3578 280C  
                            l3762 1CE2                              l3674 29F2  
                            l3666 29D2                              l4490 14E2  
                            l4394 116E                              l4386 1144  
                            l3852 1F44                              l3940 2A22  
                            l3908 267C                              l3924 26AE  
                            l3588 282E                              l3764 1CEC  
                            l3756 1CC4                              l3668 29DA  
                            l4484 1452                              l4388 1154  
                            l4396 117C                              l4492 14F8  
                            l3870 1F8A                              l3846 1F0C  
                            l3782 1D60                              l3774 1D18  
                            l3766 1CF4                              l3950 2868  
                            l4478 1428                              l4494 1514  
                            l3880 1FB6                              l3928 26BC  
                            l3792 1D98                              l3776 1D22  
                            l3768 1CFA                              l3952 286C  
                            l3866 1F7A                              l3962 28BA  
                            l3876 1FA6                              l3956 2890  
                            l3948 285C                              l3964 28C6  
                            l3896 2652                              l3978 2994  
                            _ADON 007E10                              STR_1 0888  
                            STR_2 0876                              u2250 1C10  
                            u2260 1C36                              u2510 1EFE  
                            u2255 1C08                              u2265 1C2E  
                            u2530 1F2A                              u1810 1E08  
                            u2515 1EF6                              u2460 200E  
                            u2540 1F36                              u2535 1F22  
                            u1815 1E00                              u2480 203A  
                            u2465 2006                              u2490 2046  
                            u2714 239C                              u1930 21AE  
                            u2810 2200                              u3507 253C  
                            u2715 2398                              u2724 23B4  
                            u1860 1EAC                              u3517 2C64  
                            u2485 2032                              u2725 23B0  
                            u1790 1DDC                              u2830 222C  
                            u2815 21F8                              u3457 2750  
                            u3467 2B54                              u1795 1DD4  
                            u2835 2224                              u2860 2278  
                            u3477 2B68                              u3487 2504  
                            u3497 2520                              u2980 0B34  
                            u2965 0ABC                              u2985 0B2A  
                            _TMR1 000FCE                   lcd_write_char@a 0002  
                 lcd_write_char@y 0004            __end_of_lcd_write_char 2B72  
      Obtener_Distancia@Distancia 000D                              _main 22C2  
                    ___ftpack@arg 0001                      ___ftpack@exp 0004  
                            fsr2h 000FDA                              indf2 000FDF  
                            fsr2l 000FD9                              prodh 000FF4  
                            prodl 000FF3                              start 0000  
                   __CFG_IESO$OFF 000000                      _sprintf$1131 0060  
                 __end_of_Lcd_Cmd 2C72                     __CFG_MCLRE$ON 000000  
                    ___ftmul@cntr 0035                      ___ftmul@sign 0036  
                 __end_of_Init_AD 2C9C                      ___fttol@exp1 0025  
                    ___fttol@lval 0021                     __CFG_PLLDIV$1 000000  
                  __CFG_CCP2MX$ON 000000                             ?_main 0001  
                 __end_of___awdiv 26C6                   __end_of___ftadd 1DBE  
                 __end_of___awmod 2846                   __end_of___ftdiv 20EE  
                 __end_of___ftneg 2C2E                   __end_of___lldiv 274C  
                 __end_of___ftmul 1FF0                   ___awdiv@divisor 000A  
                 __end_of___llmod 28B0                   __end_of___ftsub 2BA8  
                 __end_of___fttol 22C2                   __end_of___lwdiv 296A  
                 __end_of___lwmod 2A06                   ___awdiv@counter 000D  
                   __CFG_USBDIV$1 000000                             _TRISA 000F92  
                           _TRISB 000F93                             _TRISD 000F95  
                   __CFG_PWRT$OFF 000000                     __CFG_WRT0$OFF 000000  
                   __CFG_WRT1$OFF 000000                     __CFG_WRT2$OFF 000000  
                   __CFG_WRT3$OFF 000000                      ___lltoft@exp 0011  
                  __CFG_EBTR0$OFF 000000                    __CFG_FCMEN$OFF 000000  
                  __CFG_EBTR1$OFF 000000                    __CFG_EBTR2$OFF 000000  
                  __CFG_EBTR3$OFF 000000                     __CFG_WRTB$OFF 000000  
                   __CFG_WRTC$OFF 000000                     __CFG_WRTD$OFF 000000  
                  __CFG_EBTRB$OFF 000000                     ___awtoft@sign 000D  
                 __end_of_dpowers 0828                             _scale 1522  
                 __end_of_isdigit 2C52                     ___ftpack@sign 0005  
                           tablat 000FF5                   ?_lcd_write_char 0002  
                           status 000FD8                   __end_of_sprintf 1522  
                  __CFG_ICPRT$OFF 000000                    __CFG_PBADEN$ON 000000  
                __end_of_Lcd_Port 2C08                   __initialization 2C72  
                    __end_of_main 237C                  __end_of_Read_LDR 2436  
      __size_of_Obtener_Distancia 007E                            ??_main 0058  
                   ___fttol@sign1 0020                     __activetblptr 000002  
            __size_of__tdiv_to_l_ 0122                            _ADCON0 000FC2  
                          _ADCON1 000FC1                            _ADCON2 000FC0  
                ___llmod@dividend 000F                            ?_scale 0037  
                          _ADRESH 000FC4                            _ADRESL 000FC3  
                ___awdiv@dividend 0008                  __end_of___awtoft 2A4A  
                __end_of___ftpack 24EE                  __end_of___lltoft 2914  
                       ??_Lcd_Cmd 0003                            _TMR1ON 007E68  
                          _TRISA0 007C90                         ??_Init_AD 0001  
                   ??_Timer1_Init 0001                    __CFG_XINST$OFF 000000  
                __end_of__powers_ 0876                  __end_of_lcd_init 25A6  
                __end_of_lcd_putc 2BDE                            ___ftge 25A6  
                          ___wmul 2AFE                         ??___awdiv 000C  
                       ??___ftadd 000F                    __CFG_STVREN$ON 000000  
                       ??___awmod 0005                         ??___ftdiv 003D  
                       ??___ftneg 0004                         ??___lldiv 0009  
                       ??___ftmul 002C                         ??___llmod 0017  
                       ??___ftsub 001D                         ??___fttol 001B  
                       ??___lwdiv 0005                         ??___lwmod 0005  
                          _fround 1972                            clear_0 2C78  
                ___awdiv@quotient 000F                   ___awmod@divisor 0003  
                 ___awmod@counter 0006             ___ftmul@f3_as_product 0032  
                       ??_isdigit 0002                      __mediumconst 0000  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8                         ??_sprintf 0052  
              __size_of___asftadd 003C                __size_of___asftmul 003C  
              __size_of___asftsub 003C          ?_Configuracion_Registros 0001  
                      __accesstop 0060           __end_of__initialization 2C7E  
                      ___ftadd@f1 0009                        ___ftadd@f2 000C  
                      ___ftge@ff1 0001                        ___ftge@ff2 0004  
                      ___ftdiv@f1 0037                        ___ftdiv@f2 003A  
                      ___ftdiv@f3 0043                        ___ftneg@f1 0001  
                      ___awtoft@c 0009                        ___ftmul@f1 0026  
                      ___ftmul@f2 0029                        ___ftsub@f1 0017  
                      ___ftsub@f2 001A                        ___fttol@f1 0017  
                  __pcstackCOMRAM 0001                        ___lltoft@c 0009  
                   __end_of_scale 1972               __end_of_Timer1_Init 2CB0  
          Read_LDR@analog_reading 004F                    lcd_gotoxy@temp 0008  
                      __div_to_l_ 20EE                         ?_Lcd_Port 0001  
                 __div_to_l_@exp1 000D                   __div_to_l_@cntr 000C  
                    sprintf@integ 006D                           ??_scale 003A  
                 __div_to_l_@quot 0008                      sprintf@width 0079  
                      __pbssBANK0 0081                         ?_Read_LDR 0048  
                   __div_to_l_@f1 0001                     __div_to_l_@f2 0004  
                         ?___ftge 0001                           ?___wmul 0011  
               __end_of___asftadd 2AFE                           ?_fround 0037  
               __end_of___asftmul 2AC2                 __end_of___asftsub 2A86  
                       ?___awtoft 0009                         ?___ftpack 0001  
                       ?___lltoft 0009                        _lcd_gotoxy 296A  
 __end_of_Configuracion_Registros 2CC2                  ??_lcd_write_char 0003  
                      ??_Lcd_Port 0002                         ?_lcd_init 0001  
                       ?_lcd_putc 0005                        ??_Read_LDR 004B  
                 __CFG_VREGEN$OFF 000000                lcd_write_char@temp 0003  
                         _Lcd_Cmd 2C52                           _Init_AD 2C88  
               __end_of__npowers_ 084F                           __Hparam 0000  
                      _scale$1130 0040                       _Timer1_Init 2C9C  
                         __Lparam 0000                   __size_of___ftge 0090  
                         ___awdiv 2636                           ___ftadd 1BF2  
                         ___awmod 27CA                           ___ftdiv 1FF0  
                         ___ftneg 2C08                           ___lldiv 26C6  
                 __size_of___wmul 003A                           ___ftmul 1EE0  
                         ___llmod 2846                           ___ftsub 2B72  
                         ___fttol 21E2                           ___lwdiv 2914  
                         ___lwmod 29C0                      __psmallconst 0800  
                         __pcinit 2C72                        ??___awtoft 000C  
                      ??___ftpack 0006                   __size_of_fround 0280  
                         __ramtop 0800                        ??___lltoft 000D  
                         __ptext0 22C2                           __ptext1 0894  
                         __ptext2 29C0                           __ptext3 28B0  
                         __ptext4 2846                           __ptext5 26C6  
                         __ptext6 21E2                           __ptext7 2C08  
                         __ptext8 25A6                           __ptext9 2A4A  
                       _T1CONbits 000FCD                       ?__div_to_l_ 0001  
                         _dpowers 0800                           _isdigit 2C2E  
                ___awmod@dividend 0001                           _sprintf 0894  
                      ??_lcd_init 0004                        ??_lcd_putc 0007  
            end_of_initialization 2C7E                     __Lmediumconst 0000  
                 ___lldiv@divisor 0005                   ___lldiv@counter 000E  
                         postdec2 000FDD                           postinc0 000FEE  
                         postinc2 000FDE                         Lcd_Port@a 0001  
                  __tdiv_to_l_@f1 0001                    __tdiv_to_l_@f2 0004  
                   ??__tdiv_to_l_ 0007                         _PORTAbits 000F80  
                     ?_lcd_gotoxy 0004                       ___ftdiv@exp 0046  
             __size_of__div_to_l_ 00F4         Obtener_Distancia@Duracion 000F  
                     ___ftmul@exp 0031  __size_of_Configuracion_Registros 0012  
                  __end_of___ftge 2636                    __end_of___wmul 2B38  
                  __end_of_fround 1BF2               start_initialization 2C72  
             __end_of__tdiv_to_l_ 1EE0                 __size_of_Lcd_Port 002A  
                 ___llmod@divisor 0013                   ___llmod@counter 0018  
               __size_of_Read_LDR 00BA                          ??___ftge 0007  
             __size_of_lcd_gotoxy 0056                          ??___wmul 0015  
                   sprintf@vd_520 0069                  __CFG_LPT1OSC$OFF 000000  
                        ??_fround 003A                        fround@prec 0037  
               __size_of___awtoft 0044                 __size_of___ftpack 00B8  
                       ___asftadd 2AC2                         ___asftmul 2A86  
                       ___asftsub 2A4A                 __size_of___lltoft 0064  
                   __pcstackBANK0 0060               __end_of__stringdata 0892  
                        ?_Lcd_Cmd 0002                 __size_of_lcd_init 00B8  
                     sprintf@_val 0070                       sprintf@flag 0075  
               __size_of_lcd_putc 0036                       sprintf@fval 007B  
                     sprintf@prec 007E                          ?_Init_AD 0001  
                    ?_Timer1_Init 0001                  ___lwdiv@dividend 0001  
                        ?___awdiv 0008                          ?___ftadd 0009  
                        ?___awmod 0001                          ?___ftdiv 0037  
                        ?___ftneg 0001                          ?___lldiv 0001  
                        ?___ftmul 0026                          ?___llmod 000F  
                        ?___ftsub 0017                         __npowers_ 0828  
                        ?___fttol 0017                          ?___lwdiv 0001  
                        ?___lwmod 0001                       __tdiv_to_l_ 1DBE  
                    ??__div_to_l_ 0007                       __smallconst 0800  
                      ?___asftadd 0046                          ?_isdigit 0001  
                      ?___asftmul 0037                        ?___asftsub 001D  
                ___lwdiv@quotient 0006                          ?_sprintf 004B  
                  __size_of_scale 0450                    ___wmul@product 0015  
                        _LATAbits 000F89                          Lcd_Cmd@a 0002  
              __end_of__div_to_l_ 21E2                  __CFG_WDTPS$32768 000000  
         _Configuracion_Registros 2CB0                        _ADCON0bits 000FC2  
                      _ADCON1bits 000FC1                       __stringdata 0876  
               ___wmul@multiplier 0011                         lcd_putc@a 0005  
                       lcd_putc@i 0007                      ??_lcd_gotoxy 0006  
                        _Lcd_Port 2BDE                          _Read_LDR 237C  
                __size_of_Lcd_Cmd 0020           __size_of_lcd_write_char 003A  
                __size_of_Init_AD 0014                          __Hrparam 0000  
                        __Lrparam 0000                __end_of_lcd_gotoxy 29C0  
                __size_of___awdiv 0090                  __size_of___ftadd 01CC  
                __size_of___awmod 007C                  __size_of___ftdiv 00FE  
                __size_of___ftneg 0026                  __size_of___lldiv 0086  
                __size_of___ftmul 0110                  __size_of___llmod 006A  
                __size_of___ftsub 0036                  __size_of___fttol 00E0  
                __size_of___lwdiv 0056                  __size_of___lwmod 0046  
                        ___awtoft 2A06                          ___ftpack 2436  
                     _fround$1128 0043                       _fround$1129 0040  
                        ___lltoft 28B0                       _isdigit$793 0003  
                     ??___asftadd 004B                        sprintf@exp 0077  
                     ??___asftmul 003C                       ??___asftsub 0022  
                __size_of_isdigit 0024                   ___lwdiv@divisor 0003  
                 ___lwdiv@counter 0008                          __ptext10 2B72  
                        __ptext11 2A86                          __ptext20 2636  
                        __ptext12 2AC2                          __ptext21 1972  
                        __ptext13 1BF2                          __ptext30 2C9C  
                        __ptext22 237C                          __ptext14 20EE  
                        __ptext31 2CB0                          __ptext23 2A06  
                        __ptext15 1DBE                          __ptext32 2BA8  
                        __ptext24 1EE0                          __ptext16 2C2E  
                        __ptext33 2B38                          __ptext25 2436  
                        __ptext17 1522                          __ptext34 24EE  
                        __ptext26 1FF0                          __ptext18 2AFE  
                        __ptext35 296A                          __ptext27 274C  
                        __ptext19 27CA                          __ptext36 2C52  
                        __ptext28 2914                          __ptext37 2BDE  
                        __ptext29 2C88                          __powers_ 084F  
                        _lcd_init 24EE                          _lcd_putc 2BA8  
                __size_of_sprintf 0C8E                     __size_of_main 00BA  
       ??_Configuracion_Registros 0001                        _LCD_Buffer 0081  
            __size_of_Timer1_Init 0014             __CFG_CPUDIV$OSC1_PLL2 000000  
                        isdigit@c 0001                          scale@scl 0037  
                       sprintf@ap 006B                  __tdiv_to_l_@exp1 0011  
                       sprintf@vd 0067                         sprintf@sp 004B  
                __tdiv_to_l_@cntr 0010                  __tdiv_to_l_@quot 000C  
                ___lwmod@dividend 0001                  ___lldiv@dividend 0001  
                   main@LDR_value 005A                      ?__tdiv_to_l_ 0001  
               _Obtener_Distancia 274C                          sprintf@c 0080  
                        sprintf@f 004D                  ___lldiv@quotient 000A  
                 ___lwmod@divisor 0003                ?_Obtener_Distancia 0009  
                 ___lwmod@counter 0006               ??_Obtener_Distancia 000B  
        Obtener_Distancia@Timer_1 000B                    _lcd_write_char 2B38  
