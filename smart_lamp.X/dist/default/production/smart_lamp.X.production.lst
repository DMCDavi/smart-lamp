

Microchip Technology PIC18 LITE Macro Assembler V1.20 build 52243 
                                                                                               Fri Jun 03 22:54:46 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 52243
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    42                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    43  0000                     
    44                           	psect	smallconst
    45  000800                     __psmallconst:
    46                           	opt stack 0
    47  000800                     _dpowers:
    48                           	opt stack 0
    49  000800  0001               	dw	1
    50  000802  0000               	dw	0
    51  000804  000A               	dw	10
    52  000806  0000               	dw	0
    53  000808  0064               	dw	100
    54  00080A  0000               	dw	0
    55  00080C  03E8               	dw	1000
    56  00080E  0000               	dw	0
    57  000810  2710               	dw	10000
    58  000812  0000               	dw	0
    59  000814  86A0               	dw	34464
    60  000816  0001               	dw	1
    61  000818  4240               	dw	16960
    62  00081A  000F               	dw	15
    63  00081C  9680               	dw	38528
    64  00081E  0098               	dw	152
    65  000820  E100               	dw	57600
    66  000822  05F5               	dw	1525
    67  000824  CA00               	dw	51712
    68  000826  3B9A               	dw	15258
    69  000828                     __end_of_dpowers:
    70                           	opt stack 0
    71  000828                     __npowers_:
    72                           	opt stack 0
    73  000828  00                 	db	0
    74  000829  80                 	db	128
    75  00082A  3F                 	db	63
    76  00082B  CD                 	db	205
    77  00082C  CC                 	db	204
    78  00082D  3D                 	db	61
    79  00082E  D7                 	db	215
    80  00082F  23                 	db	35
    81  000830  3C                 	db	60
    82  000831  12                 	db	18
    83  000832  83                 	db	131
    84  000833  3A                 	db	58
    85  000834  B7                 	db	183
    86  000835  D1                 	db	209
    87  000836  38                 	db	56
    88  000837  C6                 	db	198
    89  000838  27                 	db	39
    90  000839  37                 	db	55
    91  00083A  38                 	db	56
    92  00083B  86                 	db	134
    93  00083C  35                 	db	53
    94  00083D  C0                 	db	192
    95  00083E  D6                 	db	214
    96  00083F  33                 	db	51
    97  000840  CC                 	db	204
    98  000841  2B                 	db	43
    99  000842  32                 	db	50
   100  000843  70                 	db	112
   101  000844  89                 	db	137
   102  000845  30                 	db	48
   103  000846  E7                 	db	231
   104  000847  DB                 	db	219
   105  000848  2E                 	db	46
   106  000849  E5                 	db	229
   107  00084A  3C                 	db	60
   108  00084B  1E                 	db	30
   109  00084C  42                 	db	66
   110  00084D  A2                 	db	162
   111  00084E  0D                 	db	13
   112  00084F                     __end_of__npowers_:
   113                           	opt stack 0
   114  00084F                     __powers_:
   115                           	opt stack 0
   116  00084F  00                 	db	0
   117  000850  80                 	db	128
   118  000851  3F                 	db	63
   119  000852  00                 	db	0
   120  000853  20                 	db	32
   121  000854  41                 	db	65
   122  000855  00                 	db	0
   123  000856  C8                 	db	200
   124  000857  42                 	db	66
   125  000858  00                 	db	0
   126  000859  7A                 	db	122
   127  00085A  44                 	db	68
   128  00085B  40                 	db	64
   129  00085C  1C                 	db	28
   130  00085D  46                 	db	70
   131  00085E  50                 	db	80
   132  00085F  C3                 	db	195
   133  000860  47                 	db	71
   134  000861  24                 	db	36
   135  000862  74                 	db	116
   136  000863  49                 	db	73
   137  000864  97                 	db	151
   138  000865  18                 	db	24
   139  000866  4B                 	db	75
   140  000867  BC                 	db	188
   141  000868  BE                 	db	190
   142  000869  4C                 	db	76
   143  00086A  6B                 	db	107
   144  00086B  6E                 	db	110
   145  00086C  4E                 	db	78
   146  00086D  03                 	db	3
   147  00086E  15                 	db	21
   148  00086F  50                 	db	80
   149  000870  79                 	db	121
   150  000871  AD                 	db	173
   151  000872  60                 	db	96
   152  000873  F3                 	db	243
   153  000874  49                 	db	73
   154  000875  71                 	db	113
   155  000876                     __end_of__powers_:
   156                           	opt stack 0
   157  0000                     _ADCON0	set	4034
   158  0000                     _ADCON0bits	set	4034
   159  0000                     _ADCON1	set	4033
   160  0000                     _ADCON2	set	4032
   161  0000                     _ADRESH	set	4036
   162  0000                     _ADRESL	set	4035
   163  0000                     _LATB	set	3978
   164  0000                     _PORTD	set	3971
   165  0000                     _TRISB	set	3987
   166  0000                     _TRISC	set	3988
   167  0000                     _TRISD	set	3989
   168  0000                     _ADON	set	32272
   169  0000                     _GO	set	32273
   170  0000                     _GO_nDONE	set	32273
   171  0000                     _RC0	set	31760
   172  0000                     _RC1	set	31761
   173  0000                     _RC2	set	31762
   174  0000                     _TRISA0	set	31888
   175  000876                     __stringdata:
   176                           	opt stack 0
   177  000876                     STR_1:
   178                           
   179                           ; BSR set to: 0
   180  000876  25                 	db	37
   181  000877  66                 	db	102	;'f'
   182  000878  00                 	db	0
   183  000879                     __end_of__stringdata:
   184                           	opt stack 0
   185  000879  00                 	db	0	; dummy byte at the end
   186  0000                     
   187                           ; #config settings
   188                           
   189                           	psect	cinit
   190  002620                     __pcinit:
   191                           	opt stack 0
   192  002620                     start_initialization:
   193                           	opt stack 0
   194  002620                     __initialization:
   195                           	opt stack 0
   196                           
   197                           ; Clear objects allocated to BANK0 (3 bytes)
   198  002620  0100               	movlb	0
   199  002622  6B8B               	clrf	(__pbssBANK0+2)& (0+255),b
   200  002624  6B8A               	clrf	(__pbssBANK0+1)& (0+255),b
   201  002626  6B89               	clrf	__pbssBANK0& (0+255),b
   202                           
   203                           ; Clear objects allocated to COMRAM (2 bytes)
   204  002628  6A5D               	clrf	(__pbssCOMRAM+1)& (0+255),c
   205  00262A  6A5C               	clrf	__pbssCOMRAM& (0+255),c
   206  00262C                     end_of_initialization:
   207                           	opt stack 0
   208  00262C                     __end_of__initialization:
   209                           	opt stack 0
   210  00262C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   211  00262E  6EF8               	movwf	tblptru,c
   212  002630  0100               	movlb	0
   213  002632  EFE2  F009         	goto	_main	;jump to C main() function
   214                           tblptru	equ	0xFF8
   215                           
   216                           	psect	bssCOMRAM
   217  00005C                     __pbssCOMRAM:
   218                           	opt stack 0
   219  00005C                     _i:
   220                           	opt stack 0
   221  00005C                     	ds	2
   222                           tblptru	equ	0xFF8
   223                           
   224                           	psect	bssBANK0
   225  000089                     __pbssBANK0:
   226                           	opt stack 0
   227  000089                     _analog_reading:
   228                           	opt stack 0
   229  000089                     	ds	3
   230                           tblptru	equ	0xFF8
   231                           
   232                           	psect	cstackBANK0
   233  000060                     __pcstackBANK0:
   234                           	opt stack 0
   235  000060                     _sprintf$806:
   236                           	opt stack 0
   237                           
   238                           ; 3 bytes @ 0x0
   239  000060                     	ds	3
   240  000063                     _sprintf$204:
   241                           	opt stack 0
   242                           
   243                           ; 4 bytes @ 0x3
   244  000063                     	ds	4
   245  000067                     sprintf@ap:
   246                           	opt stack 0
   247                           
   248                           ; 2 bytes @ 0x7
   249  000067                     	ds	2
   250  000069                     sprintf@vd:
   251                           	opt stack 0
   252                           
   253                           ; 2 bytes @ 0x9
   254  000069                     	ds	2
   255  00006B                     sprintf@vd_206:
   256                           	opt stack 0
   257                           
   258                           ; 2 bytes @ 0xB
   259  00006B                     	ds	2
   260  00006D                     sprintf@flag:
   261                           	opt stack 0
   262                           
   263                           ; 2 bytes @ 0xD
   264  00006D                     	ds	2
   265  00006F                     sprintf@prec:
   266                           	opt stack 0
   267                           
   268                           ; 2 bytes @ 0xF
   269  00006F                     	ds	2
   270  000071                     sprintf@_val:
   271                           	opt stack 0
   272                           
   273                           ; 5 bytes @ 0x11
   274  000071                     	ds	5
   275  000076                     sprintf@integ:
   276                           	opt stack 0
   277                           
   278                           ; 3 bytes @ 0x16
   279  000076                     	ds	3
   280  000079                     sprintf@exp:
   281                           	opt stack 0
   282                           
   283                           ; 2 bytes @ 0x19
   284  000079                     	ds	2
   285  00007B                     sprintf@c:
   286                           	opt stack 0
   287                           
   288                           ; 1 bytes @ 0x1B
   289  00007B                     	ds	1
   290  00007C                     sprintf@fval:
   291                           	opt stack 0
   292                           
   293                           ; 3 bytes @ 0x1C
   294  00007C                     	ds	3
   295  00007F                     main@mystr:
   296                           	opt stack 0
   297                           
   298                           ; 10 bytes @ 0x1F
   299  00007F                     	ds	10
   300                           tblptru	equ	0xFF8
   301                           
   302                           	psect	cstackCOMRAM
   303  000001                     __pcstackCOMRAM:
   304                           	opt stack 0
   305  000001                     ?_cmd:
   306                           	opt stack 0
   307  000001                     ?_dat:
   308                           	opt stack 0
   309  000001                     ?___ftge:
   310                           	opt stack 0
   311  000001                     ?___awmod:
   312                           	opt stack 0
   313  000001                     ?___lwmod:
   314                           	opt stack 0
   315  000001                     ?___ftpack:
   316                           	opt stack 0
   317  000001                     ?___ftneg:
   318                           	opt stack 0
   319  000001                     ?__tdiv_to_l_:
   320                           	opt stack 0
   321  000001                     ?__div_to_l_:
   322                           	opt stack 0
   323  000001                     ?___lldiv:
   324                           	opt stack 0
   325  000001                     ?___llmod:
   326                           	opt stack 0
   327  000001                     cmd@a:
   328                           	opt stack 0
   329  000001                     dat@b:
   330                           	opt stack 0
   331  000001                     ___awmod@dividend:
   332                           	opt stack 0
   333  000001                     ___lwmod@dividend:
   334                           	opt stack 0
   335  000001                     __div_to_l_@f1:
   336                           	opt stack 0
   337  000001                     ___ftpack@arg:
   338                           	opt stack 0
   339  000001                     __tdiv_to_l_@f1:
   340                           	opt stack 0
   341  000001                     ___ftge@ff1:
   342                           	opt stack 0
   343  000001                     ___ftneg@f1:
   344                           	opt stack 0
   345  000001                     ___lldiv@dividend:
   346                           	opt stack 0
   347  000001                     ___llmod@dividend:
   348                           	opt stack 0
   349                           
   350                           ; 4 bytes @ 0x0
   351  000001                     	ds	1
   352  000002                     ??_lcd_int:
   353  000002                     ?_show:
   354                           	opt stack 0
   355  000002                     show@s:
   356                           	opt stack 0
   357                           
   358                           ; 2 bytes @ 0x1
   359  000002                     	ds	1
   360  000003                     ___awmod@divisor:
   361                           	opt stack 0
   362  000003                     ___lwmod@divisor:
   363                           	opt stack 0
   364                           
   365                           ; 2 bytes @ 0x2
   366  000003                     	ds	1
   367  000004                     ___ftpack@exp:
   368                           	opt stack 0
   369  000004                     __div_to_l_@f2:
   370                           	opt stack 0
   371  000004                     __tdiv_to_l_@f2:
   372                           	opt stack 0
   373  000004                     ___ftge@ff2:
   374                           	opt stack 0
   375                           
   376                           ; 3 bytes @ 0x3
   377  000004                     	ds	1
   378  000005                     ??___awmod:
   379  000005                     ??___lwmod:
   380  000005                     ___ftpack@sign:
   381                           	opt stack 0
   382  000005                     ___lldiv@divisor:
   383                           	opt stack 0
   384  000005                     ___llmod@divisor:
   385                           	opt stack 0
   386                           
   387                           ; 4 bytes @ 0x4
   388  000005                     	ds	1
   389  000006                     ??___ftpack:
   390  000006                     ___awmod@counter:
   391                           	opt stack 0
   392  000006                     ___lwmod@counter:
   393                           	opt stack 0
   394                           
   395                           ; 1 bytes @ 0x5
   396  000006                     	ds	1
   397  000007                     ??__tdiv_to_l_:
   398  000007                     ??__div_to_l_:
   399  000007                     ??___ftge:
   400  000007                     ___awmod@sign:
   401                           	opt stack 0
   402                           
   403                           ; 1 bytes @ 0x6
   404  000007                     	ds	1
   405  000008                     ?___awdiv:
   406                           	opt stack 0
   407  000008                     ___awdiv@dividend:
   408                           	opt stack 0
   409  000008                     __div_to_l_@quot:
   410                           	opt stack 0
   411                           
   412                           ; 4 bytes @ 0x7
   413  000008                     	ds	1
   414  000009                     ??___lldiv:
   415  000009                     ??___llmod:
   416  000009                     ?___ftadd:
   417                           	opt stack 0
   418  000009                     ?___ftdiv:
   419                           	opt stack 0
   420  000009                     ?___awtoft:
   421                           	opt stack 0
   422  000009                     ?___lltoft:
   423                           	opt stack 0
   424  000009                     ___awtoft@c:
   425                           	opt stack 0
   426  000009                     ___ftadd@f1:
   427                           	opt stack 0
   428  000009                     ___ftdiv@f1:
   429                           	opt stack 0
   430  000009                     ___lltoft@c:
   431                           	opt stack 0
   432                           
   433                           ; 4 bytes @ 0x8
   434  000009                     	ds	1
   435  00000A                     ___llmod@counter:
   436                           	opt stack 0
   437  00000A                     ___awdiv@divisor:
   438                           	opt stack 0
   439  00000A                     ___lldiv@quotient:
   440                           	opt stack 0
   441                           
   442                           ; 4 bytes @ 0x9
   443  00000A                     	ds	2
   444  00000C                     ??___awdiv:
   445  00000C                     ??___awtoft:
   446  00000C                     __div_to_l_@cntr:
   447                           	opt stack 0
   448  00000C                     ___ftadd@f2:
   449                           	opt stack 0
   450  00000C                     ___ftdiv@f2:
   451                           	opt stack 0
   452  00000C                     __tdiv_to_l_@quot:
   453                           	opt stack 0
   454                           
   455                           ; 4 bytes @ 0xB
   456  00000C                     	ds	1
   457  00000D                     ??___lltoft:
   458  00000D                     ___awdiv@counter:
   459                           	opt stack 0
   460  00000D                     ___awtoft@sign:
   461                           	opt stack 0
   462  00000D                     __div_to_l_@exp1:
   463                           	opt stack 0
   464                           
   465                           ; 1 bytes @ 0xC
   466  00000D                     	ds	1
   467  00000E                     ___awdiv@sign:
   468                           	opt stack 0
   469  00000E                     ___lldiv@counter:
   470                           	opt stack 0
   471                           
   472                           ; 1 bytes @ 0xD
   473  00000E                     	ds	1
   474  00000F                     ??___ftadd:
   475  00000F                     ??___ftdiv:
   476  00000F                     ___awdiv@quotient:
   477                           	opt stack 0
   478                           
   479                           ; 2 bytes @ 0xE
   480  00000F                     	ds	1
   481  000010                     __tdiv_to_l_@cntr:
   482                           	opt stack 0
   483                           
   484                           ; 1 bytes @ 0xF
   485  000010                     	ds	1
   486  000011                     ?___wmul:
   487                           	opt stack 0
   488  000011                     __tdiv_to_l_@exp1:
   489                           	opt stack 0
   490  000011                     ___lltoft@exp:
   491                           	opt stack 0
   492  000011                     ___wmul@multiplier:
   493                           	opt stack 0
   494                           
   495                           ; 2 bytes @ 0x10
   496  000011                     	ds	2
   497  000013                     ___wmul@multiplicand:
   498                           	opt stack 0
   499                           
   500                           ; 2 bytes @ 0x12
   501  000013                     	ds	1
   502  000014                     ___ftadd@sign:
   503                           	opt stack 0
   504  000014                     ___ftdiv@cntr:
   505                           	opt stack 0
   506                           
   507                           ; 1 bytes @ 0x13
   508  000014                     	ds	1
   509  000015                     ___ftadd@exp2:
   510                           	opt stack 0
   511  000015                     ___wmul@product:
   512                           	opt stack 0
   513  000015                     ___ftdiv@f3:
   514                           	opt stack 0
   515                           
   516                           ; 3 bytes @ 0x14
   517  000015                     	ds	1
   518  000016                     ___ftadd@exp1:
   519                           	opt stack 0
   520                           
   521                           ; 1 bytes @ 0x15
   522  000016                     	ds	1
   523  000017                     ?___ftsub:
   524                           	opt stack 0
   525  000017                     ?___fttol:
   526                           	opt stack 0
   527  000017                     ___ftsub@f1:
   528                           	opt stack 0
   529  000017                     ___fttol@f1:
   530                           	opt stack 0
   531                           
   532                           ; 3 bytes @ 0x16
   533  000017                     	ds	1
   534  000018                     ___ftdiv@exp:
   535                           	opt stack 0
   536                           
   537                           ; 1 bytes @ 0x17
   538  000018                     	ds	1
   539  000019                     ___ftdiv@sign:
   540                           	opt stack 0
   541                           
   542                           ; 1 bytes @ 0x18
   543  000019                     	ds	1
   544  00001A                     ___ftsub@f2:
   545                           	opt stack 0
   546                           
   547                           ; 3 bytes @ 0x19
   548  00001A                     	ds	1
   549  00001B                     ??___fttol:
   550                           
   551                           ; 0 bytes @ 0x1A
   552  00001B                     	ds	2
   553  00001D                     ?___asftsub:
   554                           	opt stack 0
   555  00001D                     ___asftsub@f1p:
   556                           	opt stack 0
   557                           
   558                           ; 2 bytes @ 0x1C
   559  00001D                     	ds	2
   560  00001F                     ___asftsub@f2:
   561                           	opt stack 0
   562                           
   563                           ; 3 bytes @ 0x1E
   564  00001F                     	ds	1
   565  000020                     ___fttol@sign1:
   566                           	opt stack 0
   567                           
   568                           ; 1 bytes @ 0x1F
   569  000020                     	ds	1
   570  000021                     ___fttol@lval:
   571                           	opt stack 0
   572                           
   573                           ; 4 bytes @ 0x20
   574  000021                     	ds	1
   575  000022                     
   576                           ; 0 bytes @ 0x21
   577  000022                     	ds	3
   578  000025                     ___fttol@exp1:
   579                           	opt stack 0
   580                           
   581                           ; 1 bytes @ 0x24
   582  000025                     	ds	1
   583  000026                     ?___ftmul:
   584                           	opt stack 0
   585  000026                     ___ftmul@f1:
   586                           	opt stack 0
   587                           
   588                           ; 3 bytes @ 0x25
   589  000026                     	ds	3
   590  000029                     ___ftmul@f2:
   591                           	opt stack 0
   592                           
   593                           ; 3 bytes @ 0x28
   594  000029                     	ds	3
   595  00002C                     ??___ftmul:
   596                           
   597                           ; 0 bytes @ 0x2B
   598  00002C                     	ds	5
   599  000031                     ___ftmul@exp:
   600                           	opt stack 0
   601                           
   602                           ; 1 bytes @ 0x30
   603  000031                     	ds	1
   604  000032                     ___ftmul@f3_as_product:
   605                           	opt stack 0
   606                           
   607                           ; 3 bytes @ 0x31
   608  000032                     	ds	3
   609  000035                     ___ftmul@cntr:
   610                           	opt stack 0
   611                           
   612                           ; 1 bytes @ 0x34
   613  000035                     	ds	1
   614  000036                     ___ftmul@sign:
   615                           	opt stack 0
   616                           
   617                           ; 1 bytes @ 0x35
   618  000036                     	ds	1
   619  000037                     ?_fround:
   620                           	opt stack 0
   621  000037                     ?_scale:
   622                           	opt stack 0
   623  000037                     ?___asftmul:
   624                           	opt stack 0
   625  000037                     fround@prec:
   626                           	opt stack 0
   627  000037                     scale@scl:
   628                           	opt stack 0
   629  000037                     ___asftmul@f1p:
   630                           	opt stack 0
   631                           
   632                           ; 2 bytes @ 0x36
   633  000037                     	ds	2
   634  000039                     ___asftmul@f2:
   635                           	opt stack 0
   636                           
   637                           ; 3 bytes @ 0x38
   638  000039                     	ds	1
   639  00003A                     ??_fround:
   640  00003A                     ??_scale:
   641                           
   642                           ; 0 bytes @ 0x39
   643  00003A                     	ds	2
   644  00003C                     
   645                           ; 0 bytes @ 0x3B
   646  00003C                     	ds	4
   647  000040                     _fround$804:
   648                           	opt stack 0
   649  000040                     _scale$805:
   650                           	opt stack 0
   651                           
   652                           ; 3 bytes @ 0x3F
   653  000040                     	ds	3
   654  000043                     _fround$803:
   655                           	opt stack 0
   656                           
   657                           ; 3 bytes @ 0x42
   658  000043                     	ds	3
   659  000046                     ?___asftadd:
   660                           	opt stack 0
   661  000046                     ___asftadd@f1p:
   662                           	opt stack 0
   663                           
   664                           ; 2 bytes @ 0x45
   665  000046                     	ds	2
   666  000048                     ___asftadd@f2:
   667                           	opt stack 0
   668                           
   669                           ; 3 bytes @ 0x47
   670  000048                     	ds	3
   671  00004B                     ?_sprintf:
   672                           	opt stack 0
   673  00004B                     sprintf@sp:
   674                           	opt stack 0
   675                           
   676                           ; 2 bytes @ 0x4A
   677  00004B                     	ds	2
   678  00004D                     sprintf@f:
   679                           	opt stack 0
   680                           
   681                           ; 2 bytes @ 0x4C
   682  00004D                     	ds	5
   683  000052                     ??_sprintf:
   684                           
   685                           ; 0 bytes @ 0x51
   686  000052                     	ds	6
   687  000058                     ??_main:
   688                           
   689                           ; 0 bytes @ 0x57
   690  000058                     	ds	4
   691                           tblptru	equ	0xFF8
   692                           
   693 ;;
   694 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   695 ;;
   696 ;; *************** function _main *****************
   697 ;; Defined at:
   698 ;;		line 29 in file "main.c"
   699 ;; Parameters:    Size  Location     Type
   700 ;;		None
   701 ;; Auto vars:     Size  Location     Type
   702 ;;  mystr          10   31[BANK0 ] unsigned char [10]
   703 ;;  val             2    0        unsigned int 
   704 ;; Return value:  Size  Location     Type
   705 ;;		None               void
   706 ;; Registers used:
   707 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   708 ;; Tracked objects:
   709 ;;		On entry : 0/0
   710 ;;		On exit  : 0/0
   711 ;;		Unchanged: 0/0
   712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   713 ;;      Params:         0       0       0       0       0       0       0       0       0
   714 ;;      Locals:         0      10       0       0       0       0       0       0       0
   715 ;;      Temps:          4       0       0       0       0       0       0       0       0
   716 ;;      Totals:         4      10       0       0       0       0       0       0       0
   717 ;;Total ram usage:       14 bytes
   718 ;; Hardware stack levels required when called:    5
   719 ;; This function calls:
   720 ;;		_Init_AD
   721 ;;		_lcd_int
   722 ;;		_cmd
   723 ;;		_sprintf
   724 ;;		_show
   725 ;;		___ftdiv
   726 ;;		___awtoft
   727 ;;		___ftge
   728 ;; This function is called by:
   729 ;;		Startup code after reset
   730 ;; This function uses a non-reentrant model
   731 ;;
   732                           
   733                           	psect	text0
   734  0013C4                     __ptext0:
   735                           	opt stack 0
   736  0013C4                     _main:
   737                           	opt stack 26
   738                           
   739                           ;main.c: 30: Init_AD();
   740                           
   741                           ; BSR set to: 0
   742                           ;incstack = 0
   743                           ;incstack = 0
   744  0013C4  EC1B  F013         	call	_Init_AD	;wreg free
   745                           
   746                           ;main.c: 31: unsigned int val;
   747                           ;main.c: 32: TRISD = TRISC = 0;
   748  0013C8  0E00               	movlw	0
   749  0013CA  6E94               	movwf	3988,c	;volatile
   750  0013CC  CF94 FF95          	movff	3988,3989	;volatile
   751                           
   752                           ;main.c: 33: TRISB = 0;
   753  0013D0  0E00               	movlw	0
   754  0013D2  6E93               	movwf	3987,c	;volatile
   755                           
   756                           ;main.c: 34: TRISA0 = 1;
   757  0013D4  8092               	bsf	3986,0,c	;volatile
   758                           
   759                           ;main.c: 35: lcd_int();
   760  0013D6  ECA5  F012         	call	_lcd_int	;wreg free
   761  0013DA                     l4044:
   762                           
   763                           ;main.c: 38: cmd(0x80);
   764  0013DA  6E58               	movwf	??_main& (0+255),c
   765  0013DC  0E80               	movlw	128
   766  0013DE  6E01               	movwf	?_cmd,c
   767  0013E0  5058               	movf	??_main& (0+255),w,c
   768  0013E2  ECD4  F012         	call	_cmd	;wreg free
   769                           
   770                           ;main.c: 39: ADCON0 |= ((1 << ADON) | (1 << GO));
   771  0013E6  0E00               	movlw	0
   772  0013E8  B2C2               	btfsc	4034,1,c	;volatile
   773  0013EA  0E01               	movlw	1
   774  0013EC  6E58               	movwf	??_main& (0+255),c
   775  0013EE  0E01               	movlw	1
   776  0013F0  6E59               	movwf	(??_main+1)& (0+255),c
   777  0013F2  2A58               	incf	??_main,f,c
   778  0013F4  D002               	goto	u2764
   779  0013F6                     u2765:
   780  0013F6  90D8               	bcf	status,0,c
   781  0013F8  3659               	rlcf	??_main+1,f,c
   782  0013FA                     u2764:
   783  0013FA  2E58               	decfsz	??_main,f,c
   784  0013FC  D7FC               	goto	u2765
   785  0013FE  0E00               	movlw	0
   786  001400  B0C2               	btfsc	4034,0,c	;volatile
   787  001402  0E01               	movlw	1
   788  001404  6E5A               	movwf	(??_main+2)& (0+255),c
   789  001406  0E01               	movlw	1
   790  001408  6E5B               	movwf	(??_main+3)& (0+255),c
   791  00140A  2A5A               	incf	??_main+2,f,c
   792  00140C  D002               	goto	u2774
   793  00140E                     u2775:
   794  00140E  90D8               	bcf	status,0,c
   795  001410  365B               	rlcf	??_main+3,f,c
   796  001412                     u2774:
   797  001412  2E5A               	decfsz	??_main+2,f,c
   798  001414  D7FC               	goto	u2775
   799  001416  505B               	movf	??_main+3,w,c
   800  001418  1059               	iorwf	??_main+1,w,c
   801  00141A  12C2               	iorwf	4034,f,c	;volatile
   802  00141C                     l55:
   803  00141C  B2C2               	btfsc	4034,1,c	;volatile
   804  00141E  D7FE               	goto	l55
   805                           
   806                           ;main.c: 41: analog_reading = (ADRESH * 256) + (ADRESL);
   807  001420  50C4               	movf	4036,w,c	;volatile
   808  001422  6E59               	movwf	(??_main+1)& (0+255),c
   809  001424  6A58               	clrf	??_main& (0+255),c
   810  001426  50C3               	movf	4035,w,c	;volatile
   811  001428  2458               	addwf	??_main,w,c
   812  00142A  6E09               	movwf	?___awtoft,c
   813  00142C  0E00               	movlw	0
   814  00142E  2059               	addwfc	??_main+1,w,c
   815  001430  6E0A               	movwf	?___awtoft+1,c
   816  001432  ECF1  F011         	call	___awtoft	;wreg free
   817  001436  C00B  F08B         	movff	?___awtoft+2,_analog_reading+2
   818  00143A  C00A  F08A         	movff	?___awtoft+1,_analog_reading+1
   819  00143E  C009  F089         	movff	?___awtoft,_analog_reading
   820                           
   821                           ;main.c: 42: analog_reading = analog_reading/0.00489;
   822  001442  C089  F009         	movff	_analog_reading,?___ftdiv
   823  001446  C08A  F00A         	movff	_analog_reading+1,?___ftdiv+1
   824  00144A  C08B  F00B         	movff	_analog_reading+2,?___ftdiv+2
   825  00144E  0E3C               	movlw	60
   826  001450  6E0C               	movwf	?___ftdiv+3,c
   827  001452  0EA0               	movlw	160
   828  001454  6E0D               	movwf	?___ftdiv+4,c
   829  001456  0E3B               	movlw	59
   830  001458  6E0E               	movwf	?___ftdiv+5,c
   831  00145A  EC91  F00E         	call	___ftdiv	;wreg free
   832  00145E  C00B  F08B         	movff	?___ftdiv+2,_analog_reading+2
   833  001462  C00A  F08A         	movff	?___ftdiv+1,_analog_reading+1
   834  001466  C009  F089         	movff	?___ftdiv,_analog_reading
   835                           
   836                           ;main.c: 43: char mystr[10];
   837                           ;main.c: 44: sprintf(mystr, "%f", analog_reading);
   838  00146A  0100               	movlb	0	; () banked
   839  00146C  0E00               	movlw	high main@mystr
   840  00146E  6E4C               	movwf	?_sprintf+1,c
   841  001470  0100               	movlb	0	; () banked
   842  001472  0E7F               	movlw	low main@mystr
   843  001474  6E4B               	movwf	?_sprintf,c
   844  001476  0E08               	movlw	high STR_1
   845  001478  6E4E               	movwf	?_sprintf+3,c
   846  00147A  0E76               	movlw	low STR_1
   847  00147C  6E4D               	movwf	?_sprintf+2,c
   848  00147E  C089  F04F         	movff	_analog_reading,?_sprintf+4
   849  001482  C08A  F050         	movff	_analog_reading+1,?_sprintf+5
   850  001486  C08B  F051         	movff	_analog_reading+2,?_sprintf+6
   851  00148A  EC3D  F004         	call	_sprintf	;wreg free
   852                           
   853                           ;main.c: 45: show(mystr);
   854  00148E  0100               	movlb	0	; () banked
   855  001490  0E00               	movlw	high main@mystr
   856  001492  6E03               	movwf	?_show+1,c
   857  001494  0100               	movlb	0	; () banked
   858  001496  0E7F               	movlw	low main@mystr
   859  001498  6E02               	movwf	?_show,c
   860  00149A  ECEA  F012         	call	_show	;wreg free
   861                           
   862                           ;main.c: 46: if (analog_reading > 0 && analog_reading < 10) {
   863  00149E  0E00               	movlw	0
   864  0014A0  6E01               	movwf	?___ftge,c
   865  0014A2  0E00               	movlw	0
   866  0014A4  6E02               	movwf	?___ftge+1,c
   867  0014A6  0E00               	movlw	0
   868  0014A8  6E03               	movwf	?___ftge+2,c
   869  0014AA  C089  F004         	movff	_analog_reading,?___ftge+3
   870  0014AE  C08A  F005         	movff	_analog_reading+1,?___ftge+4
   871  0014B2  C08B  F006         	movff	_analog_reading+2,?___ftge+5
   872  0014B6  EC56  F010         	call	___ftge	;wreg free
   873  0014BA  B0D8               	btfsc	status,0,c
   874  0014BC  D012               	goto	l4060
   875  0014BE  C089  F001         	movff	_analog_reading,?___ftge
   876  0014C2  C08A  F002         	movff	_analog_reading+1,?___ftge+1
   877  0014C6  C08B  F003         	movff	_analog_reading+2,?___ftge+2
   878  0014CA  0E00               	movlw	0
   879  0014CC  6E04               	movwf	?___ftge+3,c
   880  0014CE  0E20               	movlw	32
   881  0014D0  6E05               	movwf	?___ftge+4,c
   882  0014D2  0E41               	movlw	65
   883  0014D4  6E06               	movwf	?___ftge+5,c
   884  0014D6  EC56  F010         	call	___ftge	;wreg free
   885  0014DA  B0D8               	btfsc	status,0,c
   886  0014DC  D002               	goto	l4060
   887                           
   888                           ;main.c: 47: LATB = 0x80;
   889  0014DE  0E80               	movlw	128
   890  0014E0  D0DF               	goto	L7
   891  0014E2                     l4060:
   892  0014E2  C089  F001         	movff	_analog_reading,?___ftge
   893  0014E6  C08A  F002         	movff	_analog_reading+1,?___ftge+1
   894  0014EA  C08B  F003         	movff	_analog_reading+2,?___ftge+2
   895  0014EE  0E00               	movlw	0
   896  0014F0  6E04               	movwf	?___ftge+3,c
   897  0014F2  0E20               	movlw	32
   898  0014F4  6E05               	movwf	?___ftge+4,c
   899  0014F6  0E41               	movlw	65
   900  0014F8  6E06               	movwf	?___ftge+5,c
   901  0014FA  EC56  F010         	call	___ftge	;wreg free
   902  0014FE  A0D8               	btfss	status,0,c
   903  001500  D012               	goto	l4066
   904  001502  C089  F001         	movff	_analog_reading,?___ftge
   905  001506  C08A  F002         	movff	_analog_reading+1,?___ftge+1
   906  00150A  C08B  F003         	movff	_analog_reading+2,?___ftge+2
   907  00150E  0E00               	movlw	0
   908  001510  6E04               	movwf	?___ftge+3,c
   909  001512  0EA0               	movlw	160
   910  001514  6E05               	movwf	?___ftge+4,c
   911  001516  0E41               	movlw	65
   912  001518  6E06               	movwf	?___ftge+5,c
   913  00151A  EC56  F010         	call	___ftge	;wreg free
   914  00151E  B0D8               	btfsc	status,0,c
   915  001520  D002               	goto	l4066
   916                           
   917                           ;main.c: 49: LATB = 0xC0;
   918  001522  0EC0               	movlw	192
   919  001524  D0BD               	goto	L7
   920  001526                     l4066:
   921  001526  C089  F001         	movff	_analog_reading,?___ftge
   922  00152A  C08A  F002         	movff	_analog_reading+1,?___ftge+1
   923  00152E  C08B  F003         	movff	_analog_reading+2,?___ftge+2
   924  001532  0E00               	movlw	0
   925  001534  6E04               	movwf	?___ftge+3,c
   926  001536  0EA0               	movlw	160
   927  001538  6E05               	movwf	?___ftge+4,c
   928  00153A  0E41               	movlw	65
   929  00153C  6E06               	movwf	?___ftge+5,c
   930  00153E  EC56  F010         	call	___ftge	;wreg free
   931  001542  A0D8               	btfss	status,0,c
   932  001544  D012               	goto	l4072
   933  001546  C089  F001         	movff	_analog_reading,?___ftge
   934  00154A  C08A  F002         	movff	_analog_reading+1,?___ftge+1
   935  00154E  C08B  F003         	movff	_analog_reading+2,?___ftge+2
   936  001552  0E00               	movlw	0
   937  001554  6E04               	movwf	?___ftge+3,c
   938  001556  0EF0               	movlw	240
   939  001558  6E05               	movwf	?___ftge+4,c
   940  00155A  0E41               	movlw	65
   941  00155C  6E06               	movwf	?___ftge+5,c
   942  00155E  EC56  F010         	call	___ftge	;wreg free
   943  001562  B0D8               	btfsc	status,0,c
   944  001564  D002               	goto	l4072
   945                           
   946                           ;main.c: 51: LATB = 0xE0;
   947  001566  0EE0               	movlw	224
   948  001568  D09B               	goto	L7
   949  00156A                     l4072:
   950  00156A  C089  F001         	movff	_analog_reading,?___ftge
   951  00156E  C08A  F002         	movff	_analog_reading+1,?___ftge+1
   952  001572  C08B  F003         	movff	_analog_reading+2,?___ftge+2
   953  001576  0E00               	movlw	0
   954  001578  6E04               	movwf	?___ftge+3,c
   955  00157A  0EF0               	movlw	240
   956  00157C  6E05               	movwf	?___ftge+4,c
   957  00157E  0E41               	movlw	65
   958  001580  6E06               	movwf	?___ftge+5,c
   959  001582  EC56  F010         	call	___ftge	;wreg free
   960  001586  A0D8               	btfss	status,0,c
   961  001588  D012               	goto	l4078
   962  00158A  C089  F001         	movff	_analog_reading,?___ftge
   963  00158E  C08A  F002         	movff	_analog_reading+1,?___ftge+1
   964  001592  C08B  F003         	movff	_analog_reading+2,?___ftge+2
   965  001596  0E00               	movlw	0
   966  001598  6E04               	movwf	?___ftge+3,c
   967  00159A  0E20               	movlw	32
   968  00159C  6E05               	movwf	?___ftge+4,c
   969  00159E  0E42               	movlw	66
   970  0015A0  6E06               	movwf	?___ftge+5,c
   971  0015A2  EC56  F010         	call	___ftge	;wreg free
   972  0015A6  B0D8               	btfsc	status,0,c
   973  0015A8  D002               	goto	l4078
   974                           
   975                           ;main.c: 53: LATB = 0xF0;
   976  0015AA  0EF0               	movlw	240
   977  0015AC  D079               	goto	L7
   978  0015AE                     l4078:
   979  0015AE  C089  F001         	movff	_analog_reading,?___ftge
   980  0015B2  C08A  F002         	movff	_analog_reading+1,?___ftge+1
   981  0015B6  C08B  F003         	movff	_analog_reading+2,?___ftge+2
   982  0015BA  0E00               	movlw	0
   983  0015BC  6E04               	movwf	?___ftge+3,c
   984  0015BE  0E20               	movlw	32
   985  0015C0  6E05               	movwf	?___ftge+4,c
   986  0015C2  0E42               	movlw	66
   987  0015C4  6E06               	movwf	?___ftge+5,c
   988  0015C6  EC56  F010         	call	___ftge	;wreg free
   989  0015CA  A0D8               	btfss	status,0,c
   990  0015CC  D012               	goto	l4084
   991  0015CE  C089  F001         	movff	_analog_reading,?___ftge
   992  0015D2  C08A  F002         	movff	_analog_reading+1,?___ftge+1
   993  0015D6  C08B  F003         	movff	_analog_reading+2,?___ftge+2
   994  0015DA  0E00               	movlw	0
   995  0015DC  6E04               	movwf	?___ftge+3,c
   996  0015DE  0E48               	movlw	72
   997  0015E0  6E05               	movwf	?___ftge+4,c
   998  0015E2  0E42               	movlw	66
   999  0015E4  6E06               	movwf	?___ftge+5,c
  1000  0015E6  EC56  F010         	call	___ftge	;wreg free
  1001  0015EA  B0D8               	btfsc	status,0,c
  1002  0015EC  D002               	goto	l4084
  1003                           
  1004                           ;main.c: 55: LATB = 0xF8;
  1005  0015EE  0EF8               	movlw	248
  1006  0015F0  D057               	goto	L7
  1007  0015F2                     l4084:
  1008  0015F2  C089  F001         	movff	_analog_reading,?___ftge
  1009  0015F6  C08A  F002         	movff	_analog_reading+1,?___ftge+1
  1010  0015FA  C08B  F003         	movff	_analog_reading+2,?___ftge+2
  1011  0015FE  0E00               	movlw	0
  1012  001600  6E04               	movwf	?___ftge+3,c
  1013  001602  0E48               	movlw	72
  1014  001604  6E05               	movwf	?___ftge+4,c
  1015  001606  0E42               	movlw	66
  1016  001608  6E06               	movwf	?___ftge+5,c
  1017  00160A  EC56  F010         	call	___ftge	;wreg free
  1018  00160E  A0D8               	btfss	status,0,c
  1019  001610  D012               	goto	l4090
  1020  001612  C089  F001         	movff	_analog_reading,?___ftge
  1021  001616  C08A  F002         	movff	_analog_reading+1,?___ftge+1
  1022  00161A  C08B  F003         	movff	_analog_reading+2,?___ftge+2
  1023  00161E  0E00               	movlw	0
  1024  001620  6E04               	movwf	?___ftge+3,c
  1025  001622  0E70               	movlw	112
  1026  001624  6E05               	movwf	?___ftge+4,c
  1027  001626  0E42               	movlw	66
  1028  001628  6E06               	movwf	?___ftge+5,c
  1029  00162A  EC56  F010         	call	___ftge	;wreg free
  1030  00162E  B0D8               	btfsc	status,0,c
  1031  001630  D002               	goto	l4090
  1032                           
  1033                           ;main.c: 57: LATB = 0xFC;
  1034  001632  0EFC               	movlw	252
  1035  001634  D035               	goto	L7
  1036  001636                     l4090:
  1037  001636  C089  F001         	movff	_analog_reading,?___ftge
  1038  00163A  C08A  F002         	movff	_analog_reading+1,?___ftge+1
  1039  00163E  C08B  F003         	movff	_analog_reading+2,?___ftge+2
  1040  001642  0E00               	movlw	0
  1041  001644  6E04               	movwf	?___ftge+3,c
  1042  001646  0E70               	movlw	112
  1043  001648  6E05               	movwf	?___ftge+4,c
  1044  00164A  0E42               	movlw	66
  1045  00164C  6E06               	movwf	?___ftge+5,c
  1046  00164E  EC56  F010         	call	___ftge	;wreg free
  1047  001652  A0D8               	btfss	status,0,c
  1048  001654  D012               	goto	l4096
  1049  001656  C089  F001         	movff	_analog_reading,?___ftge
  1050  00165A  C08A  F002         	movff	_analog_reading+1,?___ftge+1
  1051  00165E  C08B  F003         	movff	_analog_reading+2,?___ftge+2
  1052  001662  0E00               	movlw	0
  1053  001664  6E04               	movwf	?___ftge+3,c
  1054  001666  0E8C               	movlw	140
  1055  001668  6E05               	movwf	?___ftge+4,c
  1056  00166A  0E42               	movlw	66
  1057  00166C  6E06               	movwf	?___ftge+5,c
  1058  00166E  EC56  F010         	call	___ftge	;wreg free
  1059  001672  B0D8               	btfsc	status,0,c
  1060  001674  D002               	goto	l4096
  1061                           
  1062                           ;main.c: 59: LATB = 0xFE;
  1063  001676  0EFE               	movlw	254
  1064  001678  D013               	goto	L7
  1065  00167A                     l4096:
  1066  00167A  C089  F001         	movff	_analog_reading,?___ftge
  1067  00167E  C08A  F002         	movff	_analog_reading+1,?___ftge+1
  1068  001682  C08B  F003         	movff	_analog_reading+2,?___ftge+2
  1069  001686  0E00               	movlw	0
  1070  001688  6E04               	movwf	?___ftge+3,c
  1071  00168A  0E8C               	movlw	140
  1072  00168C  6E05               	movwf	?___ftge+4,c
  1073  00168E  0E42               	movlw	66
  1074  001690  6E06               	movwf	?___ftge+5,c
  1075  001692  EC56  F010         	call	___ftge	;wreg free
  1076  001696  A0D8               	btfss	status,0,c
  1077  001698  D002               	goto	l4100
  1078                           
  1079                           ;main.c: 61: LATB = 0xFF;
  1080  00169A  688A               	setf	3978,c	;volatile
  1081                           
  1082                           ;main.c: 62: } else {
  1083  00169C  D69E               	goto	l4044
  1084  00169E                     l4100:
  1085                           
  1086                           ;main.c: 63: LATB = 0x00;
  1087  00169E  0E00               	movlw	0
  1088  0016A0                     L7:
  1089  0016A0  6E8A               	movwf	3978,c	;volatile
  1090  0016A2  D69B               	goto	l4044
  1091  0016A4                     __end_of_main:
  1092                           	opt stack 0
  1093                           tblptru	equ	0xFF8
  1094                           status	equ	0xFD8
  1095                           
  1096 ;; *************** function ___awtoft *****************
  1097 ;; Defined at:
  1098 ;;		line 33 in file "E:\Program Files\Microchip\xc8\v1.20\sources\common\awtoft.c"
  1099 ;; Parameters:    Size  Location     Type
  1100 ;;  c               2    8[COMRAM] int 
  1101 ;; Auto vars:     Size  Location     Type
  1102 ;;  sign            1   12[COMRAM] unsigned char 
  1103 ;; Return value:  Size  Location     Type
  1104 ;;                  3    8[COMRAM] float 
  1105 ;; Registers used:
  1106 ;;		wreg, status,2, status,0, cstack
  1107 ;; Tracked objects:
  1108 ;;		On entry : 0/0
  1109 ;;		On exit  : 0/0
  1110 ;;		Unchanged: 0/0
  1111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1112 ;;      Params:         3       0       0       0       0       0       0       0       0
  1113 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1114 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1115 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1116 ;;Total ram usage:        5 bytes
  1117 ;; Hardware stack levels used:    1
  1118 ;; Hardware stack levels required when called:    1
  1119 ;; This function calls:
  1120 ;;		___ftpack
  1121 ;; This function is called by:
  1122 ;;		_main
  1123 ;; This function uses a non-reentrant model
  1124 ;;
  1125                           
  1126                           	psect	text1
  1127  0023E2                     __ptext1:
  1128                           	opt stack 0
  1129  0023E2                     ___awtoft:
  1130                           	opt stack 29
  1131                           
  1132                           ;incstack = 0
  1133                           ;incstack = 0
  1134  0023E2  6E0C               	movwf	??___awtoft& (0+255),c
  1135  0023E4  0E00               	movlw	0
  1136  0023E6  6E0D               	movwf	___awtoft@sign,c
  1137  0023E8  500C               	movf	??___awtoft& (0+255),w,c
  1138  0023EA  AE0A               	btfss	___awtoft@c+1,7,c
  1139  0023EC  D008               	goto	l3710
  1140  0023EE  6C09               	negf	___awtoft@c,c
  1141  0023F0  1E0A               	comf	___awtoft@c+1,f,c
  1142  0023F2  B0D8               	btfsc	status,0,c
  1143  0023F4  2A0A               	incf	___awtoft@c+1,f,c
  1144  0023F6  6E0C               	movwf	??___awtoft& (0+255),c
  1145  0023F8  0E01               	movlw	1
  1146  0023FA  6E0D               	movwf	___awtoft@sign,c
  1147  0023FC  500C               	movf	??___awtoft& (0+255),w,c
  1148  0023FE                     l3710:
  1149  0023FE  C009  F001         	movff	___awtoft@c,?___ftpack
  1150  002402  C00A  F002         	movff	___awtoft@c+1,?___ftpack+1
  1151  002406  6A03               	clrf	?___ftpack+2,c
  1152  002408  6E0C               	movwf	??___awtoft& (0+255),c
  1153  00240A  0E8E               	movlw	142
  1154  00240C  6E04               	movwf	?___ftpack+3,c
  1155  00240E  500C               	movf	??___awtoft& (0+255),w,c
  1156  002410  C00D  F005         	movff	___awtoft@sign,?___ftpack+4
  1157  002414  ECFA  F00F         	call	___ftpack	;wreg free
  1158  002418  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  1159  00241C  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  1160  002420  C001  F009         	movff	?___ftpack,?___awtoft
  1161  002424  0012               	return	
  1162  002426                     __end_of___awtoft:
  1163                           	opt stack 0
  1164                           tblptru	equ	0xFF8
  1165                           status	equ	0xFD8
  1166                           
  1167 ;; *************** function ___ftdiv *****************
  1168 ;; Defined at:
  1169 ;;		line 50 in file "E:\Program Files\Microchip\xc8\v1.20\sources\common\ftdiv.c"
  1170 ;; Parameters:    Size  Location     Type
  1171 ;;  f1              3    8[COMRAM] float 
  1172 ;;  f2              3   11[COMRAM] float 
  1173 ;; Auto vars:     Size  Location     Type
  1174 ;;  f3              3   20[COMRAM] float 
  1175 ;;  sign            1   24[COMRAM] unsigned char 
  1176 ;;  exp             1   23[COMRAM] unsigned char 
  1177 ;;  cntr            1   19[COMRAM] unsigned char 
  1178 ;; Return value:  Size  Location     Type
  1179 ;;                  3    8[COMRAM] float 
  1180 ;; Registers used:
  1181 ;;		wreg, status,2, status,0, cstack
  1182 ;; Tracked objects:
  1183 ;;		On entry : 0/0
  1184 ;;		On exit  : 0/0
  1185 ;;		Unchanged: 0/0
  1186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1187 ;;      Params:         6       0       0       0       0       0       0       0       0
  1188 ;;      Locals:         6       0       0       0       0       0       0       0       0
  1189 ;;      Temps:          5       0       0       0       0       0       0       0       0
  1190 ;;      Totals:        17       0       0       0       0       0       0       0       0
  1191 ;;Total ram usage:       17 bytes
  1192 ;; Hardware stack levels used:    1
  1193 ;; Hardware stack levels required when called:    1
  1194 ;; This function calls:
  1195 ;;		___ftpack
  1196 ;; This function is called by:
  1197 ;;		_main
  1198 ;; This function uses a non-reentrant model
  1199 ;;
  1200                           
  1201                           	psect	text2
  1202  001D22                     __ptext2:
  1203                           	opt stack 0
  1204  001D22                     ___ftdiv:
  1205                           	opt stack 29
  1206                           
  1207                           ;incstack = 0
  1208                           ;incstack = 0
  1209  001D22  0E0F               	movlw	15
  1210  001D24  6E0F               	movwf	??___ftdiv& (0+255),c
  1211  001D26  C009  F010         	movff	___ftdiv@f1,??___ftdiv+1
  1212  001D2A  C00A  F011         	movff	___ftdiv@f1+1,??___ftdiv+2
  1213  001D2E  C00B  F012         	movff	___ftdiv@f1+2,??___ftdiv+3
  1214  001D32  280F               	incf	??___ftdiv,w,c
  1215  001D34  6E13               	movwf	(??___ftdiv+4)& (0+255),c
  1216  001D36  D004               	goto	u2160
  1217  001D38                     u2165:
  1218  001D38  90D8               	bcf	status,0,c
  1219  001D3A  3212               	rrcf	??___ftdiv+3,f,c
  1220  001D3C  3211               	rrcf	??___ftdiv+2,f,c
  1221  001D3E  3210               	rrcf	??___ftdiv+1,f,c
  1222  001D40                     u2160:
  1223  001D40  2E13               	decfsz	(??___ftdiv+4)& (0+255),f,c
  1224  001D42  D7FA               	goto	u2165
  1225  001D44  5010               	movf	??___ftdiv+1,w,c
  1226  001D46  6E18               	movwf	___ftdiv@exp,c
  1227  001D48  6618               	tstfsz	___ftdiv@exp& (0+255),c
  1228  001D4A  D001               	goto	l3572
  1229  001D4C  D015               	goto	u2190
  1230  001D4E                     l3572:
  1231  001D4E  0E0F               	movlw	15
  1232  001D50  6E0F               	movwf	??___ftdiv& (0+255),c
  1233  001D52  C00C  F010         	movff	___ftdiv@f2,??___ftdiv+1
  1234  001D56  C00D  F011         	movff	___ftdiv@f2+1,??___ftdiv+2
  1235  001D5A  C00E  F012         	movff	___ftdiv@f2+2,??___ftdiv+3
  1236  001D5E  280F               	incf	??___ftdiv,w,c
  1237  001D60  6E13               	movwf	(??___ftdiv+4)& (0+255),c
  1238  001D62  D004               	goto	u2180
  1239  001D64                     u2185:
  1240  001D64  90D8               	bcf	status,0,c
  1241  001D66  3212               	rrcf	??___ftdiv+3,f,c
  1242  001D68  3211               	rrcf	??___ftdiv+2,f,c
  1243  001D6A  3210               	rrcf	??___ftdiv+1,f,c
  1244  001D6C                     u2180:
  1245  001D6C  2E13               	decfsz	(??___ftdiv+4)& (0+255),f,c
  1246  001D6E  D7FA               	goto	u2185
  1247  001D70  5010               	movf	??___ftdiv+1,w,c
  1248  001D72  6E19               	movwf	___ftdiv@sign,c
  1249  001D74  6619               	tstfsz	___ftdiv@sign& (0+255),c
  1250  001D76  D007               	goto	l3578
  1251  001D78                     u2190:
  1252  001D78  0E00               	movlw	0
  1253  001D7A  6E09               	movwf	?___ftdiv,c
  1254  001D7C  0E00               	movlw	0
  1255  001D7E  6E0A               	movwf	?___ftdiv+1,c
  1256  001D80  0E00               	movlw	0
  1257  001D82  6E0B               	movwf	?___ftdiv+2,c
  1258  001D84  D04C               	goto	l562
  1259  001D86                     l3578:
  1260  001D86  0E00               	movlw	0
  1261  001D88  6E15               	movwf	___ftdiv@f3,c
  1262  001D8A  0E00               	movlw	0
  1263  001D8C  6E16               	movwf	___ftdiv@f3+1,c
  1264  001D8E  0E00               	movlw	0
  1265  001D90  6E17               	movwf	___ftdiv@f3+2,c
  1266  001D92  5019               	movf	___ftdiv@sign,w,c
  1267  001D94  0F89               	addlw	137
  1268  001D96  5E18               	subwf	___ftdiv@exp,f,c
  1269  001D98  C00B  F019         	movff	___ftdiv@f1+2,___ftdiv@sign
  1270  001D9C  500E               	movf	(___ftdiv@f2+2)& (0+255),w,c
  1271  001D9E  1A19               	xorwf	___ftdiv@sign,f,c
  1272  001DA0  0E80               	movlw	128
  1273  001DA2  1619               	andwf	___ftdiv@sign,f,c
  1274  001DA4  8E0A               	bsf	___ftdiv@f1+1,7,c
  1275  001DA6  0EFF               	movlw	255
  1276  001DA8  1609               	andwf	___ftdiv@f1,f,c
  1277  001DAA  0EFF               	movlw	255
  1278  001DAC  160A               	andwf	___ftdiv@f1+1,f,c
  1279  001DAE  0E00               	movlw	0
  1280  001DB0  160B               	andwf	___ftdiv@f1+2,f,c
  1281  001DB2  8E0D               	bsf	___ftdiv@f2+1,7,c
  1282  001DB4  0EFF               	movlw	255
  1283  001DB6  160C               	andwf	___ftdiv@f2,f,c
  1284  001DB8  0EFF               	movlw	255
  1285  001DBA  160D               	andwf	___ftdiv@f2+1,f,c
  1286  001DBC  0E00               	movlw	0
  1287  001DBE  160E               	andwf	___ftdiv@f2+2,f,c
  1288  001DC0  6E0F               	movwf	??___ftdiv& (0+255),c
  1289  001DC2  0E18               	movlw	24
  1290  001DC4  6E14               	movwf	___ftdiv@cntr,c
  1291  001DC6  500F               	movf	??___ftdiv& (0+255),w,c
  1292  001DC8                     l564:
  1293  001DC8  90D8               	bcf	status,0,c
  1294  001DCA  3615               	rlcf	___ftdiv@f3,f,c
  1295  001DCC  3616               	rlcf	___ftdiv@f3+1,f,c
  1296  001DCE  3617               	rlcf	___ftdiv@f3+2,f,c
  1297  001DD0  500C               	movf	___ftdiv@f2,w,c
  1298  001DD2  5C09               	subwf	___ftdiv@f1,w,c
  1299  001DD4  500D               	movf	___ftdiv@f2+1,w,c
  1300  001DD6  580A               	subwfb	___ftdiv@f1+1,w,c
  1301  001DD8  500E               	movf	___ftdiv@f2+2,w,c
  1302  001DDA  580B               	subwfb	___ftdiv@f1+2,w,c
  1303  001DDC  A0D8               	btfss	status,0,c
  1304  001DDE  D007               	goto	l565
  1305  001DE0  500C               	movf	___ftdiv@f2,w,c
  1306  001DE2  5E09               	subwf	___ftdiv@f1,f,c
  1307  001DE4  500D               	movf	___ftdiv@f2+1,w,c
  1308  001DE6  5A0A               	subwfb	___ftdiv@f1+1,f,c
  1309  001DE8  500E               	movf	___ftdiv@f2+2,w,c
  1310  001DEA  5A0B               	subwfb	___ftdiv@f1+2,f,c
  1311  001DEC  8015               	bsf	___ftdiv@f3,0,c
  1312  001DEE                     l565:
  1313  001DEE  90D8               	bcf	status,0,c
  1314  001DF0  3609               	rlcf	___ftdiv@f1,f,c
  1315  001DF2  360A               	rlcf	___ftdiv@f1+1,f,c
  1316  001DF4  360B               	rlcf	___ftdiv@f1+2,f,c
  1317  001DF6  2E14               	decfsz	___ftdiv@cntr,f,c
  1318  001DF8  D7E7               	goto	l564
  1319  001DFA  C015  F001         	movff	___ftdiv@f3,?___ftpack
  1320  001DFE  C016  F002         	movff	___ftdiv@f3+1,?___ftpack+1
  1321  001E02  C017  F003         	movff	___ftdiv@f3+2,?___ftpack+2
  1322  001E06  C018  F004         	movff	___ftdiv@exp,?___ftpack+3
  1323  001E0A  C019  F005         	movff	___ftdiv@sign,?___ftpack+4
  1324  001E0E  ECFA  F00F         	call	___ftpack	;wreg free
  1325  001E12  C003  F00B         	movff	?___ftpack+2,?___ftdiv+2
  1326  001E16  C002  F00A         	movff	?___ftpack+1,?___ftdiv+1
  1327  001E1A  C001  F009         	movff	?___ftpack,?___ftdiv
  1328  001E1E                     l562:
  1329  001E1E  0012               	return	
  1330  001E20                     __end_of___ftdiv:
  1331                           	opt stack 0
  1332                           tblptru	equ	0xFF8
  1333                           status	equ	0xFD8
  1334                           
  1335 ;; *************** function _show *****************
  1336 ;; Defined at:
  1337 ;;		line 93 in file "main.c"
  1338 ;; Parameters:    Size  Location     Type
  1339 ;;  s               2    1[COMRAM] PTR unsigned char 
  1340 ;;		 -> main@mystr(10), 
  1341 ;; Auto vars:     Size  Location     Type
  1342 ;;		None
  1343 ;; Return value:  Size  Location     Type
  1344 ;;		None               void
  1345 ;; Registers used:
  1346 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1347 ;; Tracked objects:
  1348 ;;		On entry : 0/0
  1349 ;;		On exit  : 0/0
  1350 ;;		Unchanged: 0/0
  1351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1352 ;;      Params:         2       0       0       0       0       0       0       0       0
  1353 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1354 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1355 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1356 ;;Total ram usage:        2 bytes
  1357 ;; Hardware stack levels used:    1
  1358 ;; Hardware stack levels required when called:    1
  1359 ;; This function calls:
  1360 ;;		_dat
  1361 ;; This function is called by:
  1362 ;;		_main
  1363 ;; This function uses a non-reentrant model
  1364 ;;
  1365                           
  1366                           	psect	text3
  1367  0025D4                     __ptext3:
  1368                           	opt stack 0
  1369  0025D4                     _show:
  1370                           	opt stack 29
  1371                           
  1372                           ;main.c: 94: while ( * s) {
  1373                           
  1374                           ;incstack = 0
  1375                           ;incstack = 0
  1376  0025D4  D00A               	goto	l3494
  1377  0025D6                     l3490:
  1378                           
  1379                           ;main.c: 95: dat( * s++);
  1380  0025D6  C002  FFD9         	movff	show@s,fsr2l
  1381  0025DA  C003  FFDA         	movff	show@s+1,fsr2h
  1382  0025DE  50DF               	movf	indf2,w,c
  1383  0025E0  6E01               	movwf	?_dat,c
  1384  0025E2  ECBE  F012         	call	_dat	;wreg free
  1385  0025E6  4A02               	infsnz	show@s,f,c
  1386  0025E8  2A03               	incf	show@s+1,f,c
  1387  0025EA                     l3494:
  1388  0025EA  C002  FFD9         	movff	show@s,fsr2l
  1389  0025EE  C003  FFDA         	movff	show@s+1,fsr2h
  1390  0025F2  50DF               	movf	indf2,w,c
  1391  0025F4  B4D8               	btfsc	status,2,c
  1392  0025F6  0012               	return	
  1393  0025F8  D7EE               	goto	l3490
  1394  0025FA                     __end_of_show:
  1395                           	opt stack 0
  1396                           tblptru	equ	0xFF8
  1397                           indf2	equ	0xFDF
  1398                           fsr2h	equ	0xFDA
  1399                           fsr2l	equ	0xFD9
  1400                           status	equ	0xFD8
  1401                           
  1402 ;; *************** function _dat *****************
  1403 ;; Defined at:
  1404 ;;		line 84 in file "main.c"
  1405 ;; Parameters:    Size  Location     Type
  1406 ;;  b               1    0[COMRAM] unsigned char 
  1407 ;; Auto vars:     Size  Location     Type
  1408 ;;		None
  1409 ;; Return value:  Size  Location     Type
  1410 ;;		None               void
  1411 ;; Registers used:
  1412 ;;		wreg, status,2, status,0
  1413 ;; Tracked objects:
  1414 ;;		On entry : 0/0
  1415 ;;		On exit  : 0/0
  1416 ;;		Unchanged: 0/0
  1417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1418 ;;      Params:         1       0       0       0       0       0       0       0       0
  1419 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1420 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1421 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1422 ;;Total ram usage:        1 bytes
  1423 ;; Hardware stack levels used:    1
  1424 ;; This function calls:
  1425 ;;		Nothing
  1426 ;; This function is called by:
  1427 ;;		_show
  1428 ;; This function uses a non-reentrant model
  1429 ;;
  1430                           
  1431                           	psect	text4
  1432  00257C                     __ptext4:
  1433                           	opt stack 0
  1434  00257C                     _dat:
  1435                           	opt stack 29
  1436                           
  1437                           ;main.c: 85: PORTD = b;
  1438                           
  1439                           ;incstack = 0
  1440                           ;incstack = 0
  1441  00257C  C001  FF83         	movff	dat@b,3971	;volatile
  1442                           
  1443                           ;main.c: 86: RC0 = 1;
  1444  002580  8082               	bsf	3970,0,c	;volatile
  1445                           
  1446                           ;main.c: 87: RC1 = 0;
  1447  002582  9282               	bcf	3970,1,c	;volatile
  1448                           
  1449                           ;main.c: 88: RC2 = 1;
  1450  002584  8482               	bsf	3970,2,c	;volatile
  1451                           
  1452                           ;main.c: 89: for (i = 0; i <= 1000; i++);
  1453  002586  0E00               	movlw	0
  1454  002588  6E5D               	movwf	_i+1,c
  1455  00258A  0E00               	movlw	0
  1456  00258C  6E5C               	movwf	_i,c
  1457  00258E  505D               	movf	_i+1,w,c
  1458  002590  0A80               	xorlw	128
  1459  002592  0F7D               	addlw	-131
  1460  002594  0EE9               	movlw	233
  1461  002596  B4D8               	btfsc	status,2,c
  1462  002598  5C5C               	subwf	_i,w,c
  1463  00259A  B0D8               	btfsc	status,0,c
  1464  00259C  D003               	goto	l88
  1465  00259E  4A5C               	infsnz	_i,f,c
  1466  0025A0  2A5D               	incf	_i+1,f,c
  1467  0025A2  D7F5               	goto	L8
  1468  0025A4                     l88:
  1469                           
  1470                           ;main.c: 90: RC2 = 0;
  1471  0025A4  9482               	bcf	3970,2,c	;volatile
  1472  0025A6  0012               	return	
  1473  0025A8                     __end_of_dat:
  1474                           	opt stack 0
  1475                           tblptru	equ	0xFF8
  1476                           indf2	equ	0xFDF
  1477                           fsr2h	equ	0xFDA
  1478                           fsr2l	equ	0xFD9
  1479                           status	equ	0xFD8
  1480                           
  1481 ;; *************** function _sprintf *****************
  1482 ;; Defined at:
  1483 ;;		line 493 in file "E:\Program Files\Microchip\xc8\v1.20\sources\common\doprnt.c"
  1484 ;; Parameters:    Size  Location     Type
  1485 ;;  sp              2   74[COMRAM] PTR unsigned char 
  1486 ;;		 -> main@mystr(10), 
  1487 ;;  f               2   76[COMRAM] PTR const unsigned char 
  1488 ;;		 -> STR_1(3), 
  1489 ;; Auto vars:     Size  Location     Type
  1490 ;;  vd              2    9[BANK0 ] unsigned int 
  1491 ;;  vd              2   11[BANK0 ] unsigned int 
  1492 ;;  _val            5   17[BANK0 ] struct .
  1493 ;;  fval            3   28[BANK0 ] struct .
  1494 ;;  integ           3   22[BANK0 ] struct .
  1495 ;;  ival            3    0        struct .
  1496 ;;  exp             2   25[BANK0 ] int 
  1497 ;;  prec            2   15[BANK0 ] int 
  1498 ;;  flag            2   13[BANK0 ] unsigned short 
  1499 ;;  ap              2    7[BANK0 ] PTR void [1]
  1500 ;;		 -> ?_sprintf(2), 
  1501 ;;  width           2    0        int 
  1502 ;;  c               1   27[BANK0 ] char 
  1503 ;;  d               1    0        unsigned char 
  1504 ;; Return value:  Size  Location     Type
  1505 ;;                  2   74[COMRAM] int 
  1506 ;; Registers used:
  1507 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1508 ;; Tracked objects:
  1509 ;;		On entry : 0/0
  1510 ;;		On exit  : 0/0
  1511 ;;		Unchanged: 0/0
  1512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1513 ;;      Params:         7       0       0       0       0       0       0       0       0
  1514 ;;      Locals:         0      31       0       0       0       0       0       0       0
  1515 ;;      Temps:          6       0       0       0       0       0       0       0       0
  1516 ;;      Totals:        13      31       0       0       0       0       0       0       0
  1517 ;;Total ram usage:       44 bytes
  1518 ;; Hardware stack levels used:    1
  1519 ;; Hardware stack levels required when called:    4
  1520 ;; This function calls:
  1521 ;;		_fround
  1522 ;;		_scale
  1523 ;;		__tdiv_to_l_
  1524 ;;		__div_to_l_
  1525 ;;		___asftadd
  1526 ;;		___asftmul
  1527 ;;		___ftmul
  1528 ;;		___asftsub
  1529 ;;		___awdiv
  1530 ;;		___ftge
  1531 ;;		___ftneg
  1532 ;;		___fttol
  1533 ;;		___lldiv
  1534 ;;		___llmod
  1535 ;;		___lltoft
  1536 ;;		___lwmod
  1537 ;;		___wmul
  1538 ;; This function is called by:
  1539 ;;		_main
  1540 ;; This function uses a non-reentrant model
  1541 ;;
  1542                           
  1543                           	psect	text5
  1544  00087A                     __ptext5:
  1545                           	opt stack 0
  1546  00087A                     _sprintf:
  1547                           	opt stack 26
  1548                           
  1549                           ;doprnt.c: 494: va_list ap;
  1550                           ;doprnt.c: 499: signed char c;
  1551                           ;doprnt.c: 501: int width;
  1552                           ;doprnt.c: 504: int prec;
  1553                           ;doprnt.c: 508: unsigned short flag;
  1554                           ;doprnt.c: 515: char d;
  1555                           ;doprnt.c: 516: double fval, integ;
  1556                           ;doprnt.c: 517: int exp;
  1557                           ;doprnt.c: 518: double ival;
  1558                           ;doprnt.c: 519: union {
  1559                           ;doprnt.c: 520: unsigned long _val;
  1560                           ;doprnt.c: 521: struct {
  1561                           ;doprnt.c: 522: const char * _cp;
  1562                           ;doprnt.c: 523: unsigned _len;
  1563                           ;doprnt.c: 524: } _str;
  1564                           ;doprnt.c: 525: } _val;
  1565                           ;doprnt.c: 542: *ap = __va_start();
  1566                           
  1567                           ;incstack = 0
  1568                           ;incstack = 0
  1569  00087A  0E00               	movlw	high (?_sprintf+4)
  1570  00087C  0100               	movlb	0	; () banked
  1571  00087E  0100               	movlb	0	; () banked
  1572  000880  6F68               	movwf	(sprintf@ap+1)& (0+255),b
  1573  000882  0E4F               	movlw	low (?_sprintf+4)
  1574  000884  0100               	movlb	0	; () banked
  1575  000886  6F67               	movwf	sprintf@ap& (0+255),b
  1576                           
  1577                           ;doprnt.c: 545: while(c = *f++) {
  1578  000888  D361               	goto	l4028
  1579  00088A                     l3858:
  1580                           
  1581                           ; BSR set to: 0
  1582                           ;doprnt.c: 547: if(c != '%')
  1583  00088A  0100               	movlb	0	; () banked
  1584  00088C  0100               	movlb	0	; () banked
  1585  00088E  517B               	movf	sprintf@c& (0+255),w,b
  1586  000890  0A25               	xorlw	37
  1587  000892  B4D8               	btfsc	status,2,c
  1588  000894  D008               	goto	l3864
  1589                           
  1590                           ; BSR set to: 0
  1591                           ;doprnt.c: 549: {
  1592                           ;doprnt.c: 550: ((*sp++ = (c)));
  1593  000896  C04B  FFD9         	movff	sprintf@sp,fsr2l
  1594  00089A  C04C  FFDA         	movff	sprintf@sp+1,fsr2h
  1595  00089E  0100               	movlb	0	; () banked
  1596  0008A0  C07B  FFDF         	movff	sprintf@c,indf2
  1597  0008A4  D351               	goto	L9
  1598  0008A6                     l3864:
  1599                           
  1600                           ; BSR set to: 0
  1601                           ;doprnt.c: 552: }
  1602                           ;doprnt.c: 557: flag = 0;
  1603  0008A6  0E00               	movlw	0
  1604  0008A8  0100               	movlb	0	; () banked
  1605  0008AA  0100               	movlb	0	; () banked
  1606  0008AC  6F6E               	movwf	(sprintf@flag+1)& (0+255),b
  1607  0008AE  0E00               	movlw	0
  1608  0008B0  0100               	movlb	0	; () banked
  1609  0008B2  6F6D               	movwf	sprintf@flag& (0+255),b
  1610                           
  1611                           ;doprnt.c: 644: switch(c = *f++) {
  1612  0008B4  D004               	goto	l3870
  1613  0008B6                     l3866:
  1614                           
  1615                           ; BSR set to: 0
  1616                           ;doprnt.c: 672: flag |= 0x400;
  1617  0008B6  0100               	movlb	0	; () banked
  1618  0008B8  0100               	movlb	0	; () banked
  1619  0008BA  856E               	bsf	(sprintf@flag+1)& (0+255),2,b
  1620                           
  1621                           ;doprnt.c: 673: break;
  1622  0008BC  D013               	goto	l3872
  1623  0008BE                     l3870:
  1624                           
  1625                           ; BSR set to: 0
  1626  0008BE  C04D  FFF6         	movff	sprintf@f,tblptrl
  1627  0008C2  C04E  FFF7         	movff	sprintf@f+1,tblptrh
  1628  0008C6  4A4D               	infsnz	sprintf@f,f,c
  1629  0008C8  2A4E               	incf	sprintf@f+1,f,c
  1630  0008CA  0008               	tblrd		*
  1631  0008CC  0100               	movlb	0	; () banked
  1632  0008CE  CFF5 F07B          	movff	tablat,sprintf@c
  1633  0008D2  0100               	movlb	0	; () banked
  1634  0008D4  517B               	movf	sprintf@c& (0+255),w,b
  1635                           
  1636                           ; Switch size 1, requested type "space"
  1637                           ; Number of cases is 2, Range of values is 0 to 102
  1638                           ; switch strategies available:
  1639                           ; Name         Instructions Cycles
  1640                           ; simple_byte            7     4 (average)
  1641                           ;	Chosen strategy is simple_byte
  1642  0008D6  0A00               	xorlw	0	; case 0
  1643  0008D8  B4D8               	btfsc	status,2,c
  1644  0008DA  D345               	goto	l4030
  1645  0008DC  0A66               	xorlw	102	; case 102
  1646  0008DE  B4D8               	btfsc	status,2,c
  1647  0008E0  D7EA               	goto	l3866
  1648  0008E2  D334               	goto	l4028
  1649  0008E4                     l3872:
  1650                           
  1651                           ; BSR set to: 0
  1652                           ;doprnt.c: 834: if(flag & (0x700)) {
  1653  0008E4  0E07               	movlw	7
  1654  0008E6  0100               	movlb	0	; () banked
  1655  0008E8  0100               	movlb	0	; () banked
  1656  0008EA  156E               	andwf	(sprintf@flag+1)& (0+255),w,b
  1657  0008EC  B4D8               	btfsc	status,2,c
  1658  0008EE  D318               	goto	l4022
  1659                           
  1660                           ; BSR set to: 0
  1661                           ;doprnt.c: 838: prec = 6;
  1662  0008F0  0E00               	movlw	0
  1663  0008F2  0100               	movlb	0	; () banked
  1664  0008F4  0100               	movlb	0	; () banked
  1665  0008F6  6F70               	movwf	(sprintf@prec+1)& (0+255),b
  1666  0008F8  0E06               	movlw	6
  1667  0008FA  0100               	movlb	0	; () banked
  1668  0008FC  6F6F               	movwf	sprintf@prec& (0+255),b
  1669                           
  1670                           ; BSR set to: 0
  1671                           ;doprnt.c: 839: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1672  0008FE  C067  FFD9         	movff	sprintf@ap,fsr2l
  1673  000902  C068  FFDA         	movff	sprintf@ap+1,fsr2h
  1674  000906  0100               	movlb	0	; () banked
  1675  000908  CFDE F07C          	movff	postinc2,sprintf@fval
  1676  00090C  0100               	movlb	0	; () banked
  1677  00090E  CFDE F07D          	movff	postinc2,sprintf@fval+1
  1678  000912  0100               	movlb	0	; () banked
  1679  000914  CFDD F07E          	movff	postdec2,sprintf@fval+2
  1680                           
  1681                           ; BSR set to: 0
  1682  000918  0E03               	movlw	3
  1683  00091A  0100               	movlb	0	; () banked
  1684  00091C  0100               	movlb	0	; () banked
  1685  00091E  2767               	addwf	sprintf@ap& (0+255),f,b
  1686  000920  0E00               	movlw	0
  1687  000922  0100               	movlb	0	; () banked
  1688  000924  2368               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1689                           
  1690                           ; BSR set to: 0
  1691                           ;doprnt.c: 840: if(fval < 0.0) {
  1692  000926  0100               	movlb	0	; () banked
  1693  000928  0100               	movlb	0	; () banked
  1694  00092A  517E               	movf	(sprintf@fval+2)& (0+255),w,b
  1695  00092C  0A80               	xorlw	128
  1696  00092E  0F80               	addlw	128
  1697  000930  E107               	bnz	u2525
  1698  000932  0E00               	movlw	0
  1699  000934  0100               	movlb	0	; () banked
  1700  000936  5D7D               	subwf	(sprintf@fval+1)& (0+255),w,b
  1701  000938  E103               	bnz	u2525
  1702  00093A  0E00               	movlw	0
  1703  00093C  0100               	movlb	0	; () banked
  1704  00093E  5D7C               	subwf	sprintf@fval& (0+255),w,b
  1705  000940                     u2525:
  1706  000940  B0D8               	btfsc	status,0,c
  1707  000942  D012               	goto	l3886
  1708                           
  1709                           ; BSR set to: 0
  1710                           ;doprnt.c: 841: fval = -fval;
  1711  000944  C07C  F001         	movff	sprintf@fval,?___ftneg
  1712  000948  C07D  F002         	movff	sprintf@fval+1,?___ftneg+1
  1713  00094C  C07E  F003         	movff	sprintf@fval+2,?___ftneg+2
  1714  000950  ECFD  F012         	call	___ftneg	;wreg free
  1715  000954  C003  F07E         	movff	?___ftneg+2,sprintf@fval+2
  1716  000958  C002  F07D         	movff	?___ftneg+1,sprintf@fval+1
  1717  00095C  C001  F07C         	movff	?___ftneg,sprintf@fval
  1718                           
  1719                           ;doprnt.c: 842: flag |= 0x03;
  1720  000960  0E03               	movlw	3
  1721  000962  0100               	movlb	0	; () banked
  1722  000964  0100               	movlb	0	; () banked
  1723  000966  136D               	iorwf	sprintf@flag& (0+255),f,b
  1724  000968                     l3886:
  1725                           
  1726                           ; BSR set to: 0
  1727                           ;doprnt.c: 843: }
  1728                           ;doprnt.c: 844: exp = 0;
  1729  000968  0E00               	movlw	0
  1730  00096A  0100               	movlb	0	; () banked
  1731  00096C  0100               	movlb	0	; () banked
  1732  00096E  6F7A               	movwf	(sprintf@exp+1)& (0+255),b
  1733  000970  0E00               	movlw	0
  1734  000972  0100               	movlb	0	; () banked
  1735  000974  6F79               	movwf	sprintf@exp& (0+255),b
  1736                           
  1737                           ; BSR set to: 0
  1738                           ;doprnt.c: 845: if( fval!=0) {
  1739  000976  0E7F               	movlw	127
  1740  000978  0100               	movlb	0	; () banked
  1741  00097A  0100               	movlb	0	; () banked
  1742  00097C  157E               	andwf	(sprintf@fval+2)& (0+255),w,b
  1743  00097E  0100               	movlb	0	; () banked
  1744  000980  117D               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1745  000982  0100               	movlb	0	; () banked
  1746  000984  117C               	iorwf	sprintf@fval& (0+255),w,b
  1747  000986  B4D8               	btfsc	status,2,c
  1748  000988  D091               	goto	l3914
  1749                           
  1750                           ; BSR set to: 0
  1751                           ;doprnt.c: 846: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1752  00098A  0E82               	movlw	130
  1753  00098C  6E52               	movwf	??_sprintf& (0+255),c
  1754  00098E  0EFF               	movlw	255
  1755  000990  6E53               	movwf	(??_sprintf+1)& (0+255),c
  1756  000992  0100               	movlb	0	; () banked
  1757  000994  C07C  F054         	movff	sprintf@fval,??_sprintf+2
  1758  000998  0100               	movlb	0	; () banked
  1759  00099A  C07D  F055         	movff	sprintf@fval+1,??_sprintf+3
  1760  00099E  0100               	movlb	0	; () banked
  1761  0009A0  C07E  F056         	movff	sprintf@fval+2,??_sprintf+4
  1762  0009A4  0100               	movlb	0	; () banked
  1763  0009A6  C07F  F057         	movff	sprintf@fval+3,??_sprintf+5
  1764  0009AA  0E10               	movlw	16
  1765  0009AC  D005               	goto	u2540
  1766  0009AE                     u2545:
  1767  0009AE  90D8               	bcf	status,0,c
  1768  0009B0  3257               	rrcf	??_sprintf+5,f,c
  1769  0009B2  3256               	rrcf	??_sprintf+4,f,c
  1770  0009B4  3255               	rrcf	??_sprintf+3,f,c
  1771  0009B6  3254               	rrcf	??_sprintf+2,f,c
  1772  0009B8                     u2540:
  1773  0009B8  2EE8               	decfsz	wreg,f,c
  1774  0009BA  D7F9               	goto	u2545
  1775  0009BC  5054               	movf	??_sprintf+2,w,c
  1776  0009BE  2452               	addwf	??_sprintf,w,c
  1777  0009C0  0100               	movlb	0	; () banked
  1778  0009C2  0100               	movlb	0	; () banked
  1779  0009C4  6F79               	movwf	sprintf@exp& (0+255),b
  1780  0009C6  0100               	movlb	0	; () banked
  1781  0009C8  0E00               	movlw	0
  1782  0009CA  2053               	addwfc	??_sprintf+1,w,c
  1783  0009CC  6F7A               	movwf	(sprintf@exp+1)& (0+255),b
  1784                           
  1785                           ; BSR set to: 0
  1786                           ;doprnt.c: 847: exp--;
  1787  0009CE  0100               	movlb	0	; () banked
  1788  0009D0  0100               	movlb	0	; () banked
  1789  0009D2  0779               	decf	sprintf@exp& (0+255),f,b
  1790  0009D4  A0D8               	btfss	status,0,c
  1791  0009D6  077A               	decf	(sprintf@exp+1)& (0+255),f,b
  1792                           
  1793                           ; BSR set to: 0
  1794                           ;doprnt.c: 848: exp *= 3;
  1795  0009D8  C079  F011         	movff	sprintf@exp,?___wmul
  1796  0009DC  C07A  F012         	movff	sprintf@exp+1,?___wmul+1
  1797  0009E0  0E00               	movlw	0
  1798  0009E2  6E14               	movwf	?___wmul+3,c
  1799  0009E4  0E03               	movlw	3
  1800  0009E6  6E13               	movwf	?___wmul+2,c
  1801  0009E8  EC6D  F012         	call	___wmul	;wreg free
  1802  0009EC  C011  F079         	movff	?___wmul,sprintf@exp
  1803  0009F0  C012  F07A         	movff	?___wmul+1,sprintf@exp+1
  1804                           
  1805                           ;doprnt.c: 849: exp /= 10;
  1806  0009F4  C079  F008         	movff	sprintf@exp,?___awdiv
  1807  0009F8  C07A  F009         	movff	sprintf@exp+1,?___awdiv+1
  1808  0009FC  0E00               	movlw	0
  1809  0009FE  6E0B               	movwf	?___awdiv+3,c
  1810  000A00  0E0A               	movlw	10
  1811  000A02  6E0A               	movwf	?___awdiv+2,c
  1812  000A04  EC9E  F010         	call	___awdiv	;wreg free
  1813  000A08  C008  F079         	movff	?___awdiv,sprintf@exp
  1814  000A0C  C009  F07A         	movff	?___awdiv+1,sprintf@exp+1
  1815                           
  1816                           ;doprnt.c: 850: if(exp < 0)
  1817  000A10  0100               	movlb	0	; () banked
  1818  000A12  0100               	movlb	0	; () banked
  1819  000A14  AF7A               	btfss	(sprintf@exp+1)& (0+255),7,b
  1820  000A16  D005               	goto	l3902
  1821                           
  1822                           ; BSR set to: 0
  1823                           ;doprnt.c: 851: exp--;
  1824  000A18  0100               	movlb	0	; () banked
  1825  000A1A  0100               	movlb	0	; () banked
  1826  000A1C  0779               	decf	sprintf@exp& (0+255),f,b
  1827  000A1E  A0D8               	btfss	status,0,c
  1828  000A20  077A               	decf	(sprintf@exp+1)& (0+255),f,b
  1829  000A22                     l3902:
  1830                           
  1831                           ; BSR set to: 0
  1832                           ;doprnt.c: 855: integ = scale(-exp);
  1833  000A22  0100               	movlb	0	; () banked
  1834  000A24  0100               	movlb	0	; () banked
  1835  000A26  5179               	movf	sprintf@exp& (0+255),w,b
  1836  000A28  0800               	sublw	0
  1837  000A2A  6E37               	movwf	?_scale,c
  1838  000A2C  ECBA  F007         	call	_scale	;wreg free
  1839  000A30  C039  F078         	movff	?_scale+2,sprintf@integ+2
  1840  000A34  C038  F077         	movff	?_scale+1,sprintf@integ+1
  1841  000A38  C037  F076         	movff	?_scale,sprintf@integ
  1842                           
  1843                           ;doprnt.c: 856: integ *= fval;
  1844  000A3C  0100               	movlb	0	; () banked
  1845  000A3E  0E00               	movlw	high sprintf@integ
  1846  000A40  6E38               	movwf	?___asftmul+1,c
  1847  000A42  0100               	movlb	0	; () banked
  1848  000A44  0E76               	movlw	low sprintf@integ
  1849  000A46  6E37               	movwf	?___asftmul,c
  1850  000A48  C07C  F039         	movff	sprintf@fval,?___asftmul+2
  1851  000A4C  C07D  F03A         	movff	sprintf@fval+1,?___asftmul+3
  1852  000A50  C07E  F03B         	movff	sprintf@fval+2,?___asftmul+4
  1853  000A54  EC31  F012         	call	___asftmul	;wreg free
  1854                           
  1855                           ;doprnt.c: 857: if(integ < 1.0)
  1856  000A58  C076  F001         	movff	sprintf@integ,?___ftge
  1857  000A5C  C077  F002         	movff	sprintf@integ+1,?___ftge+1
  1858  000A60  C078  F003         	movff	sprintf@integ+2,?___ftge+2
  1859  000A64  0E00               	movlw	0
  1860  000A66  6E04               	movwf	?___ftge+3,c
  1861  000A68  0E80               	movlw	128
  1862  000A6A  6E05               	movwf	?___ftge+4,c
  1863  000A6C  0E3F               	movlw	63
  1864  000A6E  6E06               	movwf	?___ftge+5,c
  1865  000A70  EC56  F010         	call	___ftge	;wreg free
  1866  000A74  B0D8               	btfsc	status,0,c
  1867  000A76  D006               	goto	l3910
  1868                           
  1869                           ;doprnt.c: 858: exp--;
  1870  000A78  0100               	movlb	0	; () banked
  1871  000A7A  0100               	movlb	0	; () banked
  1872  000A7C  0779               	decf	sprintf@exp& (0+255),f,b
  1873  000A7E  A0D8               	btfss	status,0,c
  1874  000A80  077A               	decf	(sprintf@exp+1)& (0+255),f,b
  1875  000A82  D014               	goto	l3914
  1876  000A84                     l3910:
  1877                           
  1878                           ;doprnt.c: 859: else if(integ >= 10.0)
  1879  000A84  C076  F001         	movff	sprintf@integ,?___ftge
  1880  000A88  C077  F002         	movff	sprintf@integ+1,?___ftge+1
  1881  000A8C  C078  F003         	movff	sprintf@integ+2,?___ftge+2
  1882  000A90  0E00               	movlw	0
  1883  000A92  6E04               	movwf	?___ftge+3,c
  1884  000A94  0E20               	movlw	32
  1885  000A96  6E05               	movwf	?___ftge+4,c
  1886  000A98  0E41               	movlw	65
  1887  000A9A  6E06               	movwf	?___ftge+5,c
  1888  000A9C  EC56  F010         	call	___ftge	;wreg free
  1889  000AA0  A0D8               	btfss	status,0,c
  1890  000AA2  D004               	goto	l3914
  1891                           
  1892                           ;doprnt.c: 860: exp++;
  1893  000AA4  0100               	movlb	0	; () banked
  1894  000AA6  0100               	movlb	0	; () banked
  1895  000AA8  4B79               	infsnz	sprintf@exp& (0+255),f,b
  1896  000AAA  2B7A               	incf	(sprintf@exp+1)& (0+255),f,b
  1897  000AAC                     l3914:
  1898                           
  1899                           ;doprnt.c: 861: }
  1900                           ;doprnt.c: 1121: if(prec <= 12)
  1901  000AAC  0100               	movlb	0	; () banked
  1902  000AAE  0100               	movlb	0	; () banked
  1903  000AB0  5170               	movf	(sprintf@prec+1)& (0+255),w,b
  1904  000AB2  0A80               	xorlw	128
  1905  000AB4  0F80               	addlw	-128
  1906  000AB6  0E0D               	movlw	13
  1907  000AB8  B4D8               	btfsc	status,2,c
  1908  000ABA  5D6F               	subwf	sprintf@prec& (0+255),w,b
  1909  000ABC  B0D8               	btfsc	status,0,c
  1910  000ABE  D012               	goto	l3918
  1911                           
  1912                           ; BSR set to: 0
  1913                           ;doprnt.c: 1122: fval += fround(prec);
  1914  000AC0  0100               	movlb	0	; () banked
  1915  000AC2  0E00               	movlw	high sprintf@fval
  1916  000AC4  6E47               	movwf	?___asftadd+1,c
  1917  000AC6  0100               	movlb	0	; () banked
  1918  000AC8  0E7C               	movlw	low sprintf@fval
  1919  000ACA  6E46               	movwf	?___asftadd,c
  1920  000ACC  C06F  F037         	movff	sprintf@prec,?_fround
  1921  000AD0  EC52  F00B         	call	_fround	;wreg free
  1922  000AD4  C039  F04A         	movff	?_fround+2,?___asftadd+4
  1923  000AD8  C038  F049         	movff	?_fround+1,?___asftadd+3
  1924  000ADC  C037  F048         	movff	?_fround,?___asftadd+2
  1925  000AE0  EC4F  F012         	call	___asftadd	;wreg free
  1926  000AE4                     l3918:
  1927                           
  1928                           ;doprnt.c: 1125: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1929  000AE4  0100               	movlb	0	; () banked
  1930  000AE6  0100               	movlb	0	; () banked
  1931  000AE8  517A               	movf	(sprintf@exp+1)& (0+255),w,b
  1932  000AEA  0A80               	xorlw	128
  1933  000AEC  0F80               	addlw	-128
  1934  000AEE  0E0A               	movlw	10
  1935  000AF0  B4D8               	btfsc	status,2,c
  1936  000AF2  5D79               	subwf	sprintf@exp& (0+255),w,b
  1937  000AF4  B0D8               	btfsc	status,0,c
  1938  000AF6  D022               	goto	l3926
  1939                           
  1940                           ; BSR set to: 0
  1941  000AF8  0E7F               	movlw	127
  1942  000AFA  0100               	movlb	0	; () banked
  1943  000AFC  0100               	movlb	0	; () banked
  1944  000AFE  157E               	andwf	(sprintf@fval+2)& (0+255),w,b
  1945  000B00  0100               	movlb	0	; () banked
  1946  000B02  117D               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1947  000B04  0100               	movlb	0	; () banked
  1948  000B06  117C               	iorwf	sprintf@fval& (0+255),w,b
  1949  000B08  B4D8               	btfsc	status,2,c
  1950  000B0A  D067               	goto	l3942
  1951                           
  1952                           ; BSR set to: 0
  1953  000B0C  C07C  F017         	movff	sprintf@fval,?___fttol
  1954  000B10  C07D  F018         	movff	sprintf@fval+1,?___fttol+1
  1955  000B14  C07E  F019         	movff	sprintf@fval+2,?___fttol+2
  1956  000B18  EC8A  F00F         	call	___fttol	;wreg free
  1957  000B1C  501A               	movf	?___fttol+3,w,c
  1958  000B1E  1017               	iorwf	?___fttol,w,c
  1959  000B20  1018               	iorwf	?___fttol+1,w,c
  1960  000B22  1019               	iorwf	?___fttol+2,w,c
  1961  000B24  A4D8               	btfss	status,2,c
  1962  000B26  D059               	goto	l3942
  1963  000B28  0100               	movlb	0	; () banked
  1964  000B2A  0100               	movlb	0	; () banked
  1965  000B2C  517A               	movf	(sprintf@exp+1)& (0+255),w,b
  1966  000B2E  0A80               	xorlw	128
  1967  000B30  0F80               	addlw	-128
  1968  000B32  0E02               	movlw	2
  1969  000B34  B4D8               	btfsc	status,2,c
  1970  000B36  5D79               	subwf	sprintf@exp& (0+255),w,b
  1971  000B38  A0D8               	btfss	status,0,c
  1972  000B3A  D04F               	goto	l3942
  1973  000B3C                     l3926:
  1974                           
  1975                           ; BSR set to: 0
  1976                           ;doprnt.c: 1129: if(integ < 4.294967296){
  1977  000B3C  C076  F001         	movff	sprintf@integ,?___ftge
  1978  000B40  C077  F002         	movff	sprintf@integ+1,?___ftge+1
  1979  000B44  C078  F003         	movff	sprintf@integ+2,?___ftge+2
  1980  000B48  0E70               	movlw	112
  1981  000B4A  6E04               	movwf	?___ftge+3,c
  1982  000B4C  0E89               	movlw	137
  1983  000B4E  6E05               	movwf	?___ftge+4,c
  1984  000B50  0E40               	movlw	64
  1985  000B52  6E06               	movwf	?___ftge+5,c
  1986  000B54  EC56  F010         	call	___ftge	;wreg free
  1987  000B58  B0D8               	btfsc	status,0,c
  1988  000B5A  D003               	goto	l3930
  1989                           
  1990                           ;doprnt.c: 1130: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1991  000B5C  0100               	movlb	0	; () banked
  1992  000B5E  0EF7               	movlw	247
  1993  000B60  D002               	goto	L10
  1994  000B62                     l3930:
  1995                           
  1996                           ;doprnt.c: 1132: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1997  000B62  0100               	movlb	0	; () banked
  1998  000B64  0EF8               	movlw	248
  1999  000B66                     L10:
  2000  000B66  0100               	movlb	0	; () banked
  2001  000B68  2779               	addwf	sprintf@exp& (0+255),f,b
  2002  000B6A  0EFF               	movlw	255
  2003  000B6C  0100               	movlb	0	; () banked
  2004  000B6E  237A               	addwfc	(sprintf@exp+1)& (0+255),f,b
  2005                           
  2006                           ; BSR set to: 0
  2007                           ;doprnt.c: 1133: }
  2008                           ;doprnt.c: 1134: integ = scale(exp);
  2009                           
  2010                           ; BSR set to: 0
  2011  000B70  C079  F037         	movff	sprintf@exp,?_scale
  2012  000B74  ECBA  F007         	call	_scale	;wreg free
  2013  000B78  C039  F078         	movff	?_scale+2,sprintf@integ+2
  2014  000B7C  C038  F077         	movff	?_scale+1,sprintf@integ+1
  2015  000B80  C037  F076         	movff	?_scale,sprintf@integ
  2016                           
  2017                           ;doprnt.c: 1135: _val._val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,integ) : _div_to_l
      +                          _(fval,integ));
  2018  000B84  C07C  F001         	movff	sprintf@fval,?__tdiv_to_l_
  2019  000B88  C07D  F002         	movff	sprintf@fval+1,?__tdiv_to_l_+1
  2020  000B8C  C07E  F003         	movff	sprintf@fval+2,?__tdiv_to_l_+2
  2021  000B90  C076  F004         	movff	sprintf@integ,?__tdiv_to_l_+3
  2022  000B94  C077  F005         	movff	sprintf@integ+1,?__tdiv_to_l_+4
  2023  000B98  C078  F006         	movff	sprintf@integ+2,?__tdiv_to_l_+5
  2024  000B9C  EC78  F00D         	call	__tdiv_to_l_	;wreg free
  2025  000BA0  C004  F066         	movff	?__tdiv_to_l_+3,_sprintf$204+3
  2026  000BA4  C003  F065         	movff	?__tdiv_to_l_+2,_sprintf$204+2
  2027  000BA8  C002  F064         	movff	?__tdiv_to_l_+1,_sprintf$204+1
  2028  000BAC  C001  F063         	movff	?__tdiv_to_l_,_sprintf$204
  2029  000BB0  C063  F071         	movff	_sprintf$204,sprintf@_val
  2030  000BB4  C064  F072         	movff	_sprintf$204+1,sprintf@_val+1
  2031  000BB8  C065  F073         	movff	_sprintf$204+2,sprintf@_val+2
  2032  000BBC  C066  F074         	movff	_sprintf$204+3,sprintf@_val+3
  2033                           
  2034                           ;doprnt.c: 1138: fval = 0.0;
  2035  000BC0  0E00               	movlw	0
  2036  000BC2  0100               	movlb	0	; () banked
  2037  000BC4  0100               	movlb	0	; () banked
  2038  000BC6  6F7C               	movwf	sprintf@fval& (0+255),b
  2039  000BC8  0E00               	movlw	0
  2040  000BCA  0100               	movlb	0	; () banked
  2041  000BCC  0100               	movlb	0	; () banked
  2042  000BCE  6F7D               	movwf	(sprintf@fval+1)& (0+255),b
  2043  000BD0  0E00               	movlw	0
  2044  000BD2  0100               	movlb	0	; () banked
  2045  000BD4  0100               	movlb	0	; () banked
  2046  000BD6  6F7E               	movwf	(sprintf@fval+2)& (0+255),b
  2047                           
  2048                           ;doprnt.c: 1139: } else {
  2049  000BD8  D02F               	goto	l3948
  2050  000BDA                     l3942:
  2051                           
  2052                           ;doprnt.c: 1140: _val._val = (unsigned long)fval;
  2053  000BDA  C07C  F017         	movff	sprintf@fval,?___fttol
  2054  000BDE  C07D  F018         	movff	sprintf@fval+1,?___fttol+1
  2055  000BE2  C07E  F019         	movff	sprintf@fval+2,?___fttol+2
  2056  000BE6  EC8A  F00F         	call	___fttol	;wreg free
  2057  000BEA  C01A  F074         	movff	?___fttol+3,sprintf@_val+3
  2058  000BEE  C019  F073         	movff	?___fttol+2,sprintf@_val+2
  2059  000BF2  C018  F072         	movff	?___fttol+1,sprintf@_val+1
  2060  000BF6  C017  F071         	movff	?___fttol,sprintf@_val
  2061                           
  2062                           ;doprnt.c: 1141: fval -= (double)_val._val;
  2063  000BFA  0100               	movlb	0	; () banked
  2064  000BFC  0E00               	movlw	high sprintf@fval
  2065  000BFE  6E1E               	movwf	?___asftsub+1,c
  2066  000C00  0100               	movlb	0	; () banked
  2067  000C02  0E7C               	movlw	low sprintf@fval
  2068  000C04  6E1D               	movwf	?___asftsub,c
  2069  000C06  C071  F009         	movff	sprintf@_val,?___lltoft
  2070  000C0A  C072  F00A         	movff	sprintf@_val+1,?___lltoft+1
  2071  000C0E  C073  F00B         	movff	sprintf@_val+2,?___lltoft+2
  2072  000C12  C074  F00C         	movff	sprintf@_val+3,?___lltoft+3
  2073  000C16  EC9C  F011         	call	___lltoft	;wreg free
  2074  000C1A  C00B  F021         	movff	?___lltoft+2,?___asftsub+4
  2075  000C1E  C00A  F020         	movff	?___lltoft+1,?___asftsub+3
  2076  000C22  C009  F01F         	movff	?___lltoft,?___asftsub+2
  2077  000C26  EC13  F012         	call	___asftsub	;wreg free
  2078                           
  2079                           ;doprnt.c: 1142: exp = 0;
  2080  000C2A  0E00               	movlw	0
  2081  000C2C  0100               	movlb	0	; () banked
  2082  000C2E  0100               	movlb	0	; () banked
  2083  000C30  6F7A               	movwf	(sprintf@exp+1)& (0+255),b
  2084  000C32  0E00               	movlw	0
  2085  000C34  0100               	movlb	0	; () banked
  2086  000C36  6F79               	movwf	sprintf@exp& (0+255),b
  2087  000C38                     l3948:
  2088                           
  2089                           ; BSR set to: 0
  2090                           ;doprnt.c: 1143: }
  2091                           ;doprnt.c: 1145: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2092  000C38  6E52               	movwf	??_sprintf& (0+255),c
  2093  000C3A  0E01               	movlw	1
  2094  000C3C  0100               	movlb	0	; () banked
  2095  000C3E  0100               	movlb	0	; () banked
  2096  000C40  6F7B               	movwf	sprintf@c& (0+255),b
  2097  000C42  5052               	movf	??_sprintf& (0+255),w,c
  2098  000C44                     
  2099                           ; BSR set to: 0
  2100  000C44  0100               	movlb	0	; () banked
  2101  000C46  0100               	movlb	0	; () banked
  2102  000C48  517B               	movf	sprintf@c& (0+255),w,b
  2103  000C4A  0A0A               	xorlw	10
  2104  000C4C  B4D8               	btfsc	status,2,c
  2105  000C4E  D021               	goto	l3962
  2106                           
  2107                           ; BSR set to: 0
  2108                           ;doprnt.c: 1146: if(_val._val < dpowers[c])
  2109                           
  2110                           ; BSR set to: 0
  2111                           
  2112                           ; BSR set to: 0
  2113  000C50  0100               	movlb	0	; () banked
  2114  000C52  0100               	movlb	0	; () banked
  2115  000C54  517B               	movf	sprintf@c& (0+255),w,b
  2116  000C56  0D04               	mullw	4
  2117  000C58  0E00               	movlw	low _dpowers
  2118  000C5A  24F3               	addwf	prodl,w,c
  2119  000C5C  6EF6               	movwf	tblptrl,c
  2120  000C5E  0E08               	movlw	high _dpowers
  2121  000C60  20F4               	addwfc	prodh,w,c
  2122  000C62  6EF7               	movwf	tblptrh,c
  2123  000C64  0009               	tblrd		*+
  2124  000C66  50F5               	movf	tablat,w,c
  2125  000C68  0100               	movlb	0	; () banked
  2126  000C6A  0100               	movlb	0	; () banked
  2127  000C6C  5D71               	subwf	sprintf@_val& (0+255),w,b
  2128  000C6E  0009               	tblrd		*+
  2129  000C70  50F5               	movf	tablat,w,c
  2130  000C72  0100               	movlb	0	; () banked
  2131  000C74  5972               	subwfb	(sprintf@_val+1)& (0+255),w,b
  2132  000C76  0009               	tblrd		*+
  2133  000C78  50F5               	movf	tablat,w,c
  2134  000C7A  0100               	movlb	0	; () banked
  2135  000C7C  5973               	subwfb	(sprintf@_val+2)& (0+255),w,b
  2136  000C7E  0009               	tblrd		*+
  2137  000C80  50F5               	movf	tablat,w,c
  2138  000C82  0100               	movlb	0	; () banked
  2139  000C84  5974               	subwfb	(sprintf@_val+3)& (0+255),w,b
  2140  000C86  A0D8               	btfss	status,0,c
  2141  000C88  D004               	goto	l3962
  2142                           
  2143                           ; BSR set to: 0
  2144                           
  2145                           ; BSR set to: 0
  2146                           
  2147                           ; BSR set to: 0
  2148                           ;doprnt.c: 1147: break;
  2149  000C8A  0100               	movlb	0	; () banked
  2150  000C8C  0100               	movlb	0	; () banked
  2151  000C8E  2B7B               	incf	sprintf@c& (0+255),f,b
  2152  000C90  D7D9               	goto	L11
  2153  000C92                     l3962:
  2154                           
  2155                           ; BSR set to: 0
  2156                           ;doprnt.c: 1182: {
  2157                           ;doprnt.c: 1195: if(flag & 0x03)
  2158  000C92  0E03               	movlw	3
  2159  000C94  0100               	movlb	0	; () banked
  2160  000C96  0100               	movlb	0	; () banked
  2161  000C98  156D               	andwf	sprintf@flag& (0+255),w,b
  2162  000C9A  6E52               	movwf	??_sprintf& (0+255),c
  2163  000C9C  0E00               	movlw	0
  2164  000C9E  0100               	movlb	0	; () banked
  2165  000CA0  0100               	movlb	0	; () banked
  2166  000CA2  156E               	andwf	(sprintf@flag+1)& (0+255),w,b
  2167  000CA4  6E53               	movwf	(??_sprintf+1)& (0+255),c
  2168  000CA6  5053               	movf	??_sprintf+1,w,c
  2169  000CA8  1052               	iorwf	??_sprintf,w,c
  2170  000CAA  B4D8               	btfsc	status,2,c
  2171  000CAC  D043               	goto	l3976
  2172                           
  2173                           ; BSR set to: 0
  2174                           ;doprnt.c: 1197: ((*sp++ = ('-')));
  2175  000CAE  C04B  FFD9         	movff	sprintf@sp,fsr2l
  2176  000CB2  C04C  FFDA         	movff	sprintf@sp+1,fsr2h
  2177  000CB6  0E2D               	movlw	45
  2178  000CB8  D03A               	goto	L12
  2179  000CBA                     l3968:
  2180                           
  2181                           ; BSR set to: 0
  2182                           ;doprnt.c: 1207: {
  2183                           ;doprnt.c: 1208: unsigned vd = _val._val/dpowers[c];
  2184  000CBA  C071  F001         	movff	sprintf@_val,?___lldiv
  2185  000CBE  C072  F002         	movff	sprintf@_val+1,?___lldiv+1
  2186  000CC2  C073  F003         	movff	sprintf@_val+2,?___lldiv+2
  2187  000CC6  C074  F004         	movff	sprintf@_val+3,?___lldiv+3
  2188  000CCA  0100               	movlb	0	; () banked
  2189  000CCC  0100               	movlb	0	; () banked
  2190  000CCE  517B               	movf	sprintf@c& (0+255),w,b
  2191  000CD0  0D04               	mullw	4
  2192  000CD2  0E00               	movlw	low _dpowers
  2193  000CD4  24F3               	addwf	prodl,w,c
  2194  000CD6  6EF6               	movwf	tblptrl,c
  2195  000CD8  0E08               	movlw	high _dpowers
  2196  000CDA  20F4               	addwfc	prodh,w,c
  2197  000CDC  6EF7               	movwf	tblptrh,c
  2198  000CDE  0009               	tblrd		*+
  2199  000CE0  CFF5 F005          	movff	tablat,?___lldiv+4
  2200  000CE4  0009               	tblrd		*+
  2201  000CE6  CFF5 F006          	movff	tablat,?___lldiv+5
  2202  000CEA  0009               	tblrd		*+
  2203  000CEC  CFF5 F007          	movff	tablat,?___lldiv+6
  2204  000CF0  000A               	tblrd		*-
  2205  000CF2  CFF5 F008          	movff	tablat,?___lldiv+7
  2206  000CF6  ECE6  F010         	call	___lldiv	;wreg free
  2207  000CFA  C001  F069         	movff	?___lldiv,sprintf@vd
  2208  000CFE  C002  F06A         	movff	?___lldiv+1,sprintf@vd+1
  2209                           
  2210                           ;doprnt.c: 1209: vd %= 10;
  2211  000D02  C069  F001         	movff	sprintf@vd,?___lwmod
  2212  000D06  C06A  F002         	movff	sprintf@vd+1,?___lwmod+1
  2213  000D0A  0E00               	movlw	0
  2214  000D0C  6E04               	movwf	?___lwmod+3,c
  2215  000D0E  0E0A               	movlw	10
  2216  000D10  6E03               	movwf	?___lwmod+2,c
  2217  000D12  ECCE  F011         	call	___lwmod	;wreg free
  2218  000D16  C001  F069         	movff	?___lwmod,sprintf@vd
  2219  000D1A  C002  F06A         	movff	?___lwmod+1,sprintf@vd+1
  2220                           
  2221                           ;doprnt.c: 1210: ((*sp++ = ('0' + vd)));
  2222  000D1E  0100               	movlb	0	; () banked
  2223  000D20  0100               	movlb	0	; () banked
  2224  000D22  5169               	movf	sprintf@vd& (0+255),w,b
  2225  000D24  0F30               	addlw	48
  2226  000D26  C04B  FFD9         	movff	sprintf@sp,fsr2l
  2227  000D2A  C04C  FFDA         	movff	sprintf@sp+1,fsr2h
  2228  000D2E                     L12:
  2229  000D2E  6EDF               	movwf	indf2,c
  2230                           
  2231                           ; BSR set to: 0
  2232  000D30  4A4B               	infsnz	sprintf@sp,f,c
  2233  000D32  2A4C               	incf	sprintf@sp+1,f,c
  2234  000D34                     l3976:
  2235                           
  2236                           ; BSR set to: 0
  2237  000D34  0100               	movlb	0	; () banked
  2238  000D36  0100               	movlb	0	; () banked
  2239  000D38  077B               	decf	sprintf@c& (0+255),f,b
  2240  000D3A  0100               	movlb	0	; () banked
  2241  000D3C  297B               	incf	sprintf@c& (0+255),w,b
  2242  000D3E  B4D8               	btfsc	status,2,c
  2243  000D40  D00E               	goto	l3984
  2244  000D42  D7BB               	goto	l3968
  2245  000D44                     l3978:
  2246                           
  2247                           ; BSR set to: 0
  2248                           ;doprnt.c: 1215: ((*sp++ = ('0')));
  2249  000D44  C04B  FFD9         	movff	sprintf@sp,fsr2l
  2250  000D48  C04C  FFDA         	movff	sprintf@sp+1,fsr2h
  2251  000D4C  0E30               	movlw	48
  2252  000D4E  6EDF               	movwf	indf2,c
  2253                           
  2254                           ; BSR set to: 0
  2255  000D50  4A4B               	infsnz	sprintf@sp,f,c
  2256  000D52  2A4C               	incf	sprintf@sp+1,f,c
  2257                           
  2258                           ; BSR set to: 0
  2259                           ;doprnt.c: 1216: exp--;
  2260  000D54  0100               	movlb	0	; () banked
  2261  000D56  0100               	movlb	0	; () banked
  2262  000D58  0779               	decf	sprintf@exp& (0+255),f,b
  2263  000D5A  A0D8               	btfss	status,0,c
  2264  000D5C  077A               	decf	(sprintf@exp+1)& (0+255),f,b
  2265  000D5E                     l3984:
  2266                           
  2267                           ; BSR set to: 0
  2268  000D5E  0100               	movlb	0	; () banked
  2269  000D60  0100               	movlb	0	; () banked
  2270  000D62  517A               	movf	(sprintf@exp+1)& (0+255),w,b
  2271  000D64  0A80               	xorlw	128
  2272  000D66  0F80               	addlw	-128
  2273  000D68  0E01               	movlw	1
  2274  000D6A  B4D8               	btfsc	status,2,c
  2275  000D6C  5D79               	subwf	sprintf@exp& (0+255),w,b
  2276  000D6E  B0D8               	btfsc	status,0,c
  2277  000D70  D7E9               	goto	l3978
  2278                           
  2279                           ; BSR set to: 0
  2280                           ;doprnt.c: 1217: }
  2281                           ;doprnt.c: 1218: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2282                           
  2283                           ; BSR set to: 0
  2284  000D72  0100               	movlb	0	; () banked
  2285  000D74  0100               	movlb	0	; () banked
  2286  000D76  5170               	movf	(sprintf@prec+1)& (0+255),w,b
  2287  000D78  0A80               	xorlw	128
  2288  000D7A  0F80               	addlw	-128
  2289  000D7C  0E09               	movlw	9
  2290  000D7E  B4D8               	btfsc	status,2,c
  2291  000D80  5D6F               	subwf	sprintf@prec& (0+255),w,b
  2292  000D82  A0D8               	btfss	status,0,c
  2293  000D84  D007               	goto	l171
  2294                           
  2295                           ; BSR set to: 0
  2296                           ;doprnt.c: 1219: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2297  000D86  6E52               	movwf	??_sprintf& (0+255),c
  2298  000D88  0E08               	movlw	8
  2299  000D8A  0100               	movlb	0	; () banked
  2300  000D8C  0100               	movlb	0	; () banked
  2301  000D8E  6F7B               	movwf	sprintf@c& (0+255),b
  2302  000D90  5052               	movf	??_sprintf& (0+255),w,c
  2303  000D92  D002               	goto	l3990
  2304  000D94                     l171:
  2305                           
  2306                           ; BSR set to: 0
  2307                           ;doprnt.c: 1220: else
  2308                           ;doprnt.c: 1221: c = prec;
  2309  000D94  C06F  F07B         	movff	sprintf@prec,sprintf@c
  2310  000D98                     l3990:
  2311                           
  2312                           ; BSR set to: 0
  2313                           ;doprnt.c: 1222: prec -= c;
  2314  000D98  0100               	movlb	0	; () banked
  2315  000D9A  0100               	movlb	0	; () banked
  2316  000D9C  517B               	movf	sprintf@c& (0+255),w,b
  2317  000D9E  0100               	movlb	0	; () banked
  2318  000DA0  0100               	movlb	0	; () banked
  2319  000DA2  5F6F               	subwf	sprintf@prec& (0+255),f,b
  2320  000DA4  0E00               	movlw	0
  2321  000DA6  0100               	movlb	0	; () banked
  2322  000DA8  BF7B               	btfsc	sprintf@c& (0+255),7,b
  2323  000DAA  0EFF               	movlw	255
  2324  000DAC  0100               	movlb	0	; () banked
  2325  000DAE  0100               	movlb	0	; () banked
  2326  000DB0  5B70               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2327                           
  2328                           ; BSR set to: 0
  2329                           ;doprnt.c: 1226: if(c)
  2330  000DB2  0100               	movlb	0	; () banked
  2331  000DB4  0100               	movlb	0	; () banked
  2332  000DB6  517B               	movf	sprintf@c& (0+255),w,b
  2333  000DB8  B4D8               	btfsc	status,2,c
  2334  000DBA  D008               	goto	l3998
  2335                           
  2336                           ; BSR set to: 0
  2337                           ;doprnt.c: 1228: ((*sp++ = ('.')));
  2338  000DBC  C04B  FFD9         	movff	sprintf@sp,fsr2l
  2339  000DC0  C04C  FFDA         	movff	sprintf@sp+1,fsr2h
  2340  000DC4  0E2E               	movlw	46
  2341  000DC6  6EDF               	movwf	indf2,c
  2342                           
  2343                           ; BSR set to: 0
  2344  000DC8  4A4B               	infsnz	sprintf@sp,f,c
  2345  000DCA  2A4C               	incf	sprintf@sp+1,f,c
  2346  000DCC                     l3998:
  2347                           
  2348                           ; BSR set to: 0
  2349                           ;doprnt.c: 1234: _val._val = (long)(fval * scale(c));
  2350  000DCC  C07B  F037         	movff	sprintf@c,?_scale
  2351  000DD0  ECBA  F007         	call	_scale	;wreg free
  2352  000DD4  C039  F062         	movff	?_scale+2,_sprintf$806+2
  2353  000DD8  C038  F061         	movff	?_scale+1,_sprintf$806+1
  2354  000DDC  C037  F060         	movff	?_scale,_sprintf$806
  2355                           
  2356                           ;doprnt.c: 1234: _val._val = (long)(fval * scale(c));
  2357  000DE0  C07C  F029         	movff	sprintf@fval,?___ftmul+3
  2358  000DE4  C07D  F02A         	movff	sprintf@fval+1,?___ftmul+4
  2359  000DE8  C07E  F02B         	movff	sprintf@fval+2,?___ftmul+5
  2360  000DEC  C060  F026         	movff	_sprintf$806,?___ftmul
  2361  000DF0  C061  F027         	movff	_sprintf$806+1,?___ftmul+1
  2362  000DF4  C062  F028         	movff	_sprintf$806+2,?___ftmul+2
  2363  000DF8  EC09  F00E         	call	___ftmul	;wreg free
  2364  000DFC  C028  F019         	movff	?___ftmul+2,?___fttol+2
  2365  000E00  C027  F018         	movff	?___ftmul+1,?___fttol+1
  2366  000E04  C026  F017         	movff	?___ftmul,?___fttol
  2367  000E08  EC8A  F00F         	call	___fttol	;wreg free
  2368  000E0C  C01A  F074         	movff	?___fttol+3,sprintf@_val+3
  2369  000E10  C019  F073         	movff	?___fttol+2,sprintf@_val+2
  2370  000E14  C018  F072         	movff	?___fttol+1,sprintf@_val+1
  2371  000E18  C017  F071         	movff	?___fttol,sprintf@_val
  2372                           
  2373                           ;doprnt.c: 1235: while(c--) {
  2374  000E1C  D065               	goto	l4012
  2375  000E1E                     l4002:
  2376                           
  2377                           ;doprnt.c: 1236: unsigned vd = _val._val/dpowers[c];
  2378  000E1E  C071  F001         	movff	sprintf@_val,?___lldiv
  2379  000E22  C072  F002         	movff	sprintf@_val+1,?___lldiv+1
  2380  000E26  C073  F003         	movff	sprintf@_val+2,?___lldiv+2
  2381  000E2A  C074  F004         	movff	sprintf@_val+3,?___lldiv+3
  2382  000E2E  0100               	movlb	0	; () banked
  2383  000E30  0100               	movlb	0	; () banked
  2384  000E32  517B               	movf	sprintf@c& (0+255),w,b
  2385  000E34  0D04               	mullw	4
  2386  000E36  0E00               	movlw	low _dpowers
  2387  000E38  24F3               	addwf	prodl,w,c
  2388  000E3A  6EF6               	movwf	tblptrl,c
  2389  000E3C  0E08               	movlw	high _dpowers
  2390  000E3E  20F4               	addwfc	prodh,w,c
  2391  000E40  6EF7               	movwf	tblptrh,c
  2392  000E42  0009               	tblrd		*+
  2393  000E44  CFF5 F005          	movff	tablat,?___lldiv+4
  2394  000E48  0009               	tblrd		*+
  2395  000E4A  CFF5 F006          	movff	tablat,?___lldiv+5
  2396  000E4E  0009               	tblrd		*+
  2397  000E50  CFF5 F007          	movff	tablat,?___lldiv+6
  2398  000E54  000A               	tblrd		*-
  2399  000E56  CFF5 F008          	movff	tablat,?___lldiv+7
  2400  000E5A  ECE6  F010         	call	___lldiv	;wreg free
  2401  000E5E  C001  F06B         	movff	?___lldiv,sprintf@vd_206
  2402  000E62  C002  F06C         	movff	?___lldiv+1,sprintf@vd_206+1
  2403                           
  2404                           ;doprnt.c: 1237: vd %= 10;
  2405  000E66  C06B  F001         	movff	sprintf@vd_206,?___lwmod
  2406  000E6A  C06C  F002         	movff	sprintf@vd_206+1,?___lwmod+1
  2407  000E6E  0E00               	movlw	0
  2408  000E70  6E04               	movwf	?___lwmod+3,c
  2409  000E72  0E0A               	movlw	10
  2410  000E74  6E03               	movwf	?___lwmod+2,c
  2411  000E76  ECCE  F011         	call	___lwmod	;wreg free
  2412  000E7A  C001  F06B         	movff	?___lwmod,sprintf@vd_206
  2413  000E7E  C002  F06C         	movff	?___lwmod+1,sprintf@vd_206+1
  2414                           
  2415                           ;doprnt.c: 1238: ((*sp++ = ('0' + vd)));
  2416  000E82  0100               	movlb	0	; () banked
  2417  000E84  0100               	movlb	0	; () banked
  2418  000E86  516B               	movf	sprintf@vd_206& (0+255),w,b
  2419  000E88  0F30               	addlw	48
  2420  000E8A  C04B  FFD9         	movff	sprintf@sp,fsr2l
  2421  000E8E  C04C  FFDA         	movff	sprintf@sp+1,fsr2h
  2422  000E92  6EDF               	movwf	indf2,c
  2423                           
  2424                           ; BSR set to: 0
  2425  000E94  4A4B               	infsnz	sprintf@sp,f,c
  2426  000E96  2A4C               	incf	sprintf@sp+1,f,c
  2427                           
  2428                           ; BSR set to: 0
  2429                           ;doprnt.c: 1239: _val._val %= dpowers[c];
  2430  000E98  C071  F001         	movff	sprintf@_val,?___llmod
  2431  000E9C  C072  F002         	movff	sprintf@_val+1,?___llmod+1
  2432  000EA0  C073  F003         	movff	sprintf@_val+2,?___llmod+2
  2433  000EA4  C074  F004         	movff	sprintf@_val+3,?___llmod+3
  2434  000EA8  0100               	movlb	0	; () banked
  2435  000EAA  0100               	movlb	0	; () banked
  2436  000EAC  517B               	movf	sprintf@c& (0+255),w,b
  2437  000EAE  0D04               	mullw	4
  2438  000EB0  0E00               	movlw	low _dpowers
  2439  000EB2  24F3               	addwf	prodl,w,c
  2440  000EB4  6EF6               	movwf	tblptrl,c
  2441  000EB6  0E08               	movlw	high _dpowers
  2442  000EB8  20F4               	addwfc	prodh,w,c
  2443  000EBA  6EF7               	movwf	tblptrh,c
  2444  000EBC  0009               	tblrd		*+
  2445  000EBE  CFF5 F005          	movff	tablat,?___llmod+4
  2446  000EC2  0009               	tblrd		*+
  2447  000EC4  CFF5 F006          	movff	tablat,?___llmod+5
  2448  000EC8  0009               	tblrd		*+
  2449  000ECA  CFF5 F007          	movff	tablat,?___llmod+6
  2450  000ECE  000A               	tblrd		*-
  2451  000ED0  CFF5 F008          	movff	tablat,?___llmod+7
  2452  000ED4  EC67  F011         	call	___llmod	;wreg free
  2453  000ED8  C004  F074         	movff	?___llmod+3,sprintf@_val+3
  2454  000EDC  C003  F073         	movff	?___llmod+2,sprintf@_val+2
  2455  000EE0  C002  F072         	movff	?___llmod+1,sprintf@_val+1
  2456  000EE4  C001  F071         	movff	?___llmod,sprintf@_val
  2457  000EE8                     l4012:
  2458  000EE8  0100               	movlb	0	; () banked
  2459  000EEA  0100               	movlb	0	; () banked
  2460  000EEC  077B               	decf	sprintf@c& (0+255),f,b
  2461  000EEE  0100               	movlb	0	; () banked
  2462  000EF0  297B               	incf	sprintf@c& (0+255),w,b
  2463  000EF2  B4D8               	btfsc	status,2,c
  2464  000EF4  D00E               	goto	l4020
  2465  000EF6  D793               	goto	l4002
  2466  000EF8                     l4014:
  2467                           
  2468                           ; BSR set to: 0
  2469                           ;doprnt.c: 1243: ((*sp++ = ('0')));
  2470  000EF8  C04B  FFD9         	movff	sprintf@sp,fsr2l
  2471  000EFC  C04C  FFDA         	movff	sprintf@sp+1,fsr2h
  2472  000F00  0E30               	movlw	48
  2473  000F02  6EDF               	movwf	indf2,c
  2474                           
  2475                           ; BSR set to: 0
  2476  000F04  4A4B               	infsnz	sprintf@sp,f,c
  2477  000F06  2A4C               	incf	sprintf@sp+1,f,c
  2478                           
  2479                           ; BSR set to: 0
  2480                           ;doprnt.c: 1244: prec--;
  2481  000F08  0100               	movlb	0	; () banked
  2482  000F0A  0100               	movlb	0	; () banked
  2483  000F0C  076F               	decf	sprintf@prec& (0+255),f,b
  2484  000F0E  A0D8               	btfss	status,0,c
  2485  000F10  0770               	decf	(sprintf@prec+1)& (0+255),f,b
  2486  000F12                     l4020:
  2487                           
  2488                           ; BSR set to: 0
  2489  000F12  0100               	movlb	0	; () banked
  2490  000F14  0100               	movlb	0	; () banked
  2491  000F16  5170               	movf	(sprintf@prec+1)& (0+255),w,b
  2492  000F18  116F               	iorwf	sprintf@prec& (0+255),w,b
  2493  000F1A  B4D8               	btfsc	status,2,c
  2494  000F1C  D017               	goto	l4028
  2495  000F1E  D7EC               	goto	l4014
  2496  000F20                     l4022:
  2497                           
  2498                           ; BSR set to: 0
  2499                           ;doprnt.c: 1253: }
  2500                           ;doprnt.c: 1429: {
  2501                           ;doprnt.c: 1445: if(flag & 0x03)
  2502  000F20  0E03               	movlw	3
  2503  000F22  0100               	movlb	0	; () banked
  2504  000F24  0100               	movlb	0	; () banked
  2505  000F26  156D               	andwf	sprintf@flag& (0+255),w,b
  2506  000F28  6E52               	movwf	??_sprintf& (0+255),c
  2507  000F2A  0E00               	movlw	0
  2508  000F2C  0100               	movlb	0	; () banked
  2509  000F2E  0100               	movlb	0	; () banked
  2510  000F30  156E               	andwf	(sprintf@flag+1)& (0+255),w,b
  2511  000F32  6E53               	movwf	(??_sprintf+1)& (0+255),c
  2512  000F34  5053               	movf	??_sprintf+1,w,c
  2513  000F36  1052               	iorwf	??_sprintf,w,c
  2514  000F38  B4D8               	btfsc	status,2,c
  2515  000F3A  D008               	goto	l4028
  2516                           
  2517                           ; BSR set to: 0
  2518                           ;doprnt.c: 1446: ((*sp++ = ('-')));
  2519  000F3C  C04B  FFD9         	movff	sprintf@sp,fsr2l
  2520  000F40  C04C  FFDA         	movff	sprintf@sp+1,fsr2h
  2521  000F44  0E2D               	movlw	45
  2522  000F46  6EDF               	movwf	indf2,c
  2523  000F48                     L9:
  2524                           
  2525                           ; BSR set to: 0
  2526  000F48  4A4B               	infsnz	sprintf@sp,f,c
  2527  000F4A  2A4C               	incf	sprintf@sp+1,f,c
  2528  000F4C                     l4028:
  2529                           
  2530                           ; BSR set to: 0
  2531  000F4C  C04D  FFF6         	movff	sprintf@f,tblptrl
  2532  000F50  C04E  FFF7         	movff	sprintf@f+1,tblptrh
  2533  000F54  4A4D               	infsnz	sprintf@f,f,c
  2534  000F56  2A4E               	incf	sprintf@f+1,f,c
  2535  000F58  0008               	tblrd		*
  2536  000F5A  0100               	movlb	0	; () banked
  2537  000F5C  CFF5 F07B          	movff	tablat,sprintf@c
  2538  000F60  0100               	movlb	0	; () banked
  2539  000F62  677B               	tstfsz	sprintf@c& (0+255),b
  2540  000F64  D492               	goto	l3858
  2541  000F66                     l4030:
  2542                           
  2543                           ; BSR set to: 0
  2544                           ;doprnt.c: 1545: *sp = 0;
  2545  000F66  C04B  FFD9         	movff	sprintf@sp,fsr2l
  2546  000F6A  C04C  FFDA         	movff	sprintf@sp+1,fsr2h
  2547  000F6E  0E00               	movlw	0
  2548  000F70  6EDF               	movwf	indf2,c
  2549                           
  2550                           ; BSR set to: 0
  2551                           
  2552                           ; BSR set to: 0
  2553                           ;doprnt.c: 1547: return 0;
  2554                           ;	Return value of _sprintf is never used
  2555  000F72  0012               	return	
  2556  000F74                     __end_of_sprintf:
  2557                           	opt stack 0
  2558                           tblptru	equ	0xFF8
  2559                           tblptrh	equ	0xFF7
  2560                           tblptrl	equ	0xFF6
  2561                           tablat	equ	0xFF5
  2562                           prodh	equ	0xFF4
  2563                           prodl	equ	0xFF3
  2564                           wreg	equ	0xFE8
  2565                           indf2	equ	0xFDF
  2566                           postinc2	equ	0xFDE
  2567                           postdec2	equ	0xFDD
  2568                           fsr2h	equ	0xFDA
  2569                           fsr2l	equ	0xFD9
  2570                           status	equ	0xFD8
  2571                           
  2572 ;; *************** function ___lwmod *****************
  2573 ;; Defined at:
  2574 ;;		line 10 in file "E:\Program Files\Microchip\xc8\v1.20\sources\common\lwmod.c"
  2575 ;; Parameters:    Size  Location     Type
  2576 ;;  dividend        2    0[COMRAM] unsigned int 
  2577 ;;  divisor         2    2[COMRAM] unsigned int 
  2578 ;; Auto vars:     Size  Location     Type
  2579 ;;  counter         1    5[COMRAM] unsigned char 
  2580 ;; Return value:  Size  Location     Type
  2581 ;;                  2    0[COMRAM] unsigned int 
  2582 ;; Registers used:
  2583 ;;		wreg, status,2, status,0
  2584 ;; Tracked objects:
  2585 ;;		On entry : 0/0
  2586 ;;		On exit  : 0/0
  2587 ;;		Unchanged: 0/0
  2588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2589 ;;      Params:         4       0       0       0       0       0       0       0       0
  2590 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2591 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2592 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2593 ;;Total ram usage:        6 bytes
  2594 ;; Hardware stack levels used:    1
  2595 ;; This function calls:
  2596 ;;		Nothing
  2597 ;; This function is called by:
  2598 ;;		_sprintf
  2599 ;; This function uses a non-reentrant model
  2600 ;;
  2601                           
  2602                           	psect	text6
  2603  00239C                     __ptext6:
  2604                           	opt stack 0
  2605  00239C                     ___lwmod:
  2606                           	opt stack 29
  2607                           
  2608                           ; BSR set to: 0
  2609                           ;incstack = 0
  2610                           ;incstack = 0
  2611  00239C  5004               	movf	___lwmod@divisor+1,w,c
  2612  00239E  1003               	iorwf	___lwmod@divisor,w,c
  2613  0023A0  B4D8               	btfsc	status,2,c
  2614  0023A2  D01A               	goto	l732
  2615  0023A4  6E05               	movwf	??___lwmod& (0+255),c
  2616  0023A6  0E01               	movlw	1
  2617  0023A8  6E06               	movwf	___lwmod@counter,c
  2618  0023AA  5005               	movf	??___lwmod& (0+255),w,c
  2619  0023AC  D004               	goto	l3476
  2620  0023AE                     l3474:
  2621  0023AE  90D8               	bcf	status,0,c
  2622  0023B0  3603               	rlcf	___lwmod@divisor,f,c
  2623  0023B2  3604               	rlcf	___lwmod@divisor+1,f,c
  2624  0023B4  2A06               	incf	___lwmod@counter,f,c
  2625  0023B6                     l3476:
  2626  0023B6  AE04               	btfss	___lwmod@divisor+1,7,c
  2627  0023B8  D7FA               	goto	l3474
  2628  0023BA                     l3478:
  2629  0023BA  5003               	movf	___lwmod@divisor,w,c
  2630  0023BC  5C01               	subwf	___lwmod@dividend,w,c
  2631  0023BE  5004               	movf	___lwmod@divisor+1,w,c
  2632  0023C0  5802               	subwfb	___lwmod@dividend+1,w,c
  2633  0023C2  A0D8               	btfss	status,0,c
  2634  0023C4  D004               	goto	l3482
  2635  0023C6  5003               	movf	___lwmod@divisor,w,c
  2636  0023C8  5E01               	subwf	___lwmod@dividend,f,c
  2637  0023CA  5004               	movf	___lwmod@divisor+1,w,c
  2638  0023CC  5A02               	subwfb	___lwmod@dividend+1,f,c
  2639  0023CE                     l3482:
  2640  0023CE  90D8               	bcf	status,0,c
  2641  0023D0  3204               	rrcf	___lwmod@divisor+1,f,c
  2642  0023D2  3203               	rrcf	___lwmod@divisor,f,c
  2643  0023D4  2E06               	decfsz	___lwmod@counter,f,c
  2644  0023D6  D7F1               	goto	l3478
  2645  0023D8                     l732:
  2646  0023D8  C001  F001         	movff	___lwmod@dividend,?___lwmod
  2647  0023DC  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
  2648  0023E0  0012               	return	
  2649  0023E2                     __end_of___lwmod:
  2650                           	opt stack 0
  2651                           tblptru	equ	0xFF8
  2652                           tblptrh	equ	0xFF7
  2653                           tblptrl	equ	0xFF6
  2654                           tablat	equ	0xFF5
  2655                           prodh	equ	0xFF4
  2656                           prodl	equ	0xFF3
  2657                           wreg	equ	0xFE8
  2658                           indf2	equ	0xFDF
  2659                           postinc2	equ	0xFDE
  2660                           postdec2	equ	0xFDD
  2661                           fsr2h	equ	0xFDA
  2662                           fsr2l	equ	0xFD9
  2663                           status	equ	0xFD8
  2664                           
  2665 ;; *************** function ___lltoft *****************
  2666 ;; Defined at:
  2667 ;;		line 36 in file "E:\Program Files\Microchip\xc8\v1.20\sources\common\lltoft.c"
  2668 ;; Parameters:    Size  Location     Type
  2669 ;;  c               4    8[COMRAM] unsigned long 
  2670 ;; Auto vars:     Size  Location     Type
  2671 ;;  exp             1   16[COMRAM] unsigned char 
  2672 ;; Return value:  Size  Location     Type
  2673 ;;                  3    8[COMRAM] float 
  2674 ;; Registers used:
  2675 ;;		wreg, status,2, status,0, cstack
  2676 ;; Tracked objects:
  2677 ;;		On entry : 0/0
  2678 ;;		On exit  : 0/0
  2679 ;;		Unchanged: 0/0
  2680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2681 ;;      Params:         4       0       0       0       0       0       0       0       0
  2682 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2683 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2684 ;;      Totals:         9       0       0       0       0       0       0       0       0
  2685 ;;Total ram usage:        9 bytes
  2686 ;; Hardware stack levels used:    1
  2687 ;; Hardware stack levels required when called:    1
  2688 ;; This function calls:
  2689 ;;		___ftpack
  2690 ;; This function is called by:
  2691 ;;		_sprintf
  2692 ;; This function uses a non-reentrant model
  2693 ;;
  2694                           
  2695                           	psect	text7
  2696  002338                     __ptext7:
  2697                           	opt stack 0
  2698  002338                     ___lltoft:
  2699                           	opt stack 28
  2700                           
  2701                           ;incstack = 0
  2702                           ;incstack = 0
  2703  002338  6E0D               	movwf	??___lltoft& (0+255),c
  2704  00233A  0E8E               	movlw	142
  2705  00233C  6E11               	movwf	___lltoft@exp,c
  2706  00233E  500D               	movf	??___lltoft& (0+255),w,c
  2707  002340  D006               	goto	l3718
  2708  002342                     l3716:
  2709  002342  90D8               	bcf	status,0,c
  2710  002344  320C               	rrcf	___lltoft@c+3,f,c
  2711  002346  320B               	rrcf	___lltoft@c+2,f,c
  2712  002348  320A               	rrcf	___lltoft@c+1,f,c
  2713  00234A  3209               	rrcf	___lltoft@c,f,c
  2714  00234C  2A11               	incf	___lltoft@exp,f,c
  2715  00234E                     l3718:
  2716  00234E  0E00               	movlw	0
  2717  002350  1409               	andwf	___lltoft@c,w,c
  2718  002352  6E0D               	movwf	??___lltoft& (0+255),c
  2719  002354  0E00               	movlw	0
  2720  002356  140A               	andwf	___lltoft@c+1,w,c
  2721  002358  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  2722  00235A  0E00               	movlw	0
  2723  00235C  140B               	andwf	___lltoft@c+2,w,c
  2724  00235E  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  2725  002360  0EFF               	movlw	255
  2726  002362  140C               	andwf	___lltoft@c+3,w,c
  2727  002364  6E10               	movwf	(??___lltoft+3)& (0+255),c
  2728  002366  5010               	movf	??___lltoft+3,w,c
  2729  002368  100D               	iorwf	??___lltoft,w,c
  2730  00236A  100E               	iorwf	??___lltoft+1,w,c
  2731  00236C  100F               	iorwf	??___lltoft+2,w,c
  2732  00236E  A4D8               	btfss	status,2,c
  2733  002370  D7E8               	goto	l3716
  2734  002372  C009  F001         	movff	___lltoft@c,?___ftpack
  2735  002376  C00A  F002         	movff	___lltoft@c+1,?___ftpack+1
  2736  00237A  C00B  F003         	movff	___lltoft@c+2,?___ftpack+2
  2737  00237E  C011  F004         	movff	___lltoft@exp,?___ftpack+3
  2738  002382  6E0D               	movwf	??___lltoft& (0+255),c
  2739  002384  0E00               	movlw	0
  2740  002386  6E05               	movwf	?___ftpack+4,c
  2741  002388  500D               	movf	??___lltoft& (0+255),w,c
  2742  00238A  ECFA  F00F         	call	___ftpack	;wreg free
  2743  00238E  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  2744  002392  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  2745  002396  C001  F009         	movff	?___ftpack,?___lltoft
  2746  00239A  0012               	return	
  2747  00239C                     __end_of___lltoft:
  2748                           	opt stack 0
  2749                           tblptru	equ	0xFF8
  2750                           tblptrh	equ	0xFF7
  2751                           tblptrl	equ	0xFF6
  2752                           tablat	equ	0xFF5
  2753                           prodh	equ	0xFF4
  2754                           prodl	equ	0xFF3
  2755                           wreg	equ	0xFE8
  2756                           indf2	equ	0xFDF
  2757                           postinc2	equ	0xFDE
  2758                           postdec2	equ	0xFDD
  2759                           fsr2h	equ	0xFDA
  2760                           fsr2l	equ	0xFD9
  2761                           status	equ	0xFD8
  2762                           
  2763 ;; *************** function ___llmod *****************
  2764 ;; Defined at:
  2765 ;;		line 10 in file "E:\Program Files\Microchip\xc8\v1.20\sources\common\llmod.c"
  2766 ;; Parameters:    Size  Location     Type
  2767 ;;  dividend        4    0[COMRAM] unsigned long 
  2768 ;;  divisor         4    4[COMRAM] unsigned long 
  2769 ;; Auto vars:     Size  Location     Type
  2770 ;;  counter         1    9[COMRAM] unsigned char 
  2771 ;; Return value:  Size  Location     Type
  2772 ;;                  4    0[COMRAM] unsigned long 
  2773 ;; Registers used:
  2774 ;;		wreg, status,2, status,0
  2775 ;; Tracked objects:
  2776 ;;		On entry : 0/0
  2777 ;;		On exit  : 0/0
  2778 ;;		Unchanged: 0/0
  2779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2780 ;;      Params:         8       0       0       0       0       0       0       0       0
  2781 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2782 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2783 ;;      Totals:        10       0       0       0       0       0       0       0       0
  2784 ;;Total ram usage:       10 bytes
  2785 ;; Hardware stack levels used:    1
  2786 ;; This function calls:
  2787 ;;		Nothing
  2788 ;; This function is called by:
  2789 ;;		_sprintf
  2790 ;; This function uses a non-reentrant model
  2791 ;;
  2792                           
  2793                           	psect	text8
  2794  0022CE                     __ptext8:
  2795                           	opt stack 0
  2796  0022CE                     ___llmod:
  2797                           	opt stack 29
  2798                           
  2799                           ;incstack = 0
  2800                           ;incstack = 0
  2801  0022CE  5008               	movf	___llmod@divisor+3,w,c
  2802  0022D0  1005               	iorwf	___llmod@divisor,w,c
  2803  0022D2  1006               	iorwf	___llmod@divisor+1,w,c
  2804  0022D4  1007               	iorwf	___llmod@divisor+2,w,c
  2805  0022D6  B4D8               	btfsc	status,2,c
  2806  0022D8  D026               	goto	l663
  2807  0022DA  6E09               	movwf	??___llmod& (0+255),c
  2808  0022DC  0E01               	movlw	1
  2809  0022DE  6E0A               	movwf	___llmod@counter,c
  2810  0022E0  5009               	movf	??___llmod& (0+255),w,c
  2811  0022E2  D006               	goto	l3460
  2812  0022E4                     l3458:
  2813  0022E4  90D8               	bcf	status,0,c
  2814  0022E6  3605               	rlcf	___llmod@divisor,f,c
  2815  0022E8  3606               	rlcf	___llmod@divisor+1,f,c
  2816  0022EA  3607               	rlcf	___llmod@divisor+2,f,c
  2817  0022EC  3608               	rlcf	___llmod@divisor+3,f,c
  2818  0022EE  2A0A               	incf	___llmod@counter,f,c
  2819  0022F0                     l3460:
  2820  0022F0  AE08               	btfss	___llmod@divisor+3,7,c
  2821  0022F2  D7F8               	goto	l3458
  2822  0022F4                     l3462:
  2823  0022F4  5005               	movf	___llmod@divisor,w,c
  2824  0022F6  5C01               	subwf	___llmod@dividend,w,c
  2825  0022F8  5006               	movf	___llmod@divisor+1,w,c
  2826  0022FA  5802               	subwfb	___llmod@dividend+1,w,c
  2827  0022FC  5007               	movf	___llmod@divisor+2,w,c
  2828  0022FE  5803               	subwfb	___llmod@dividend+2,w,c
  2829  002300  5008               	movf	___llmod@divisor+3,w,c
  2830  002302  5804               	subwfb	___llmod@dividend+3,w,c
  2831  002304  A0D8               	btfss	status,0,c
  2832  002306  D008               	goto	l3466
  2833  002308  5005               	movf	___llmod@divisor,w,c
  2834  00230A  5E01               	subwf	___llmod@dividend,f,c
  2835  00230C  5006               	movf	___llmod@divisor+1,w,c
  2836  00230E  5A02               	subwfb	___llmod@dividend+1,f,c
  2837  002310  5007               	movf	___llmod@divisor+2,w,c
  2838  002312  5A03               	subwfb	___llmod@dividend+2,f,c
  2839  002314  5008               	movf	___llmod@divisor+3,w,c
  2840  002316  5A04               	subwfb	___llmod@dividend+3,f,c
  2841  002318                     l3466:
  2842  002318  90D8               	bcf	status,0,c
  2843  00231A  3208               	rrcf	___llmod@divisor+3,f,c
  2844  00231C  3207               	rrcf	___llmod@divisor+2,f,c
  2845  00231E  3206               	rrcf	___llmod@divisor+1,f,c
  2846  002320  3205               	rrcf	___llmod@divisor,f,c
  2847  002322  2E0A               	decfsz	___llmod@counter,f,c
  2848  002324  D7E7               	goto	l3462
  2849  002326                     l663:
  2850  002326  C001  F001         	movff	___llmod@dividend,?___llmod
  2851  00232A  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  2852  00232E  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  2853  002332  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  2854  002336  0012               	return	
  2855  002338                     __end_of___llmod:
  2856                           	opt stack 0
  2857                           tblptru	equ	0xFF8
  2858                           tblptrh	equ	0xFF7
  2859                           tblptrl	equ	0xFF6
  2860                           tablat	equ	0xFF5
  2861                           prodh	equ	0xFF4
  2862                           prodl	equ	0xFF3
  2863                           wreg	equ	0xFE8
  2864                           indf2	equ	0xFDF
  2865                           postinc2	equ	0xFDE
  2866                           postdec2	equ	0xFDD
  2867                           fsr2h	equ	0xFDA
  2868                           fsr2l	equ	0xFD9
  2869                           status	equ	0xFD8
  2870                           
  2871 ;; *************** function ___lldiv *****************
  2872 ;; Defined at:
  2873 ;;		line 10 in file "E:\Program Files\Microchip\xc8\v1.20\sources\common\lldiv.c"
  2874 ;; Parameters:    Size  Location     Type
  2875 ;;  dividend        4    0[COMRAM] unsigned long 
  2876 ;;  divisor         4    4[COMRAM] unsigned long 
  2877 ;; Auto vars:     Size  Location     Type
  2878 ;;  quotient        4    9[COMRAM] unsigned long 
  2879 ;;  counter         1   13[COMRAM] unsigned char 
  2880 ;; Return value:  Size  Location     Type
  2881 ;;                  4    0[COMRAM] unsigned long 
  2882 ;; Registers used:
  2883 ;;		wreg, status,2, status,0
  2884 ;; Tracked objects:
  2885 ;;		On entry : 0/0
  2886 ;;		On exit  : 0/0
  2887 ;;		Unchanged: 0/0
  2888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2889 ;;      Params:         8       0       0       0       0       0       0       0       0
  2890 ;;      Locals:         5       0       0       0       0       0       0       0       0
  2891 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2892 ;;      Totals:        14       0       0       0       0       0       0       0       0
  2893 ;;Total ram usage:       14 bytes
  2894 ;; Hardware stack levels used:    1
  2895 ;; This function calls:
  2896 ;;		Nothing
  2897 ;; This function is called by:
  2898 ;;		_sprintf
  2899 ;; This function uses a non-reentrant model
  2900 ;;
  2901                           
  2902                           	psect	text9
  2903  0021CC                     __ptext9:
  2904                           	opt stack 0
  2905  0021CC                     ___lldiv:
  2906                           	opt stack 29
  2907                           
  2908                           ;incstack = 0
  2909                           ;incstack = 0
  2910  0021CC  0E00               	movlw	0
  2911  0021CE  6E0A               	movwf	___lldiv@quotient,c
  2912  0021D0  0E00               	movlw	0
  2913  0021D2  6E0B               	movwf	___lldiv@quotient+1,c
  2914  0021D4  0E00               	movlw	0
  2915  0021D6  6E0C               	movwf	___lldiv@quotient+2,c
  2916  0021D8  0E00               	movlw	0
  2917  0021DA  6E0D               	movwf	___lldiv@quotient+3,c
  2918  0021DC  5008               	movf	___lldiv@divisor+3,w,c
  2919  0021DE  1005               	iorwf	___lldiv@divisor,w,c
  2920  0021E0  1006               	iorwf	___lldiv@divisor+1,w,c
  2921  0021E2  1007               	iorwf	___lldiv@divisor+2,w,c
  2922  0021E4  B4D8               	btfsc	status,2,c
  2923  0021E6  D02C               	goto	l653
  2924  0021E8  6E09               	movwf	??___lldiv& (0+255),c
  2925  0021EA  0E01               	movlw	1
  2926  0021EC  6E0E               	movwf	___lldiv@counter,c
  2927  0021EE  5009               	movf	??___lldiv& (0+255),w,c
  2928  0021F0  D006               	goto	l3440
  2929  0021F2                     l3438:
  2930  0021F2  90D8               	bcf	status,0,c
  2931  0021F4  3605               	rlcf	___lldiv@divisor,f,c
  2932  0021F6  3606               	rlcf	___lldiv@divisor+1,f,c
  2933  0021F8  3607               	rlcf	___lldiv@divisor+2,f,c
  2934  0021FA  3608               	rlcf	___lldiv@divisor+3,f,c
  2935  0021FC  2A0E               	incf	___lldiv@counter,f,c
  2936  0021FE                     l3440:
  2937  0021FE  AE08               	btfss	___lldiv@divisor+3,7,c
  2938  002200  D7F8               	goto	l3438
  2939  002202                     l3442:
  2940  002202  90D8               	bcf	status,0,c
  2941  002204  360A               	rlcf	___lldiv@quotient,f,c
  2942  002206  360B               	rlcf	___lldiv@quotient+1,f,c
  2943  002208  360C               	rlcf	___lldiv@quotient+2,f,c
  2944  00220A  360D               	rlcf	___lldiv@quotient+3,f,c
  2945  00220C  5005               	movf	___lldiv@divisor,w,c
  2946  00220E  5C01               	subwf	___lldiv@dividend,w,c
  2947  002210  5006               	movf	___lldiv@divisor+1,w,c
  2948  002212  5802               	subwfb	___lldiv@dividend+1,w,c
  2949  002214  5007               	movf	___lldiv@divisor+2,w,c
  2950  002216  5803               	subwfb	___lldiv@dividend+2,w,c
  2951  002218  5008               	movf	___lldiv@divisor+3,w,c
  2952  00221A  5804               	subwfb	___lldiv@dividend+3,w,c
  2953  00221C  A0D8               	btfss	status,0,c
  2954  00221E  D009               	goto	l3450
  2955  002220  5005               	movf	___lldiv@divisor,w,c
  2956  002222  5E01               	subwf	___lldiv@dividend,f,c
  2957  002224  5006               	movf	___lldiv@divisor+1,w,c
  2958  002226  5A02               	subwfb	___lldiv@dividend+1,f,c
  2959  002228  5007               	movf	___lldiv@divisor+2,w,c
  2960  00222A  5A03               	subwfb	___lldiv@dividend+2,f,c
  2961  00222C  5008               	movf	___lldiv@divisor+3,w,c
  2962  00222E  5A04               	subwfb	___lldiv@dividend+3,f,c
  2963  002230  800A               	bsf	___lldiv@quotient,0,c
  2964  002232                     l3450:
  2965  002232  90D8               	bcf	status,0,c
  2966  002234  3208               	rrcf	___lldiv@divisor+3,f,c
  2967  002236  3207               	rrcf	___lldiv@divisor+2,f,c
  2968  002238  3206               	rrcf	___lldiv@divisor+1,f,c
  2969  00223A  3205               	rrcf	___lldiv@divisor,f,c
  2970  00223C  2E0E               	decfsz	___lldiv@counter,f,c
  2971  00223E  D7E1               	goto	l3442
  2972  002240                     l653:
  2973  002240  C00A  F001         	movff	___lldiv@quotient,?___lldiv
  2974  002244  C00B  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  2975  002248  C00C  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  2976  00224C  C00D  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  2977  002250  0012               	return	
  2978  002252                     __end_of___lldiv:
  2979                           	opt stack 0
  2980                           tblptru	equ	0xFF8
  2981                           tblptrh	equ	0xFF7
  2982                           tblptrl	equ	0xFF6
  2983                           tablat	equ	0xFF5
  2984                           prodh	equ	0xFF4
  2985                           prodl	equ	0xFF3
  2986                           wreg	equ	0xFE8
  2987                           indf2	equ	0xFDF
  2988                           postinc2	equ	0xFDE
  2989                           postdec2	equ	0xFDD
  2990                           fsr2h	equ	0xFDA
  2991                           fsr2l	equ	0xFD9
  2992                           status	equ	0xFD8
  2993                           
  2994 ;; *************** function ___fttol *****************
  2995 ;; Defined at:
  2996 ;;		line 45 in file "E:\Program Files\Microchip\xc8\v1.20\sources\common\fttol.c"
  2997 ;; Parameters:    Size  Location     Type
  2998 ;;  f1              3   22[COMRAM] float 
  2999 ;; Auto vars:     Size  Location     Type
  3000 ;;  lval            4   32[COMRAM] unsigned long 
  3001 ;;  exp1            1   36[COMRAM] unsigned char 
  3002 ;;  sign1           1   31[COMRAM] unsigned char 
  3003 ;; Return value:  Size  Location     Type
  3004 ;;                  4   22[COMRAM] long 
  3005 ;; Registers used:
  3006 ;;		wreg, status,2, status,0
  3007 ;; Tracked objects:
  3008 ;;		On entry : 0/0
  3009 ;;		On exit  : 0/0
  3010 ;;		Unchanged: 0/0
  3011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3012 ;;      Params:         4       0       0       0       0       0       0       0       0
  3013 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3014 ;;      Temps:          5       0       0       0       0       0       0       0       0
  3015 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3016 ;;Total ram usage:       15 bytes
  3017 ;; Hardware stack levels used:    1
  3018 ;; This function calls:
  3019 ;;		Nothing
  3020 ;; This function is called by:
  3021 ;;		_sprintf
  3022 ;; This function uses a non-reentrant model
  3023 ;;
  3024                           
  3025                           	psect	text10
  3026  001F14                     __ptext10:
  3027                           	opt stack 0
  3028  001F14                     ___fttol:
  3029                           	opt stack 29
  3030                           
  3031                           ;incstack = 0
  3032                           ;incstack = 0
  3033  001F14  0E0F               	movlw	15
  3034  001F16  6E1B               	movwf	??___fttol& (0+255),c
  3035  001F18  C017  F01C         	movff	___fttol@f1,??___fttol+1
  3036  001F1C  C018  F01D         	movff	___fttol@f1+1,??___fttol+2
  3037  001F20  C019  F01E         	movff	___fttol@f1+2,??___fttol+3
  3038  001F24  281B               	incf	??___fttol,w,c
  3039  001F26  6E1F               	movwf	(??___fttol+4)& (0+255),c
  3040  001F28  D004               	goto	u2420
  3041  001F2A                     u2425:
  3042  001F2A  90D8               	bcf	status,0,c
  3043  001F2C  321E               	rrcf	??___fttol+3,f,c
  3044  001F2E  321D               	rrcf	??___fttol+2,f,c
  3045  001F30  321C               	rrcf	??___fttol+1,f,c
  3046  001F32                     u2420:
  3047  001F32  2E1F               	decfsz	(??___fttol+4)& (0+255),f,c
  3048  001F34  D7FA               	goto	u2425
  3049  001F36  501C               	movf	??___fttol+1,w,c
  3050  001F38  6E25               	movwf	___fttol@exp1,c
  3051  001F3A  6625               	tstfsz	___fttol@exp1& (0+255),c
  3052  001F3C  D001               	goto	l3816
  3053  001F3E  D035               	goto	u2470
  3054  001F40                     l3816:
  3055  001F40  0E17               	movlw	23
  3056  001F42  6E1B               	movwf	??___fttol& (0+255),c
  3057  001F44  C017  F01C         	movff	___fttol@f1,??___fttol+1
  3058  001F48  C018  F01D         	movff	___fttol@f1+1,??___fttol+2
  3059  001F4C  C019  F01E         	movff	___fttol@f1+2,??___fttol+3
  3060  001F50  281B               	incf	??___fttol,w,c
  3061  001F52  6E1F               	movwf	(??___fttol+4)& (0+255),c
  3062  001F54  D004               	goto	u2440
  3063  001F56                     u2445:
  3064  001F56  90D8               	bcf	status,0,c
  3065  001F58  321E               	rrcf	??___fttol+3,f,c
  3066  001F5A  321D               	rrcf	??___fttol+2,f,c
  3067  001F5C  321C               	rrcf	??___fttol+1,f,c
  3068  001F5E                     u2440:
  3069  001F5E  2E1F               	decfsz	(??___fttol+4)& (0+255),f,c
  3070  001F60  D7FA               	goto	u2445
  3071  001F62  501C               	movf	??___fttol+1,w,c
  3072  001F64  6E20               	movwf	___fttol@sign1,c
  3073  001F66  8E18               	bsf	___fttol@f1+1,7,c
  3074  001F68  0EFF               	movlw	255
  3075  001F6A  1617               	andwf	___fttol@f1,f,c
  3076  001F6C  0EFF               	movlw	255
  3077  001F6E  1618               	andwf	___fttol@f1+1,f,c
  3078  001F70  0E00               	movlw	0
  3079  001F72  1619               	andwf	___fttol@f1+2,f,c
  3080  001F74  5017               	movf	___fttol@f1,w,c
  3081  001F76  6E21               	movwf	___fttol@lval,c
  3082  001F78  5018               	movf	___fttol@f1+1,w,c
  3083  001F7A  6E22               	movwf	___fttol@lval+1,c
  3084  001F7C  5019               	movf	___fttol@f1+2,w,c
  3085  001F7E  6E23               	movwf	___fttol@lval+2,c
  3086  001F80  6A24               	clrf	___fttol@lval+3,c
  3087  001F82  0E8E               	movlw	142
  3088  001F84  5E25               	subwf	___fttol@exp1,f,c
  3089  001F86  AE25               	btfss	___fttol@exp1,7,c
  3090  001F88  D00D               	goto	l3838
  3091  001F8A  5025               	movf	___fttol@exp1,w,c
  3092  001F8C  0A80               	xorlw	128
  3093  001F8E  0F8F               	addlw	143
  3094  001F90  A0D8               	btfss	status,0,c
  3095  001F92  D00B               	goto	u2470
  3096  001F94                     l3834:
  3097  001F94  90D8               	bcf	status,0,c
  3098  001F96  3224               	rrcf	___fttol@lval+3,f,c
  3099  001F98  3223               	rrcf	___fttol@lval+2,f,c
  3100  001F9A  3222               	rrcf	___fttol@lval+1,f,c
  3101  001F9C  3221               	rrcf	___fttol@lval,f,c
  3102  001F9E  3E25               	incfsz	___fttol@exp1,f,c
  3103  001FA0  D7F9               	goto	l3834
  3104  001FA2  D014               	goto	l3848
  3105  001FA4                     l3838:
  3106  001FA4  0E17               	movlw	23
  3107  001FA6  6425               	cpfsgt	___fttol@exp1,c
  3108  001FA8  D00F               	goto	l3846
  3109  001FAA                     u2470:
  3110  001FAA  0E00               	movlw	0
  3111  001FAC  6E17               	movwf	?___fttol,c
  3112  001FAE  0E00               	movlw	0
  3113  001FB0  6E18               	movwf	?___fttol+1,c
  3114  001FB2  0E00               	movlw	0
  3115  001FB4  6E19               	movwf	?___fttol+2,c
  3116  001FB6  0E00               	movlw	0
  3117  001FB8  6E1A               	movwf	?___fttol+3,c
  3118  001FBA  D01B               	goto	l614
  3119  001FBC                     l3844:
  3120  001FBC  90D8               	bcf	status,0,c
  3121  001FBE  3621               	rlcf	___fttol@lval,f,c
  3122  001FC0  3622               	rlcf	___fttol@lval+1,f,c
  3123  001FC2  3623               	rlcf	___fttol@lval+2,f,c
  3124  001FC4  3624               	rlcf	___fttol@lval+3,f,c
  3125  001FC6  0625               	decf	___fttol@exp1,f,c
  3126  001FC8                     l3846:
  3127  001FC8  6625               	tstfsz	___fttol@exp1,c
  3128  001FCA  D7F8               	goto	l3844
  3129  001FCC                     l3848:
  3130  001FCC  5020               	movf	___fttol@sign1,w,c
  3131  001FCE  B4D8               	btfsc	status,2,c
  3132  001FD0  D008               	goto	l3852
  3133  001FD2  1E24               	comf	___fttol@lval+3,f,c
  3134  001FD4  1E23               	comf	___fttol@lval+2,f,c
  3135  001FD6  1E22               	comf	___fttol@lval+1,f,c
  3136  001FD8  6C21               	negf	___fttol@lval,c
  3137  001FDA  0E00               	movlw	0
  3138  001FDC  2222               	addwfc	___fttol@lval+1,f,c
  3139  001FDE  2223               	addwfc	___fttol@lval+2,f,c
  3140  001FE0  2224               	addwfc	___fttol@lval+3,f,c
  3141  001FE2                     l3852:
  3142  001FE2  C021  F017         	movff	___fttol@lval,?___fttol
  3143  001FE6  C022  F018         	movff	___fttol@lval+1,?___fttol+1
  3144  001FEA  C023  F019         	movff	___fttol@lval+2,?___fttol+2
  3145  001FEE  C024  F01A         	movff	___fttol@lval+3,?___fttol+3
  3146  001FF2                     l614:
  3147  001FF2  0012               	return	
  3148  001FF4                     __end_of___fttol:
  3149                           	opt stack 0
  3150                           tblptru	equ	0xFF8
  3151                           tblptrh	equ	0xFF7
  3152                           tblptrl	equ	0xFF6
  3153                           tablat	equ	0xFF5
  3154                           prodh	equ	0xFF4
  3155                           prodl	equ	0xFF3
  3156                           wreg	equ	0xFE8
  3157                           indf2	equ	0xFDF
  3158                           postinc2	equ	0xFDE
  3159                           postdec2	equ	0xFDD
  3160                           fsr2h	equ	0xFDA
  3161                           fsr2l	equ	0xFD9
  3162                           status	equ	0xFD8
  3163                           
  3164 ;; *************** function ___ftneg *****************
  3165 ;; Defined at:
  3166 ;;		line 16 in file "E:\Program Files\Microchip\xc8\v1.20\sources\common\ftneg.c"
  3167 ;; Parameters:    Size  Location     Type
  3168 ;;  f1              3    0[COMRAM] float 
  3169 ;; Auto vars:     Size  Location     Type
  3170 ;;		None
  3171 ;; Return value:  Size  Location     Type
  3172 ;;                  3    0[COMRAM] float 
  3173 ;; Registers used:
  3174 ;;		wreg, status,2, status,0
  3175 ;; Tracked objects:
  3176 ;;		On entry : 0/0
  3177 ;;		On exit  : 0/0
  3178 ;;		Unchanged: 0/0
  3179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3180 ;;      Params:         3       0       0       0       0       0       0       0       0
  3181 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3182 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3183 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3184 ;;Total ram usage:        3 bytes
  3185 ;; Hardware stack levels used:    1
  3186 ;; This function calls:
  3187 ;;		Nothing
  3188 ;; This function is called by:
  3189 ;;		_sprintf
  3190 ;; This function uses a non-reentrant model
  3191 ;;
  3192                           
  3193                           	psect	text11
  3194  0025FA                     __ptext11:
  3195                           	opt stack 0
  3196  0025FA                     ___ftneg:
  3197                           	opt stack 29
  3198                           
  3199                           ;incstack = 0
  3200                           ;incstack = 0
  3201  0025FA  0E7F               	movlw	127
  3202  0025FC  1403               	andwf	___ftneg@f1+2,w,c
  3203  0025FE  1002               	iorwf	___ftneg@f1+1,w,c
  3204  002600  1001               	iorwf	___ftneg@f1,w,c
  3205  002602  B4D8               	btfsc	status,2,c
  3206  002604  D006               	goto	l604
  3207  002606  0E00               	movlw	0
  3208  002608  1A01               	xorwf	___ftneg@f1,f,c
  3209  00260A  0E00               	movlw	0
  3210  00260C  1A02               	xorwf	___ftneg@f1+1,f,c
  3211  00260E  0E80               	movlw	128
  3212  002610  1A03               	xorwf	___ftneg@f1+2,f,c
  3213  002612                     l604:
  3214  002612  C001  F001         	movff	___ftneg@f1,?___ftneg
  3215  002616  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  3216  00261A  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  3217  00261E  0012               	return	
  3218  002620                     __end_of___ftneg:
  3219                           	opt stack 0
  3220                           tblptru	equ	0xFF8
  3221                           tblptrh	equ	0xFF7
  3222                           tblptrl	equ	0xFF6
  3223                           tablat	equ	0xFF5
  3224                           prodh	equ	0xFF4
  3225                           prodl	equ	0xFF3
  3226                           wreg	equ	0xFE8
  3227                           indf2	equ	0xFDF
  3228                           postinc2	equ	0xFDE
  3229                           postdec2	equ	0xFDD
  3230                           fsr2h	equ	0xFDA
  3231                           fsr2l	equ	0xFD9
  3232                           status	equ	0xFD8
  3233                           
  3234 ;; *************** function ___ftge *****************
  3235 ;; Defined at:
  3236 ;;		line 5 in file "E:\Program Files\Microchip\xc8\v1.20\sources\common\ftge.c"
  3237 ;; Parameters:    Size  Location     Type
  3238 ;;  ff1             3    0[COMRAM] float 
  3239 ;;  ff2             3    3[COMRAM] float 
  3240 ;; Auto vars:     Size  Location     Type
  3241 ;;		None
  3242 ;; Return value:  Size  Location     Type
  3243 ;;		None               void
  3244 ;; Registers used:
  3245 ;;		wreg, status,2, status,0
  3246 ;; Tracked objects:
  3247 ;;		On entry : 0/0
  3248 ;;		On exit  : 0/0
  3249 ;;		Unchanged: 0/0
  3250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3251 ;;      Params:         6       0       0       0       0       0       0       0       0
  3252 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3253 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3254 ;;      Totals:         9       0       0       0       0       0       0       0       0
  3255 ;;Total ram usage:        9 bytes
  3256 ;; Hardware stack levels used:    1
  3257 ;; This function calls:
  3258 ;;		Nothing
  3259 ;; This function is called by:
  3260 ;;		_main
  3261 ;;		_sprintf
  3262 ;; This function uses a non-reentrant model
  3263 ;;
  3264                           
  3265                           	psect	text12
  3266  0020AC                     __ptext12:
  3267                           	opt stack 0
  3268  0020AC                     ___ftge:
  3269                           	opt stack 30
  3270                           
  3271                           ;incstack = 0
  3272                           ;incstack = 0
  3273  0020AC  AE03               	btfss	___ftge@ff1+2,7,c
  3274  0020AE  D016               	goto	l3414
  3275  0020B0  C001  F007         	movff	___ftge@ff1,??___ftge
  3276  0020B4  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  3277  0020B8  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  3278  0020BC  1E07               	comf	??___ftge,f,c
  3279  0020BE  1E08               	comf	??___ftge+1,f,c
  3280  0020C0  1E09               	comf	??___ftge+2,f,c
  3281  0020C2  2A07               	incf	??___ftge,f,c
  3282  0020C4  0E00               	movlw	0
  3283  0020C6  2208               	addwfc	??___ftge+1,f,c
  3284  0020C8  2209               	addwfc	??___ftge+2,f,c
  3285  0020CA  0E00               	movlw	0
  3286  0020CC  2407               	addwf	??___ftge,w,c
  3287  0020CE  6E01               	movwf	___ftge@ff1,c
  3288  0020D0  0E00               	movlw	0
  3289  0020D2  2008               	addwfc	??___ftge+1,w,c
  3290  0020D4  6E02               	movwf	___ftge@ff1+1,c
  3291  0020D6  0E80               	movlw	128
  3292  0020D8  2009               	addwfc	??___ftge+2,w,c
  3293  0020DA  6E03               	movwf	___ftge@ff1+2,c
  3294  0020DC                     l3414:
  3295  0020DC  AE06               	btfss	___ftge@ff2+2,7,c
  3296  0020DE  D016               	goto	l3418
  3297  0020E0  C004  F007         	movff	___ftge@ff2,??___ftge
  3298  0020E4  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  3299  0020E8  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  3300  0020EC  1E07               	comf	??___ftge,f,c
  3301  0020EE  1E08               	comf	??___ftge+1,f,c
  3302  0020F0  1E09               	comf	??___ftge+2,f,c
  3303  0020F2  2A07               	incf	??___ftge,f,c
  3304  0020F4  0E00               	movlw	0
  3305  0020F6  2208               	addwfc	??___ftge+1,f,c
  3306  0020F8  2209               	addwfc	??___ftge+2,f,c
  3307  0020FA  0E00               	movlw	0
  3308  0020FC  2407               	addwf	??___ftge,w,c
  3309  0020FE  6E04               	movwf	___ftge@ff2,c
  3310  002100  0E00               	movlw	0
  3311  002102  2008               	addwfc	??___ftge+1,w,c
  3312  002104  6E05               	movwf	___ftge@ff2+1,c
  3313  002106  0E80               	movlw	128
  3314  002108  2009               	addwfc	??___ftge+2,w,c
  3315  00210A  6E06               	movwf	___ftge@ff2+2,c
  3316  00210C                     l3418:
  3317  00210C  0E00               	movlw	0
  3318  00210E  1A01               	xorwf	___ftge@ff1,f,c
  3319  002110  0E00               	movlw	0
  3320  002112  1A02               	xorwf	___ftge@ff1+1,f,c
  3321  002114  0E80               	movlw	128
  3322  002116  1A03               	xorwf	___ftge@ff1+2,f,c
  3323  002118  0E00               	movlw	0
  3324  00211A  1A04               	xorwf	___ftge@ff2,f,c
  3325  00211C  0E00               	movlw	0
  3326  00211E  1A05               	xorwf	___ftge@ff2+1,f,c
  3327  002120  0E80               	movlw	128
  3328  002122  1A06               	xorwf	___ftge@ff2+2,f,c
  3329  002124  5004               	movf	___ftge@ff2,w,c
  3330  002126  5C01               	subwf	___ftge@ff1,w,c
  3331  002128  5005               	movf	___ftge@ff2+1,w,c
  3332  00212A  5802               	subwfb	___ftge@ff1+1,w,c
  3333  00212C  5006               	movf	___ftge@ff2+2,w,c
  3334  00212E  5803               	subwfb	___ftge@ff1+2,w,c
  3335  002130  B0D8               	btfsc	status,0,c
  3336  002132  D002               	goto	l3424
  3337  002134  90D8               	bcf	status,0,c
  3338  002136  D001               	goto	l588
  3339  002138                     l3424:
  3340  002138  80D8               	bsf	status,0,c
  3341  00213A                     l588:
  3342  00213A  0012               	return	
  3343  00213C                     __end_of___ftge:
  3344                           	opt stack 0
  3345                           tblptru	equ	0xFF8
  3346                           tblptrh	equ	0xFF7
  3347                           tblptrl	equ	0xFF6
  3348                           tablat	equ	0xFF5
  3349                           prodh	equ	0xFF4
  3350                           prodl	equ	0xFF3
  3351                           wreg	equ	0xFE8
  3352                           indf2	equ	0xFDF
  3353                           postinc2	equ	0xFDE
  3354                           postdec2	equ	0xFDD
  3355                           fsr2h	equ	0xFDA
  3356                           fsr2l	equ	0xFD9
  3357                           status	equ	0xFD8
  3358                           
  3359 ;; *************** function ___asftsub *****************
  3360 ;; Defined at:
  3361 ;;		line 5 in file "E:\Program Files\Microchip\xc8\v1.20\sources\pic18\asftsub.c"
  3362 ;; Parameters:    Size  Location     Type
  3363 ;;  f1p             2   28[COMRAM] PTR float 
  3364 ;;		 -> sprintf@fval(3), 
  3365 ;;  f2              3   30[COMRAM] float 
  3366 ;; Auto vars:     Size  Location     Type
  3367 ;;		None
  3368 ;; Return value:  Size  Location     Type
  3369 ;;                  3   28[COMRAM] float 
  3370 ;; Registers used:
  3371 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3372 ;; Tracked objects:
  3373 ;;		On entry : 0/0
  3374 ;;		On exit  : 0/0
  3375 ;;		Unchanged: 0/0
  3376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3377 ;;      Params:         5       0       0       0       0       0       0       0       0
  3378 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3379 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3380 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3381 ;;Total ram usage:        5 bytes
  3382 ;; Hardware stack levels used:    1
  3383 ;; Hardware stack levels required when called:    3
  3384 ;; This function calls:
  3385 ;;		___ftsub
  3386 ;; This function is called by:
  3387 ;;		_sprintf
  3388 ;; This function uses a non-reentrant model
  3389 ;;
  3390                           
  3391                           	psect	text13
  3392  002426                     __ptext13:
  3393                           	opt stack 0
  3394  002426                     ___asftsub:
  3395                           	opt stack 26
  3396                           
  3397                           ;	Return value of ___asftsub is never used
  3398                           
  3399                           ;incstack = 0
  3400                           ;incstack = 0
  3401  002426  C01D  FFD9         	movff	___asftsub@f1p,fsr2l
  3402  00242A  C01E  FFDA         	movff	___asftsub@f1p+1,fsr2h
  3403  00242E  CFDE F017          	movff	postinc2,?___ftsub
  3404  002432  CFDE F018          	movff	postinc2,?___ftsub+1
  3405  002436  CFDD F019          	movff	postdec2,?___ftsub+2
  3406  00243A  C01F  F01A         	movff	___asftsub@f2,?___ftsub+3
  3407  00243E  C020  F01B         	movff	___asftsub@f2+1,?___ftsub+4
  3408  002442  C021  F01C         	movff	___asftsub@f2+2,?___ftsub+5
  3409  002446  EC8A  F012         	call	___ftsub	;wreg free
  3410  00244A  C01D  FFD9         	movff	___asftsub@f1p,fsr2l
  3411  00244E  C01E  FFDA         	movff	___asftsub@f1p+1,fsr2h
  3412  002452  C017  FFDE         	movff	?___ftsub,postinc2
  3413  002456  C018  FFDE         	movff	?___ftsub+1,postinc2
  3414  00245A  C019  FFDD         	movff	?___ftsub+2,postdec2
  3415  00245E  52DD               	movf	postdec2,f,c
  3416  002460  0012               	return	
  3417  002462                     __end_of___asftsub:
  3418                           	opt stack 0
  3419                           tblptru	equ	0xFF8
  3420                           tblptrh	equ	0xFF7
  3421                           tblptrl	equ	0xFF6
  3422                           tablat	equ	0xFF5
  3423                           prodh	equ	0xFF4
  3424                           prodl	equ	0xFF3
  3425                           wreg	equ	0xFE8
  3426                           indf2	equ	0xFDF
  3427                           postinc2	equ	0xFDE
  3428                           postdec2	equ	0xFDD
  3429                           fsr2h	equ	0xFDA
  3430                           fsr2l	equ	0xFD9
  3431                           status	equ	0xFD8
  3432                           
  3433 ;; *************** function ___ftsub *****************
  3434 ;; Defined at:
  3435 ;;		line 22 in file "E:\Program Files\Microchip\xc8\v1.20\sources\common\ftsub.c"
  3436 ;; Parameters:    Size  Location     Type
  3437 ;;  f1              3   22[COMRAM] float 
  3438 ;;  f2              3   25[COMRAM] float 
  3439 ;; Auto vars:     Size  Location     Type
  3440 ;;		None
  3441 ;; Return value:  Size  Location     Type
  3442 ;;                  3   22[COMRAM] float 
  3443 ;; Registers used:
  3444 ;;		wreg, status,2, status,0, cstack
  3445 ;; Tracked objects:
  3446 ;;		On entry : 0/0
  3447 ;;		On exit  : 0/0
  3448 ;;		Unchanged: 0/0
  3449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3450 ;;      Params:         6       0       0       0       0       0       0       0       0
  3451 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3452 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3453 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3454 ;;Total ram usage:        6 bytes
  3455 ;; Hardware stack levels used:    1
  3456 ;; Hardware stack levels required when called:    2
  3457 ;; This function calls:
  3458 ;;		___ftadd
  3459 ;; This function is called by:
  3460 ;;		___asftsub
  3461 ;; This function uses a non-reentrant model
  3462 ;;
  3463                           
  3464                           	psect	text14
  3465  002514                     __ptext14:
  3466                           	opt stack 0
  3467  002514                     ___ftsub:
  3468                           	opt stack 26
  3469                           
  3470                           ;incstack = 0
  3471                           ;incstack = 0
  3472  002514  0E00               	movlw	0
  3473  002516  1A1A               	xorwf	___ftsub@f2,f,c
  3474  002518  0E00               	movlw	0
  3475  00251A  1A1B               	xorwf	___ftsub@f2+1,f,c
  3476  00251C  0E80               	movlw	128
  3477  00251E  1A1C               	xorwf	___ftsub@f2+2,f,c
  3478  002520  C017  F009         	movff	___ftsub@f1,?___ftadd
  3479  002524  C018  F00A         	movff	___ftsub@f1+1,?___ftadd+1
  3480  002528  C019  F00B         	movff	___ftsub@f1+2,?___ftadd+2
  3481  00252C  C01A  F00C         	movff	___ftsub@f2,?___ftadd+3
  3482  002530  C01B  F00D         	movff	___ftsub@f2+1,?___ftadd+4
  3483  002534  C01C  F00E         	movff	___ftsub@f2+2,?___ftadd+5
  3484  002538  EC92  F00C         	call	___ftadd	;wreg free
  3485  00253C  C00B  F019         	movff	?___ftadd+2,?___ftsub+2
  3486  002540  C00A  F018         	movff	?___ftadd+1,?___ftsub+1
  3487  002544  C009  F017         	movff	?___ftadd,?___ftsub
  3488  002548  0012               	return	
  3489  00254A                     __end_of___ftsub:
  3490                           	opt stack 0
  3491                           tblptru	equ	0xFF8
  3492                           tblptrh	equ	0xFF7
  3493                           tblptrl	equ	0xFF6
  3494                           tablat	equ	0xFF5
  3495                           prodh	equ	0xFF4
  3496                           prodl	equ	0xFF3
  3497                           wreg	equ	0xFE8
  3498                           indf2	equ	0xFDF
  3499                           postinc2	equ	0xFDE
  3500                           postdec2	equ	0xFDD
  3501                           fsr2h	equ	0xFDA
  3502                           fsr2l	equ	0xFD9
  3503                           status	equ	0xFD8
  3504                           
  3505 ;; *************** function ___asftmul *****************
  3506 ;; Defined at:
  3507 ;;		line 5 in file "E:\Program Files\Microchip\xc8\v1.20\sources\pic18\asftmul.c"
  3508 ;; Parameters:    Size  Location     Type
  3509 ;;  f1p             2   54[COMRAM] PTR float 
  3510 ;;		 -> sprintf@integ(3), 
  3511 ;;  f2              3   56[COMRAM] float 
  3512 ;; Auto vars:     Size  Location     Type
  3513 ;;		None
  3514 ;; Return value:  Size  Location     Type
  3515 ;;                  3   54[COMRAM] float 
  3516 ;; Registers used:
  3517 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3518 ;; Tracked objects:
  3519 ;;		On entry : 0/0
  3520 ;;		On exit  : 0/0
  3521 ;;		Unchanged: 0/0
  3522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3523 ;;      Params:         5       0       0       0       0       0       0       0       0
  3524 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3525 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3526 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3527 ;;Total ram usage:        5 bytes
  3528 ;; Hardware stack levels used:    1
  3529 ;; Hardware stack levels required when called:    2
  3530 ;; This function calls:
  3531 ;;		___ftmul
  3532 ;; This function is called by:
  3533 ;;		_sprintf
  3534 ;; This function uses a non-reentrant model
  3535 ;;
  3536                           
  3537                           	psect	text15
  3538  002462                     __ptext15:
  3539                           	opt stack 0
  3540  002462                     ___asftmul:
  3541                           	opt stack 27
  3542                           
  3543                           ;	Return value of ___asftmul is never used
  3544                           
  3545                           ;incstack = 0
  3546                           ;incstack = 0
  3547  002462  C037  FFD9         	movff	___asftmul@f1p,fsr2l
  3548  002466  C038  FFDA         	movff	___asftmul@f1p+1,fsr2h
  3549  00246A  CFDE F026          	movff	postinc2,?___ftmul
  3550  00246E  CFDE F027          	movff	postinc2,?___ftmul+1
  3551  002472  CFDD F028          	movff	postdec2,?___ftmul+2
  3552  002476  C039  F029         	movff	___asftmul@f2,?___ftmul+3
  3553  00247A  C03A  F02A         	movff	___asftmul@f2+1,?___ftmul+4
  3554  00247E  C03B  F02B         	movff	___asftmul@f2+2,?___ftmul+5
  3555  002482  EC09  F00E         	call	___ftmul	;wreg free
  3556  002486  C037  FFD9         	movff	___asftmul@f1p,fsr2l
  3557  00248A  C038  FFDA         	movff	___asftmul@f1p+1,fsr2h
  3558  00248E  C026  FFDE         	movff	?___ftmul,postinc2
  3559  002492  C027  FFDE         	movff	?___ftmul+1,postinc2
  3560  002496  C028  FFDD         	movff	?___ftmul+2,postdec2
  3561  00249A  52DD               	movf	postdec2,f,c
  3562  00249C  0012               	return	
  3563  00249E                     __end_of___asftmul:
  3564                           	opt stack 0
  3565                           tblptru	equ	0xFF8
  3566                           tblptrh	equ	0xFF7
  3567                           tblptrl	equ	0xFF6
  3568                           tablat	equ	0xFF5
  3569                           prodh	equ	0xFF4
  3570                           prodl	equ	0xFF3
  3571                           wreg	equ	0xFE8
  3572                           indf2	equ	0xFDF
  3573                           postinc2	equ	0xFDE
  3574                           postdec2	equ	0xFDD
  3575                           fsr2h	equ	0xFDA
  3576                           fsr2l	equ	0xFD9
  3577                           status	equ	0xFD8
  3578                           
  3579 ;; *************** function ___asftadd *****************
  3580 ;; Defined at:
  3581 ;;		line 5 in file "E:\Program Files\Microchip\xc8\v1.20\sources\pic18\asftadd.c"
  3582 ;; Parameters:    Size  Location     Type
  3583 ;;  f1p             2   69[COMRAM] PTR float 
  3584 ;;		 -> sprintf@fval(3), 
  3585 ;;  f2              3   71[COMRAM] float 
  3586 ;; Auto vars:     Size  Location     Type
  3587 ;;		None
  3588 ;; Return value:  Size  Location     Type
  3589 ;;                  3   69[COMRAM] float 
  3590 ;; Registers used:
  3591 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3592 ;; Tracked objects:
  3593 ;;		On entry : 0/0
  3594 ;;		On exit  : 0/0
  3595 ;;		Unchanged: 0/0
  3596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3597 ;;      Params:         5       0       0       0       0       0       0       0       0
  3598 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3599 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3600 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3601 ;;Total ram usage:        5 bytes
  3602 ;; Hardware stack levels used:    1
  3603 ;; Hardware stack levels required when called:    2
  3604 ;; This function calls:
  3605 ;;		___ftadd
  3606 ;; This function is called by:
  3607 ;;		_sprintf
  3608 ;; This function uses a non-reentrant model
  3609 ;;
  3610                           
  3611                           	psect	text16
  3612  00249E                     __ptext16:
  3613                           	opt stack 0
  3614  00249E                     ___asftadd:
  3615                           	opt stack 27
  3616                           
  3617                           ;	Return value of ___asftadd is never used
  3618                           
  3619                           ;incstack = 0
  3620                           ;incstack = 0
  3621  00249E  C046  FFD9         	movff	___asftadd@f1p,fsr2l
  3622  0024A2  C047  FFDA         	movff	___asftadd@f1p+1,fsr2h
  3623  0024A6  CFDE F009          	movff	postinc2,?___ftadd
  3624  0024AA  CFDE F00A          	movff	postinc2,?___ftadd+1
  3625  0024AE  CFDD F00B          	movff	postdec2,?___ftadd+2
  3626  0024B2  C048  F00C         	movff	___asftadd@f2,?___ftadd+3
  3627  0024B6  C049  F00D         	movff	___asftadd@f2+1,?___ftadd+4
  3628  0024BA  C04A  F00E         	movff	___asftadd@f2+2,?___ftadd+5
  3629  0024BE  EC92  F00C         	call	___ftadd	;wreg free
  3630  0024C2  C046  FFD9         	movff	___asftadd@f1p,fsr2l
  3631  0024C6  C047  FFDA         	movff	___asftadd@f1p+1,fsr2h
  3632  0024CA  C009  FFDE         	movff	?___ftadd,postinc2
  3633  0024CE  C00A  FFDE         	movff	?___ftadd+1,postinc2
  3634  0024D2  C00B  FFDD         	movff	?___ftadd+2,postdec2
  3635  0024D6  52DD               	movf	postdec2,f,c
  3636  0024D8  0012               	return	
  3637  0024DA                     __end_of___asftadd:
  3638                           	opt stack 0
  3639                           tblptru	equ	0xFF8
  3640                           tblptrh	equ	0xFF7
  3641                           tblptrl	equ	0xFF6
  3642                           tablat	equ	0xFF5
  3643                           prodh	equ	0xFF4
  3644                           prodl	equ	0xFF3
  3645                           wreg	equ	0xFE8
  3646                           indf2	equ	0xFDF
  3647                           postinc2	equ	0xFDE
  3648                           postdec2	equ	0xFDD
  3649                           fsr2h	equ	0xFDA
  3650                           fsr2l	equ	0xFD9
  3651                           status	equ	0xFD8
  3652                           
  3653 ;; *************** function ___ftadd *****************
  3654 ;; Defined at:
  3655 ;;		line 87 in file "E:\Program Files\Microchip\xc8\v1.20\sources\common\ftadd.c"
  3656 ;; Parameters:    Size  Location     Type
  3657 ;;  f1              3    8[COMRAM] float 
  3658 ;;  f2              3   11[COMRAM] float 
  3659 ;; Auto vars:     Size  Location     Type
  3660 ;;  exp1            1   21[COMRAM] unsigned char 
  3661 ;;  exp2            1   20[COMRAM] unsigned char 
  3662 ;;  sign            1   19[COMRAM] unsigned char 
  3663 ;; Return value:  Size  Location     Type
  3664 ;;                  3    8[COMRAM] float 
  3665 ;; Registers used:
  3666 ;;		wreg, status,2, status,0, cstack
  3667 ;; Tracked objects:
  3668 ;;		On entry : 0/0
  3669 ;;		On exit  : 0/0
  3670 ;;		Unchanged: 0/0
  3671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3672 ;;      Params:         6       0       0       0       0       0       0       0       0
  3673 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3674 ;;      Temps:          5       0       0       0       0       0       0       0       0
  3675 ;;      Totals:        14       0       0       0       0       0       0       0       0
  3676 ;;Total ram usage:       14 bytes
  3677 ;; Hardware stack levels used:    1
  3678 ;; Hardware stack levels required when called:    1
  3679 ;; This function calls:
  3680 ;;		___ftpack
  3681 ;; This function is called by:
  3682 ;;		___asftadd
  3683 ;;		___ftsub
  3684 ;; This function uses a non-reentrant model
  3685 ;;
  3686                           
  3687                           	psect	text17
  3688  001924                     __ptext17:
  3689                           	opt stack 0
  3690  001924                     ___ftadd:
  3691                           	opt stack 26
  3692                           
  3693                           ;incstack = 0
  3694                           ;incstack = 0
  3695  001924  0E0F               	movlw	15
  3696  001926  6E0F               	movwf	??___ftadd& (0+255),c
  3697  001928  C009  F010         	movff	___ftadd@f1,??___ftadd+1
  3698  00192C  C00A  F011         	movff	___ftadd@f1+1,??___ftadd+2
  3699  001930  C00B  F012         	movff	___ftadd@f1+2,??___ftadd+3
  3700  001934  280F               	incf	??___ftadd,w,c
  3701  001936  6E13               	movwf	(??___ftadd+4)& (0+255),c
  3702  001938  D004               	goto	u1950
  3703  00193A                     u1955:
  3704  00193A  90D8               	bcf	status,0,c
  3705  00193C  3212               	rrcf	??___ftadd+3,f,c
  3706  00193E  3211               	rrcf	??___ftadd+2,f,c
  3707  001940  3210               	rrcf	??___ftadd+1,f,c
  3708  001942                     u1950:
  3709  001942  2E13               	decfsz	(??___ftadd+4)& (0+255),f,c
  3710  001944  D7FA               	goto	u1955
  3711  001946  5010               	movf	??___ftadd+1,w,c
  3712  001948  6E16               	movwf	___ftadd@exp1,c
  3713  00194A  0E0F               	movlw	15
  3714  00194C  6E0F               	movwf	??___ftadd& (0+255),c
  3715  00194E  C00C  F010         	movff	___ftadd@f2,??___ftadd+1
  3716  001952  C00D  F011         	movff	___ftadd@f2+1,??___ftadd+2
  3717  001956  C00E  F012         	movff	___ftadd@f2+2,??___ftadd+3
  3718  00195A  280F               	incf	??___ftadd,w,c
  3719  00195C  6E13               	movwf	(??___ftadd+4)& (0+255),c
  3720  00195E  D004               	goto	u1960
  3721  001960                     u1965:
  3722  001960  90D8               	bcf	status,0,c
  3723  001962  3212               	rrcf	??___ftadd+3,f,c
  3724  001964  3211               	rrcf	??___ftadd+2,f,c
  3725  001966  3210               	rrcf	??___ftadd+1,f,c
  3726  001968                     u1960:
  3727  001968  2E13               	decfsz	(??___ftadd+4)& (0+255),f,c
  3728  00196A  D7FA               	goto	u1965
  3729  00196C  5010               	movf	??___ftadd+1,w,c
  3730  00196E  6E15               	movwf	___ftadd@exp2,c
  3731  001970  5016               	movf	___ftadd@exp1,w,c
  3732  001972  B4D8               	btfsc	status,2,c
  3733  001974  D00B               	goto	l530
  3734  001976  5015               	movf	___ftadd@exp2,w,c
  3735  001978  6016               	cpfslt	___ftadd@exp1,c
  3736  00197A  D00F               	goto	l3504
  3737  00197C  5016               	movf	___ftadd@exp1,w,c
  3738  00197E  0800               	sublw	0
  3739  001980  2415               	addwf	___ftadd@exp2,w,c
  3740  001982  6E0F               	movwf	??___ftadd& (0+255),c
  3741  001984  0E19               	movlw	25
  3742  001986  5C0F               	subwf	??___ftadd,w,c
  3743  001988  A0D8               	btfss	status,0,c
  3744  00198A  D007               	goto	l3504
  3745  00198C                     l530:
  3746  00198C  C00C  F009         	movff	___ftadd@f2,?___ftadd
  3747  001990  C00D  F00A         	movff	___ftadd@f2+1,?___ftadd+1
  3748  001994  C00E  F00B         	movff	___ftadd@f2+2,?___ftadd+2
  3749  001998  D0AA               	goto	l531
  3750  00199A                     l3504:
  3751  00199A  5015               	movf	___ftadd@exp2,w,c
  3752  00199C  B4D8               	btfsc	status,2,c
  3753  00199E  D00B               	goto	l534
  3754  0019A0  5016               	movf	___ftadd@exp1,w,c
  3755  0019A2  6015               	cpfslt	___ftadd@exp2,c
  3756  0019A4  D00F               	goto	l3510
  3757  0019A6  5015               	movf	___ftadd@exp2,w,c
  3758  0019A8  0800               	sublw	0
  3759  0019AA  2416               	addwf	___ftadd@exp1,w,c
  3760  0019AC  6E0F               	movwf	??___ftadd& (0+255),c
  3761  0019AE  0E19               	movlw	25
  3762  0019B0  5C0F               	subwf	??___ftadd,w,c
  3763  0019B2  A0D8               	btfss	status,0,c
  3764  0019B4  D007               	goto	l3510
  3765  0019B6                     l534:
  3766  0019B6  C009  F009         	movff	___ftadd@f1,?___ftadd
  3767  0019BA  C00A  F00A         	movff	___ftadd@f1+1,?___ftadd+1
  3768  0019BE  C00B  F00B         	movff	___ftadd@f1+2,?___ftadd+2
  3769  0019C2  D095               	goto	l531
  3770  0019C4                     l3510:
  3771  0019C4  6E0F               	movwf	??___ftadd& (0+255),c
  3772  0019C6  0E06               	movlw	6
  3773  0019C8  6E14               	movwf	___ftadd@sign,c
  3774  0019CA  500F               	movf	??___ftadd& (0+255),w,c
  3775  0019CC  BE0B               	btfsc	___ftadd@f1+2,7,c
  3776  0019CE  8E14               	bsf	___ftadd@sign,7,c
  3777  0019D0  BE0E               	btfsc	___ftadd@f2+2,7,c
  3778  0019D2  8C14               	bsf	___ftadd@sign,6,c
  3779  0019D4  8E0A               	bsf	___ftadd@f1+1,7,c
  3780  0019D6  0EFF               	movlw	255
  3781  0019D8  1609               	andwf	___ftadd@f1,f,c
  3782  0019DA  0EFF               	movlw	255
  3783  0019DC  160A               	andwf	___ftadd@f1+1,f,c
  3784  0019DE  0E00               	movlw	0
  3785  0019E0  160B               	andwf	___ftadd@f1+2,f,c
  3786  0019E2  8E0D               	bsf	___ftadd@f2+1,7,c
  3787  0019E4  0EFF               	movlw	255
  3788  0019E6  160C               	andwf	___ftadd@f2,f,c
  3789  0019E8  0EFF               	movlw	255
  3790  0019EA  160D               	andwf	___ftadd@f2+1,f,c
  3791  0019EC  0E00               	movlw	0
  3792  0019EE  160E               	andwf	___ftadd@f2+2,f,c
  3793  0019F0  5015               	movf	___ftadd@exp2,w,c
  3794  0019F2  6016               	cpfslt	___ftadd@exp1,c
  3795  0019F4  D018               	goto	l3536
  3796  0019F6                     l3526:
  3797  0019F6  90D8               	bcf	status,0,c
  3798  0019F8  360C               	rlcf	___ftadd@f2,f,c
  3799  0019FA  360D               	rlcf	___ftadd@f2+1,f,c
  3800  0019FC  360E               	rlcf	___ftadd@f2+2,f,c
  3801  0019FE  0615               	decf	___ftadd@exp2,f,c
  3802  001A00  5015               	movf	___ftadd@exp2,w,c
  3803  001A02  1816               	xorwf	___ftadd@exp1,w,c
  3804  001A04  B4D8               	btfsc	status,2,c
  3805  001A06  D00B               	goto	l3534
  3806  001A08  0614               	decf	___ftadd@sign,f,c
  3807  001A0A  5014               	movf	___ftadd@sign& (0+255),w,c
  3808  001A0C  0B07               	andlw	7
  3809  001A0E  B4D8               	btfsc	status,2,c
  3810  001A10  D006               	goto	l3534
  3811  001A12  D7F1               	goto	l3526
  3812  001A14                     l3532:
  3813  001A14  90D8               	bcf	status,0,c
  3814  001A16  320B               	rrcf	___ftadd@f1+2,f,c
  3815  001A18  320A               	rrcf	___ftadd@f1+1,f,c
  3816  001A1A  3209               	rrcf	___ftadd@f1,f,c
  3817  001A1C  2A16               	incf	___ftadd@exp1,f,c
  3818  001A1E                     l3534:
  3819  001A1E  5015               	movf	___ftadd@exp2,w,c
  3820  001A20  6216               	cpfseq	___ftadd@exp1,c
  3821  001A22  D7F8               	goto	l3532
  3822  001A24  D01A               	goto	l545
  3823  001A26                     l3536:
  3824  001A26  5016               	movf	___ftadd@exp1,w,c
  3825  001A28  6015               	cpfslt	___ftadd@exp2,c
  3826  001A2A  D017               	goto	l545
  3827  001A2C                     l3538:
  3828  001A2C  90D8               	bcf	status,0,c
  3829  001A2E  3609               	rlcf	___ftadd@f1,f,c
  3830  001A30  360A               	rlcf	___ftadd@f1+1,f,c
  3831  001A32  360B               	rlcf	___ftadd@f1+2,f,c
  3832  001A34  0616               	decf	___ftadd@exp1,f,c
  3833  001A36  5015               	movf	___ftadd@exp2,w,c
  3834  001A38  1816               	xorwf	___ftadd@exp1,w,c
  3835  001A3A  B4D8               	btfsc	status,2,c
  3836  001A3C  D00B               	goto	l3546
  3837  001A3E  0614               	decf	___ftadd@sign,f,c
  3838  001A40  5014               	movf	___ftadd@sign& (0+255),w,c
  3839  001A42  0B07               	andlw	7
  3840  001A44  B4D8               	btfsc	status,2,c
  3841  001A46  D006               	goto	l3546
  3842  001A48  D7F1               	goto	l3538
  3843  001A4A                     l3544:
  3844  001A4A  90D8               	bcf	status,0,c
  3845  001A4C  320E               	rrcf	___ftadd@f2+2,f,c
  3846  001A4E  320D               	rrcf	___ftadd@f2+1,f,c
  3847  001A50  320C               	rrcf	___ftadd@f2,f,c
  3848  001A52  2A15               	incf	___ftadd@exp2,f,c
  3849  001A54                     l3546:
  3850  001A54  5015               	movf	___ftadd@exp2,w,c
  3851  001A56  6216               	cpfseq	___ftadd@exp1,c
  3852  001A58  D7F8               	goto	l3544
  3853  001A5A                     l545:
  3854  001A5A  AE14               	btfss	___ftadd@sign,7,c
  3855  001A5C  D00C               	goto	l554
  3856  001A5E  0EFF               	movlw	255
  3857  001A60  1A09               	xorwf	___ftadd@f1,f,c
  3858  001A62  0EFF               	movlw	255
  3859  001A64  1A0A               	xorwf	___ftadd@f1+1,f,c
  3860  001A66  0EFF               	movlw	255
  3861  001A68  1A0B               	xorwf	___ftadd@f1+2,f,c
  3862  001A6A  0E01               	movlw	1
  3863  001A6C  2609               	addwf	___ftadd@f1,f,c
  3864  001A6E  0E00               	movlw	0
  3865  001A70  220A               	addwfc	___ftadd@f1+1,f,c
  3866  001A72  0E00               	movlw	0
  3867  001A74  220B               	addwfc	___ftadd@f1+2,f,c
  3868  001A76                     l554:
  3869  001A76  AC14               	btfss	___ftadd@sign,6,c
  3870  001A78  D00C               	goto	l3552
  3871  001A7A  0EFF               	movlw	255
  3872  001A7C  1A0C               	xorwf	___ftadd@f2,f,c
  3873  001A7E  0EFF               	movlw	255
  3874  001A80  1A0D               	xorwf	___ftadd@f2+1,f,c
  3875  001A82  0EFF               	movlw	255
  3876  001A84  1A0E               	xorwf	___ftadd@f2+2,f,c
  3877  001A86  0E01               	movlw	1
  3878  001A88  260C               	addwf	___ftadd@f2,f,c
  3879  001A8A  0E00               	movlw	0
  3880  001A8C  220D               	addwfc	___ftadd@f2+1,f,c
  3881  001A8E  0E00               	movlw	0
  3882  001A90  220E               	addwfc	___ftadd@f2+2,f,c
  3883  001A92                     l3552:
  3884  001A92  6E0F               	movwf	??___ftadd& (0+255),c
  3885  001A94  0E00               	movlw	0
  3886  001A96  6E14               	movwf	___ftadd@sign,c
  3887  001A98  500F               	movf	??___ftadd& (0+255),w,c
  3888  001A9A  5009               	movf	___ftadd@f1,w,c
  3889  001A9C  260C               	addwf	___ftadd@f2,f,c
  3890  001A9E  500A               	movf	___ftadd@f1+1,w,c
  3891  001AA0  220D               	addwfc	___ftadd@f2+1,f,c
  3892  001AA2  500B               	movf	___ftadd@f1+2,w,c
  3893  001AA4  220E               	addwfc	___ftadd@f2+2,f,c
  3894  001AA6  AE0E               	btfss	___ftadd@f2+2,7,c
  3895  001AA8  D010               	goto	l3562
  3896  001AAA  0EFF               	movlw	255
  3897  001AAC  1A0C               	xorwf	___ftadd@f2,f,c
  3898  001AAE  0EFF               	movlw	255
  3899  001AB0  1A0D               	xorwf	___ftadd@f2+1,f,c
  3900  001AB2  0EFF               	movlw	255
  3901  001AB4  1A0E               	xorwf	___ftadd@f2+2,f,c
  3902  001AB6  0E01               	movlw	1
  3903  001AB8  260C               	addwf	___ftadd@f2,f,c
  3904  001ABA  0E00               	movlw	0
  3905  001ABC  220D               	addwfc	___ftadd@f2+1,f,c
  3906  001ABE  0E00               	movlw	0
  3907  001AC0  220E               	addwfc	___ftadd@f2+2,f,c
  3908  001AC2  6E0F               	movwf	??___ftadd& (0+255),c
  3909  001AC4  0E01               	movlw	1
  3910  001AC6  6E14               	movwf	___ftadd@sign,c
  3911  001AC8  500F               	movf	??___ftadd& (0+255),w,c
  3912  001ACA                     l3562:
  3913  001ACA  C00C  F001         	movff	___ftadd@f2,?___ftpack
  3914  001ACE  C00D  F002         	movff	___ftadd@f2+1,?___ftpack+1
  3915  001AD2  C00E  F003         	movff	___ftadd@f2+2,?___ftpack+2
  3916  001AD6  C016  F004         	movff	___ftadd@exp1,?___ftpack+3
  3917  001ADA  C014  F005         	movff	___ftadd@sign,?___ftpack+4
  3918  001ADE  ECFA  F00F         	call	___ftpack	;wreg free
  3919  001AE2  C003  F00B         	movff	?___ftpack+2,?___ftadd+2
  3920  001AE6  C002  F00A         	movff	?___ftpack+1,?___ftadd+1
  3921  001AEA  C001  F009         	movff	?___ftpack,?___ftadd
  3922  001AEE                     l531:
  3923  001AEE  0012               	return	
  3924  001AF0                     __end_of___ftadd:
  3925                           	opt stack 0
  3926                           tblptru	equ	0xFF8
  3927                           tblptrh	equ	0xFF7
  3928                           tblptrl	equ	0xFF6
  3929                           tablat	equ	0xFF5
  3930                           prodh	equ	0xFF4
  3931                           prodl	equ	0xFF3
  3932                           wreg	equ	0xFE8
  3933                           indf2	equ	0xFDF
  3934                           postinc2	equ	0xFDE
  3935                           postdec2	equ	0xFDD
  3936                           fsr2h	equ	0xFDA
  3937                           fsr2l	equ	0xFD9
  3938                           status	equ	0xFD8
  3939                           
  3940 ;; *************** function ___ftpack *****************
  3941 ;; Defined at:
  3942 ;;		line 63 in file "E:\Program Files\Microchip\xc8\v1.20\sources\common\float.c"
  3943 ;; Parameters:    Size  Location     Type
  3944 ;;  arg             3    0[COMRAM] unsigned um
  3945 ;;  exp             1    3[COMRAM] unsigned char 
  3946 ;;  sign            1    4[COMRAM] unsigned char 
  3947 ;; Auto vars:     Size  Location     Type
  3948 ;;		None
  3949 ;; Return value:  Size  Location     Type
  3950 ;;                  3    0[COMRAM] float 
  3951 ;; Registers used:
  3952 ;;		wreg, status,2, status,0
  3953 ;; Tracked objects:
  3954 ;;		On entry : 0/0
  3955 ;;		On exit  : 0/0
  3956 ;;		Unchanged: 0/0
  3957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3958 ;;      Params:         5       0       0       0       0       0       0       0       0
  3959 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3960 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3961 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3962 ;;Total ram usage:        8 bytes
  3963 ;; Hardware stack levels used:    1
  3964 ;; This function calls:
  3965 ;;		Nothing
  3966 ;; This function is called by:
  3967 ;;		___awtoft
  3968 ;;		___ftadd
  3969 ;;		___ftdiv
  3970 ;;		___ftmul
  3971 ;;		___lltoft
  3972 ;; This function uses a non-reentrant model
  3973 ;;
  3974                           
  3975                           	psect	text18
  3976  001FF4                     __ptext18:
  3977                           	opt stack 0
  3978  001FF4                     ___ftpack:
  3979                           	opt stack 29
  3980                           
  3981                           ;incstack = 0
  3982                           ;incstack = 0
  3983  001FF4  5004               	movf	___ftpack@exp,w,c
  3984  001FF6  B4D8               	btfsc	status,2,c
  3985  001FF8  D005               	goto	l3344
  3986  001FFA  5001               	movf	___ftpack@arg,w,c
  3987  001FFC  1002               	iorwf	___ftpack@arg+1,w,c
  3988  001FFE  1003               	iorwf	___ftpack@arg+2,w,c
  3989  002000  A4D8               	btfss	status,2,c
  3990  002002  D00C               	goto	l3350
  3991  002004                     l3344:
  3992  002004  0E00               	movlw	0
  3993  002006  6E01               	movwf	?___ftpack,c
  3994  002008  0E00               	movlw	0
  3995  00200A  6E02               	movwf	?___ftpack+1,c
  3996  00200C  0E00               	movlw	0
  3997  00200E  6E03               	movwf	?___ftpack+2,c
  3998  002010  D04C               	goto	l493
  3999  002012                     l3348:
  4000  002012  2A04               	incf	___ftpack@exp,f,c
  4001  002014  90D8               	bcf	status,0,c
  4002  002016  3203               	rrcf	___ftpack@arg+2,f,c
  4003  002018  3202               	rrcf	___ftpack@arg+1,f,c
  4004  00201A  3201               	rrcf	___ftpack@arg,f,c
  4005  00201C                     l3350:
  4006  00201C  0E00               	movlw	0
  4007  00201E  1401               	andwf	___ftpack@arg,w,c
  4008  002020  6E06               	movwf	??___ftpack& (0+255),c
  4009  002022  0E00               	movlw	0
  4010  002024  1402               	andwf	___ftpack@arg+1,w,c
  4011  002026  6E07               	movwf	(??___ftpack+1)& (0+255),c
  4012  002028  0EFE               	movlw	254
  4013  00202A  1403               	andwf	___ftpack@arg+2,w,c
  4014  00202C  6E08               	movwf	(??___ftpack+2)& (0+255),c
  4015  00202E  5006               	movf	??___ftpack,w,c
  4016  002030  1007               	iorwf	??___ftpack+1,w,c
  4017  002032  1008               	iorwf	??___ftpack+2,w,c
  4018  002034  B4D8               	btfsc	status,2,c
  4019  002036  D00C               	goto	l3356
  4020  002038  D7EC               	goto	l3348
  4021  00203A                     l3352:
  4022  00203A  2A04               	incf	___ftpack@exp,f,c
  4023  00203C  0E01               	movlw	1
  4024  00203E  2601               	addwf	___ftpack@arg,f,c
  4025  002040  0E00               	movlw	0
  4026  002042  2202               	addwfc	___ftpack@arg+1,f,c
  4027  002044  0E00               	movlw	0
  4028  002046  2203               	addwfc	___ftpack@arg+2,f,c
  4029  002048  90D8               	bcf	status,0,c
  4030  00204A  3203               	rrcf	___ftpack@arg+2,f,c
  4031  00204C  3202               	rrcf	___ftpack@arg+1,f,c
  4032  00204E  3201               	rrcf	___ftpack@arg,f,c
  4033  002050                     l3356:
  4034  002050  0E00               	movlw	0
  4035  002052  1401               	andwf	___ftpack@arg,w,c
  4036  002054  6E06               	movwf	??___ftpack& (0+255),c
  4037  002056  0E00               	movlw	0
  4038  002058  1402               	andwf	___ftpack@arg+1,w,c
  4039  00205A  6E07               	movwf	(??___ftpack+1)& (0+255),c
  4040  00205C  0EFF               	movlw	255
  4041  00205E  1403               	andwf	___ftpack@arg+2,w,c
  4042  002060  6E08               	movwf	(??___ftpack+2)& (0+255),c
  4043  002062  5006               	movf	??___ftpack,w,c
  4044  002064  1007               	iorwf	??___ftpack+1,w,c
  4045  002066  1008               	iorwf	??___ftpack+2,w,c
  4046  002068  B4D8               	btfsc	status,2,c
  4047  00206A  D006               	goto	l3360
  4048  00206C  D7E6               	goto	l3352
  4049  00206E                     l3358:
  4050  00206E  0604               	decf	___ftpack@exp,f,c
  4051  002070  90D8               	bcf	status,0,c
  4052  002072  3601               	rlcf	___ftpack@arg,f,c
  4053  002074  3602               	rlcf	___ftpack@arg+1,f,c
  4054  002076  3603               	rlcf	___ftpack@arg+2,f,c
  4055  002078                     l3360:
  4056  002078  AE02               	btfss	___ftpack@arg+1,7,c
  4057  00207A  D7F9               	goto	l3358
  4058  00207C  A004               	btfss	___ftpack@exp,0,c
  4059  00207E  9E02               	bcf	___ftpack@arg+1,7,c
  4060  002080  90D8               	bcf	status,0,c
  4061  002082  3204               	rrcf	___ftpack@exp,f,c
  4062  002084  5004               	movf	___ftpack@exp,w,c
  4063  002086  6E08               	movwf	(??___ftpack+2)& (0+255),c
  4064  002088  6A07               	clrf	(??___ftpack+1)& (0+255),c
  4065  00208A  6A06               	clrf	??___ftpack& (0+255),c
  4066  00208C  5006               	movf	??___ftpack,w,c
  4067  00208E  1201               	iorwf	___ftpack@arg,f,c
  4068  002090  5007               	movf	??___ftpack+1,w,c
  4069  002092  1202               	iorwf	___ftpack@arg+1,f,c
  4070  002094  5008               	movf	??___ftpack+2,w,c
  4071  002096  1203               	iorwf	___ftpack@arg+2,f,c
  4072  002098  5005               	movf	___ftpack@sign,w,c
  4073  00209A  A4D8               	btfss	status,2,c
  4074  00209C  8E03               	bsf	___ftpack@arg+2,7,c
  4075  00209E  C001  F001         	movff	___ftpack@arg,?___ftpack
  4076  0020A2  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  4077  0020A6  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  4078  0020AA                     l493:
  4079  0020AA  0012               	return	
  4080  0020AC                     __end_of___ftpack:
  4081                           	opt stack 0
  4082                           tblptru	equ	0xFF8
  4083                           tblptrh	equ	0xFF7
  4084                           tblptrl	equ	0xFF6
  4085                           tablat	equ	0xFF5
  4086                           prodh	equ	0xFF4
  4087                           prodl	equ	0xFF3
  4088                           wreg	equ	0xFE8
  4089                           indf2	equ	0xFDF
  4090                           postinc2	equ	0xFDE
  4091                           postdec2	equ	0xFDD
  4092                           fsr2h	equ	0xFDA
  4093                           fsr2l	equ	0xFD9
  4094                           status	equ	0xFD8
  4095                           
  4096 ;; *************** function __div_to_l_ *****************
  4097 ;; Defined at:
  4098 ;;		line 61 in file "E:\Program Files\Microchip\xc8\v1.20\sources\common\fldivl.c"
  4099 ;; Parameters:    Size  Location     Type
  4100 ;;  f1              3    0[COMRAM] float 
  4101 ;;  f2              3    3[COMRAM] float 
  4102 ;; Auto vars:     Size  Location     Type
  4103 ;;  quot            4    7[COMRAM] unsigned long 
  4104 ;;  exp1            1   12[COMRAM] unsigned char 
  4105 ;;  cntr            1   11[COMRAM] unsigned char 
  4106 ;; Return value:  Size  Location     Type
  4107 ;;                  4    0[COMRAM] unsigned long 
  4108 ;; Registers used:
  4109 ;;		wreg, status,2, status,0
  4110 ;; Tracked objects:
  4111 ;;		On entry : 0/0
  4112 ;;		On exit  : 0/0
  4113 ;;		Unchanged: 0/0
  4114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4115 ;;      Params:         6       0       0       0       0       0       0       0       0
  4116 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4117 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4118 ;;      Totals:        13       0       0       0       0       0       0       0       0
  4119 ;;Total ram usage:       13 bytes
  4120 ;; Hardware stack levels used:    1
  4121 ;; This function calls:
  4122 ;;		Nothing
  4123 ;; This function is called by:
  4124 ;;		_sprintf
  4125 ;; This function uses a non-reentrant model
  4126 ;;
  4127                           
  4128                           	psect	text19
  4129  001E20                     __ptext19:
  4130                           	opt stack 0
  4131  001E20                     __div_to_l_:
  4132                           	opt stack 29
  4133                           
  4134                           ;incstack = 0
  4135                           ;incstack = 0
  4136  001E20  3403               	rlcf	(__div_to_l_@f1+2)& (0+255),w,c
  4137  001E22  3404               	rlcf	(__div_to_l_@f1+3)& (0+255),w,c
  4138  001E24  6E0D               	movwf	__div_to_l_@exp1,c
  4139  001E26  660D               	tstfsz	__div_to_l_@exp1& (0+255),c
  4140  001E28  D001               	goto	l3290
  4141  001E2A  D05A               	goto	u1660
  4142  001E2C                     l3290:
  4143  001E2C  3406               	rlcf	(__div_to_l_@f2+2)& (0+255),w,c
  4144  001E2E  3407               	rlcf	(__div_to_l_@f2+3)& (0+255),w,c
  4145  001E30  6E0C               	movwf	__div_to_l_@cntr,c
  4146  001E32  660C               	tstfsz	__div_to_l_@cntr& (0+255),c
  4147  001E34  D001               	goto	l3296
  4148  001E36  D054               	goto	u1660
  4149  001E38                     l3296:
  4150  001E38  8E03               	bsf	__div_to_l_@f1+2,7,c
  4151  001E3A  0EFF               	movlw	255
  4152  001E3C  1601               	andwf	__div_to_l_@f1,f,c
  4153  001E3E  0EFF               	movlw	255
  4154  001E40  1602               	andwf	__div_to_l_@f1+1,f,c
  4155  001E42  0EFF               	movlw	255
  4156  001E44  1603               	andwf	__div_to_l_@f1+2,f,c
  4157  001E46  0E00               	movlw	0
  4158  001E48  1604               	andwf	__div_to_l_@f1+3,f,c
  4159  001E4A  8E06               	bsf	__div_to_l_@f2+2,7,c
  4160  001E4C  0EFF               	movlw	255
  4161  001E4E  1604               	andwf	__div_to_l_@f2,f,c
  4162  001E50  0EFF               	movlw	255
  4163  001E52  1605               	andwf	__div_to_l_@f2+1,f,c
  4164  001E54  0EFF               	movlw	255
  4165  001E56  1606               	andwf	__div_to_l_@f2+2,f,c
  4166  001E58  0E00               	movlw	0
  4167  001E5A  1607               	andwf	__div_to_l_@f2+3,f,c
  4168  001E5C  0E00               	movlw	0
  4169  001E5E  6E08               	movwf	__div_to_l_@quot,c
  4170  001E60  0E00               	movlw	0
  4171  001E62  6E09               	movwf	__div_to_l_@quot+1,c
  4172  001E64  0E00               	movlw	0
  4173  001E66  6E0A               	movwf	__div_to_l_@quot+2,c
  4174  001E68  0E00               	movlw	0
  4175  001E6A  6E0B               	movwf	__div_to_l_@quot+3,c
  4176  001E6C  0E7F               	movlw	127
  4177  001E6E  5E0D               	subwf	__div_to_l_@exp1,f,c
  4178  001E70  500C               	movf	__div_to_l_@cntr,w,c
  4179  001E72  0FA0               	addlw	160
  4180  001E74  5E0D               	subwf	__div_to_l_@exp1,f,c
  4181  001E76  6E07               	movwf	??__div_to_l_& (0+255),c
  4182  001E78  0E20               	movlw	32
  4183  001E7A  6E0C               	movwf	__div_to_l_@cntr,c
  4184  001E7C  5007               	movf	??__div_to_l_& (0+255),w,c
  4185  001E7E                     l454:
  4186  001E7E  90D8               	bcf	status,0,c
  4187  001E80  3608               	rlcf	__div_to_l_@quot,f,c
  4188  001E82  3609               	rlcf	__div_to_l_@quot+1,f,c
  4189  001E84  360A               	rlcf	__div_to_l_@quot+2,f,c
  4190  001E86  360B               	rlcf	__div_to_l_@quot+3,f,c
  4191  001E88  5004               	movf	__div_to_l_@f2,w,c
  4192  001E8A  5C01               	subwf	__div_to_l_@f1,w,c
  4193  001E8C  5005               	movf	__div_to_l_@f2+1,w,c
  4194  001E8E  5802               	subwfb	__div_to_l_@f1+1,w,c
  4195  001E90  5006               	movf	__div_to_l_@f2+2,w,c
  4196  001E92  5803               	subwfb	__div_to_l_@f1+2,w,c
  4197  001E94  5007               	movf	__div_to_l_@f2+3,w,c
  4198  001E96  5804               	subwfb	__div_to_l_@f1+3,w,c
  4199  001E98  A0D8               	btfss	status,0,c
  4200  001E9A  D009               	goto	l3316
  4201  001E9C  5004               	movf	__div_to_l_@f2,w,c
  4202  001E9E  5E01               	subwf	__div_to_l_@f1,f,c
  4203  001EA0  5005               	movf	__div_to_l_@f2+1,w,c
  4204  001EA2  5A02               	subwfb	__div_to_l_@f1+1,f,c
  4205  001EA4  5006               	movf	__div_to_l_@f2+2,w,c
  4206  001EA6  5A03               	subwfb	__div_to_l_@f1+2,f,c
  4207  001EA8  5007               	movf	__div_to_l_@f2+3,w,c
  4208  001EAA  5A04               	subwfb	__div_to_l_@f1+3,f,c
  4209  001EAC  8008               	bsf	__div_to_l_@quot,0,c
  4210  001EAE                     l3316:
  4211  001EAE  90D8               	bcf	status,0,c
  4212  001EB0  3601               	rlcf	__div_to_l_@f1,f,c
  4213  001EB2  3602               	rlcf	__div_to_l_@f1+1,f,c
  4214  001EB4  3603               	rlcf	__div_to_l_@f1+2,f,c
  4215  001EB6  3604               	rlcf	__div_to_l_@f1+3,f,c
  4216  001EB8  2E0C               	decfsz	__div_to_l_@cntr,f,c
  4217  001EBA  D7E1               	goto	l454
  4218  001EBC  AE0D               	btfss	__div_to_l_@exp1,7,c
  4219  001EBE  D00D               	goto	l3330
  4220  001EC0  500D               	movf	__div_to_l_@exp1,w,c
  4221  001EC2  0A80               	xorlw	128
  4222  001EC4  0F9F               	addlw	159
  4223  001EC6  A0D8               	btfss	status,0,c
  4224  001EC8  D00B               	goto	u1660
  4225  001ECA                     l3326:
  4226  001ECA  90D8               	bcf	status,0,c
  4227  001ECC  320B               	rrcf	__div_to_l_@quot+3,f,c
  4228  001ECE  320A               	rrcf	__div_to_l_@quot+2,f,c
  4229  001ED0  3209               	rrcf	__div_to_l_@quot+1,f,c
  4230  001ED2  3208               	rrcf	__div_to_l_@quot,f,c
  4231  001ED4  3E0D               	incfsz	__div_to_l_@exp1,f,c
  4232  001ED6  D7F9               	goto	l3326
  4233  001ED8  D014               	goto	l461
  4234  001EDA                     l3330:
  4235  001EDA  0E1F               	movlw	31
  4236  001EDC  640D               	cpfsgt	__div_to_l_@exp1,c
  4237  001EDE  D00F               	goto	l3338
  4238  001EE0                     u1660:
  4239  001EE0  0E00               	movlw	0
  4240  001EE2  6E01               	movwf	?__div_to_l_,c
  4241  001EE4  0E00               	movlw	0
  4242  001EE6  6E02               	movwf	?__div_to_l_+1,c
  4243  001EE8  0E00               	movlw	0
  4244  001EEA  6E03               	movwf	?__div_to_l_+2,c
  4245  001EEC  0E00               	movlw	0
  4246  001EEE  6E04               	movwf	?__div_to_l_+3,c
  4247  001EF0  D010               	goto	l452
  4248  001EF2                     l3336:
  4249  001EF2  90D8               	bcf	status,0,c
  4250  001EF4  3608               	rlcf	__div_to_l_@quot,f,c
  4251  001EF6  3609               	rlcf	__div_to_l_@quot+1,f,c
  4252  001EF8  360A               	rlcf	__div_to_l_@quot+2,f,c
  4253  001EFA  360B               	rlcf	__div_to_l_@quot+3,f,c
  4254  001EFC  060D               	decf	__div_to_l_@exp1,f,c
  4255  001EFE                     l3338:
  4256  001EFE  660D               	tstfsz	__div_to_l_@exp1,c
  4257  001F00  D7F8               	goto	l3336
  4258  001F02                     l461:
  4259  001F02  C008  F001         	movff	__div_to_l_@quot,?__div_to_l_
  4260  001F06  C009  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4261  001F0A  C00A  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4262  001F0E  C00B  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4263  001F12                     l452:
  4264  001F12  0012               	return	
  4265  001F14                     __end_of__div_to_l_:
  4266                           	opt stack 0
  4267                           tblptru	equ	0xFF8
  4268                           tblptrh	equ	0xFF7
  4269                           tblptrl	equ	0xFF6
  4270                           tablat	equ	0xFF5
  4271                           prodh	equ	0xFF4
  4272                           prodl	equ	0xFF3
  4273                           wreg	equ	0xFE8
  4274                           indf2	equ	0xFDF
  4275                           postinc2	equ	0xFDE
  4276                           postdec2	equ	0xFDD
  4277                           fsr2h	equ	0xFDA
  4278                           fsr2l	equ	0xFD9
  4279                           status	equ	0xFD8
  4280                           
  4281 ;; *************** function __tdiv_to_l_ *****************
  4282 ;; Defined at:
  4283 ;;		line 61 in file "E:\Program Files\Microchip\xc8\v1.20\sources\common\ftdivl.c"
  4284 ;; Parameters:    Size  Location     Type
  4285 ;;  f1              3    0[COMRAM] float 
  4286 ;;  f2              3    3[COMRAM] float 
  4287 ;; Auto vars:     Size  Location     Type
  4288 ;;  quot            4   11[COMRAM] unsigned long 
  4289 ;;  exp1            1   16[COMRAM] unsigned char 
  4290 ;;  cntr            1   15[COMRAM] unsigned char 
  4291 ;; Return value:  Size  Location     Type
  4292 ;;                  4    0[COMRAM] unsigned long 
  4293 ;; Registers used:
  4294 ;;		wreg, status,2, status,0
  4295 ;; Tracked objects:
  4296 ;;		On entry : 0/0
  4297 ;;		On exit  : 0/0
  4298 ;;		Unchanged: 0/0
  4299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4300 ;;      Params:         6       0       0       0       0       0       0       0       0
  4301 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4302 ;;      Temps:          5       0       0       0       0       0       0       0       0
  4303 ;;      Totals:        17       0       0       0       0       0       0       0       0
  4304 ;;Total ram usage:       17 bytes
  4305 ;; Hardware stack levels used:    1
  4306 ;; This function calls:
  4307 ;;		Nothing
  4308 ;; This function is called by:
  4309 ;;		_sprintf
  4310 ;; This function uses a non-reentrant model
  4311 ;;
  4312                           
  4313                           	psect	text20
  4314  001AF0                     __ptext20:
  4315                           	opt stack 0
  4316  001AF0                     __tdiv_to_l_:
  4317                           	opt stack 29
  4318                           
  4319                           ;incstack = 0
  4320                           ;incstack = 0
  4321  001AF0  0E0F               	movlw	15
  4322  001AF2  6E07               	movwf	??__tdiv_to_l_& (0+255),c
  4323  001AF4  C001  F008         	movff	__tdiv_to_l_@f1,??__tdiv_to_l_+1
  4324  001AF8  C002  F009         	movff	__tdiv_to_l_@f1+1,??__tdiv_to_l_+2
  4325  001AFC  C003  F00A         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_+3
  4326  001B00  2807               	incf	??__tdiv_to_l_,w,c
  4327  001B02  6E0B               	movwf	(??__tdiv_to_l_+4)& (0+255),c
  4328  001B04  D004               	goto	u1520
  4329  001B06                     u1525:
  4330  001B06  90D8               	bcf	status,0,c
  4331  001B08  320A               	rrcf	??__tdiv_to_l_+3,f,c
  4332  001B0A  3209               	rrcf	??__tdiv_to_l_+2,f,c
  4333  001B0C  3208               	rrcf	??__tdiv_to_l_+1,f,c
  4334  001B0E                     u1520:
  4335  001B0E  2E0B               	decfsz	(??__tdiv_to_l_+4)& (0+255),f,c
  4336  001B10  D7FA               	goto	u1525
  4337  001B12  5008               	movf	??__tdiv_to_l_+1,w,c
  4338  001B14  6E11               	movwf	__tdiv_to_l_@exp1,c
  4339  001B16  6611               	tstfsz	__tdiv_to_l_@exp1& (0+255),c
  4340  001B18  D001               	goto	l3234
  4341  001B1A  D061               	goto	u1590
  4342  001B1C                     l3234:
  4343  001B1C  0E0F               	movlw	15
  4344  001B1E  6E07               	movwf	??__tdiv_to_l_& (0+255),c
  4345  001B20  C004  F008         	movff	__tdiv_to_l_@f2,??__tdiv_to_l_+1
  4346  001B24  C005  F009         	movff	__tdiv_to_l_@f2+1,??__tdiv_to_l_+2
  4347  001B28  C006  F00A         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_+3
  4348  001B2C  2807               	incf	??__tdiv_to_l_,w,c
  4349  001B2E  6E0B               	movwf	(??__tdiv_to_l_+4)& (0+255),c
  4350  001B30  D004               	goto	u1540
  4351  001B32                     u1545:
  4352  001B32  90D8               	bcf	status,0,c
  4353  001B34  320A               	rrcf	??__tdiv_to_l_+3,f,c
  4354  001B36  3209               	rrcf	??__tdiv_to_l_+2,f,c
  4355  001B38  3208               	rrcf	??__tdiv_to_l_+1,f,c
  4356  001B3A                     u1540:
  4357  001B3A  2E0B               	decfsz	(??__tdiv_to_l_+4)& (0+255),f,c
  4358  001B3C  D7FA               	goto	u1545
  4359  001B3E  5008               	movf	??__tdiv_to_l_+1,w,c
  4360  001B40  6E10               	movwf	__tdiv_to_l_@cntr,c
  4361  001B42  6610               	tstfsz	__tdiv_to_l_@cntr& (0+255),c
  4362  001B44  D001               	goto	l3240
  4363  001B46  D04B               	goto	u1590
  4364  001B48                     l3240:
  4365  001B48  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  4366  001B4A  0EFF               	movlw	255
  4367  001B4C  1601               	andwf	__tdiv_to_l_@f1,f,c
  4368  001B4E  0EFF               	movlw	255
  4369  001B50  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  4370  001B52  0E00               	movlw	0
  4371  001B54  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  4372  001B56  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  4373  001B58  0EFF               	movlw	255
  4374  001B5A  1604               	andwf	__tdiv_to_l_@f2,f,c
  4375  001B5C  0EFF               	movlw	255
  4376  001B5E  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  4377  001B60  0E00               	movlw	0
  4378  001B62  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  4379  001B64  0E00               	movlw	0
  4380  001B66  6E0C               	movwf	__tdiv_to_l_@quot,c
  4381  001B68  0E00               	movlw	0
  4382  001B6A  6E0D               	movwf	__tdiv_to_l_@quot+1,c
  4383  001B6C  0E00               	movlw	0
  4384  001B6E  6E0E               	movwf	__tdiv_to_l_@quot+2,c
  4385  001B70  0E00               	movlw	0
  4386  001B72  6E0F               	movwf	__tdiv_to_l_@quot+3,c
  4387  001B74  0E7F               	movlw	127
  4388  001B76  5E11               	subwf	__tdiv_to_l_@exp1,f,c
  4389  001B78  5010               	movf	__tdiv_to_l_@cntr,w,c
  4390  001B7A  0F98               	addlw	152
  4391  001B7C  5E11               	subwf	__tdiv_to_l_@exp1,f,c
  4392  001B7E  6E07               	movwf	??__tdiv_to_l_& (0+255),c
  4393  001B80  0E18               	movlw	24
  4394  001B82  6E10               	movwf	__tdiv_to_l_@cntr,c
  4395  001B84  5007               	movf	??__tdiv_to_l_& (0+255),w,c
  4396  001B86                     l3254:
  4397  001B86  90D8               	bcf	status,0,c
  4398  001B88  360C               	rlcf	__tdiv_to_l_@quot,f,c
  4399  001B8A  360D               	rlcf	__tdiv_to_l_@quot+1,f,c
  4400  001B8C  360E               	rlcf	__tdiv_to_l_@quot+2,f,c
  4401  001B8E  360F               	rlcf	__tdiv_to_l_@quot+3,f,c
  4402  001B90  5004               	movf	__tdiv_to_l_@f2,w,c
  4403  001B92  5C01               	subwf	__tdiv_to_l_@f1,w,c
  4404  001B94  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4405  001B96  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  4406  001B98  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4407  001B9A  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  4408  001B9C  A0D8               	btfss	status,0,c
  4409  001B9E  D007               	goto	l573
  4410  001BA0  5004               	movf	__tdiv_to_l_@f2,w,c
  4411  001BA2  5E01               	subwf	__tdiv_to_l_@f1,f,c
  4412  001BA4  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4413  001BA6  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  4414  001BA8  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4415  001BAA  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  4416  001BAC  800C               	bsf	__tdiv_to_l_@quot,0,c
  4417  001BAE                     l573:
  4418  001BAE  90D8               	bcf	status,0,c
  4419  001BB0  3601               	rlcf	__tdiv_to_l_@f1,f,c
  4420  001BB2  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  4421  001BB4  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  4422  001BB6  2E10               	decfsz	__tdiv_to_l_@cntr,f,c
  4423  001BB8  D7E6               	goto	l3254
  4424  001BBA  AE11               	btfss	__tdiv_to_l_@exp1,7,c
  4425  001BBC  D00D               	goto	l3274
  4426  001BBE  5011               	movf	__tdiv_to_l_@exp1,w,c
  4427  001BC0  0A80               	xorlw	128
  4428  001BC2  0F97               	addlw	151
  4429  001BC4  A0D8               	btfss	status,0,c
  4430  001BC6  D00B               	goto	u1590
  4431  001BC8                     l3270:
  4432  001BC8  90D8               	bcf	status,0,c
  4433  001BCA  320F               	rrcf	__tdiv_to_l_@quot+3,f,c
  4434  001BCC  320E               	rrcf	__tdiv_to_l_@quot+2,f,c
  4435  001BCE  320D               	rrcf	__tdiv_to_l_@quot+1,f,c
  4436  001BD0  320C               	rrcf	__tdiv_to_l_@quot,f,c
  4437  001BD2  3E11               	incfsz	__tdiv_to_l_@exp1,f,c
  4438  001BD4  D7F9               	goto	l3270
  4439  001BD6  D014               	goto	l579
  4440  001BD8                     l3274:
  4441  001BD8  0E17               	movlw	23
  4442  001BDA  6411               	cpfsgt	__tdiv_to_l_@exp1,c
  4443  001BDC  D00F               	goto	l3282
  4444  001BDE                     u1590:
  4445  001BDE  0E00               	movlw	0
  4446  001BE0  6E01               	movwf	?__tdiv_to_l_,c
  4447  001BE2  0E00               	movlw	0
  4448  001BE4  6E02               	movwf	?__tdiv_to_l_+1,c
  4449  001BE6  0E00               	movlw	0
  4450  001BE8  6E03               	movwf	?__tdiv_to_l_+2,c
  4451  001BEA  0E00               	movlw	0
  4452  001BEC  6E04               	movwf	?__tdiv_to_l_+3,c
  4453  001BEE  D010               	goto	l570
  4454  001BF0                     l3280:
  4455  001BF0  90D8               	bcf	status,0,c
  4456  001BF2  360C               	rlcf	__tdiv_to_l_@quot,f,c
  4457  001BF4  360D               	rlcf	__tdiv_to_l_@quot+1,f,c
  4458  001BF6  360E               	rlcf	__tdiv_to_l_@quot+2,f,c
  4459  001BF8  360F               	rlcf	__tdiv_to_l_@quot+3,f,c
  4460  001BFA  0611               	decf	__tdiv_to_l_@exp1,f,c
  4461  001BFC                     l3282:
  4462  001BFC  6611               	tstfsz	__tdiv_to_l_@exp1,c
  4463  001BFE  D7F8               	goto	l3280
  4464  001C00                     l579:
  4465  001C00  C00C  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4466  001C04  C00D  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4467  001C08  C00E  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4468  001C0C  C00F  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4469  001C10                     l570:
  4470  001C10  0012               	return	
  4471  001C12                     __end_of__tdiv_to_l_:
  4472                           	opt stack 0
  4473                           tblptru	equ	0xFF8
  4474                           tblptrh	equ	0xFF7
  4475                           tblptrl	equ	0xFF6
  4476                           tablat	equ	0xFF5
  4477                           prodh	equ	0xFF4
  4478                           prodl	equ	0xFF3
  4479                           wreg	equ	0xFE8
  4480                           indf2	equ	0xFDF
  4481                           postinc2	equ	0xFDE
  4482                           postdec2	equ	0xFDD
  4483                           fsr2h	equ	0xFDA
  4484                           fsr2l	equ	0xFD9
  4485                           status	equ	0xFD8
  4486                           
  4487 ;; *************** function _scale *****************
  4488 ;; Defined at:
  4489 ;;		line 426 in file "E:\Program Files\Microchip\xc8\v1.20\sources\common\doprnt.c"
  4490 ;; Parameters:    Size  Location     Type
  4491 ;;  scl             1   54[COMRAM] char 
  4492 ;; Auto vars:     Size  Location     Type
  4493 ;;		None
  4494 ;; Return value:  Size  Location     Type
  4495 ;;                  3   54[COMRAM] char 
  4496 ;; Registers used:
  4497 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4498 ;; Tracked objects:
  4499 ;;		On entry : 0/0
  4500 ;;		On exit  : 0/0
  4501 ;;		Unchanged: 0/0
  4502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4503 ;;      Params:         3       0       0       0       0       0       0       0       0
  4504 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4505 ;;      Temps:          6       0       0       0       0       0       0       0       0
  4506 ;;      Totals:        12       0       0       0       0       0       0       0       0
  4507 ;;Total ram usage:       12 bytes
  4508 ;; Hardware stack levels used:    1
  4509 ;; Hardware stack levels required when called:    2
  4510 ;; This function calls:
  4511 ;;		___ftmul
  4512 ;;		___awdiv
  4513 ;;		___awmod
  4514 ;;		___wmul
  4515 ;; This function is called by:
  4516 ;;		_sprintf
  4517 ;; This function uses a non-reentrant model
  4518 ;;
  4519                           
  4520                           	psect	text21
  4521  000F74                     __ptext21:
  4522                           	opt stack 0
  4523  000F74                     _scale:
  4524                           	opt stack 27
  4525                           
  4526                           ;doprnt.c: 428: if(scl < 0) {
  4527                           
  4528                           ;incstack = 0
  4529                           ;incstack = 0
  4530  000F74  AE37               	btfss	scale@scl,7,c
  4531  000F76  D108               	goto	l3784
  4532                           
  4533                           ;doprnt.c: 429: scl = -scl;
  4534  000F78  6C37               	negf	scale@scl,c
  4535                           
  4536                           ;doprnt.c: 430: if(scl>=110)
  4537  000F7A  5037               	movf	scale@scl,w,c
  4538  000F7C  0A80               	xorlw	128
  4539  000F7E  0F12               	addlw	-238
  4540  000F80  A0D8               	btfss	status,0,c
  4541  000F82  D09D               	goto	l3774
  4542                           
  4543                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4544  000F84  0E00               	movlw	0
  4545  000F86  6E14               	movwf	?___wmul+3,c
  4546  000F88  0E03               	movlw	3
  4547  000F8A  6E13               	movwf	?___wmul+2,c
  4548  000F8C  0E00               	movlw	0
  4549  000F8E  6E0B               	movwf	?___awdiv+3,c
  4550  000F90  0E0A               	movlw	10
  4551  000F92  6E0A               	movwf	?___awdiv+2,c
  4552  000F94  0E00               	movlw	0
  4553  000F96  6E04               	movwf	?___awmod+3,c
  4554  000F98  0E64               	movlw	100
  4555  000F9A  6E03               	movwf	?___awmod+2,c
  4556  000F9C  5037               	movf	scale@scl,w,c
  4557  000F9E  6E01               	movwf	?___awmod,c
  4558  000FA0  6A02               	clrf	?___awmod+1,c
  4559  000FA2  BE01               	btfsc	?___awmod,7,c
  4560  000FA4  0602               	decf	?___awmod+1,f,c
  4561  000FA6  EC29  F011         	call	___awmod	;wreg free
  4562  000FAA  C001  F008         	movff	?___awmod,?___awdiv
  4563  000FAE  C002  F009         	movff	?___awmod+1,?___awdiv+1
  4564  000FB2  EC9E  F010         	call	___awdiv	;wreg free
  4565  000FB6  0E09               	movlw	9
  4566  000FB8  2408               	addwf	?___awdiv,w,c
  4567  000FBA  6E11               	movwf	?___wmul,c
  4568  000FBC  0E00               	movlw	0
  4569  000FBE  2009               	addwfc	?___awdiv+1,w,c
  4570  000FC0  6E12               	movwf	?___wmul+1,c
  4571  000FC2  EC6D  F012         	call	___wmul	;wreg free
  4572  000FC6  0E28               	movlw	low __npowers_
  4573  000FC8  2411               	addwf	?___wmul,w,c
  4574  000FCA  6EF6               	movwf	tblptrl,c
  4575  000FCC  0E08               	movlw	high __npowers_
  4576  000FCE  2012               	addwfc	?___wmul+1,w,c
  4577  000FD0  6EF7               	movwf	tblptrh,c
  4578  000FD2  0009               	tblrd		*+
  4579  000FD4  CFF5 F03A          	movff	tablat,??_scale
  4580  000FD8  0009               	tblrd		*+
  4581  000FDA  CFF5 F03B          	movff	tablat,??_scale+1
  4582  000FDE  0009               	tblrd		*+
  4583  000FE0  CFF5 F03C          	movff	tablat,??_scale+2
  4584  000FE4  C03C  F02B         	movff	??_scale+2,?___ftmul+5
  4585  000FE8  C03B  F02A         	movff	??_scale+1,?___ftmul+4
  4586  000FEC  C03A  F029         	movff	??_scale,?___ftmul+3
  4587  000FF0  0E00               	movlw	0
  4588  000FF2  6E14               	movwf	?___wmul+3,c
  4589  000FF4  0E03               	movlw	3
  4590  000FF6  6E13               	movwf	?___wmul+2,c
  4591  000FF8  0E00               	movlw	0
  4592  000FFA  6E0B               	movwf	?___awdiv+3,c
  4593  000FFC  0E64               	movlw	100
  4594  000FFE  6E0A               	movwf	?___awdiv+2,c
  4595  001000  5037               	movf	scale@scl,w,c
  4596  001002  6E08               	movwf	?___awdiv,c
  4597  001004  6A09               	clrf	?___awdiv+1,c
  4598  001006  BE08               	btfsc	?___awdiv,7,c
  4599  001008  0609               	decf	?___awdiv+1,f,c
  4600  00100A  EC9E  F010         	call	___awdiv	;wreg free
  4601  00100E  0E12               	movlw	18
  4602  001010  2408               	addwf	?___awdiv,w,c
  4603  001012  6E11               	movwf	?___wmul,c
  4604  001014  0E00               	movlw	0
  4605  001016  2009               	addwfc	?___awdiv+1,w,c
  4606  001018  6E12               	movwf	?___wmul+1,c
  4607  00101A  EC6D  F012         	call	___wmul	;wreg free
  4608  00101E  0E28               	movlw	low __npowers_
  4609  001020  2411               	addwf	?___wmul,w,c
  4610  001022  6EF6               	movwf	tblptrl,c
  4611  001024  0E08               	movlw	high __npowers_
  4612  001026  2012               	addwfc	?___wmul+1,w,c
  4613  001028  6EF7               	movwf	tblptrh,c
  4614  00102A  0009               	tblrd		*+
  4615  00102C  CFF5 F03D          	movff	tablat,??_scale+3
  4616  001030  0009               	tblrd		*+
  4617  001032  CFF5 F03E          	movff	tablat,??_scale+4
  4618  001036  0009               	tblrd		*+
  4619  001038  CFF5 F03F          	movff	tablat,??_scale+5
  4620  00103C  C03F  F028         	movff	??_scale+5,?___ftmul+2
  4621  001040  C03E  F027         	movff	??_scale+4,?___ftmul+1
  4622  001044  C03D  F026         	movff	??_scale+3,?___ftmul
  4623  001048  EC09  F00E         	call	___ftmul	;wreg free
  4624  00104C  C028  F042         	movff	?___ftmul+2,_scale$805+2
  4625  001050  C027  F041         	movff	?___ftmul+1,_scale$805+1
  4626  001054  C026  F040         	movff	?___ftmul,_scale$805
  4627                           
  4628                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4629  001058  C040  F026         	movff	_scale$805,?___ftmul
  4630  00105C  C041  F027         	movff	_scale$805+1,?___ftmul+1
  4631  001060  C042  F028         	movff	_scale$805+2,?___ftmul+2
  4632  001064  0E00               	movlw	0
  4633  001066  6E14               	movwf	?___wmul+3,c
  4634  001068  0E03               	movlw	3
  4635  00106A  6E13               	movwf	?___wmul+2,c
  4636  00106C  0E00               	movlw	0
  4637  00106E  6E04               	movwf	?___awmod+3,c
  4638  001070  0E0A               	movlw	10
  4639  001072  6E03               	movwf	?___awmod+2,c
  4640  001074  5037               	movf	scale@scl,w,c
  4641  001076  6E01               	movwf	?___awmod,c
  4642  001078  6A02               	clrf	?___awmod+1,c
  4643  00107A  BE01               	btfsc	?___awmod,7,c
  4644  00107C  0602               	decf	?___awmod+1,f,c
  4645  00107E  EC29  F011         	call	___awmod	;wreg free
  4646  001082  C001  F011         	movff	?___awmod,?___wmul
  4647  001086  C002  F012         	movff	?___awmod+1,?___wmul+1
  4648  00108A  EC6D  F012         	call	___wmul	;wreg free
  4649  00108E  0E28               	movlw	low __npowers_
  4650  001090  2411               	addwf	?___wmul,w,c
  4651  001092  6EF6               	movwf	tblptrl,c
  4652  001094  0E08               	movlw	high __npowers_
  4653  001096  2012               	addwfc	?___wmul+1,w,c
  4654  001098  6EF7               	movwf	tblptrh,c
  4655  00109A  0009               	tblrd		*+
  4656  00109C  CFF5 F03A          	movff	tablat,??_scale
  4657  0010A0  0009               	tblrd		*+
  4658  0010A2  CFF5 F03B          	movff	tablat,??_scale+1
  4659  0010A6  0009               	tblrd		*+
  4660  0010A8  CFF5 F03C          	movff	tablat,??_scale+2
  4661  0010AC  C03C  F02B         	movff	??_scale+2,?___ftmul+5
  4662  0010B0  C03B  F02A         	movff	??_scale+1,?___ftmul+4
  4663  0010B4  C03A  F029         	movff	??_scale,?___ftmul+3
  4664  0010B8  EC09  F00E         	call	___ftmul	;wreg free
  4665  0010BC  D164               	goto	L17
  4666  0010BE                     l3774:
  4667                           
  4668                           ;doprnt.c: 432: else if(scl > 10)
  4669  0010BE  5037               	movf	scale@scl,w,c
  4670  0010C0  0A80               	xorlw	128
  4671  0010C2  0F75               	addlw	-139
  4672  0010C4  A0D8               	btfss	status,0,c
  4673  0010C6  D059               	goto	l3780
  4674                           
  4675                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  4676  0010C8  0E00               	movlw	0
  4677  0010CA  6E14               	movwf	?___wmul+3,c
  4678  0010CC  0E03               	movlw	3
  4679  0010CE  6E13               	movwf	?___wmul+2,c
  4680  0010D0  0E00               	movlw	0
  4681  0010D2  6E0B               	movwf	?___awdiv+3,c
  4682  0010D4  0E0A               	movlw	10
  4683  0010D6  6E0A               	movwf	?___awdiv+2,c
  4684  0010D8  5037               	movf	scale@scl,w,c
  4685  0010DA  6E08               	movwf	?___awdiv,c
  4686  0010DC  6A09               	clrf	?___awdiv+1,c
  4687  0010DE  BE08               	btfsc	?___awdiv,7,c
  4688  0010E0  0609               	decf	?___awdiv+1,f,c
  4689  0010E2  EC9E  F010         	call	___awdiv	;wreg free
  4690  0010E6  0E09               	movlw	9
  4691  0010E8  2408               	addwf	?___awdiv,w,c
  4692  0010EA  6E11               	movwf	?___wmul,c
  4693  0010EC  0E00               	movlw	0
  4694  0010EE  2009               	addwfc	?___awdiv+1,w,c
  4695  0010F0  6E12               	movwf	?___wmul+1,c
  4696  0010F2  EC6D  F012         	call	___wmul	;wreg free
  4697  0010F6  0E28               	movlw	low __npowers_
  4698  0010F8  2411               	addwf	?___wmul,w,c
  4699  0010FA  6EF6               	movwf	tblptrl,c
  4700  0010FC  0E08               	movlw	high __npowers_
  4701  0010FE  2012               	addwfc	?___wmul+1,w,c
  4702  001100  6EF7               	movwf	tblptrh,c
  4703  001102  0009               	tblrd		*+
  4704  001104  CFF5 F03A          	movff	tablat,??_scale
  4705  001108  0009               	tblrd		*+
  4706  00110A  CFF5 F03B          	movff	tablat,??_scale+1
  4707  00110E  0009               	tblrd		*+
  4708  001110  CFF5 F03C          	movff	tablat,??_scale+2
  4709  001114  C03C  F028         	movff	??_scale+2,?___ftmul+2
  4710  001118  C03B  F027         	movff	??_scale+1,?___ftmul+1
  4711  00111C  C03A  F026         	movff	??_scale,?___ftmul
  4712  001120  0E00               	movlw	0
  4713  001122  6E14               	movwf	?___wmul+3,c
  4714  001124  0E03               	movlw	3
  4715  001126  6E13               	movwf	?___wmul+2,c
  4716  001128  0E00               	movlw	0
  4717  00112A  6E04               	movwf	?___awmod+3,c
  4718  00112C  0E0A               	movlw	10
  4719  00112E  6E03               	movwf	?___awmod+2,c
  4720  001130  5037               	movf	scale@scl,w,c
  4721  001132  6E01               	movwf	?___awmod,c
  4722  001134  6A02               	clrf	?___awmod+1,c
  4723  001136  BE01               	btfsc	?___awmod,7,c
  4724  001138  0602               	decf	?___awmod+1,f,c
  4725  00113A  EC29  F011         	call	___awmod	;wreg free
  4726  00113E  C001  F011         	movff	?___awmod,?___wmul
  4727  001142  C002  F012         	movff	?___awmod+1,?___wmul+1
  4728  001146  EC6D  F012         	call	___wmul	;wreg free
  4729  00114A  0E28               	movlw	low __npowers_
  4730  00114C  2411               	addwf	?___wmul,w,c
  4731  00114E  6EF6               	movwf	tblptrl,c
  4732  001150  0E08               	movlw	high __npowers_
  4733  001152  2012               	addwfc	?___wmul+1,w,c
  4734  001154  6EF7               	movwf	tblptrh,c
  4735  001156  0009               	tblrd		*+
  4736  001158  CFF5 F03D          	movff	tablat,??_scale+3
  4737  00115C  0009               	tblrd		*+
  4738  00115E  CFF5 F03E          	movff	tablat,??_scale+4
  4739  001162  0009               	tblrd		*+
  4740  001164  CFF5 F03F          	movff	tablat,??_scale+5
  4741  001168  C03F  F02B         	movff	??_scale+5,?___ftmul+5
  4742  00116C  C03E  F02A         	movff	??_scale+4,?___ftmul+4
  4743  001170  C03D  F029         	movff	??_scale+3,?___ftmul+3
  4744  001174  EC09  F00E         	call	___ftmul	;wreg free
  4745  001178  D106               	goto	L17
  4746  00117A                     l3780:
  4747                           
  4748                           ;doprnt.c: 434: return _npowers_[scl];
  4749  00117A  5037               	movf	scale@scl,w,c
  4750  00117C  0D03               	mullw	3
  4751  00117E  0E28               	movlw	low __npowers_
  4752  001180  24F3               	addwf	prodl,w,c
  4753  001182  6EF6               	movwf	tblptrl,c
  4754  001184  0E08               	movlw	high __npowers_
  4755  001186  D10C               	goto	L16
  4756  001188                     l3784:
  4757                           
  4758                           ;doprnt.c: 435: }
  4759                           ;doprnt.c: 436: if(scl>=110)
  4760  001188  5037               	movf	scale@scl,w,c
  4761  00118A  0A80               	xorlw	128
  4762  00118C  0F12               	addlw	-238
  4763  00118E  A0D8               	btfss	status,0,c
  4764  001190  D09D               	goto	l3792
  4765                           
  4766                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4767  001192  0E00               	movlw	0
  4768  001194  6E14               	movwf	?___wmul+3,c
  4769  001196  0E03               	movlw	3
  4770  001198  6E13               	movwf	?___wmul+2,c
  4771  00119A  0E00               	movlw	0
  4772  00119C  6E0B               	movwf	?___awdiv+3,c
  4773  00119E  0E0A               	movlw	10
  4774  0011A0  6E0A               	movwf	?___awdiv+2,c
  4775  0011A2  0E00               	movlw	0
  4776  0011A4  6E04               	movwf	?___awmod+3,c
  4777  0011A6  0E64               	movlw	100
  4778  0011A8  6E03               	movwf	?___awmod+2,c
  4779  0011AA  5037               	movf	scale@scl,w,c
  4780  0011AC  6E01               	movwf	?___awmod,c
  4781  0011AE  6A02               	clrf	?___awmod+1,c
  4782  0011B0  BE01               	btfsc	?___awmod,7,c
  4783  0011B2  0602               	decf	?___awmod+1,f,c
  4784  0011B4  EC29  F011         	call	___awmod	;wreg free
  4785  0011B8  C001  F008         	movff	?___awmod,?___awdiv
  4786  0011BC  C002  F009         	movff	?___awmod+1,?___awdiv+1
  4787  0011C0  EC9E  F010         	call	___awdiv	;wreg free
  4788  0011C4  0E09               	movlw	9
  4789  0011C6  2408               	addwf	?___awdiv,w,c
  4790  0011C8  6E11               	movwf	?___wmul,c
  4791  0011CA  0E00               	movlw	0
  4792  0011CC  2009               	addwfc	?___awdiv+1,w,c
  4793  0011CE  6E12               	movwf	?___wmul+1,c
  4794  0011D0  EC6D  F012         	call	___wmul	;wreg free
  4795  0011D4  0E4F               	movlw	low __powers_
  4796  0011D6  2411               	addwf	?___wmul,w,c
  4797  0011D8  6EF6               	movwf	tblptrl,c
  4798  0011DA  0E08               	movlw	high __powers_
  4799  0011DC  2012               	addwfc	?___wmul+1,w,c
  4800  0011DE  6EF7               	movwf	tblptrh,c
  4801  0011E0  0009               	tblrd		*+
  4802  0011E2  CFF5 F03A          	movff	tablat,??_scale
  4803  0011E6  0009               	tblrd		*+
  4804  0011E8  CFF5 F03B          	movff	tablat,??_scale+1
  4805  0011EC  0009               	tblrd		*+
  4806  0011EE  CFF5 F03C          	movff	tablat,??_scale+2
  4807  0011F2  C03C  F02B         	movff	??_scale+2,?___ftmul+5
  4808  0011F6  C03B  F02A         	movff	??_scale+1,?___ftmul+4
  4809  0011FA  C03A  F029         	movff	??_scale,?___ftmul+3
  4810  0011FE  0E00               	movlw	0
  4811  001200  6E14               	movwf	?___wmul+3,c
  4812  001202  0E03               	movlw	3
  4813  001204  6E13               	movwf	?___wmul+2,c
  4814  001206  0E00               	movlw	0
  4815  001208  6E0B               	movwf	?___awdiv+3,c
  4816  00120A  0E64               	movlw	100
  4817  00120C  6E0A               	movwf	?___awdiv+2,c
  4818  00120E  5037               	movf	scale@scl,w,c
  4819  001210  6E08               	movwf	?___awdiv,c
  4820  001212  6A09               	clrf	?___awdiv+1,c
  4821  001214  BE08               	btfsc	?___awdiv,7,c
  4822  001216  0609               	decf	?___awdiv+1,f,c
  4823  001218  EC9E  F010         	call	___awdiv	;wreg free
  4824  00121C  0E12               	movlw	18
  4825  00121E  2408               	addwf	?___awdiv,w,c
  4826  001220  6E11               	movwf	?___wmul,c
  4827  001222  0E00               	movlw	0
  4828  001224  2009               	addwfc	?___awdiv+1,w,c
  4829  001226  6E12               	movwf	?___wmul+1,c
  4830  001228  EC6D  F012         	call	___wmul	;wreg free
  4831  00122C  0E4F               	movlw	low __powers_
  4832  00122E  2411               	addwf	?___wmul,w,c
  4833  001230  6EF6               	movwf	tblptrl,c
  4834  001232  0E08               	movlw	high __powers_
  4835  001234  2012               	addwfc	?___wmul+1,w,c
  4836  001236  6EF7               	movwf	tblptrh,c
  4837  001238  0009               	tblrd		*+
  4838  00123A  CFF5 F03D          	movff	tablat,??_scale+3
  4839  00123E  0009               	tblrd		*+
  4840  001240  CFF5 F03E          	movff	tablat,??_scale+4
  4841  001244  0009               	tblrd		*+
  4842  001246  CFF5 F03F          	movff	tablat,??_scale+5
  4843  00124A  C03F  F028         	movff	??_scale+5,?___ftmul+2
  4844  00124E  C03E  F027         	movff	??_scale+4,?___ftmul+1
  4845  001252  C03D  F026         	movff	??_scale+3,?___ftmul
  4846  001256  EC09  F00E         	call	___ftmul	;wreg free
  4847  00125A  C028  F042         	movff	?___ftmul+2,_scale$805+2
  4848  00125E  C027  F041         	movff	?___ftmul+1,_scale$805+1
  4849  001262  C026  F040         	movff	?___ftmul,_scale$805
  4850                           
  4851                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4852  001266  C040  F026         	movff	_scale$805,?___ftmul
  4853  00126A  C041  F027         	movff	_scale$805+1,?___ftmul+1
  4854  00126E  C042  F028         	movff	_scale$805+2,?___ftmul+2
  4855  001272  0E00               	movlw	0
  4856  001274  6E14               	movwf	?___wmul+3,c
  4857  001276  0E03               	movlw	3
  4858  001278  6E13               	movwf	?___wmul+2,c
  4859  00127A  0E00               	movlw	0
  4860  00127C  6E04               	movwf	?___awmod+3,c
  4861  00127E  0E0A               	movlw	10
  4862  001280  6E03               	movwf	?___awmod+2,c
  4863  001282  5037               	movf	scale@scl,w,c
  4864  001284  6E01               	movwf	?___awmod,c
  4865  001286  6A02               	clrf	?___awmod+1,c
  4866  001288  BE01               	btfsc	?___awmod,7,c
  4867  00128A  0602               	decf	?___awmod+1,f,c
  4868  00128C  EC29  F011         	call	___awmod	;wreg free
  4869  001290  C001  F011         	movff	?___awmod,?___wmul
  4870  001294  C002  F012         	movff	?___awmod+1,?___wmul+1
  4871  001298  EC6D  F012         	call	___wmul	;wreg free
  4872  00129C  0E4F               	movlw	low __powers_
  4873  00129E  2411               	addwf	?___wmul,w,c
  4874  0012A0  6EF6               	movwf	tblptrl,c
  4875  0012A2  0E08               	movlw	high __powers_
  4876  0012A4  2012               	addwfc	?___wmul+1,w,c
  4877  0012A6  6EF7               	movwf	tblptrh,c
  4878  0012A8  0009               	tblrd		*+
  4879  0012AA  CFF5 F03A          	movff	tablat,??_scale
  4880  0012AE  0009               	tblrd		*+
  4881  0012B0  CFF5 F03B          	movff	tablat,??_scale+1
  4882  0012B4  0009               	tblrd		*+
  4883  0012B6  CFF5 F03C          	movff	tablat,??_scale+2
  4884  0012BA  C03C  F02B         	movff	??_scale+2,?___ftmul+5
  4885  0012BE  C03B  F02A         	movff	??_scale+1,?___ftmul+4
  4886  0012C2  C03A  F029         	movff	??_scale,?___ftmul+3
  4887  0012C6  EC09  F00E         	call	___ftmul	;wreg free
  4888  0012CA  D05D               	goto	L17
  4889  0012CC                     l3792:
  4890                           
  4891                           ;doprnt.c: 438: else if(scl > 10)
  4892  0012CC  5037               	movf	scale@scl,w,c
  4893  0012CE  0A80               	xorlw	128
  4894  0012D0  0F75               	addlw	-139
  4895  0012D2  A0D8               	btfss	status,0,c
  4896  0012D4  D05F               	goto	l3798
  4897                           
  4898                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  4899  0012D6  0E00               	movlw	0
  4900  0012D8  6E14               	movwf	?___wmul+3,c
  4901  0012DA  0E03               	movlw	3
  4902  0012DC  6E13               	movwf	?___wmul+2,c
  4903  0012DE  0E00               	movlw	0
  4904  0012E0  6E0B               	movwf	?___awdiv+3,c
  4905  0012E2  0E0A               	movlw	10
  4906  0012E4  6E0A               	movwf	?___awdiv+2,c
  4907  0012E6  5037               	movf	scale@scl,w,c
  4908  0012E8  6E08               	movwf	?___awdiv,c
  4909  0012EA  6A09               	clrf	?___awdiv+1,c
  4910  0012EC  BE08               	btfsc	?___awdiv,7,c
  4911  0012EE  0609               	decf	?___awdiv+1,f,c
  4912  0012F0  EC9E  F010         	call	___awdiv	;wreg free
  4913  0012F4  0E09               	movlw	9
  4914  0012F6  2408               	addwf	?___awdiv,w,c
  4915  0012F8  6E11               	movwf	?___wmul,c
  4916  0012FA  0E00               	movlw	0
  4917  0012FC  2009               	addwfc	?___awdiv+1,w,c
  4918  0012FE  6E12               	movwf	?___wmul+1,c
  4919  001300  EC6D  F012         	call	___wmul	;wreg free
  4920  001304  0E4F               	movlw	low __powers_
  4921  001306  2411               	addwf	?___wmul,w,c
  4922  001308  6EF6               	movwf	tblptrl,c
  4923  00130A  0E08               	movlw	high __powers_
  4924  00130C  2012               	addwfc	?___wmul+1,w,c
  4925  00130E  6EF7               	movwf	tblptrh,c
  4926  001310  0009               	tblrd		*+
  4927  001312  CFF5 F03A          	movff	tablat,??_scale
  4928  001316  0009               	tblrd		*+
  4929  001318  CFF5 F03B          	movff	tablat,??_scale+1
  4930  00131C  0009               	tblrd		*+
  4931  00131E  CFF5 F03C          	movff	tablat,??_scale+2
  4932  001322  C03C  F028         	movff	??_scale+2,?___ftmul+2
  4933  001326  C03B  F027         	movff	??_scale+1,?___ftmul+1
  4934  00132A  C03A  F026         	movff	??_scale,?___ftmul
  4935  00132E  0E00               	movlw	0
  4936  001330  6E14               	movwf	?___wmul+3,c
  4937  001332  0E03               	movlw	3
  4938  001334  6E13               	movwf	?___wmul+2,c
  4939  001336  0E00               	movlw	0
  4940  001338  6E04               	movwf	?___awmod+3,c
  4941  00133A  0E0A               	movlw	10
  4942  00133C  6E03               	movwf	?___awmod+2,c
  4943  00133E  5037               	movf	scale@scl,w,c
  4944  001340  6E01               	movwf	?___awmod,c
  4945  001342  6A02               	clrf	?___awmod+1,c
  4946  001344  BE01               	btfsc	?___awmod,7,c
  4947  001346  0602               	decf	?___awmod+1,f,c
  4948  001348  EC29  F011         	call	___awmod	;wreg free
  4949  00134C  C001  F011         	movff	?___awmod,?___wmul
  4950  001350  C002  F012         	movff	?___awmod+1,?___wmul+1
  4951  001354  EC6D  F012         	call	___wmul	;wreg free
  4952  001358  0E4F               	movlw	low __powers_
  4953  00135A  2411               	addwf	?___wmul,w,c
  4954  00135C  6EF6               	movwf	tblptrl,c
  4955  00135E  0E08               	movlw	high __powers_
  4956  001360  2012               	addwfc	?___wmul+1,w,c
  4957  001362  6EF7               	movwf	tblptrh,c
  4958  001364  0009               	tblrd		*+
  4959  001366  CFF5 F03D          	movff	tablat,??_scale+3
  4960  00136A  0009               	tblrd		*+
  4961  00136C  CFF5 F03E          	movff	tablat,??_scale+4
  4962  001370  0009               	tblrd		*+
  4963  001372  CFF5 F03F          	movff	tablat,??_scale+5
  4964  001376  C03F  F02B         	movff	??_scale+5,?___ftmul+5
  4965  00137A  C03E  F02A         	movff	??_scale+4,?___ftmul+4
  4966  00137E  C03D  F029         	movff	??_scale+3,?___ftmul+3
  4967  001382  EC09  F00E         	call	___ftmul	;wreg free
  4968  001386                     L17:
  4969  001386  C028  F039         	movff	?___ftmul+2,?_scale+2
  4970  00138A  C027  F038         	movff	?___ftmul+1,?_scale+1
  4971  00138E  C026  F037         	movff	?___ftmul,?_scale
  4972  001392  D017               	goto	l126
  4973  001394                     l3798:
  4974                           
  4975                           ;doprnt.c: 440: return _powers_[scl];
  4976  001394  5037               	movf	scale@scl,w,c
  4977  001396  0D03               	mullw	3
  4978  001398  0E4F               	movlw	low __powers_
  4979  00139A  24F3               	addwf	prodl,w,c
  4980  00139C  6EF6               	movwf	tblptrl,c
  4981  00139E  0E08               	movlw	high __powers_
  4982  0013A0                     L16:
  4983  0013A0  20F4               	addwfc	prodh,w,c
  4984  0013A2  6EF7               	movwf	tblptrh,c
  4985  0013A4  0009               	tblrd		*+
  4986  0013A6  CFF5 F03A          	movff	tablat,??_scale
  4987  0013AA  0009               	tblrd		*+
  4988  0013AC  CFF5 F03B          	movff	tablat,??_scale+1
  4989  0013B0  0009               	tblrd		*+
  4990  0013B2  CFF5 F03C          	movff	tablat,??_scale+2
  4991  0013B6  C03C  F039         	movff	??_scale+2,?_scale+2
  4992  0013BA  C03B  F038         	movff	??_scale+1,?_scale+1
  4993  0013BE  C03A  F037         	movff	??_scale,?_scale
  4994  0013C2                     l126:
  4995  0013C2  0012               	return	
  4996  0013C4                     __end_of_scale:
  4997                           	opt stack 0
  4998                           tblptru	equ	0xFF8
  4999                           tblptrh	equ	0xFF7
  5000                           tblptrl	equ	0xFF6
  5001                           tablat	equ	0xFF5
  5002                           prodh	equ	0xFF4
  5003                           prodl	equ	0xFF3
  5004                           wreg	equ	0xFE8
  5005                           indf2	equ	0xFDF
  5006                           postinc2	equ	0xFDE
  5007                           postdec2	equ	0xFDD
  5008                           fsr2h	equ	0xFDA
  5009                           fsr2l	equ	0xFD9
  5010                           status	equ	0xFD8
  5011                           
  5012 ;; *************** function ___wmul *****************
  5013 ;; Defined at:
  5014 ;;		line 5 in file "E:\Program Files\Microchip\xc8\v1.20\sources\common\wmul.c"
  5015 ;; Parameters:    Size  Location     Type
  5016 ;;  multiplier      2   16[COMRAM] unsigned int 
  5017 ;;  multiplicand    2   18[COMRAM] unsigned int 
  5018 ;; Auto vars:     Size  Location     Type
  5019 ;;  product         2   20[COMRAM] unsigned int 
  5020 ;; Return value:  Size  Location     Type
  5021 ;;                  2   16[COMRAM] unsigned int 
  5022 ;; Registers used:
  5023 ;;		wreg, status,2, status,0, prodl, prodh
  5024 ;; Tracked objects:
  5025 ;;		On entry : 0/0
  5026 ;;		On exit  : 0/0
  5027 ;;		Unchanged: 0/0
  5028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5029 ;;      Params:         4       0       0       0       0       0       0       0       0
  5030 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5031 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5032 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5033 ;;Total ram usage:        6 bytes
  5034 ;; Hardware stack levels used:    1
  5035 ;; This function calls:
  5036 ;;		Nothing
  5037 ;; This function is called by:
  5038 ;;		_fround
  5039 ;;		_scale
  5040 ;;		_sprintf
  5041 ;; This function uses a non-reentrant model
  5042 ;;
  5043                           
  5044                           	psect	text22
  5045  0024DA                     __ptext22:
  5046                           	opt stack 0
  5047  0024DA                     ___wmul:
  5048                           	opt stack 29
  5049                           
  5050                           ;incstack = 0
  5051                           ;incstack = 0
  5052  0024DA  5011               	movf	___wmul@multiplier,w,c
  5053  0024DC  0213               	mulwf	___wmul@multiplicand,c
  5054  0024DE  CFF3 F015          	movff	prodl,___wmul@product
  5055  0024E2  CFF4 F016          	movff	prodh,___wmul@product+1
  5056  0024E6  5011               	movf	___wmul@multiplier,w,c
  5057  0024E8  0214               	mulwf	___wmul@multiplicand+1,c
  5058  0024EA  CFF3 FFF4          	movff	prodl,prodh
  5059  0024EE  6AF3               	clrf	prodl,c
  5060  0024F0  50F3               	movf	prodl,w,c
  5061  0024F2  2615               	addwf	___wmul@product,f,c
  5062  0024F4  50F4               	movf	prodh,w,c
  5063  0024F6  2216               	addwfc	___wmul@product+1,f,c
  5064  0024F8  5012               	movf	___wmul@multiplier+1,w,c
  5065  0024FA  0213               	mulwf	___wmul@multiplicand,c
  5066  0024FC  CFF3 FFF4          	movff	prodl,prodh
  5067  002500  6AF3               	clrf	prodl,c
  5068  002502  50F3               	movf	prodl,w,c
  5069  002504  2615               	addwf	___wmul@product,f,c
  5070  002506  50F4               	movf	prodh,w,c
  5071  002508  2216               	addwfc	___wmul@product+1,f,c
  5072  00250A  C015  F011         	movff	___wmul@product,?___wmul
  5073  00250E  C016  F012         	movff	___wmul@product+1,?___wmul+1
  5074  002512  0012               	return	
  5075  002514                     __end_of___wmul:
  5076                           	opt stack 0
  5077                           tblptru	equ	0xFF8
  5078                           tblptrh	equ	0xFF7
  5079                           tblptrl	equ	0xFF6
  5080                           tablat	equ	0xFF5
  5081                           prodh	equ	0xFF4
  5082                           prodl	equ	0xFF3
  5083                           wreg	equ	0xFE8
  5084                           indf2	equ	0xFDF
  5085                           postinc2	equ	0xFDE
  5086                           postdec2	equ	0xFDD
  5087                           fsr2h	equ	0xFDA
  5088                           fsr2l	equ	0xFD9
  5089                           status	equ	0xFD8
  5090                           
  5091 ;; *************** function ___awmod *****************
  5092 ;; Defined at:
  5093 ;;		line 10 in file "E:\Program Files\Microchip\xc8\v1.20\sources\common\awmod.c"
  5094 ;; Parameters:    Size  Location     Type
  5095 ;;  dividend        2    0[COMRAM] int 
  5096 ;;  divisor         2    2[COMRAM] int 
  5097 ;; Auto vars:     Size  Location     Type
  5098 ;;  sign            1    6[COMRAM] unsigned char 
  5099 ;;  counter         1    5[COMRAM] unsigned char 
  5100 ;; Return value:  Size  Location     Type
  5101 ;;                  2    0[COMRAM] int 
  5102 ;; Registers used:
  5103 ;;		wreg, status,2, status,0
  5104 ;; Tracked objects:
  5105 ;;		On entry : 0/0
  5106 ;;		On exit  : 0/0
  5107 ;;		Unchanged: 0/0
  5108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5109 ;;      Params:         4       0       0       0       0       0       0       0       0
  5110 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5111 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5112 ;;      Totals:         7       0       0       0       0       0       0       0       0
  5113 ;;Total ram usage:        7 bytes
  5114 ;; Hardware stack levels used:    1
  5115 ;; This function calls:
  5116 ;;		Nothing
  5117 ;; This function is called by:
  5118 ;;		_fround
  5119 ;;		_scale
  5120 ;; This function uses a non-reentrant model
  5121 ;;
  5122                           
  5123                           	psect	text23
  5124  002252                     __ptext23:
  5125                           	opt stack 0
  5126  002252                     ___awmod:
  5127                           	opt stack 28
  5128                           
  5129                           ;incstack = 0
  5130                           ;incstack = 0
  5131  002252  6E05               	movwf	??___awmod& (0+255),c
  5132  002254  0E00               	movlw	0
  5133  002256  6E07               	movwf	___awmod@sign,c
  5134  002258  5005               	movf	??___awmod& (0+255),w,c
  5135  00225A  AE02               	btfss	___awmod@dividend+1,7,c
  5136  00225C  D008               	goto	l3382
  5137  00225E  6C01               	negf	___awmod@dividend,c
  5138  002260  1E02               	comf	___awmod@dividend+1,f,c
  5139  002262  B0D8               	btfsc	status,0,c
  5140  002264  2A02               	incf	___awmod@dividend+1,f,c
  5141  002266  6E05               	movwf	??___awmod& (0+255),c
  5142  002268  0E01               	movlw	1
  5143  00226A  6E07               	movwf	___awmod@sign,c
  5144  00226C  5005               	movf	??___awmod& (0+255),w,c
  5145  00226E                     l3382:
  5146  00226E  AE04               	btfss	___awmod@divisor+1,7,c
  5147  002270  D004               	goto	l3386
  5148  002272  6C03               	negf	___awmod@divisor,c
  5149  002274  1E04               	comf	___awmod@divisor+1,f,c
  5150  002276  B0D8               	btfsc	status,0,c
  5151  002278  2A04               	incf	___awmod@divisor+1,f,c
  5152  00227A                     l3386:
  5153  00227A  5004               	movf	___awmod@divisor+1,w,c
  5154  00227C  1003               	iorwf	___awmod@divisor,w,c
  5155  00227E  B4D8               	btfsc	status,2,c
  5156  002280  D01A               	goto	l3402
  5157  002282  6E05               	movwf	??___awmod& (0+255),c
  5158  002284  0E01               	movlw	1
  5159  002286  6E06               	movwf	___awmod@counter,c
  5160  002288  5005               	movf	??___awmod& (0+255),w,c
  5161  00228A  D004               	goto	l3392
  5162  00228C                     l3390:
  5163  00228C  90D8               	bcf	status,0,c
  5164  00228E  3603               	rlcf	___awmod@divisor,f,c
  5165  002290  3604               	rlcf	___awmod@divisor+1,f,c
  5166  002292  2A06               	incf	___awmod@counter,f,c
  5167  002294                     l3392:
  5168  002294  AE04               	btfss	___awmod@divisor+1,7,c
  5169  002296  D7FA               	goto	l3390
  5170  002298                     l3394:
  5171  002298  5003               	movf	___awmod@divisor,w,c
  5172  00229A  5C01               	subwf	___awmod@dividend,w,c
  5173  00229C  5004               	movf	___awmod@divisor+1,w,c
  5174  00229E  5802               	subwfb	___awmod@dividend+1,w,c
  5175  0022A0  A0D8               	btfss	status,0,c
  5176  0022A2  D004               	goto	l3398
  5177  0022A4  5003               	movf	___awmod@divisor,w,c
  5178  0022A6  5E01               	subwf	___awmod@dividend,f,c
  5179  0022A8  5004               	movf	___awmod@divisor+1,w,c
  5180  0022AA  5A02               	subwfb	___awmod@dividend+1,f,c
  5181  0022AC                     l3398:
  5182  0022AC  90D8               	bcf	status,0,c
  5183  0022AE  3204               	rrcf	___awmod@divisor+1,f,c
  5184  0022B0  3203               	rrcf	___awmod@divisor,f,c
  5185  0022B2  2E06               	decfsz	___awmod@counter,f,c
  5186  0022B4  D7F1               	goto	l3394
  5187  0022B6                     l3402:
  5188  0022B6  5007               	movf	___awmod@sign,w,c
  5189  0022B8  B4D8               	btfsc	status,2,c
  5190  0022BA  D004               	goto	l3406
  5191  0022BC  6C01               	negf	___awmod@dividend,c
  5192  0022BE  1E02               	comf	___awmod@dividend+1,f,c
  5193  0022C0  B0D8               	btfsc	status,0,c
  5194  0022C2  2A02               	incf	___awmod@dividend+1,f,c
  5195  0022C4                     l3406:
  5196  0022C4  C001  F001         	movff	___awmod@dividend,?___awmod
  5197  0022C8  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  5198  0022CC  0012               	return	
  5199  0022CE                     __end_of___awmod:
  5200                           	opt stack 0
  5201                           tblptru	equ	0xFF8
  5202                           tblptrh	equ	0xFF7
  5203                           tblptrl	equ	0xFF6
  5204                           tablat	equ	0xFF5
  5205                           prodh	equ	0xFF4
  5206                           prodl	equ	0xFF3
  5207                           wreg	equ	0xFE8
  5208                           indf2	equ	0xFDF
  5209                           postinc2	equ	0xFDE
  5210                           postdec2	equ	0xFDD
  5211                           fsr2h	equ	0xFDA
  5212                           fsr2l	equ	0xFD9
  5213                           status	equ	0xFD8
  5214                           
  5215 ;; *************** function ___awdiv *****************
  5216 ;; Defined at:
  5217 ;;		line 10 in file "E:\Program Files\Microchip\xc8\v1.20\sources\common\awdiv.c"
  5218 ;; Parameters:    Size  Location     Type
  5219 ;;  dividend        2    7[COMRAM] int 
  5220 ;;  divisor         2    9[COMRAM] int 
  5221 ;; Auto vars:     Size  Location     Type
  5222 ;;  quotient        2   14[COMRAM] int 
  5223 ;;  sign            1   13[COMRAM] unsigned char 
  5224 ;;  counter         1   12[COMRAM] unsigned char 
  5225 ;; Return value:  Size  Location     Type
  5226 ;;                  2    7[COMRAM] int 
  5227 ;; Registers used:
  5228 ;;		wreg, status,2, status,0
  5229 ;; Tracked objects:
  5230 ;;		On entry : 0/0
  5231 ;;		On exit  : 0/0
  5232 ;;		Unchanged: 0/0
  5233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5234 ;;      Params:         4       0       0       0       0       0       0       0       0
  5235 ;;      Locals:         4       0       0       0       0       0       0       0       0
  5236 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5237 ;;      Totals:         9       0       0       0       0       0       0       0       0
  5238 ;;Total ram usage:        9 bytes
  5239 ;; Hardware stack levels used:    1
  5240 ;; This function calls:
  5241 ;;		Nothing
  5242 ;; This function is called by:
  5243 ;;		_fround
  5244 ;;		_scale
  5245 ;;		_sprintf
  5246 ;; This function uses a non-reentrant model
  5247 ;;
  5248                           
  5249                           	psect	text24
  5250  00213C                     __ptext24:
  5251                           	opt stack 0
  5252  00213C                     ___awdiv:
  5253                           	opt stack 29
  5254                           
  5255                           ;incstack = 0
  5256                           ;incstack = 0
  5257  00213C  6E0C               	movwf	??___awdiv& (0+255),c
  5258  00213E  0E00               	movlw	0
  5259  002140  6E0E               	movwf	___awdiv@sign,c
  5260  002142  500C               	movf	??___awdiv& (0+255),w,c
  5261  002144  AE0B               	btfss	___awdiv@divisor+1,7,c
  5262  002146  D008               	goto	l3666
  5263  002148  6C0A               	negf	___awdiv@divisor,c
  5264  00214A  1E0B               	comf	___awdiv@divisor+1,f,c
  5265  00214C  B0D8               	btfsc	status,0,c
  5266  00214E  2A0B               	incf	___awdiv@divisor+1,f,c
  5267  002150  6E0C               	movwf	??___awdiv& (0+255),c
  5268  002152  0E01               	movlw	1
  5269  002154  6E0E               	movwf	___awdiv@sign,c
  5270  002156  500C               	movf	??___awdiv& (0+255),w,c
  5271  002158                     l3666:
  5272  002158  AE09               	btfss	___awdiv@dividend+1,7,c
  5273  00215A  D006               	goto	l3672
  5274  00215C  6C08               	negf	___awdiv@dividend,c
  5275  00215E  1E09               	comf	___awdiv@dividend+1,f,c
  5276  002160  B0D8               	btfsc	status,0,c
  5277  002162  2A09               	incf	___awdiv@dividend+1,f,c
  5278  002164  0E01               	movlw	1
  5279  002166  1A0E               	xorwf	___awdiv@sign,f,c
  5280  002168                     l3672:
  5281  002168  0E00               	movlw	0
  5282  00216A  6E10               	movwf	___awdiv@quotient+1,c
  5283  00216C  0E00               	movlw	0
  5284  00216E  6E0F               	movwf	___awdiv@quotient,c
  5285  002170  500B               	movf	___awdiv@divisor+1,w,c
  5286  002172  100A               	iorwf	___awdiv@divisor,w,c
  5287  002174  B4D8               	btfsc	status,2,c
  5288  002176  D01E               	goto	l3694
  5289  002178  6E0C               	movwf	??___awdiv& (0+255),c
  5290  00217A  0E01               	movlw	1
  5291  00217C  6E0D               	movwf	___awdiv@counter,c
  5292  00217E  500C               	movf	??___awdiv& (0+255),w,c
  5293  002180  D004               	goto	l3680
  5294  002182                     l3678:
  5295  002182  90D8               	bcf	status,0,c
  5296  002184  360A               	rlcf	___awdiv@divisor,f,c
  5297  002186  360B               	rlcf	___awdiv@divisor+1,f,c
  5298  002188  2A0D               	incf	___awdiv@counter,f,c
  5299  00218A                     l3680:
  5300  00218A  AE0B               	btfss	___awdiv@divisor+1,7,c
  5301  00218C  D7FA               	goto	l3678
  5302  00218E                     l3682:
  5303  00218E  90D8               	bcf	status,0,c
  5304  002190  360F               	rlcf	___awdiv@quotient,f,c
  5305  002192  3610               	rlcf	___awdiv@quotient+1,f,c
  5306  002194  500A               	movf	___awdiv@divisor,w,c
  5307  002196  5C08               	subwf	___awdiv@dividend,w,c
  5308  002198  500B               	movf	___awdiv@divisor+1,w,c
  5309  00219A  5809               	subwfb	___awdiv@dividend+1,w,c
  5310  00219C  A0D8               	btfss	status,0,c
  5311  00219E  D005               	goto	l3690
  5312  0021A0  500A               	movf	___awdiv@divisor,w,c
  5313  0021A2  5E08               	subwf	___awdiv@dividend,f,c
  5314  0021A4  500B               	movf	___awdiv@divisor+1,w,c
  5315  0021A6  5A09               	subwfb	___awdiv@dividend+1,f,c
  5316  0021A8  800F               	bsf	___awdiv@quotient,0,c
  5317  0021AA                     l3690:
  5318  0021AA  90D8               	bcf	status,0,c
  5319  0021AC  320B               	rrcf	___awdiv@divisor+1,f,c
  5320  0021AE  320A               	rrcf	___awdiv@divisor,f,c
  5321  0021B0  2E0D               	decfsz	___awdiv@counter,f,c
  5322  0021B2  D7ED               	goto	l3682
  5323  0021B4                     l3694:
  5324  0021B4  500E               	movf	___awdiv@sign,w,c
  5325  0021B6  B4D8               	btfsc	status,2,c
  5326  0021B8  D004               	goto	l3698
  5327  0021BA  6C0F               	negf	___awdiv@quotient,c
  5328  0021BC  1E10               	comf	___awdiv@quotient+1,f,c
  5329  0021BE  B0D8               	btfsc	status,0,c
  5330  0021C0  2A10               	incf	___awdiv@quotient+1,f,c
  5331  0021C2                     l3698:
  5332  0021C2  C00F  F008         	movff	___awdiv@quotient,?___awdiv
  5333  0021C6  C010  F009         	movff	___awdiv@quotient+1,?___awdiv+1
  5334  0021CA  0012               	return	
  5335  0021CC                     __end_of___awdiv:
  5336                           	opt stack 0
  5337                           tblptru	equ	0xFF8
  5338                           tblptrh	equ	0xFF7
  5339                           tblptrl	equ	0xFF6
  5340                           tablat	equ	0xFF5
  5341                           prodh	equ	0xFF4
  5342                           prodl	equ	0xFF3
  5343                           wreg	equ	0xFE8
  5344                           indf2	equ	0xFDF
  5345                           postinc2	equ	0xFDE
  5346                           postdec2	equ	0xFDD
  5347                           fsr2h	equ	0xFDA
  5348                           fsr2l	equ	0xFD9
  5349                           status	equ	0xFD8
  5350                           
  5351 ;; *************** function _fround *****************
  5352 ;; Defined at:
  5353 ;;		line 410 in file "E:\Program Files\Microchip\xc8\v1.20\sources\common\doprnt.c"
  5354 ;; Parameters:    Size  Location     Type
  5355 ;;  prec            1   54[COMRAM] unsigned char 
  5356 ;; Auto vars:     Size  Location     Type
  5357 ;;		None
  5358 ;; Return value:  Size  Location     Type
  5359 ;;                  3   54[COMRAM] unsigned char 
  5360 ;; Registers used:
  5361 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5362 ;; Tracked objects:
  5363 ;;		On entry : 0/0
  5364 ;;		On exit  : 0/0
  5365 ;;		Unchanged: 0/0
  5366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5367 ;;      Params:         3       0       0       0       0       0       0       0       0
  5368 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5369 ;;      Temps:          6       0       0       0       0       0       0       0       0
  5370 ;;      Totals:        15       0       0       0       0       0       0       0       0
  5371 ;;Total ram usage:       15 bytes
  5372 ;; Hardware stack levels used:    1
  5373 ;; Hardware stack levels required when called:    2
  5374 ;; This function calls:
  5375 ;;		___ftmul
  5376 ;;		___awdiv
  5377 ;;		___awmod
  5378 ;;		___wmul
  5379 ;; This function is called by:
  5380 ;;		_sprintf
  5381 ;; This function uses a non-reentrant model
  5382 ;;
  5383                           
  5384                           	psect	text25
  5385  0016A4                     __ptext25:
  5386                           	opt stack 0
  5387  0016A4                     _fround:
  5388                           	opt stack 27
  5389                           
  5390                           ;doprnt.c: 413: if(prec>=110)
  5391                           
  5392                           ;incstack = 0
  5393                           ;incstack = 0
  5394  0016A4  0E6D               	movlw	109
  5395  0016A6  6437               	cpfsgt	fround@prec,c
  5396  0016A8  D0AB               	goto	l3734
  5397                           
  5398                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5399  0016AA  0E00               	movlw	0
  5400  0016AC  6E14               	movwf	?___wmul+3,c
  5401  0016AE  0E03               	movlw	3
  5402  0016B0  6E13               	movwf	?___wmul+2,c
  5403  0016B2  0E00               	movlw	0
  5404  0016B4  6E0B               	movwf	?___awdiv+3,c
  5405  0016B6  0E0A               	movlw	10
  5406  0016B8  6E0A               	movwf	?___awdiv+2,c
  5407  0016BA  0E00               	movlw	0
  5408  0016BC  6E04               	movwf	?___awmod+3,c
  5409  0016BE  0E64               	movlw	100
  5410  0016C0  6E03               	movwf	?___awmod+2,c
  5411  0016C2  C037  F001         	movff	fround@prec,?___awmod
  5412  0016C6  6A02               	clrf	?___awmod+1,c
  5413  0016C8  EC29  F011         	call	___awmod	;wreg free
  5414  0016CC  C001  F008         	movff	?___awmod,?___awdiv
  5415  0016D0  C002  F009         	movff	?___awmod+1,?___awdiv+1
  5416  0016D4  EC9E  F010         	call	___awdiv	;wreg free
  5417  0016D8  0E09               	movlw	9
  5418  0016DA  2408               	addwf	?___awdiv,w,c
  5419  0016DC  6E11               	movwf	?___wmul,c
  5420  0016DE  0E00               	movlw	0
  5421  0016E0  2009               	addwfc	?___awdiv+1,w,c
  5422  0016E2  6E12               	movwf	?___wmul+1,c
  5423  0016E4  EC6D  F012         	call	___wmul	;wreg free
  5424  0016E8  0E28               	movlw	low __npowers_
  5425  0016EA  2411               	addwf	?___wmul,w,c
  5426  0016EC  6EF6               	movwf	tblptrl,c
  5427  0016EE  0E08               	movlw	high __npowers_
  5428  0016F0  2012               	addwfc	?___wmul+1,w,c
  5429  0016F2  6EF7               	movwf	tblptrh,c
  5430  0016F4  0009               	tblrd		*+
  5431  0016F6  CFF5 F03A          	movff	tablat,??_fround
  5432  0016FA  0009               	tblrd		*+
  5433  0016FC  CFF5 F03B          	movff	tablat,??_fround+1
  5434  001700  0009               	tblrd		*+
  5435  001702  CFF5 F03C          	movff	tablat,??_fround+2
  5436  001706  C03C  F02B         	movff	??_fround+2,?___ftmul+5
  5437  00170A  C03B  F02A         	movff	??_fround+1,?___ftmul+4
  5438  00170E  C03A  F029         	movff	??_fround,?___ftmul+3
  5439  001712  0E00               	movlw	0
  5440  001714  6E14               	movwf	?___wmul+3,c
  5441  001716  0E03               	movlw	3
  5442  001718  6E13               	movwf	?___wmul+2,c
  5443  00171A  0E00               	movlw	0
  5444  00171C  6E0B               	movwf	?___awdiv+3,c
  5445  00171E  0E64               	movlw	100
  5446  001720  6E0A               	movwf	?___awdiv+2,c
  5447  001722  C037  F008         	movff	fround@prec,?___awdiv
  5448  001726  6A09               	clrf	?___awdiv+1,c
  5449  001728  EC9E  F010         	call	___awdiv	;wreg free
  5450  00172C  0E12               	movlw	18
  5451  00172E  2408               	addwf	?___awdiv,w,c
  5452  001730  6E11               	movwf	?___wmul,c
  5453  001732  0E00               	movlw	0
  5454  001734  2009               	addwfc	?___awdiv+1,w,c
  5455  001736  6E12               	movwf	?___wmul+1,c
  5456  001738  EC6D  F012         	call	___wmul	;wreg free
  5457  00173C  0E28               	movlw	low __npowers_
  5458  00173E  2411               	addwf	?___wmul,w,c
  5459  001740  6EF6               	movwf	tblptrl,c
  5460  001742  0E08               	movlw	high __npowers_
  5461  001744  2012               	addwfc	?___wmul+1,w,c
  5462  001746  6EF7               	movwf	tblptrh,c
  5463  001748  0009               	tblrd		*+
  5464  00174A  CFF5 F03D          	movff	tablat,??_fround+3
  5465  00174E  0009               	tblrd		*+
  5466  001750  CFF5 F03E          	movff	tablat,??_fround+4
  5467  001754  0009               	tblrd		*+
  5468  001756  CFF5 F03F          	movff	tablat,??_fround+5
  5469  00175A  C03F  F028         	movff	??_fround+5,?___ftmul+2
  5470  00175E  C03E  F027         	movff	??_fround+4,?___ftmul+1
  5471  001762  C03D  F026         	movff	??_fround+3,?___ftmul
  5472  001766  EC09  F00E         	call	___ftmul	;wreg free
  5473  00176A  C028  F045         	movff	?___ftmul+2,_fround$803+2
  5474  00176E  C027  F044         	movff	?___ftmul+1,_fround$803+1
  5475  001772  C026  F043         	movff	?___ftmul,_fround$803
  5476                           
  5477                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5478  001776  0E00               	movlw	0
  5479  001778  6E14               	movwf	?___wmul+3,c
  5480  00177A  0E03               	movlw	3
  5481  00177C  6E13               	movwf	?___wmul+2,c
  5482  00177E  0E00               	movlw	0
  5483  001780  6E04               	movwf	?___awmod+3,c
  5484  001782  0E0A               	movlw	10
  5485  001784  6E03               	movwf	?___awmod+2,c
  5486  001786  C037  F001         	movff	fround@prec,?___awmod
  5487  00178A  6A02               	clrf	?___awmod+1,c
  5488  00178C  EC29  F011         	call	___awmod	;wreg free
  5489  001790  C001  F011         	movff	?___awmod,?___wmul
  5490  001794  C002  F012         	movff	?___awmod+1,?___wmul+1
  5491  001798  EC6D  F012         	call	___wmul	;wreg free
  5492  00179C  0E28               	movlw	low __npowers_
  5493  00179E  2411               	addwf	?___wmul,w,c
  5494  0017A0  6EF6               	movwf	tblptrl,c
  5495  0017A2  0E08               	movlw	high __npowers_
  5496  0017A4  2012               	addwfc	?___wmul+1,w,c
  5497  0017A6  6EF7               	movwf	tblptrh,c
  5498  0017A8  0009               	tblrd		*+
  5499  0017AA  CFF5 F03A          	movff	tablat,??_fround
  5500  0017AE  0009               	tblrd		*+
  5501  0017B0  CFF5 F03B          	movff	tablat,??_fround+1
  5502  0017B4  0009               	tblrd		*+
  5503  0017B6  CFF5 F03C          	movff	tablat,??_fround+2
  5504  0017BA  C03C  F02B         	movff	??_fround+2,?___ftmul+5
  5505  0017BE  C03B  F02A         	movff	??_fround+1,?___ftmul+4
  5506  0017C2  C03A  F029         	movff	??_fround,?___ftmul+3
  5507  0017C6  C043  F026         	movff	_fround$803,?___ftmul
  5508  0017CA  C044  F027         	movff	_fround$803+1,?___ftmul+1
  5509  0017CE  C045  F028         	movff	_fround$803+2,?___ftmul+2
  5510  0017D2  EC09  F00E         	call	___ftmul	;wreg free
  5511  0017D6  C028  F042         	movff	?___ftmul+2,_fround$804+2
  5512  0017DA  C027  F041         	movff	?___ftmul+1,_fround$804+1
  5513  0017DE  C026  F040         	movff	?___ftmul,_fround$804
  5514                           
  5515                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5516  0017E2  C040  F026         	movff	_fround$804,?___ftmul
  5517  0017E6  C041  F027         	movff	_fround$804+1,?___ftmul+1
  5518  0017EA  C042  F028         	movff	_fround$804+2,?___ftmul+2
  5519  0017EE  0E00               	movlw	0
  5520  0017F0  6E29               	movwf	?___ftmul+3,c
  5521  0017F2  0E00               	movlw	0
  5522  0017F4  6E2A               	movwf	?___ftmul+4,c
  5523  0017F6  0E3F               	movlw	63
  5524  0017F8  6E2B               	movwf	?___ftmul+5,c
  5525  0017FA  EC09  F00E         	call	___ftmul	;wreg free
  5526  0017FE  D08B               	goto	L19
  5527  001800                     l3734:
  5528                           
  5529                           ;doprnt.c: 415: else if(prec > 10)
  5530  001800  0E0A               	movlw	10
  5531  001802  6437               	cpfsgt	fround@prec,c
  5532  001804  D069               	goto	l3742
  5533                           
  5534                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5535  001806  0E00               	movlw	0
  5536  001808  6E14               	movwf	?___wmul+3,c
  5537  00180A  0E03               	movlw	3
  5538  00180C  6E13               	movwf	?___wmul+2,c
  5539  00180E  0E00               	movlw	0
  5540  001810  6E04               	movwf	?___awmod+3,c
  5541  001812  0E0A               	movlw	10
  5542  001814  6E03               	movwf	?___awmod+2,c
  5543  001816  C037  F001         	movff	fround@prec,?___awmod
  5544  00181A  6A02               	clrf	?___awmod+1,c
  5545  00181C  EC29  F011         	call	___awmod	;wreg free
  5546  001820  C001  F011         	movff	?___awmod,?___wmul
  5547  001824  C002  F012         	movff	?___awmod+1,?___wmul+1
  5548  001828  EC6D  F012         	call	___wmul	;wreg free
  5549  00182C  0E28               	movlw	low __npowers_
  5550  00182E  2411               	addwf	?___wmul,w,c
  5551  001830  6EF6               	movwf	tblptrl,c
  5552  001832  0E08               	movlw	high __npowers_
  5553  001834  2012               	addwfc	?___wmul+1,w,c
  5554  001836  6EF7               	movwf	tblptrh,c
  5555  001838  0009               	tblrd		*+
  5556  00183A  CFF5 F03A          	movff	tablat,??_fround
  5557  00183E  0009               	tblrd		*+
  5558  001840  CFF5 F03B          	movff	tablat,??_fround+1
  5559  001844  0009               	tblrd		*+
  5560  001846  CFF5 F03C          	movff	tablat,??_fround+2
  5561  00184A  C03C  F02B         	movff	??_fround+2,?___ftmul+5
  5562  00184E  C03B  F02A         	movff	??_fround+1,?___ftmul+4
  5563  001852  C03A  F029         	movff	??_fround,?___ftmul+3
  5564  001856  0E00               	movlw	0
  5565  001858  6E14               	movwf	?___wmul+3,c
  5566  00185A  0E03               	movlw	3
  5567  00185C  6E13               	movwf	?___wmul+2,c
  5568  00185E  0E00               	movlw	0
  5569  001860  6E0B               	movwf	?___awdiv+3,c
  5570  001862  0E0A               	movlw	10
  5571  001864  6E0A               	movwf	?___awdiv+2,c
  5572  001866  C037  F008         	movff	fround@prec,?___awdiv
  5573  00186A  6A09               	clrf	?___awdiv+1,c
  5574  00186C  EC9E  F010         	call	___awdiv	;wreg free
  5575  001870  0E09               	movlw	9
  5576  001872  2408               	addwf	?___awdiv,w,c
  5577  001874  6E11               	movwf	?___wmul,c
  5578  001876  0E00               	movlw	0
  5579  001878  2009               	addwfc	?___awdiv+1,w,c
  5580  00187A  6E12               	movwf	?___wmul+1,c
  5581  00187C  EC6D  F012         	call	___wmul	;wreg free
  5582  001880  0E28               	movlw	low __npowers_
  5583  001882  2411               	addwf	?___wmul,w,c
  5584  001884  6EF6               	movwf	tblptrl,c
  5585  001886  0E08               	movlw	high __npowers_
  5586  001888  2012               	addwfc	?___wmul+1,w,c
  5587  00188A  6EF7               	movwf	tblptrh,c
  5588  00188C  0009               	tblrd		*+
  5589  00188E  CFF5 F03D          	movff	tablat,??_fround+3
  5590  001892  0009               	tblrd		*+
  5591  001894  CFF5 F03E          	movff	tablat,??_fround+4
  5592  001898  0009               	tblrd		*+
  5593  00189A  CFF5 F03F          	movff	tablat,??_fround+5
  5594  00189E  C03F  F028         	movff	??_fround+5,?___ftmul+2
  5595  0018A2  C03E  F027         	movff	??_fround+4,?___ftmul+1
  5596  0018A6  C03D  F026         	movff	??_fround+3,?___ftmul
  5597  0018AA  EC09  F00E         	call	___ftmul	;wreg free
  5598  0018AE  C028  F045         	movff	?___ftmul+2,_fround$803+2
  5599  0018B2  C027  F044         	movff	?___ftmul+1,_fround$803+1
  5600  0018B6  C026  F043         	movff	?___ftmul,_fround$803
  5601                           
  5602                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5603  0018BA  C043  F026         	movff	_fround$803,?___ftmul
  5604  0018BE  C044  F027         	movff	_fround$803+1,?___ftmul+1
  5605  0018C2  C045  F028         	movff	_fround$803+2,?___ftmul+2
  5606  0018C6  0E00               	movlw	0
  5607  0018C8  6E29               	movwf	?___ftmul+3,c
  5608  0018CA  0E00               	movlw	0
  5609  0018CC  6E2A               	movwf	?___ftmul+4,c
  5610  0018CE  0E3F               	movlw	63
  5611  0018D0  6E2B               	movwf	?___ftmul+5,c
  5612  0018D2  EC09  F00E         	call	___ftmul	;wreg free
  5613  0018D6  D01F               	goto	L19
  5614  0018D8                     l3742:
  5615                           
  5616                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  5617  0018D8  5037               	movf	fround@prec,w,c
  5618  0018DA  0D03               	mullw	3
  5619  0018DC  0E28               	movlw	low __npowers_
  5620  0018DE  24F3               	addwf	prodl,w,c
  5621  0018E0  6EF6               	movwf	tblptrl,c
  5622  0018E2  0E08               	movlw	high __npowers_
  5623  0018E4  20F4               	addwfc	prodh,w,c
  5624  0018E6  6EF7               	movwf	tblptrh,c
  5625  0018E8  0009               	tblrd		*+
  5626  0018EA  CFF5 F03A          	movff	tablat,??_fround
  5627  0018EE  0009               	tblrd		*+
  5628  0018F0  CFF5 F03B          	movff	tablat,??_fround+1
  5629  0018F4  0009               	tblrd		*+
  5630  0018F6  CFF5 F03C          	movff	tablat,??_fround+2
  5631  0018FA  C03C  F028         	movff	??_fround+2,?___ftmul+2
  5632  0018FE  C03B  F027         	movff	??_fround+1,?___ftmul+1
  5633  001902  C03A  F026         	movff	??_fround,?___ftmul
  5634  001906  0E00               	movlw	0
  5635  001908  6E29               	movwf	?___ftmul+3,c
  5636  00190A  0E00               	movlw	0
  5637  00190C  6E2A               	movwf	?___ftmul+4,c
  5638  00190E  0E3F               	movlw	63
  5639  001910  6E2B               	movwf	?___ftmul+5,c
  5640  001912  EC09  F00E         	call	___ftmul	;wreg free
  5641  001916                     L19:
  5642  001916  C028  F039         	movff	?___ftmul+2,?_fround+2
  5643  00191A  C027  F038         	movff	?___ftmul+1,?_fround+1
  5644  00191E  C026  F037         	movff	?___ftmul,?_fround
  5645  001922  0012               	return	
  5646  001924                     __end_of_fround:
  5647                           	opt stack 0
  5648                           tblptru	equ	0xFF8
  5649                           tblptrh	equ	0xFF7
  5650                           tblptrl	equ	0xFF6
  5651                           tablat	equ	0xFF5
  5652                           prodh	equ	0xFF4
  5653                           prodl	equ	0xFF3
  5654                           wreg	equ	0xFE8
  5655                           indf2	equ	0xFDF
  5656                           postinc2	equ	0xFDE
  5657                           postdec2	equ	0xFDD
  5658                           fsr2h	equ	0xFDA
  5659                           fsr2l	equ	0xFD9
  5660                           status	equ	0xFD8
  5661                           
  5662 ;; *************** function ___ftmul *****************
  5663 ;; Defined at:
  5664 ;;		line 52 in file "E:\Program Files\Microchip\xc8\v1.20\sources\common\ftmul.c"
  5665 ;; Parameters:    Size  Location     Type
  5666 ;;  f1              3   37[COMRAM] float 
  5667 ;;  f2              3   40[COMRAM] float 
  5668 ;; Auto vars:     Size  Location     Type
  5669 ;;  f3_as_produc    3   49[COMRAM] unsigned um
  5670 ;;  sign            1   53[COMRAM] unsigned char 
  5671 ;;  cntr            1   52[COMRAM] unsigned char 
  5672 ;;  exp             1   48[COMRAM] unsigned char 
  5673 ;; Return value:  Size  Location     Type
  5674 ;;                  3   37[COMRAM] float 
  5675 ;; Registers used:
  5676 ;;		wreg, status,2, status,0, cstack
  5677 ;; Tracked objects:
  5678 ;;		On entry : 0/0
  5679 ;;		On exit  : 0/0
  5680 ;;		Unchanged: 0/0
  5681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5682 ;;      Params:         6       0       0       0       0       0       0       0       0
  5683 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5684 ;;      Temps:          5       0       0       0       0       0       0       0       0
  5685 ;;      Totals:        17       0       0       0       0       0       0       0       0
  5686 ;;Total ram usage:       17 bytes
  5687 ;; Hardware stack levels used:    1
  5688 ;; Hardware stack levels required when called:    1
  5689 ;; This function calls:
  5690 ;;		___ftpack
  5691 ;; This function is called by:
  5692 ;;		_fround
  5693 ;;		_scale
  5694 ;;		_sprintf
  5695 ;;		___asftmul
  5696 ;; This function uses a non-reentrant model
  5697 ;;
  5698                           
  5699                           	psect	text26
  5700  001C12                     __ptext26:
  5701                           	opt stack 0
  5702  001C12                     ___ftmul:
  5703                           	opt stack 28
  5704                           
  5705                           ;incstack = 0
  5706                           ;incstack = 0
  5707  001C12  0E0F               	movlw	15
  5708  001C14  6E2C               	movwf	??___ftmul& (0+255),c
  5709  001C16  C026  F02D         	movff	___ftmul@f1,??___ftmul+1
  5710  001C1A  C027  F02E         	movff	___ftmul@f1+1,??___ftmul+2
  5711  001C1E  C028  F02F         	movff	___ftmul@f1+2,??___ftmul+3
  5712  001C22  282C               	incf	??___ftmul,w,c
  5713  001C24  6E30               	movwf	(??___ftmul+4)& (0+255),c
  5714  001C26  D004               	goto	u2210
  5715  001C28                     u2215:
  5716  001C28  90D8               	bcf	status,0,c
  5717  001C2A  322F               	rrcf	??___ftmul+3,f,c
  5718  001C2C  322E               	rrcf	??___ftmul+2,f,c
  5719  001C2E  322D               	rrcf	??___ftmul+1,f,c
  5720  001C30                     u2210:
  5721  001C30  2E30               	decfsz	(??___ftmul+4)& (0+255),f,c
  5722  001C32  D7FA               	goto	u2215
  5723  001C34  502D               	movf	??___ftmul+1,w,c
  5724  001C36  6E31               	movwf	___ftmul@exp,c
  5725  001C38  6631               	tstfsz	___ftmul@exp& (0+255),c
  5726  001C3A  D001               	goto	l3616
  5727  001C3C  D015               	goto	u2240
  5728  001C3E                     l3616:
  5729  001C3E  0E0F               	movlw	15
  5730  001C40  6E2C               	movwf	??___ftmul& (0+255),c
  5731  001C42  C029  F02D         	movff	___ftmul@f2,??___ftmul+1
  5732  001C46  C02A  F02E         	movff	___ftmul@f2+1,??___ftmul+2
  5733  001C4A  C02B  F02F         	movff	___ftmul@f2+2,??___ftmul+3
  5734  001C4E  282C               	incf	??___ftmul,w,c
  5735  001C50  6E30               	movwf	(??___ftmul+4)& (0+255),c
  5736  001C52  D004               	goto	u2230
  5737  001C54                     u2235:
  5738  001C54  90D8               	bcf	status,0,c
  5739  001C56  322F               	rrcf	??___ftmul+3,f,c
  5740  001C58  322E               	rrcf	??___ftmul+2,f,c
  5741  001C5A  322D               	rrcf	??___ftmul+1,f,c
  5742  001C5C                     u2230:
  5743  001C5C  2E30               	decfsz	(??___ftmul+4)& (0+255),f,c
  5744  001C5E  D7FA               	goto	u2235
  5745  001C60  502D               	movf	??___ftmul+1,w,c
  5746  001C62  6E36               	movwf	___ftmul@sign,c
  5747  001C64  6636               	tstfsz	___ftmul@sign& (0+255),c
  5748  001C66  D007               	goto	l3622
  5749  001C68                     u2240:
  5750  001C68  0E00               	movlw	0
  5751  001C6A  6E26               	movwf	?___ftmul,c
  5752  001C6C  0E00               	movlw	0
  5753  001C6E  6E27               	movwf	?___ftmul+1,c
  5754  001C70  0E00               	movlw	0
  5755  001C72  6E28               	movwf	?___ftmul+2,c
  5756  001C74  D055               	goto	l594
  5757  001C76                     l3622:
  5758  001C76  5036               	movf	___ftmul@sign,w,c
  5759  001C78  0F7B               	addlw	123
  5760  001C7A  2631               	addwf	___ftmul@exp,f,c
  5761  001C7C  C028  F036         	movff	___ftmul@f1+2,___ftmul@sign
  5762  001C80  502B               	movf	(___ftmul@f2+2)& (0+255),w,c
  5763  001C82  1A36               	xorwf	___ftmul@sign,f,c
  5764  001C84  0E80               	movlw	128
  5765  001C86  1636               	andwf	___ftmul@sign,f,c
  5766  001C88  8E27               	bsf	___ftmul@f1+1,7,c
  5767  001C8A  8E2A               	bsf	___ftmul@f2+1,7,c
  5768  001C8C  0EFF               	movlw	255
  5769  001C8E  1629               	andwf	___ftmul@f2,f,c
  5770  001C90  0EFF               	movlw	255
  5771  001C92  162A               	andwf	___ftmul@f2+1,f,c
  5772  001C94  0E00               	movlw	0
  5773  001C96  162B               	andwf	___ftmul@f2+2,f,c
  5774  001C98  0E00               	movlw	0
  5775  001C9A  6E32               	movwf	___ftmul@f3_as_product,c
  5776  001C9C  0E00               	movlw	0
  5777  001C9E  6E33               	movwf	___ftmul@f3_as_product+1,c
  5778  001CA0  0E00               	movlw	0
  5779  001CA2  6E34               	movwf	___ftmul@f3_as_product+2,c
  5780  001CA4  6E2C               	movwf	??___ftmul& (0+255),c
  5781  001CA6  0E07               	movlw	7
  5782  001CA8  6E35               	movwf	___ftmul@cntr,c
  5783  001CAA  502C               	movf	??___ftmul& (0+255),w,c
  5784  001CAC                     l3636:
  5785  001CAC  A026               	btfss	___ftmul@f1,0,c
  5786  001CAE  D006               	goto	l3640
  5787  001CB0  5029               	movf	___ftmul@f2,w,c
  5788  001CB2  2632               	addwf	___ftmul@f3_as_product,f,c
  5789  001CB4  502A               	movf	___ftmul@f2+1,w,c
  5790  001CB6  2233               	addwfc	___ftmul@f3_as_product+1,f,c
  5791  001CB8  502B               	movf	___ftmul@f2+2,w,c
  5792  001CBA  2234               	addwfc	___ftmul@f3_as_product+2,f,c
  5793  001CBC                     l3640:
  5794  001CBC  90D8               	bcf	status,0,c
  5795  001CBE  3228               	rrcf	___ftmul@f1+2,f,c
  5796  001CC0  3227               	rrcf	___ftmul@f1+1,f,c
  5797  001CC2  3226               	rrcf	___ftmul@f1,f,c
  5798  001CC4  90D8               	bcf	status,0,c
  5799  001CC6  3629               	rlcf	___ftmul@f2,f,c
  5800  001CC8  362A               	rlcf	___ftmul@f2+1,f,c
  5801  001CCA  362B               	rlcf	___ftmul@f2+2,f,c
  5802  001CCC  2E35               	decfsz	___ftmul@cntr,f,c
  5803  001CCE  D7EE               	goto	l3636
  5804  001CD0  6E2C               	movwf	??___ftmul& (0+255),c
  5805  001CD2  0E09               	movlw	9
  5806  001CD4  6E35               	movwf	___ftmul@cntr,c
  5807  001CD6  502C               	movf	??___ftmul& (0+255),w,c
  5808  001CD8                     l3646:
  5809  001CD8  A026               	btfss	___ftmul@f1,0,c
  5810  001CDA  D006               	goto	l3650
  5811  001CDC  5029               	movf	___ftmul@f2,w,c
  5812  001CDE  2632               	addwf	___ftmul@f3_as_product,f,c
  5813  001CE0  502A               	movf	___ftmul@f2+1,w,c
  5814  001CE2  2233               	addwfc	___ftmul@f3_as_product+1,f,c
  5815  001CE4  502B               	movf	___ftmul@f2+2,w,c
  5816  001CE6  2234               	addwfc	___ftmul@f3_as_product+2,f,c
  5817  001CE8                     l3650:
  5818  001CE8  90D8               	bcf	status,0,c
  5819  001CEA  3228               	rrcf	___ftmul@f1+2,f,c
  5820  001CEC  3227               	rrcf	___ftmul@f1+1,f,c
  5821  001CEE  3226               	rrcf	___ftmul@f1,f,c
  5822  001CF0  90D8               	bcf	status,0,c
  5823  001CF2  3234               	rrcf	___ftmul@f3_as_product+2,f,c
  5824  001CF4  3233               	rrcf	___ftmul@f3_as_product+1,f,c
  5825  001CF6  3232               	rrcf	___ftmul@f3_as_product,f,c
  5826  001CF8  2E35               	decfsz	___ftmul@cntr,f,c
  5827  001CFA  D7EE               	goto	l3646
  5828  001CFC  C032  F001         	movff	___ftmul@f3_as_product,?___ftpack
  5829  001D00  C033  F002         	movff	___ftmul@f3_as_product+1,?___ftpack+1
  5830  001D04  C034  F003         	movff	___ftmul@f3_as_product+2,?___ftpack+2
  5831  001D08  C031  F004         	movff	___ftmul@exp,?___ftpack+3
  5832  001D0C  C036  F005         	movff	___ftmul@sign,?___ftpack+4
  5833  001D10  ECFA  F00F         	call	___ftpack	;wreg free
  5834  001D14  C003  F028         	movff	?___ftpack+2,?___ftmul+2
  5835  001D18  C002  F027         	movff	?___ftpack+1,?___ftmul+1
  5836  001D1C  C001  F026         	movff	?___ftpack,?___ftmul
  5837  001D20                     l594:
  5838  001D20  0012               	return	
  5839  001D22                     __end_of___ftmul:
  5840                           	opt stack 0
  5841                           tblptru	equ	0xFF8
  5842                           tblptrh	equ	0xFF7
  5843                           tblptrl	equ	0xFF6
  5844                           tablat	equ	0xFF5
  5845                           prodh	equ	0xFF4
  5846                           prodl	equ	0xFF3
  5847                           wreg	equ	0xFE8
  5848                           indf2	equ	0xFDF
  5849                           postinc2	equ	0xFDE
  5850                           postdec2	equ	0xFDD
  5851                           fsr2h	equ	0xFDA
  5852                           fsr2l	equ	0xFD9
  5853                           status	equ	0xFD8
  5854                           
  5855 ;; *************** function _lcd_int *****************
  5856 ;; Defined at:
  5857 ;;		line 68 in file "main.c"
  5858 ;; Parameters:    Size  Location     Type
  5859 ;;		None
  5860 ;; Auto vars:     Size  Location     Type
  5861 ;;		None
  5862 ;; Return value:  Size  Location     Type
  5863 ;;		None               void
  5864 ;; Registers used:
  5865 ;;		wreg, status,2, status,0, cstack
  5866 ;; Tracked objects:
  5867 ;;		On entry : 0/0
  5868 ;;		On exit  : 0/0
  5869 ;;		Unchanged: 0/0
  5870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5871 ;;      Params:         0       0       0       0       0       0       0       0       0
  5872 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5873 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5874 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5875 ;;Total ram usage:        1 bytes
  5876 ;; Hardware stack levels used:    1
  5877 ;; Hardware stack levels required when called:    1
  5878 ;; This function calls:
  5879 ;;		_cmd
  5880 ;; This function is called by:
  5881 ;;		_main
  5882 ;; This function uses a non-reentrant model
  5883 ;;
  5884                           
  5885                           	psect	text27
  5886  00254A                     __ptext27:
  5887                           	opt stack 0
  5888  00254A                     _lcd_int:
  5889                           	opt stack 29
  5890                           
  5891                           ;main.c: 69: cmd(0x38);
  5892                           
  5893                           ;incstack = 0
  5894                           ;incstack = 0
  5895  00254A  6E02               	movwf	??_lcd_int& (0+255),c
  5896  00254C  0E38               	movlw	56
  5897  00254E  6E01               	movwf	?_cmd,c
  5898  002550  5002               	movf	??_lcd_int& (0+255),w,c
  5899  002552  ECD4  F012         	call	_cmd	;wreg free
  5900                           
  5901                           ;main.c: 70: cmd(0x0c);
  5902  002556  6E02               	movwf	??_lcd_int& (0+255),c
  5903  002558  0E0C               	movlw	12
  5904  00255A  6E01               	movwf	?_cmd,c
  5905  00255C  5002               	movf	??_lcd_int& (0+255),w,c
  5906  00255E  ECD4  F012         	call	_cmd	;wreg free
  5907                           
  5908                           ;main.c: 71: cmd(0x06);
  5909  002562  6E02               	movwf	??_lcd_int& (0+255),c
  5910  002564  0E06               	movlw	6
  5911  002566  6E01               	movwf	?_cmd,c
  5912  002568  5002               	movf	??_lcd_int& (0+255),w,c
  5913  00256A  ECD4  F012         	call	_cmd	;wreg free
  5914                           
  5915                           ;main.c: 72: cmd(0x80);
  5916  00256E  6E02               	movwf	??_lcd_int& (0+255),c
  5917  002570  0E80               	movlw	128
  5918  002572  6E01               	movwf	?_cmd,c
  5919  002574  5002               	movf	??_lcd_int& (0+255),w,c
  5920  002576  ECD4  F012         	call	_cmd	;wreg free
  5921  00257A  0012               	return	
  5922  00257C                     __end_of_lcd_int:
  5923                           	opt stack 0
  5924                           tblptru	equ	0xFF8
  5925                           tblptrh	equ	0xFF7
  5926                           tblptrl	equ	0xFF6
  5927                           tablat	equ	0xFF5
  5928                           prodh	equ	0xFF4
  5929                           prodl	equ	0xFF3
  5930                           wreg	equ	0xFE8
  5931                           indf2	equ	0xFDF
  5932                           postinc2	equ	0xFDE
  5933                           postdec2	equ	0xFDD
  5934                           fsr2h	equ	0xFDA
  5935                           fsr2l	equ	0xFD9
  5936                           status	equ	0xFD8
  5937                           
  5938 ;; *************** function _cmd *****************
  5939 ;; Defined at:
  5940 ;;		line 75 in file "main.c"
  5941 ;; Parameters:    Size  Location     Type
  5942 ;;  a               1    0[COMRAM] unsigned char 
  5943 ;; Auto vars:     Size  Location     Type
  5944 ;;		None
  5945 ;; Return value:  Size  Location     Type
  5946 ;;		None               void
  5947 ;; Registers used:
  5948 ;;		wreg, status,2, status,0
  5949 ;; Tracked objects:
  5950 ;;		On entry : 0/0
  5951 ;;		On exit  : 0/0
  5952 ;;		Unchanged: 0/0
  5953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5954 ;;      Params:         1       0       0       0       0       0       0       0       0
  5955 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5956 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5957 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5958 ;;Total ram usage:        1 bytes
  5959 ;; Hardware stack levels used:    1
  5960 ;; This function calls:
  5961 ;;		Nothing
  5962 ;; This function is called by:
  5963 ;;		_main
  5964 ;;		_lcd_int
  5965 ;; This function uses a non-reentrant model
  5966 ;;
  5967                           
  5968                           	psect	text28
  5969  0025A8                     __ptext28:
  5970                           	opt stack 0
  5971  0025A8                     _cmd:
  5972                           	opt stack 30
  5973                           
  5974                           ;main.c: 76: PORTD = a;
  5975                           
  5976                           ;incstack = 0
  5977                           ;incstack = 0
  5978  0025A8  C001  FF83         	movff	cmd@a,3971	;volatile
  5979                           
  5980                           ;main.c: 77: RC0 = 0;
  5981  0025AC  9082               	bcf	3970,0,c	;volatile
  5982                           
  5983                           ;main.c: 78: RC1 = 0;
  5984  0025AE  9282               	bcf	3970,1,c	;volatile
  5985                           
  5986                           ;main.c: 79: RC2 = 1;
  5987  0025B0  8482               	bsf	3970,2,c	;volatile
  5988                           
  5989                           ;main.c: 80: for (i = 0; i <= 1000; i++);
  5990  0025B2  0E00               	movlw	0
  5991  0025B4  6E5D               	movwf	_i+1,c
  5992  0025B6  0E00               	movlw	0
  5993  0025B8  6E5C               	movwf	_i,c
  5994  0025BA  505D               	movf	_i+1,w,c
  5995  0025BC  0A80               	xorlw	128
  5996  0025BE  0F7D               	addlw	-131
  5997  0025C0  0EE9               	movlw	233
  5998  0025C2  B4D8               	btfsc	status,2,c
  5999  0025C4  5C5C               	subwf	_i,w,c
  6000  0025C6  B0D8               	btfsc	status,0,c
  6001  0025C8  D003               	goto	l83
  6002  0025CA  4A5C               	infsnz	_i,f,c
  6003  0025CC  2A5D               	incf	_i+1,f,c
  6004  0025CE  D7F5               	goto	L20
  6005  0025D0                     l83:
  6006                           
  6007                           ;main.c: 81: RC2 = 0;
  6008  0025D0  9482               	bcf	3970,2,c	;volatile
  6009  0025D2  0012               	return	
  6010  0025D4                     __end_of_cmd:
  6011                           	opt stack 0
  6012                           tblptru	equ	0xFF8
  6013                           tblptrh	equ	0xFF7
  6014                           tblptrl	equ	0xFF6
  6015                           tablat	equ	0xFF5
  6016                           prodh	equ	0xFF4
  6017                           prodl	equ	0xFF3
  6018                           wreg	equ	0xFE8
  6019                           indf2	equ	0xFDF
  6020                           postinc2	equ	0xFDE
  6021                           postdec2	equ	0xFDD
  6022                           fsr2h	equ	0xFDA
  6023                           fsr2l	equ	0xFD9
  6024                           status	equ	0xFD8
  6025                           
  6026 ;; *************** function _Init_AD *****************
  6027 ;; Defined at:
  6028 ;;		line 12 in file "main.c"
  6029 ;; Parameters:    Size  Location     Type
  6030 ;;		None
  6031 ;; Auto vars:     Size  Location     Type
  6032 ;;		None
  6033 ;; Return value:  Size  Location     Type
  6034 ;;		None               void
  6035 ;; Registers used:
  6036 ;;		wreg, status,2
  6037 ;; Tracked objects:
  6038 ;;		On entry : 0/0
  6039 ;;		On exit  : 0/0
  6040 ;;		Unchanged: 0/0
  6041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6042 ;;      Params:         0       0       0       0       0       0       0       0       0
  6043 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6044 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6045 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6046 ;;Total ram usage:        0 bytes
  6047 ;; Hardware stack levels used:    1
  6048 ;; This function calls:
  6049 ;;		Nothing
  6050 ;; This function is called by:
  6051 ;;		_main
  6052 ;; This function uses a non-reentrant model
  6053 ;;
  6054                           
  6055                           	psect	text29
  6056  002636                     __ptext29:
  6057                           	opt stack 0
  6058  002636                     _Init_AD:
  6059                           	opt stack 30
  6060                           
  6061                           ;main.c: 13: ADCON0 = 0x01;
  6062                           
  6063                           ;incstack = 0
  6064                           ;incstack = 0
  6065  002636  0E01               	movlw	1
  6066  002638  6EC2               	movwf	4034,c	;volatile
  6067                           
  6068                           ;main.c: 14: ADCON1 = 0x0E;
  6069  00263A  0E0E               	movlw	14
  6070  00263C  6EC1               	movwf	4033,c	;volatile
  6071                           
  6072                           ;main.c: 15: ADCON2 = 0xA6;
  6073  00263E  0EA6               	movlw	166
  6074  002640  6EC0               	movwf	4032,c	;volatile
  6075                           
  6076                           ;main.c: 16: ADRESH = 0;
  6077  002642  0E00               	movlw	0
  6078  002644  6EC4               	movwf	4036,c	;volatile
  6079                           
  6080                           ;main.c: 17: ADRESL = 0;
  6081  002646  0E00               	movlw	0
  6082  002648  6EC3               	movwf	4035,c	;volatile
  6083  00264A  0012               	return	
  6084  00264C                     __end_of_Init_AD:
  6085                           	opt stack 0
  6086                           tblptru	equ	0xFF8
  6087                           tblptrh	equ	0xFF7
  6088                           tblptrl	equ	0xFF6
  6089                           tablat	equ	0xFF5
  6090                           prodh	equ	0xFF4
  6091                           prodl	equ	0xFF3
  6092                           wreg	equ	0xFE8
  6093                           indf2	equ	0xFDF
  6094                           postinc2	equ	0xFDE
  6095                           postdec2	equ	0xFDD
  6096                           fsr2h	equ	0xFDA
  6097                           fsr2l	equ	0xFD9
  6098                           status	equ	0xFD8
  6099                           tblptru	equ	0xFF8
  6100                           tblptrh	equ	0xFF7
  6101                           tblptrl	equ	0xFF6
  6102                           tablat	equ	0xFF5
  6103                           prodh	equ	0xFF4
  6104                           prodl	equ	0xFF3
  6105                           wreg	equ	0xFE8
  6106                           indf2	equ	0xFDF
  6107                           postinc2	equ	0xFDE
  6108                           postdec2	equ	0xFDD
  6109                           fsr2h	equ	0xFDA
  6110                           fsr2l	equ	0xFD9
  6111                           status	equ	0xFD8
  6112                           
  6113                           	psect	rparam
  6114  0000                     tblptru	equ	0xFF8
  6115                           tblptrh	equ	0xFF7
  6116                           tblptrl	equ	0xFF6
  6117                           tablat	equ	0xFF5
  6118                           prodh	equ	0xFF4
  6119                           prodl	equ	0xFF3
  6120                           wreg	equ	0xFE8
  6121                           indf2	equ	0xFDF
  6122                           postinc2	equ	0xFDE
  6123                           postdec2	equ	0xFDD
  6124                           fsr2h	equ	0xFDA
  6125                           fsr2l	equ	0xFD9
  6126                           status	equ	0xFD8


Data Sizes:
    Strings     3
    Constant    118
    Data        0
    BSS         5
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     91      93
    BANK0           160     41      44
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ?___ftsub	float  size(2) Largest target is 0

    ?___ftadd	float  size(2) Largest target is 0

    ?___ftpack	float  size(2) Largest target is 0

    ?___llmod	unsigned long  size(2) Largest target is 0

    ?___lwmod	unsigned int  size(2) Largest target is 0

    ?___lldiv	unsigned long  size(2) Largest target is 0

    ?___asftsub	float  size(2) Largest target is 0

    ?___lltoft	float  size(2) Largest target is 0

    ?__tdiv_to_l_	unsigned long  size(2) Largest target is 0

    ?__div_to_l_	unsigned long  size(2) Largest target is 0

    ?___fttol	long  size(2) Largest target is 0

    ?___asftadd	float  size(2) Largest target is 0

    ?___asftmul	float  size(2) Largest target is 0

    ?___ftneg	float  size(2) Largest target is 0

    ?_scale	float  size(2) Largest target is 0

    ?_fround	float  size(2) Largest target is 0

    ?___ftmul	float  size(2) Largest target is 0

    ?___awdiv	int  size(2) Largest target is 0

    ?___wmul	unsigned int  size(2) Largest target is 0

    ?___awmod	int  size(2) Largest target is 0

    ?___ftdiv	float  size(2) Largest target is 0

    ?___awtoft	float  size(2) Largest target is 0

    __asftsub@f1p	PTR float  size(2) Largest target is 3
		 -> sprintf@fval(BANK0[3]), 

    __asftmul@f1p	PTR float  size(2) Largest target is 3
		 -> sprintf@integ(BANK0[3]), 

    __asftadd@f1p	PTR float  size(2) Largest target is 3
		 -> sprintf@fval(BANK0[3]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 10
		 -> main@mystr(BANK0[10]), 

    ?_sprintf	int  size(2) Largest target is 0

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    S193$_cp	PTR const unsigned char  size(2) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 0

    show@s	PTR unsigned char  size(2) Largest target is 10
		 -> main@mystr(BANK0[10]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    ___awtoft->___ftpack
    ___ftdiv->___ftpack
    _show->_dat
    _sprintf->___asftadd
    ___lltoft->___ftpack
    ___fttol->___wmul
    ___asftsub->___ftsub
    ___ftsub->___ftadd
    ___asftmul->___ftmul
    ___asftadd->_fround
    ___ftadd->___ftpack
    _scale->___ftmul
    ___wmul->___awdiv
    ___awdiv->___awmod
    _fround->___ftmul
    ___ftmul->___fttol
    _lcd_int->_cmd

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                16    16      0   11892
                                             87 COMRAM     4     4      0
                                             31 BANK0     10    10      0
                            _Init_AD
                            _lcd_int
                                _cmd
                            _sprintf
                               _show
                            ___ftdiv
                           ___awtoft
                             ___ftge
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             5     2      3     300
                                              8 COMRAM     5     2      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             17    11      6     489
                                              8 COMRAM    17    11      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _show                                                 2     0      2      67
                                              1 COMRAM     2     0      2
                                _dat
 ---------------------------------------------------------------------------------
 (2) _dat                                                  1     0      1      22
                                              0 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             50    43      7   10792
                                             74 COMRAM    13     6      7
                                              0 BANK0     31    31      0
                             _fround
                              _scale
                        __tdiv_to_l_
                         __div_to_l_
                          ___asftadd
                          ___asftmul
                            ___ftmul
                          ___asftsub
                            ___awdiv
                             ___ftge
                            ___ftneg
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     159
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4     278
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                             10     2      8     159
                                              0 COMRAM    10     2      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     162
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     252
                                             22 COMRAM    15    11      4
                           ___ftpack (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3      45
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) ___ftge                                               9     3      6     136
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (2) ___asftsub                                            5     0      5    1160
                                             28 COMRAM     5     0      5
                            ___ftsub
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    1094
                                             22 COMRAM     6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (2) ___asftmul                                            5     0      5     601
                                             54 COMRAM     5     0      5
                            ___ftmul
 ---------------------------------------------------------------------------------
 (2) ___asftadd                                            5     0      5    1115
                                             69 COMRAM     5     0      5
                             _fround (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             14     8      6    1049
                                              8 COMRAM    14     8      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5     209
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          13     7      6     446
                                              0 COMRAM    13     7      6
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         17    11      6     303
                                              0 COMRAM    17    11      6
 ---------------------------------------------------------------------------------
 (2) _scale                                               15    12      3    1779
                                             54 COMRAM    12     9      3
                            ___ftmul
                            ___awdiv
                            ___awmod
                            ___fttol (ARG)
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     159
                                             16 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     296
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     300
                                              7 COMRAM     9     5      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _fround                                              18    15      3    1581
                                             54 COMRAM    15    12      3
                            ___ftmul
                            ___awdiv
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             17    11      6     535
                                             37 COMRAM    17    11      6
                           ___ftpack
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___fttol (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _lcd_int                                              1     1      0      22
                                              1 COMRAM     1     1      0
                                _cmd
 ---------------------------------------------------------------------------------
 (1) _cmd                                                  1     0      1      22
                                              0 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (1) _Init_AD                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Init_AD
   _lcd_int
     _cmd
   _cmd
   _sprintf
     _fround
       ___ftmul
         ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___fttol (ARG)
           ___ftpack (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _scale
       ___ftmul
         ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___fttol (ARG)
           ___ftpack (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___fttol (ARG)
         ___ftpack (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     __tdiv_to_l_
     __div_to_l_
     ___asftadd
       _fround (ARG)
         ___ftmul
           ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fttol (ARG)
             ___ftpack (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftadd (ARG)
         ___ftpack
     ___asftmul
       ___ftmul
         ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___fttol (ARG)
           ___ftpack (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftmul
       ___ftpack
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___fttol (ARG)
         ___ftpack (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___asftsub
       ___ftsub
         ___ftadd
           ___ftpack
       ___lltoft (ARG)
         ___ftpack
     ___awdiv
       ___awmod (ARG)
     ___ftge
     ___ftneg
     ___fttol
       ___ftpack (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___lwmod
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _show
     _dat
   ___ftdiv
     ___ftpack
   ___awtoft
     ___ftpack
   ___ftge

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     29      2C       5       27.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5B      5D       1       97.9%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       5       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      89      20        0.0%
DATA                 0      0      8E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.20 build 52243 
Symbol Table                                                                                   Fri Jun 03 22:54:46 2022

           ___asftadd@f2 0048                        _i 005C            ___asftadd@f1p 0046  
                     l55 141C                       l83 25D0                       l88 25A4  
                     _GO 007E11             ___awdiv@sign 000E      ___wmul@multiplicand 0013  
           ___asftmul@f2 0039             ___asftsub@f2 001F             ___ftadd@exp1 0016  
           ___ftadd@exp2 0015             ___ftadd@sign 0014                      l126 13C2  
                    l171 0D94                      l530 198C                      l531 1AEE  
                    l452 1F12                      l604 2612                      l461 1F02  
                    l454 1E7E                      l534 19B6                      l614 1FF2  
                    l545 1A5A                      l570 1C10                      l554 1A76  
                    l562 1E1E                      l732 23D8                      l564 1DC8  
                    l573 1BAE                      l493 20AA                      l653 2240  
                    l565 1DEE                      l663 2326                      l594 1D20  
                    l579 1C00                      l588 213A                      _RC0 007C10  
                    _RC1 007C11                      _RC2 007C12                      _dat 257C  
                    _cmd 25A8             ___awmod@sign 0007                      wreg 000FE8  
          ___asftmul@f1p 0037              _sprintf$204 0063              _sprintf$806 0060  
          ___asftsub@f1p 001D             ___ftdiv@cntr 0014             ___ftdiv@sign 0019  
                   ?_dat 0001                     l4002 0E1E                     ?_cmd 0001  
                   l4020 0F12                     l4012 0EE8                     l4100 169E  
                   l4014 0EF8                     l4022 0F20                     l4030 0F66  
                   l3240 1B48                     l3402 22B6                     l3234 1B1C  
                   l3330 1EDA                     l3316 1EAE                     l4028 0F4C  
                   l4060 14E2                     l4044 13DA                     l3406 22C4  
                   l3270 1BC8                     l3254 1B86                     l3326 1ECA  
                   l3350 201C                     l3510 19C4                     l3414 20DC  
                   l3280 1BF0                     l3336 1EF2                     l3360 2078  
                   l3352 203A                     l3344 2004                     l3504 199A  
                   l3424 2138                     l3440 21FE                     l4072 156A  
                   l3282 1BFC                     l3274 1BD8                     l3338 1EFE  
                   l3290 1E2C                     l3418 210C                     l3450 2232  
                   l3442 2202                     l4090 1636                     l4066 1526  
                   l3356 2050                     l3348 2012                     l3532 1A14  
                   l3460 22F0                     l4084 15F2                     l3622 1C76  
                   l3390 228C                     l3382 226E                     l3358 206E  
                   l3534 1A1E                     l3526 19F6                     l3438 21F2  
                   l3462 22F4                     l3710 23FE                     l4078 15AE  
                   l3640 1CBC                     l3616 1C3E                     l3392 2294  
                   l3296 1E38                     l3552 1A92                     l3544 1A4A  
                   l3536 1A26                     l4096 167A                     l3650 1CE8  
                   l3394 2298                     l3386 227A                     l3562 1ACA  
                   l3546 1A54                     l3538 1A2C                     l3466 2318  
                   l3458 22E4                     l3482 23CE                     l3474 23AE  
                   l3490 25D6                     l3636 1CAC                     l3716 2342  
                   l3476 23B6                     l3572 1D4E                     l3646 1CD8  
                   l3742 18D8                     l3734 1800                     l3398 22AC  
                   l3718 234E                     l3478 23BA                     l3910 0A84  
                   l3902 0A22                     l3494 25EA                     l3680 218A  
                   l3672 2168                     l3816 1F40                     l3690 21AA  
                   l3682 218E                     l3666 2158                     l3834 1F94  
                   l3930 0B62                     l3914 0AAC                     l3578 1D86  
                   l3780 117A                     l3852 1FE2                     l3844 1FBC  
                   l3678 2182                     l3694 21B4                     l3774 10BE  
                   l3846 1FC8                     l3838 1FA4                     l3942 0BDA  
                   l3926 0B3C                     l3918 0AE4                     l3870 08BE  
                   l3792 12CC                     l3784 1188                     l3848 1FCC  
                   l3872 08E4                     l3864 08A6                     l3698 21C2  
                   l3962 0C92                     l3866 08B6                     l3858 088A  
                   l3948 0C38                     l3798 1394                     l3990 0D98  
                   l3886 0968                     l3984 0D5E                     l3968 0CBA  
                   l3976 0D34                     l3978 0D44                     l3998 0DCC  
                   _ADON 007E10                     STR_1 0876                     u2210 1C30  
                   u2230 1C5C                     _LATB 000F8A                     u2215 1C28  
                   u2240 1C68                     u1520 1B0E                     u2160 1D40  
                   u2235 1C54                     u1540 1B3A                     u2420 1F32  
                   u2180 1D6C                     u1525 1B06                     u2165 1D38  
                   u2190 1D78                     u2440 1F5E                     u1545 1B32  
                   u2425 1F2A                     u2185 1D64                     u1660 1EE0  
                   u2540 09B8                     u2445 1F56                     u2525 0940  
                   u1590 1BDE                     u2470 1FAA                     u2545 09AE  
                   u1950 1942                     u1960 1968                     u1955 193A  
                   u2764 13FA                     u1965 1960                     u2765 13F6  
                   u2774 1412                     u2775 140E                     dat@b 0001  
                   cmd@a 0001                     _main 13C4             ___ftpack@arg 0001  
           ___ftpack@exp 0004                     _show 25D4                     fsr2h 000FDA  
                   indf2 000FDF                     fsr2l 000FD9                     prodh 000FF4  
                   prodl 000FF3                     start 0000             ___ftmul@cntr 0035  
           ___ftmul@sign 0036          __end_of_Init_AD 264C             ___fttol@exp1 0025  
                  ??_dat 0002                    ??_cmd 0002             ___fttol@lval 0021  
                  ?_main 0001          __end_of___awdiv 21CC          __end_of___ftadd 1AF0  
        __end_of___awmod 22CE                    ?_show 0002          __end_of___ftdiv 1E20  
        __end_of___ftneg 2620          __end_of___lldiv 2252          __end_of___ftmul 1D22  
        ___awdiv@divisor 000A          __end_of___llmod 2338          __end_of___ftsub 254A  
        __end_of___fttol 1FF4          __end_of___lwmod 23E2          ___awdiv@counter 000D  
                  _PORTD 000F83                    _TRISB 000F93                    _TRISC 000F94  
                  _TRISD 000F95             ___lltoft@exp 0011          __end_of_lcd_int 257C  
          ___awtoft@sign 000D          __end_of_dpowers 0828                    _scale 0F74  
          ___ftpack@sign 0005                    tablat 000FF5                    show@s 0002  
                  status 000FD8          __end_of_sprintf 0F74          __initialization 2620  
           __end_of_main 16A4             __end_of_show 25FA                   ??_main 0058  
          ___fttol@sign1 0020                   ??_show 0004            __activetblptr 000002  
   __size_of__tdiv_to_l_ 0122                   _ADCON0 000FC2                   _ADCON1 000FC1  
                 _ADCON2 000FC0         ___llmod@dividend 0001                   ?_scale 0037  
                 _ADRESH 000FC4                   _ADRESL 000FC3         ___awdiv@dividend 0008  
       __end_of___awtoft 2426         __end_of___ftpack 20AC         __end_of___lltoft 239C  
                 _TRISA0 007C90                ??_Init_AD 0001         __end_of__powers_ 0876  
                 ___ftge 20AC                   ___wmul 24DA                ??___awdiv 000C  
              ??___ftadd 000F                ??___awmod 0005                ??___ftdiv 000F  
              ??___ftneg 0004                ??___lldiv 0009                ??___ftmul 002C  
              ??___llmod 0009                ??___ftsub 001D                ??___fttol 001B  
              ??___lwmod 0005                   _fround 16A4         ___awdiv@quotient 000F  
        ___awmod@divisor 0003          ___awmod@counter 0006                ??_lcd_int 0002  
  ___ftmul@f3_as_product 0032           _analog_reading 0089             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
              ??_sprintf 0052       __size_of___asftadd 003C       __size_of___asftmul 003C  
     __size_of___asftsub 003C               __accesstop 0060  __end_of__initialization 262C  
             ___ftadd@f1 0009               ___ftadd@f2 000C               ___ftge@ff1 0001  
             ___ftge@ff2 0004               ___ftdiv@f1 0009               ___ftdiv@f2 000C  
             ___ftdiv@f3 0015               ___ftneg@f1 0001               ___awtoft@c 0009  
             ___ftmul@f1 0026               ___ftmul@f2 0029               ___ftsub@f1 0017  
             ___ftsub@f2 001A               ___fttol@f1 0017           __pcstackCOMRAM 0001  
             ___lltoft@c 0009            __end_of_scale 13C4               __div_to_l_ 1E20  
        __div_to_l_@exp1 000D          __div_to_l_@cntr 000C             sprintf@integ 0076  
                ??_scale 003A          __div_to_l_@quot 0008               __pbssBANK0 0089  
          __div_to_l_@f1 0001            __div_to_l_@f2 0004                  ?___ftge 0001  
                ?___wmul 0011        __end_of___asftadd 24DA                  ?_fround 0037  
      __end_of___asftmul 249E        __end_of___asftsub 2462                ?___awtoft 0009  
              ?___ftpack 0001                ?___lltoft 0009                  _Init_AD 2636  
      __end_of__npowers_ 084F                  __Hparam 0000                  __Lparam 0000  
        __size_of___ftge 0090                  ___awdiv 213C                  ___ftadd 1924  
                ___awmod 2252                  ___ftdiv 1D22                  ___ftneg 25FA  
                ___lldiv 21CC          __size_of___wmul 003A                  ___ftmul 1C12  
                ___llmod 22CE                  ___ftsub 2514                  ___fttol 1F14  
             _fround$803 0043               _fround$804 0040                  ___lwmod 239C  
           __psmallconst 0800                  __pcinit 2620               ??___awtoft 000C  
             ??___ftpack 0006          __size_of_fround 0280                  __ramtop 0800  
             ??___lltoft 000D                  __ptext0 13C4                  __ptext1 23E2  
                __ptext2 1D22                  __ptext3 25D4                  __ptext4 257C  
                __ptext5 087A                  __ptext6 239C                  __ptext7 2338  
                __ptext8 22CE                  __ptext9 21CC                  _lcd_int 254A  
            ?__div_to_l_ 0001                  _dpowers 0800             __size_of_dat 002C  
           __size_of_cmd 002C         ___awmod@dividend 0001                  _sprintf 087A  
   end_of_initialization 262C            __Lmediumconst 0000          ___lldiv@divisor 0005  
        ___lldiv@counter 000E                  postdec2 000FDD                  postinc2 000FDE  
         __tdiv_to_l_@f1 0001           __tdiv_to_l_@f2 0004            ??__tdiv_to_l_ 0007  
            ___ftdiv@exp 0018      __size_of__div_to_l_ 00F4              ___ftmul@exp 0031  
         __end_of___ftge 213C           __end_of___wmul 2514           __end_of_fround 1924  
    start_initialization 2620      __end_of__tdiv_to_l_ 1C12              __end_of_dat 25A8  
            __end_of_cmd 25D4          ___llmod@divisor 0005          ___llmod@counter 000A  
               ??___ftge 0007                 ??___wmul 0015            sprintf@vd_206 006B  
               ??_fround 003A               fround@prec 0037        __size_of___awtoft 0044  
      __size_of___ftpack 00B8                ___asftadd 249E                ___asftmul 2462  
              ___asftsub 2426        __size_of___lltoft 0064              __pbssCOMRAM 005C  
          __pcstackBANK0 0060      __end_of__stringdata 0879              sprintf@_val 0071  
            sprintf@flag 006D              sprintf@fval 007C              sprintf@prec 006F  
               ?_Init_AD 0001                 ?___awdiv 0008                 ?___ftadd 0009  
               ?___awmod 0001                 ?___ftdiv 0009                 ?___ftneg 0001  
               ?___lldiv 0001                 ?___ftmul 0026                 ?___llmod 0001  
               ?___ftsub 0017                __npowers_ 0828                 ?___fttol 0017  
               ?___lwmod 0001              __tdiv_to_l_ 1AF0                 ?_lcd_int 0001  
           ??__div_to_l_ 0007              __smallconst 0800               ?___asftadd 0046  
             ?___asftmul 0037               ?___asftsub 001D                _scale$805 0040  
               ?_sprintf 004B           __size_of_scale 0450           ___wmul@product 0015  
     __end_of__div_to_l_ 1F14                 _GO_nDONE 007E11               _ADCON0bits 000FC2  
            __stringdata 0876        ___wmul@multiplier 0011                main@mystr 007F  
       __size_of_Init_AD 0016                 __Hrparam 0000                 __Lrparam 0000  
       __size_of___awdiv 0090         __size_of___ftadd 01CC         __size_of___awmod 007C  
       __size_of___ftdiv 00FE         __size_of___ftneg 0026         __size_of___lldiv 0086  
       __size_of___ftmul 0110         __size_of___llmod 006A         __size_of___ftsub 0036  
       __size_of___fttol 00E0         __size_of___lwmod 0046                 ___awtoft 23E2  
               ___ftpack 1FF4                 ___lltoft 2338              ??___asftadd 004B  
       __size_of_lcd_int 0032               sprintf@exp 0079              ??___asftmul 003C  
            ??___asftsub 0022                 __ptext10 1F14                 __ptext11 25FA  
               __ptext20 1AF0                 __ptext12 20AC                 __ptext21 0F74  
               __ptext13 2426                 __ptext22 24DA                 __ptext14 2514  
               __ptext23 2252                 __ptext15 2462                 __ptext24 213C  
               __ptext16 249E                 __ptext25 16A4                 __ptext17 1924  
               __ptext26 1C12                 __ptext18 1FF4                 __ptext27 254A  
               __ptext19 1E20                 __ptext28 25A8                 __ptext29 2636  
               __powers_ 084F         __size_of_sprintf 06FA            __size_of_main 02E0  
          __size_of_show 0026                 scale@scl 0037                sprintf@ap 0067  
       __tdiv_to_l_@exp1 0011                sprintf@vd 0069                sprintf@sp 004B  
       __tdiv_to_l_@cntr 0010         __tdiv_to_l_@quot 000C         ___lwmod@dividend 0001  
       ___lldiv@dividend 0001             ?__tdiv_to_l_ 0001                 sprintf@c 007B  
               sprintf@f 004D         ___lldiv@quotient 000A          ___lwmod@divisor 0003  
        ___lwmod@counter 0006  
